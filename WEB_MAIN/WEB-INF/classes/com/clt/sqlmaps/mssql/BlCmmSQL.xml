<?xml version="1.0" encoding="UTF-8" ?> 
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="bl.cmm">
    <typeAlias alias="BlCmmVO"         type="com.clt.apps.fis.see.bmd.housebl.dto.BlCommonVO"/><!-- BL공통정보   -->
    <typeAlias alias="HBLInfoVO"       type="com.clt.apps.fis.see.bmd.housebl.dto.SeeHouseBLVO"/><!-- Ocean House BL 등록 및 조회 정보   -->
    <typeAlias alias="AirHBLInfoVO"    type="com.clt.apps.fis.aie.bmd.housebl.dto.AieHouseBLVO"/><!-- Air House BL 등록 및 조회 정보   -->
    <typeAlias alias="BkgCntrInfoVO"   type="com.clt.apps.fis.see.bmd.housebl.dto.BkgCntrVO"/><!-- House BL 등록 및 조회 정보   -->
    <typeAlias alias="CntrLstVO"       type="com.clt.apps.fis.see.bmd.housebl.dto.CntrListVO"/><!-- Container목록   --> 
    <typeAlias alias="ItmLstVO"        type="com.clt.apps.fis.see.bmd.housebl.dto.HblItemVO"/><!-- Container목록   -->
    <typeAlias alias="DimInfoVO"       type="com.clt.apps.fis.aie.bmd.housebl.dto.DimVO"/><!-- Dimension정보를 등록 및 조회 정보   -->
    <typeAlias alias="PLCIBLInfoVO"    type="com.clt.apps.fis.see.bmd.housebl.dto.PLCIBLInfoVO"/><!-- COMMERCIAL INVOICE   -->
    <typeAlias alias="BkgPoInfoVO"     type="com.clt.apps.fis.see.bmd.housebl.dto.BkgPurOrdVO"/><!-- Booking PO 정보를 등록 및 조회 정보   -->
    <typeAlias alias="BkgPoItemInfoVO" type="com.clt.apps.fis.see.bmd.housebl.dto.BkgPurOrdItemVO"/><!-- Booking PO Item 정보를 등록 및 조회 정보   -->
    <typeAlias alias="BkgCntrListVO"   type="com.clt.apps.fis.see.bmd.housebl.dto.BkgCntrListVO"/><!-- Booking PO Item 정보를 등록 및 조회 정보   -->

    <typeAlias alias="SeeMasterBLVO"    	type="com.clt.apps.fis.see.bmd.masterbl.dto.SeeMasterBLVO"/>
    <typeAlias alias="LPBLVO"     			type="com.clt.apps.fis.see.bmd.masterbl.dto.LPBLVO"/>
    <typeAlias alias="QttnInfoVO"    		type="com.clt.apps.fis.see.bmd.masterbl.dto.QttnInfoVO"/>
    <typeAlias alias="QttnChgInfoVO"    	type="com.clt.apps.fis.see.bmd.masterbl.dto.QttnChgInfoVO"/>
    <typeAlias alias="QttnOthChgInfoVO"  type="com.clt.apps.fis.see.bmd.masterbl.dto.QttnOthChgInfoVO"/>
    
	<select id="selectCHECK_BL_STS" parameterClass="HashMap" resultClass="BlCmmVO">
		SELECT  ISNULL(BLCK.BL_STS_CD1, BL.BL_STS_CD) AS BL_STS_CD,  modi_usrid AS proc_usrid,  delt_flg
		  FROM  tb_intg_bl bl
		  LEFT OUTER JOIN(SELECT INTG_BL_SEQ AS INTG_BL_SEQ1, BL_STS_CD AS BL_STS_CD1 FROM TB_INTG_BL_BLCK) BLCK ON BL.INTG_BL_SEQ = BLCK.INTG_BL_SEQ1
		 WHERE  bl.intg_bl_seq = cast(#intg_bl_seq# as varchar)
	</select>

    <select id="selectBlBkgSeq" parameterClass="HashMap" resultClass="String">
        SELECT  TOP 1 bl.intg_bl_seq
          FROM  tb_intg_bl bl 
          JOIN  tb_add_info_bnd bnd 
            ON  bl.intg_bl_seq = bnd.intg_bl_seq AND bnd.delt_flg = 'N'
         WHERE  bl.bl_no = #f_bl_no# 
           AND  bl.biz_clss_cd = #f_biz_clss_cd# 
           AND  bl.air_sea_clss_cd = #f_air_sea#
           AND  bnd.bnd_clss_cd = #f_bnd_clss_cd#
           AND  bl.delt_flg = 'N'
    </select>
    <!-- 중복 체크   -->
    <select id="selectBlNoDuplCheck" parameterClass="HashMap" resultClass="Integer">
    /** BlCmmSQL.xml > selectBlNoDuplCheck **/
        SELECT  count(bl.bl_no)
          FROM  tb_intg_bl bl 
          JOIN  tb_add_info_bnd bnd 
            ON  bl.INTG_BL_SEQ = bnd.INTG_BL_SEQ AND bnd.delt_flg = 'N'
         WHERE  bl.bl_no = #f_bl_no# 
         <!-- #4940 ** [BEST OCEAN] WRONG MAWB VALIDATION & NO DUPLICATE ALLOWED -->
         <!-- Air MAWB 인 경우 ETD/ETA 기준으로 3년전 데이터 중복 체크 함 -->
	    <isEqual property="f_air_sea" compareValue="A">
	    		<isEqual property="f_biz_clss_cd" compareValue="M">
	    			<isEqual property="f_bnd_clss_cd" compareValue="O">
	    				AND  bl.etd_dt_tm >= CONVERT(CHAR(8), dateadd(year,-3,GETUTCDATE()), 112) +'0000'
	    			</isEqual>
	    			<isEqual property="f_bnd_clss_cd" compareValue="I">
	    				AND  bl.eta_dt_tm >= CONVERT(CHAR(8), dateadd(year,-3,GETUTCDATE()), 112) +'0000'
	    			</isEqual>
	    		</isEqual>
	    </isEqual>
           AND  bl.biz_clss_cd = #f_biz_clss_cd# 
           AND  bl.air_sea_clss_cd = #f_air_sea#
           AND  bnd.bnd_clss_cd = #f_bnd_clss_cd#
           AND  bl.delt_flg = 'N'
    </select>
    
    <!-- 중복 체크   -->
    <select id="selectRefNoDuplCheck" parameterClass="HashMap" resultClass="Integer">
        SELECT  count(bl.ref_no)
          FROM  tb_intg_bl bl 
          JOIN  tb_add_info_bnd bnd 
            ON  bl.INTG_BL_SEQ = bnd.INTG_BL_SEQ AND bnd.delt_flg = 'N'
         WHERE  bl.ref_no = #f_ref_no# 
           AND  bl.delt_flg = 'N'
       <isNotNull property="mbl_seq">
           AND  bl.intg_bl_seq NOT IN (select intg_bl_seq from tb_intg_bl_rlt where rlt_intg_bl_seq = #mbl_seq#)
       </isNotNull>
 	   <isNotNull property="mbl_seq">
           AND bl.intg_bl_seq != #mbl_seq#
       </isNotNull>
       <isNotNull property="hbl_seq">
           AND bl.intg_bl_seq != #hbl_seq#
       </isNotNull>
       <isNotNull property="f_air_sea">
           AND bl.air_sea_clss_cd = #f_air_sea#
       </isNotNull>
       <isNotNull property="f_bnd_clss_cd">
           AND bnd.bnd_clss_cd = #f_bnd_clss_cd#
       </isNotNull>
       <isNotNull property="f_biz_clss_cd">
           AND bl.biz_clss_cd = #f_biz_clss_cd#
       </isNotNull>
    </select>
    
    <!-- 통합 BL테이블 PK 생성   -->
    <select id="selectINTG_BL_PK" parameterClass="HashMap" resultClass="String">
        SELECT ISNULL(MAX(intg_bl_seq),0)+1
          FROM tb_intg_bl
         WHERE rgst_ofc_cd = #proc_ofccd#
    </select>
    
    <!-- Booking PK 생성   -->
    <select id="selectBKG_PK" parameterClass="HashMap" resultClass="HashMap">
        SELECT  ISNULL(MAX(hbl.bkg_seq),0)+1        AS bkgSeq,  
                convert(varchar(4), getdate(), 12)  AS bkgDt
          FROM  tb_intg_bl hbl 
          JOIN  tb_add_info_bnd bnd
            ON  hbl.intg_bl_seq = bnd.intg_bl_seq
         WHERE  hbl.air_sea_clss_cd = #air_sea_clss_cd#   AND  bnd.bnd_clss_cd = #bnd_clss_cd# 
           AND  hbl.biz_clss_cd     = #biz_clss_cd#       AND  hbl.bkg_no IS NOT NULL 
           AND  convert(varchar(6), hbl.rgst_tms, 112) = CONVERT(VARCHAR(6), getdate(), 112)
    </select>
    
    <!-- HBL PK생성   -->
    <select id="selectBL_PK" parameterClass="HashMap" resultClass="HashMap">
        SELECT  ISNULL(MAX(hbl.hbl_seq),0)+1        AS hblSeq,  
                convert(varchar(4), getdate(), 12)  AS hblDt
          FROM  tb_intg_bl hbl 
         WHERE  convert(varchar(6), hbl.hbl_cre_dt, 112) = convert(varchar(6), getdate(), 112)
           AND  biz_clss_cd = #biz_clss_cd#   
           AND  air_sea_clss_cd = #air_sea_clss_cd# 
    </select>
    
    <select id="selectHBL_DUP_CHK" parameterClass="java.lang.String" resultClass="java.lang.Integer">
        SELECT  count(*) as cnt
          FROM  tb_intg_bl
         WHERE  bl_no = #bl_no#
    </select>
    
    
    <select id="selectREFNO_DUP_CHK" parameterClass="java.lang.String" resultClass="java.lang.Integer">
        SELECT count(*) as cnt
          FROM tb_intg_bl
         WHERE ref_no = #ref_no#
           AND biz_clss_cd = 'M'
    </select>

    <!--자동채번 버튼한 BL저장  -->
    <update id="updateBL_NO" parameterClass="HashMap">
        UPDATE  tb_intg_bl
           SET  bl_no      = #bl_no#,          hbl_cre_dt  = CONVERT(VARCHAR(8), GETDATE(), 112),    
        <isNotEmpty property="hbl_seq">
                hbl_seq    = #hbl_seq#,
        </isNotEmpty>       
                modi_tms    = GETUTCDATE()
         WHERE  intg_bl_seq= cast(#intg_bl_seq# as varchar)
    </update>
    
    <!--HBL에서 Ref No. 변경시 실적처리를 위해 기존 MBL의 MODI_TMS 업데이트  -->
    <update id="updateMBL_MODI_TMS" parameterClass="HashMap">
        UPDATE  tb_intg_bl
           SET  modi_tms    = getutcdate()
         WHERE  intg_bl_seq= #org_rlt_intg_bl_seq#
    </update>
    
    <!--통합 BL테이블 등록   -->
    <insert id="insertINTG_BL" parameterClass="HBLInfoVO">
	    /** BlCmmSQL.xml > insertINTG_BL **/
        INSERT  tb_intg_bl(
                intg_bl_seq,        bkg_no,             bl_no,   
                hbl_tp_cd,          po_no,
                bl_sts_cd,          bl_ser_no,
                biz_clss_cd,        air_sea_clss_cd,    shp_tp_cd,
                lnr_bkg_no,         shp_mod_cd,         inco_cd,            bkg_dt_tm,              bl_iss_dt,
                frt_term_cd,        rep_cmdt_cd,        rep_cmdt_nm,        pck_qty,                pck_ut_cd,
                grs_wgt,            grs_wgt_ut_cd,      act_wgt,            act_wgt_ut_cd,          meas,          meas_ut_cd,         
                fm_svc_term_cd,     to_svc_term_cd,     srd_flg, 
             
                por_cd,             					por_nm,             pol_cd,                 pol_nod_cd,    pol_nm,                 
                pod_cd,             pod_nod_cd,         pod_nm,             del_cd,                 del_nm,
                iss_loc_cd,         iss_loc_nm,         pay_loc_cd,         pay_loc_nm,
        
                fnl_dest_loc_cd,    fnl_dest_loc_nm,    cgo_rcv_dt_tm,          
		        cfs_loc_cd,         cfs_nod_cd,         cfs_loc_nm,         csts_clr_tp,
                de_due_dt,          
                pre_vsl_cd,         pre_vsl_nm,         pre_voy,            trnk_vsl_cd,            trnk_vsl_nm,    trnk_voy,            lane_cd,
                cgo_clz_dt_tm,      obrd_dt_tm,         etd_dt_tm,          eta_dt_tm,
                lnr_rmk,            mk_txt,             desc_txt,           rmk,                    say_txt,        sad_txt,              mm_txt,
                act_shp_info,       nomi_flg,
        
                rgst_usrid,         rgst_ofc_cd,        rgst_tms,
                modi_usrid,         modi_ofc_cd,        dept_cd,            modi_usr_nm,            modi_tms,               DELT_FLG,

cargo_tp_cd,
curr_cd,                 
ref_no,
sub_bl_no,
mbl_ref_no,
post_dt,
sub_mbl_flg,
state_cd,
grs_wgt1,
act_wgt1,
meas1,
size_ut_cd,
agent_rt,
agent_amt,
agent_curr_cd,
cust_rt,
cust_amt,
cust_curr_cd,
profit_share,
express_tp_cd,
iss_loc_cd1,
iss_loc_nm1,
trans_shipment,
itn_no,
onward_rout,
clean_on_board,
frt_term_c_cd,
frt_term_a_cd,
obrd_dt_tm1,
ref_ofc_cd,
exp_ref_no,
obl_tp_cd,
broker_rt,
cut_off_dt,
rcv_wh_cd,
cnt_cd,
mk_grs_wgt,
mk_grs_wgt1,
mk_meas,
mk_meas1,
f_eta_dt_tm,
d_eta_dt_tm,
avail_dt_tm,
lfd_dt_tm,
go_dt_tm,
rcvd_dt_tm,
rlsd_dt_tm,
te,
it_no,
it_loc,
bond_carr_cd,
bond_no,
goods_at,
goods_value,
door_loc_cd,
door_loc_nm,
fnl_wh_cd,
org_bl_rcvd_flg,
ror_flg,
rlsd_flg,
rlsd_usrid,
te_dt_tm,
ams_no,
isf_no,
carr_trdp_cd1,
cy_trdp_cd,
cfs_trdp_cd,
rt_trdp_cd,
imp_ref_no,
cust_ref_no,
svc_scope,
att_mk_txt,
att_desc_txt,
desc_txt1,
an_inv_no,
an_due_dt,
an_curr_cd, 
wgt_disp_cd,
doc_recpt_no,
reserve_field01,
reserve_field02,
reserve_field03,
reserve_field04,
reserve_field05,
reserve_field06,
reserve_field11,
lc_no,
inv_no,
wh_cut_off_dt,
doc_cut_off_dt, 
org_bl_qty,
ams_id,        
cntr_info,
etd_por_tm
,ccn_no
,ccn_dt
,pre_ccn_no
,mnf_fr_loc
,mnf_to_loc
,prnr_ref_no
<!-- OFVFOUR-8085: [Lever Logistics] OIH B/L - Custom Clerance Port/Date -->
,cstms_clr_port_cd
,cstms_clr_port_nm
,cstms_clr_dt
<!-- OFVFOUR-8115 [BNX] Adding Berth Date Field in OIM and OIH Entry -->
,berth_dt
        )VALUES(
                #intg_bl_seq#,        #bkg_no#,             #bl_no#,
                #hbl_tp_cd#,          #po_no#,
                #bl_sts_cd#,          #bl_ser_no#,
                #biz_clss_cd#,        #air_sea_clss_cd#,    #shp_tp_cd#,
                #lnr_bkg_no#,         #shp_mod_cd#,         #inco_cd#,            #bkg_dt_tm#,              #bl_iss_dt#,
                #frt_term_cd#,        #rep_cmdt_cd#,        #rep_cmdt_nm#,        #pck_qty#,                #pck_ut_cd#,
                #grs_wgt#,            #grs_wgt_ut_cd#,      #act_wgt#,            #act_wgt_ut_cd#,          #meas#,         #meas_ut_cd#,
                #fm_svc_term_cd#,     #to_svc_term_cd#,     #srd_flg#,
        
                #por_cd#,               					#por_nm#,             #pol_cd#,                 #pol_nod_cd#,   #pol_nm#,                 
                #pod_cd#,             #pod_nod_cd#,         #pod_nm#,             #del_cd#,                 #del_nm#,
                #iss_loc_cd#,         

            <isEqual property="isMBLCreated" compareValue="false">
                #iss_loc_nm#,
            </isEqual>                
            <isEqual property="isMBLCreated" compareValue="true">
                (SELECT CITY_NM FROM TB_TRDP WHERE TRDP_CD = ((SELECT REF_OFC_CD FROM TB_INTG_BL WHERE  BIZ_CLSS_CD='M' AND REF_NO=#ref_no#) + 'MAINCMP')),
            </isEqual>                       
                #pay_loc_cd#,         #pay_loc_nm#,
        
                #fnl_dest_loc_cd#,    #fnl_dest_loc_nm#,    #cgo_rcv_dt_tm#,          
		        #cfs_loc_cd#,         #cfs_nod_cd#,         #cfs_loc_nm#,         #csts_clr_tp#,
		        #de_due_dt#,          
                #pre_vsl_cd#,         #pre_vsl_nm#,         #pre_voy#,            #trnk_vsl_cd#,            #trnk_vsl_nm#,   #trnk_voy#,    #lane_cd#,       
                #cgo_clz_dt_tm#,      #obrd_dt_tm#,         #etd_dt_tm#,          #eta_dt_tm#,
                #lnr_rmk#,            #mk_txt#,             #desc_txt#,           #rmk#,                    #say_txt#,      #sad_txt#,  #mm_txt#,
                #act_shp_info#,       #nomi_flg#,
        
                #proc_usrid#,         #proc_ofccd#,         getdate(),
                #proc_usrid#,         #proc_ofccd#,         #proc_dept_cd#,       #proc_usrnm#,              GETUTCDATE(),                 'N',

#cargo_tp_cd#,
#curr_cd#,                
#ref_no#,
#sub_bl_no#,
#mbl_ref_no#,
#post_dt#,
#sub_mbl_flg#,
#state_cd#,
#grs_wgt1#,
#act_wgt1#,
#meas1#,
#size_ut_cd#,
#agent_rt#,
#agent_amt#,
#agent_curr_cd#,
#cust_rt#,
#cust_amt#,
#cust_curr_cd#,
#profit_share#,
#express_tp_cd#,
#iss_loc_cd1#,
#iss_loc_nm1#,
#trans_shipment#,
#itn_no#,
#onward_rout#,
#clean_on_board#,
#frt_term_c_cd#,
#frt_term_a_cd#,
#obrd_dt_tm1#,
#ref_ofc_cd#,
#exp_ref_no#,
#obl_tp_cd#,
#broker_rt#,
#cut_off_dt#,
#rcv_wh_cd#,
#cnt_cd#,
#mk_grs_wgt#,
#mk_grs_wgt1#,
#mk_meas#,
#mk_meas1#,
#f_eta_dt_tm#,
#d_eta_dt_tm#,
#avail_dt_tm#,
#lfd_dt_tm#,
#go_dt_tm#,
#rcvd_dt_tm#,
#rlsd_dt_tm#,
#te#,
#it_no#,
#it_loc#,
#bond_carr_cd#,
#bond_no#,
#goods_at#,
#goods_value#,
#door_loc_cd#,
#door_loc_nm#,
#fnl_wh_cd#,
#org_bl_rcvd_flg#,
#ror_flg#,
#rlsd_flg#,
#rlsd_usrid#,
#te_dt_tm#,
#ams_no#,
#isf_no#,
#carr_trdp_cd1#,
#cy_trdp_cd#,
#cfs_trdp_cd#,
#rt_trdp_cd#,
#imp_ref_no#,
#cust_ref_no#,
#svc_scope#,
#att_mk_txt#,
#att_desc_txt#,
#desc_txt1#,
#an_inv_no#,
#an_due_dt#,
#an_curr_cd#,
#wgt_disp_cd#,
#doc_recpt_no#,
#reserve_field01#,
#reserve_field02#,
#reserve_field03#,
#reserve_field04#,
#reserve_field05#,
#reserve_field06#,
#reserve_field11#,
#lc_no#,
#inv_no#,
#wh_cut_off_dt#,
#doc_cut_off_dt#, 
#org_bl_qty#,
#ams_id#, 
#cntr_info#,
#etd_por_tm#
,#ccn_no#
,#ccn_dt#
,#pre_ccn_no#
,#mnf_fr_loc#
,#mnf_to_loc#
,#prnr_ref_no#
        <!-- OFVFOUR-8085: [Lever Logistics] OIH B/L - Custom Clerance Port/Date -->
        ,#cstms_clr_port_cd#
        ,#cstms_clr_port_nm#
        ,#cstms_clr_dt#
		<!-- OFVFOUR-8115 [BNX] Adding Berth Date Field in OIM and OIH Entry -->
		,#berth_dt#
        )
    </insert>
    
   <!-- BL내용 수정   -->
   <update id="updateINTG_BL" parameterClass="HBLInfoVO">
   		/** BlCmmSQL.xml > updateINTG_BL **/
        UPDATE  tb_intg_bl
           SET  hbl_tp_cd      = #hbl_tp_cd#,          po_no          = #po_no#,
                shp_tp_cd      = #shp_tp_cd#,          bl_ser_no      = #bl_ser_no#,
                lnr_bkg_no     = #lnr_bkg_no#,         shp_mod_cd     = #shp_mod_cd#,          inco_cd    = #inco_cd#,
				bkg_no         = #bkg_no#,
                frt_term_cd    = #frt_term_cd#,        rep_cmdt_cd    = #rep_cmdt_cd#,         rep_cmdt_nm= #rep_cmdt_nm#,
                pck_qty        = #pck_qty#,            pck_ut_cd      = #pck_ut_cd#,
                grs_wgt        = #grs_wgt#,            grs_wgt_ut_cd  = #grs_wgt_ut_cd#,
                act_wgt        = #act_wgt#,            act_wgt_ut_cd  = #act_wgt_ut_cd#,
                meas           = #meas#,               meas_ut_cd     = #meas_ut_cd#,
       
                fm_svc_term_cd = #fm_svc_term_cd#,     to_svc_term_cd = #to_svc_term_cd#,      srd_flg    = #srd_flg#,

                por_cd         = #por_cd#,             por_nm     = #por_nm#,
                pol_cd         = #pol_cd#,             pol_nod_cd     = #pol_nod_cd#,          pol_nm     = #pol_nm#,
                pod_cd         = #pod_cd#,             pod_nod_cd     = #pod_nod_cd#,          pod_nm     = #pod_nm#,
                del_cd         = #del_cd#,             										   del_nm     = #del_nm#,
                iss_loc_cd     = #iss_loc_cd#,         iss_loc_nm     = #iss_loc_nm#,
			    pay_loc_cd     = #pay_loc_cd#,         pay_loc_nm     = #pay_loc_nm#,

                fnl_dest_loc_cd= #fnl_dest_loc_cd#,    fnl_dest_loc_nm= #fnl_dest_loc_nm#,
                cfs_nod_cd     = #cfs_nod_cd#,         cfs_loc_cd     = #cfs_loc_cd#,          cfs_loc_nm = #cfs_loc_nm#,
				csts_clr_tp    = #csts_clr_tp#, 
	   
                pre_vsl_cd     = #pre_vsl_cd#,         pre_vsl_nm     = #pre_vsl_nm#,          pre_voy    = #pre_voy#,
                trnk_vsl_cd    = #trnk_vsl_cd#,        trnk_vsl_nm    = #trnk_vsl_nm#,         trnk_voy   = #trnk_voy#,          lane_cd = #lane_cd#, 

                bkg_dt_tm      = #bkg_dt_tm#,          bl_iss_dt      = #bl_iss_dt#,
                cgo_clz_dt_tm  = #cgo_clz_dt_tm#,      obrd_dt_tm     = #obrd_dt_tm#,
                de_due_dt      = #de_due_dt#,          cgo_rcv_dt_tm  = #cgo_rcv_dt_tm#,

                lnr_rmk        = #lnr_rmk#,            mk_txt         = #mk_txt#,              desc_txt   = #desc_txt#,
                rmk            = #rmk#,                say_txt        = #say_txt#,             sad_txt    = #sad_txt#,            mm_txt = #mm_txt#,
                act_shp_info   = #act_shp_info#,       nomi_flg       = #nomi_flg#,   

				<!-- #6312 [Binex-LA] Last Modified by 수정 issue -->
                modi_usrid     = #proc_usrid#,          modi_ofc_cd    = #proc_ofccd#,          dept_cd = #proc_dept_cd#,
                modi_usr_nm    = #proc_usrnm#,          modi_tms       = GETUTCDATE(),

bl_no = #bl_no#,
cargo_tp_cd = #cargo_tp_cd#,
etd_dt_tm = #etd_dt_tm#,
eta_dt_tm = #eta_dt_tm#,
                
curr_cd = #curr_cd#,
ref_no = #ref_no#,
sub_bl_no = #sub_bl_no#,
mbl_ref_no = #mbl_ref_no#,
sub_mbl_flg = #sub_mbl_flg#,
state_cd = #state_cd#,
grs_wgt1 = #grs_wgt1#,
act_wgt1 = #act_wgt1#,
meas1 = #meas1#,
size_ut_cd = #size_ut_cd#,
agent_rt = #agent_rt#,
agent_amt = #agent_amt#,
agent_curr_cd = #agent_curr_cd#,
cust_rt = #cust_rt#,
cust_amt = #cust_amt#,
cust_curr_cd = #cust_curr_cd#,
profit_share = #profit_share#,
express_tp_cd = #express_tp_cd#,
iss_loc_cd1 = #iss_loc_cd1#,
iss_loc_nm1 = #iss_loc_nm1#,
trans_shipment = #trans_shipment#,
itn_no = #itn_no#,
onward_rout = #onward_rout#,
clean_on_board = #clean_on_board#,
frt_term_c_cd = #frt_term_c_cd#,
frt_term_a_cd = #frt_term_a_cd#,
obrd_dt_tm1 = #obrd_dt_tm1#,
ref_ofc_cd = #ref_ofc_cd#,
exp_ref_no = #exp_ref_no#,
obl_tp_cd = #obl_tp_cd#,
broker_rt = #broker_rt#,
cut_off_dt = #cut_off_dt#,
rcv_wh_cd = #rcv_wh_cd#,
cnt_cd = #cnt_cd#,
mk_grs_wgt = #mk_grs_wgt#,
mk_grs_wgt1 = #mk_grs_wgt1#,
mk_meas = #mk_meas#,
mk_meas1 = #mk_meas1#,
f_eta_dt_tm = #f_eta_dt_tm#,
d_eta_dt_tm = #d_eta_dt_tm#,
avail_dt_tm = #avail_dt_tm#,
lfd_dt_tm = #lfd_dt_tm#,
go_dt_tm = #go_dt_tm#,
rcvd_dt_tm = #rcvd_dt_tm#,
rlsd_dt_tm = #rlsd_dt_tm#,
te = #te#,
it_no = #it_no#,
it_loc = #it_loc#,
bond_carr_cd = #bond_carr_cd#,
bond_no = #bond_no#,
goods_at = #goods_at#,
goods_value = #goods_value#,
door_loc_cd = #door_loc_cd#,
door_loc_nm = #door_loc_nm#,
fnl_wh_cd = #fnl_wh_cd#,
org_bl_rcvd_flg = #org_bl_rcvd_flg#,
ror_flg = #ror_flg#,
rlsd_flg = #rlsd_flg#,
rlsd_usrid = #rlsd_usrid#,
te_dt_tm = #te_dt_tm#,
isf_no = #isf_no#,
carr_trdp_cd1 = #carr_trdp_cd1#,
cy_trdp_cd = #cy_trdp_cd#,
cfs_trdp_cd = #cfs_trdp_cd#,
rt_trdp_cd = #rt_trdp_cd#,
imp_ref_no = #imp_ref_no#,
cust_ref_no = #cust_ref_no#,
svc_scope = #svc_scope#,
att_mk_txt = #att_mk_txt#,
att_desc_txt = #att_desc_txt#,
desc_txt1 = #desc_txt1#,
an_inv_no = #an_inv_no#,
an_due_dt = #an_due_dt#,
an_curr_cd = #an_curr_cd#,
wgt_disp_cd = #wgt_disp_cd#,
doc_recpt_no = #doc_recpt_no#,
reserve_field01 = #reserve_field01#,
reserve_field02 = #reserve_field02#,
reserve_field03 = #reserve_field03#,
reserve_field04 = #reserve_field04#,
reserve_field05 = #reserve_field05#,
reserve_field06 = #reserve_field06#,
reserve_field11 = #reserve_field11#,
lc_no = #lc_no#,
inv_no = #inv_no#,
ams_no = #ams_no#,
wh_cut_off_dt = #wh_cut_off_dt#,
doc_cut_off_dt = #doc_cut_off_dt#,
org_bl_qty = #org_bl_qty#
,cntr_info = #cntr_info#
,etd_por_tm = #etd_por_tm#
,ccn_no = #ccn_no#
,ccn_dt = #ccn_dt#
,pre_ccn_no = #pre_ccn_no#
,mnf_fr_loc = #mnf_fr_loc#
,mnf_to_loc = #mnf_to_loc#
,prnr_ref_no =#prnr_ref_no#
       <!-- OFVFOUR-8085: [Lever Logistics] OIH B/L - Custom Clerance Port/Date -->
       ,cstms_clr_port_cd = #cstms_clr_port_cd#
       ,cstms_clr_port_nm = #cstms_clr_port_nm#
       ,cstms_clr_dt = #cstms_clr_dt#
		<!-- OFVFOUR-8115 [BNX] Adding Berth Date Field in OIM and OIH Entry -->
		,berth_dt = #berth_dt#
         WHERE  intg_bl_seq    = cast(#intg_bl_seq# as varchar)
    </update>

    <!-- 단계(상태) 변경. Status를 변경함  -->
    <update id="updateINTG_BL_STS" parameterClass="HashMap">
        UPDATE  tb_intg_bl
           SET  bl_sts_cd  = #bl_sts_cd#,    modi_tms    = GETUTCDATE()
         WHERE  intg_bl_seq= cast(#intg_bl_seq# as varchar)
    </update>

	<!-- Manager가 Closing 또는 Confirm Cancel할 경우   -->
    <update id="updateINTG_BL_STS_BY_MNG" parameterClass="HashMap">
        UPDATE  tb_intg_bl
           SET  bl_sts_cd  = #bl_sts_cd#     
         WHERE  intg_bl_seq= cast(#intg_bl_seq# as varchar)
    </update>
	
	<!-- BL Confirm이라는 상태를 이전으로 수정함   -->
    <update id="updateWRK_FLOW_BY_MNG" parameterClass="HashMap">
		UPDATE tb_wrk_flow
		   SET jb_act_dt_tm = null,  modi_usrid = '', modi_ofc_cd = ''
		 WHERE intg_bl_seq = cast(#intg_bl_seq# as varchar) AND jb_sts_cd = #pre_sts_cd#
	</update>
	    
    <!--HBL정보 조회  -->
    <select id="selectINTG_BL" parameterClass="HashMap" resultClass="HBLInfoVO">
        /* BlCmmSQL.xml > selectINTG_BL */
        SELECT  bl.intg_bl_seq,        bl.bkg_no,            bl.bl_no,              bl.hbl_tp_cd,              bl.po_no,
                ISNULL(BLCK.BL_STS_CD1, BL.BL_STS_CD) AS BL_STS_CD,
                bnd.intg_bkg_seq AS bkg_seq,           bl.sr_no,              mbl.bl_no AS mbl_no,

                <!-- C.W Park Mbl 정보 가져옴. #304 -->
                mbl.pck_qty as m_pck_qty, mbl.pck_ut_cd as m_pck_ut_cd, mbl.grs_wgt as m_grs_wgt,
                mbl.grs_wgt_ut_cd as m_grs_wgt_ut_cd, mbl.act_wgt as m_act_wgt, mbl.act_wgt_ut_cd as m_act_wgt_ut_cd,
                mbl.meas as m_meas, mbl.meas_ut_cd as m_meas_ut_cd, mbl.shp_mod_cd as m_shp_mod_cd,
                mbl.meas1 as m_mk_meas1, mbl.grs_wgt1 as m_mk_grs_wgt1,

                bl.biz_clss_cd,        bl.air_sea_clss_cd,    bl.shp_tp_cd,          bl.bl_ser_no,
                bl.lnr_bkg_no,         bl.shp_mod_cd,         bl.inco_cd,            bl.bkg_dt_tm,              bl.bl_iss_dt,
                bl.frt_term_cd,        bl.rep_cmdt_cd,        bl.rep_cmdt_nm,        bl.pck_qty,                bl.pck_ut_cd,     pcd.pck_nm AS pck_ut_nm,
                bl.grs_wgt,            bl.grs_wgt_ut_cd,      bl.act_wgt,            bl.act_wgt_ut_cd,          bl.meas,          bl.meas_ut_cd,
                bl.fm_svc_term_cd,     bl.to_svc_term_cd,     bl.srd_flg,

                bl.por_cd,             '' AS por_nod_cd,         bl.por_nm,             bl.pol_cd,                 bl.pol_nod_cd,    bl.pol_nm,
                bl.pod_cd,             bl.pod_nod_cd,         bl.pod_nm,             bl.del_cd,                 '' AS del_nod_cd,    bl.del_nm,
                bl.iss_loc_cd,         bl.iss_loc_nm,         bl.pay_loc_cd,         bl.pay_loc_nm,

                bl.fnl_dest_loc_cd,    '' AS fnl_dest_nod_cd,    bl.fnl_dest_loc_nm,    bl.cgo_rcv_dt_tm,
                bl.cfs_loc_cd,         bl.cfs_nod_cd,         bl.cfs_loc_nm,         bl.csts_clr_tp,            bl.de_due_dt,
                bl.pre_vsl_cd,         bl.pre_vsl_nm,         bl.pre_voy,            bl.trnk_vsl_cd,            bl.trnk_vsl_nm,   bl.trnk_voy,            bl.lane_cd,  bnd.svc_lane_nm,
                bl.cgo_clz_dt_tm,      bl.obrd_dt_tm,         bl.etd_dt_tm,          bl.eta_dt_tm,
                bl.lnr_rmk,            bl.mk_txt,             bl.desc_txt,           bl.rmk,                    bl.say_txt,       bl.sad_txt,              bl.mm_txt,
                bl.act_shp_info,       bl.nomi_flg,           ISNULL(bl.org_bl_qty, 0)  AS org_bl_qty,

                bl.dept_cd,            bl.modi_tms
                ,bnd.issued_by AS issued_by
                ,(select max(eng_usr_nm) from tb_usr where usrid = bnd.issued_by )  AS proc_usrnm,
                bl.modi_ofc_cd AS proc_ofccd,                 bl.dept_cd AS proc_dept_cd,

                bnd.sls_ofc_cd,        bnd.sls_dept_cd,       bnd.sls_usrid,                        bnd.sls_usr_nm,
                <!-- OFVFOUR-7976: [MATRIX] ADDING CS PIC ON ALL B/L ENTRY AND TRADE PARTNER ENTRY SCREEN -->
                bnd.cs_usrid,           bnd.cs_usr_nm,
                jbt.tmplt_nm AS jb_tmplt_nm,                  bnd.jb_tmplt_seq,                     bnd.exp_frt_desc,
                bnd.ts1_port_nm,    bnd.ts1_port_cd,    bnd.ts1_etd_dt_tm,                  bnd.ts1_eta_dt_tm,
                shp.trdp_cd AS shpr_trdp_cd,      shp.trdp_nm AS shpr_trdp_nm,      shp.trdp_addr AS shpr_trdp_addr,
                cne.trdp_cd AS cnee_trdp_cd,      cne.trdp_nm AS cnee_trdp_nm,      cne.trdp_addr AS cnee_trdp_addr,
                ntf.trdp_cd AS ntfy_trdp_cd,      ntf.trdp_nm AS ntfy_trdp_nm,      ntf.trdp_addr AS ntfy_trdp_addr,
                act.trdp_cd AS act_shpr_trdp_cd,  act.trdp_nm AS act_shpr_trdp_nm,  act.trdp_addr AS act_trdp_addr,
                lnr.trdp_cd AS lnr_trdp_cd,       lnr.trdp_nm AS lnr_trdp_nm,
                ptn.trdp_cd AS prnr_trdp_cd,      ptn.trdp_nm AS prnr_trdp_nm,      ptn.trdp_addr AS prnr_trdp_addr,
                agent.trdp_cd AS agent_trdp_cd,   agent.trdp_nm AS agent_trdp_nm,   agent.trdp_addr AS agent_trdp_addr,
                third.trdp_cd AS third_trdp_cd,   third.trdp_nm AS third_trdp_nm,   third.trdp_addr AS third_trdp_addr,
                ptn2.trdp_cd AS prnr_trdp_cd2,    ptn2.trdp_nm AS prnr_trdp_nm2,    ptn2.trdp_addr AS prnr_trdp_addr2,
                cust.trdp_cd AS cust_trdp_cd,     cust.trdp_nm AS cust_trdp_nm,     cust.trdp_addr AS cust_trdp_addr,
                trk.trdp_cd AS trk_trdp_cd,     trk.trdp_nm AS trk_trdp_nm,     trk.trdp_addr AS trk_trdp_addr,
                carr.trdp_cd AS carr_trdp_cd,     carr.trdp_nm AS carr_trdp_nm,     carr.trdp_addr AS carr_trdp_addr,
                vndr.trdp_cd AS vndr_trdp_cd,     vndr.trdp_nm AS vndr_trdp_nm,     vndr.trdp_addr AS vndr_trdp_addr,
                cgo_pu.trdp_cd AS cgo_pu_trdp_cd,     cgo_pu.trdp_nm AS cgo_pu_trdp_nm,     cgo_pu.trdp_addr AS cgo_pu_trdp_addr,
                bl.lc_no,
                bl.inv_no,

                bnd.mrn_no,
                rlt.rlt_intg_bl_seq,
                bl.cargo_tp_cd,
                bl.curr_cd,
                bl.ref_no,
                bl.sub_bl_no,
                bl.mbl_ref_no,
                bl.post_dt,
                bl.sub_mbl_flg,
                bl.state_cd,
                CASE WHEN isnull(bnd.state_cnt_cd,'') != ''
                     THEN (SELECT top 1 state_eng_nm FROM tb_state X WHERE X.state_cd = bl.state_cd and X.cnt_cd = bnd.state_cnt_cd)
                     ELSE (SELECT top 1 state_eng_nm FROM tb_state X WHERE X.state_cd = bl.state_cd)
                END AS state_nm,
                bl.grs_wgt1,
                bl.act_wgt1,
                bl.meas1,
                bl.size_ut_cd,
                bl.agent_rt,
                bl.agent_amt,
                bl.agent_curr_cd,
                bl.cust_rt,
                bl.cust_amt,
                bl.cust_curr_cd,
                bl.profit_share,
                bl.express_tp_cd,
                bl.iss_loc_cd1,
                bl.iss_loc_nm1,
                bl.trans_shipment,
                bl.itn_no,
                bl.onward_rout,
                bl.clean_on_board,
                bl.frt_term_c_cd,
                bl.frt_term_a_cd,
                bl.obrd_dt_tm1,
                bl.ref_ofc_cd,
                bl.exp_ref_no,
                bl.obl_tp_cd,
                bl.broker_rt,
                bl.cut_off_dt,
                bl.rcv_wh_cd,
                bl.cnt_cd,
                (SELECT cnt_eng_nm FROM tb_cnt x where x.cnt_cd = bl.cnt_cd) AS cnt_nm,
                bl.mk_grs_wgt,
                bl.mk_grs_wgt1,
                bl.mk_meas,
                bl.mk_meas1,
                bl.f_eta_dt_tm,
                bl.d_eta_dt_tm,
                bl.avail_dt_tm,
                bl.lfd_dt_tm,
                bl.go_dt_tm,
                bl.rcvd_dt_tm,
                bl.rlsd_dt_tm,
                bl.te,
                bl.it_no,
                bl.it_loc,
                bl.bond_carr_cd,
                (SELECT eng_nm FROM tb_trdp x where x.trdp_cd = bl.bond_carr_cd) AS bond_carr_nm,
                bl.bond_no,
                bl.goods_at,
                bl.goods_value,
                bl.door_loc_cd,
                (
					case 
						when isnull(bl.door_loc_nm,'') != '' then bl.door_loc_nm
						else (SELECT eng_nm FROM tb_trdp x where x.trdp_cd = bl.door_loc_cd)
					end
				) as door_loc_nm,
                bl.fnl_wh_cd,
                (SELECT eng_nm FROM tb_trdp x where x.trdp_cd = bl.fnl_wh_cd) AS fnl_wh_nm,
                bl.org_bl_rcvd_flg,
                bl.ror_flg,
                bl.rlsd_flg,
                bl.rlsd_usrid,
                bl.te_dt_tm,
                bl.ams_no,
                bl.isf_no,
                bl.carr_trdp_cd1,
                (SELECT eng_nm FROM tb_trdp x where x.trdp_cd = bl.carr_trdp_cd1) AS carr_trdp_nm1,
                bl.cy_trdp_cd,
                <!-- JPT 오류 수정 eng_nm to locl_nm 2018.01.15 (S) -->
                (SELECT case when (SELECT OPT_VAL FROM TB_SYS_OPT WHERE OPT_KEY = 'MULTI_LANGUAGE') = 'Y'
                             then locl_nm
                             else eng_nm
                        end
                   FROM tb_trdp x where x.trdp_cd = bl.cy_trdp_cd) AS cy_trdp_nm,
                bl.cfs_trdp_cd,
                (SELECT case when (SELECT OPT_VAL FROM TB_SYS_OPT WHERE OPT_KEY = 'MULTI_LANGUAGE') = 'Y'
                             then locl_nm
                             else eng_nm
                        end
                   FROM tb_trdp x where x.trdp_cd = bl.cfs_trdp_cd) AS cfs_trdp_nm,
                <!-- JPT 오류 수정 eng_nm to locl_nm 2018.01.15 (E) -->
                bl.rt_trdp_cd,
                (SELECT eng_nm FROM tb_trdp x where x.trdp_cd = bl.rt_trdp_cd) AS rt_trdp_nm,
                bl.imp_ref_no,
                bl.cust_ref_no,
                bl.svc_scope,
                bl.att_mk_txt,
                bl.att_desc_txt,
                bl.desc_txt1,
                bl.an_inv_no,
                bl.an_due_dt,
                bl.an_curr_cd,
                bl.wgt_disp_cd,
                bl.doc_recpt_no,
                bl.reserve_field01,
                bl.reserve_field02,
                bl.reserve_field03,
                bl.reserve_field04,
                bl.reserve_field05,
                bl.reserve_field06,
                '' AS reserve_field07,
                '' AS reserve_field08,
                '' AS reserve_field09,
                '' AS reserve_field10,
                bl.reserve_field11,
                '' AS reserve_field12,
                (CASE WHEN bl.biz_clss_cd =  'H' THEN mbl.curr_cd ELSE bl.curr_cd END) as mbl_curr_cd,
                bl.wh_cut_off_dt,
                bl.doc_cut_off_dt
                ,bl.cntr_info
                ,bl.etd_por_tm
                ,bl.ccn_no
                ,bl.ccn_dt
                ,bl.pre_ccn_no
                ,bl.mnf_fr_loc
                ,bl.mnf_to_loc
                ,bnd.item_no
                ,bnd.hbl_ser_pfx
                ,bnd.hbl_ser_no
                ,bnd.ctrb_ofc_cd
                ,bnd.ctrb_dept_cd
                ,bnd.ctrb_ratio_yn
                ,bnd.ctrb_mgn
                ,bnd.state_cnt_cd
                ,bnd.cfs_rmk
                ,bnd.csms_rlse_dt
                ,bnd.pkup_dt
                ,bnd.entr_no
                ,bnd.doc_form
             
                , wh.trdp_cd AS wh_trdp_cd,     wh.trdp_nm AS wh_trdp_nm,     wh.trdp_addr AS wh_trdp_addr
             
                <!-- #30 , 52843 - [IMPEX] 독일 지점 OPUS 기능 추가 관련의 건 -->
                , bnd.surrend
                <!-- #739    [Epsylog] Implement Requirement -->
                ,ISNULL(bnd.port_open_dt,'') as port_open_dt
                ,ISNULL(bnd.VGM_CUT_OFF_DT,'') as vgm_cut_off_dt
                <!--#1619 [CLT] Original B/L Type- 항목 정리,bnd.bl_rlse_tp_cd , 1430 [PATENT] 0215_15 B/L TYPE DIVERSELY  -->
             
                <!-- #1804 [Split - 1] [PATENT] Payment Verification - 기능보완  -->
                ,bnd.verify_flag
             
                <!-- #2354 [PATENT] House Bill Based - Processing Logic Enhancement -->
                ,(SELECT COUNT(*) FROM TB_INTG_BL_RLT RLT
                 WHERE RLT_INTG_BL_SEQ = (SELECT RLT_INTG_BL_SEQ FROM TB_INTG_BL_RLT WHERE INTG_BL_SEQ = bl.intg_bl_seq AND RLT.DELT_FLG = 'N')
                 AND DELT_FLG = 'N'
                ) as hbl_cnt

				<!-- #657 [OCEAN BLUE, IMPEX] B/L SELECTION FLAG TO SHOW ON VISIBILITY PORTAL -->
				,bnd.inter_use_flag
				,bl.prnr_ref_no
				,(select VSL_SHOW_FLG from tb_ofc where  ofc_cd = bl.REF_OFC_CD) vsl_show_flg
				,(select  LOAD_PORT_SHOW_FLG from tb_ofc where  ofc_cd = bl.REF_OFC_CD) load_port_show_flg
				<!-- #3608 [JTC]OEH Entry 에 DOC Cut-Off Date 추가 -->
				,bnd.hbl_cut_off_dt
				<!-- #4128 [JAPT] New request - OEH TRI no, TLI no -->
				,bnd.tli_no
				<!-- OFVFOUR-7736 [SENKO USA] Consignee and Delivery Location -->
				,(select lgl_addr from tb_trdp x where x.trdp_cd = bl.door_loc_cd) AS lgl_addr
                <!-- OFVFOUR-8085: [Lever Logistics] OIH B/L - Custom Clerance Port/Date -->
                ,bl.cstms_clr_port_cd as cstms_clr_port_cd
                ,bl.cstms_clr_port_nm as cstms_clr_port_nm
                ,bl.cstms_clr_dt as cstms_clr_dt
				<!-- OFVFOUR-8115 [BNX] Adding Berth Date Field in OIM and OIH Entry -->
				,bl.berth_dt
         FROM   tb_intg_bl bl

         JOIN   tb_add_info_bnd bnd
           ON   bl.intg_bl_seq = bnd.intg_bl_seq AND bnd.bnd_clss_cd = '$bnd_clss_cd$'   AND bnd.delt_flg = 'N'

         LEFT OUTER JOIN   tb_jb_tmplt jbt
           ON   jbt.jb_tmplt_seq = bnd.jb_tmplt_seq AND LG_CLSS_BIZ_CD = '$air_biz_clss_cd$'

         LEFT OUTER JOIN tb_bl_prnr act
           ON   bl.intg_bl_seq = act.intg_bl_seq  AND act.bl_trdp_tp_cd = 'S02' AND act.delt_flg = 'N'

         LEFT OUTER JOIN tb_pck_ut_cd pcd
           ON   bl.pck_ut_cd   = pcd.pck_ut_cd    AND pcd.delt_flg = 'N'

         LEFT OUTER JOIN tb_bl_prnr shp
           ON   bl.intg_bl_seq = shp.intg_bl_seq  AND shp.bl_trdp_tp_cd = 'S01' AND shp.delt_flg = 'N'

         LEFT OUTER JOIN tb_bl_prnr cne
           ON   bl.intg_bl_seq = cne.intg_bl_seq  AND cne.bl_trdp_tp_cd = 'C01' AND cne.delt_flg = 'N'

         LEFT OUTER JOIN tb_bl_prnr ntf
           ON   bl.intg_bl_seq = ntf.intg_bl_seq  AND ntf.bl_trdp_tp_cd = 'N01' AND ntf.delt_flg = 'N'

         LEFT OUTER JOIN tb_bl_prnr lnr
           ON   bl.intg_bl_seq = lnr.intg_bl_seq  AND lnr.bl_trdp_tp_cd = 'L01' AND lnr.delt_flg = 'N'

         LEFT OUTER JOIN tb_bl_prnr ptn
           ON   bl.intg_bl_seq = ptn.intg_bl_seq  AND ptn.bl_trdp_tp_cd = 'P01' AND ptn.delt_flg = 'N'

         LEFT OUTER JOIN tb_bl_prnr agent
           ON   bl.intg_bl_seq = agent.intg_bl_seq  AND agent.bl_trdp_tp_cd = 'A01' AND agent.delt_flg = 'N'

         LEFT OUTER JOIN tb_bl_prnr third
           ON   bl.intg_bl_seq = third.intg_bl_seq  AND third.bl_trdp_tp_cd = 'T01' AND third.delt_flg = 'N'

         LEFT OUTER JOIN tb_bl_prnr ptn2
           ON   bl.intg_bl_seq = ptn2.intg_bl_seq  AND ptn2.bl_trdp_tp_cd = 'P03' AND ptn2.delt_flg = 'N'

         LEFT OUTER JOIN tb_bl_prnr cust
           ON   bl.intg_bl_seq = cust.intg_bl_seq  AND cust.bl_trdp_tp_cd = 'C03' AND cust.delt_flg = 'N'

         LEFT OUTER JOIN tb_bl_prnr trk
           ON   bl.intg_bl_seq = trk.intg_bl_seq  AND trk.bl_trdp_tp_cd = 'T02' AND trk.delt_flg = 'N'

         LEFT OUTER JOIN tb_bl_prnr carr
           ON   bl.intg_bl_seq = carr.intg_bl_seq  AND carr.bl_trdp_tp_cd = 'B01' AND carr.delt_flg = 'N'

         LEFT OUTER JOIN tb_bl_prnr vndr
           ON   bl.intg_bl_seq = vndr.intg_bl_seq  AND vndr.bl_trdp_tp_cd = 'V01' AND vndr.delt_flg = 'N'

         LEFT OUTER JOIN tb_bl_prnr cgo_pu
           ON   bl.intg_bl_seq = cgo_pu.intg_bl_seq  AND cgo_pu.bl_trdp_tp_cd = 'S03' AND cgo_pu.delt_flg = 'N'

         LEFT OUTER JOIN tb_bl_prnr wh
           ON   bl.intg_bl_seq = wh.intg_bl_seq  AND wh.bl_trdp_tp_cd = 'WH' AND wh.delt_flg = 'N'

         LEFT OUTER JOIN tb_intg_bl_rlt rlt
            ON  bl.intg_bl_seq = rlt.intg_bl_seq AND rlt.delt_flg = 'N'

         LEFT OUTER JOIN tb_intg_bl mbl
            ON  rlt.rlt_intg_bl_seq = mbl.intg_bl_seq AND mbl.biz_clss_cd = 'M' AND mbl.delt_flg = 'N'

         LEFT OUTER JOIN tb_bkg bkg
            ON  bkg.bkg_seq = bnd.intg_bkg_seq AND bkg.delt_flg = 'N'

         LEFT OUTER JOIN(SELECT INTG_BL_SEQ AS INTG_BL_SEQ1, BL_STS_CD AS BL_STS_CD1 FROM TB_INTG_BL_BLCK) BLCK
            ON BL.INTG_BL_SEQ = BLCK.INTG_BL_SEQ1

        WHERE bl.delt_flg = 'N' AND bl.biz_clss_cd = '$biz_clss_cd$' AND bl.air_sea_clss_cd = '$air_sea_clss_cd$'
        <dynamic>
            <isNotEmpty property="f_intg_bl_seq">
                AND bl.intg_bl_seq = '$f_intg_bl_seq$'
            </isNotEmpty>
            <isNotEmpty property="f_bl_no">
                AND bl.bl_no  = '$f_bl_no$'
            </isNotEmpty>
            <isEqual property="f_uod_flg" compareValue="N">
                AND  (BND.ISSUED_BY = '$opr_usrid$' or BND.SLS_USRID = '$opr_usrid$' )
            </isEqual>
        </dynamic>
    </select>
    
    <!-- BL 요약 정보를 리턴함   -->
    <select id="selectBL_SMRY" parameterClass="HashMap" resultClass="HBLInfoVO">
     /* BlCmmSQL.xml > selectBL_SMRY */
        SELECT  bl.intg_bl_seq,        bl.bkg_no,             bl.bl_no,
                bl.rep_cmdt_cd,        bl.rep_cmdt_nm,        bl.pck_qty,            bl.pck_ut_cd,              pcd.pck_nm AS pck_ut_nm,
                
                bl.grs_wgt,            bl.grs_wgt1,			  bl.grs_wgt_ut_cd,      bl.chg_wgt,            	bl.chg_wgt_ut_cd,          
                bl.act_wgt,            bl.act_wgt_ut_cd,      bl.meas,               bl.meas1,					bl.meas_ut_cd,         
             
                bl.por_cd,             '' AS por_nod_cd,         bl.por_nm,             bl.pol_cd,                 bl.pol_nod_cd,    bl.pol_nm,                 
                bl.pod_cd,             bl.pod_nod_cd,         bl.pod_nm,             bl.del_cd,                 '' AS del_nod_cd,    bl.del_nm,
                bl.iss_loc_cd,         bl.iss_loc_nm,         bl.pay_loc_cd,         bl.pay_loc_nm,
        
                bl.fnl_dest_loc_cd,    '' AS fnl_dest_nod_cd,    bl.fnl_dest_loc_nm,    bl.cgo_rcv_dt_tm,          bl.cfs_loc_cd,
                bl.cfs_nod_cd,         bl.de_due_dt,          
                bl.pre_vsl_cd,         bl.pre_vsl_nm,         bl.pre_voy,            bl.trnk_vsl_cd,            bl.trnk_vsl_nm,   bl.trnk_voy,           
                bl.cgo_clz_dt_tm,      bl.obrd_dt_tm,         bl.etd_dt_tm,          bl.eta_dt_tm,
        
                bl.lnr_bkg_no,         lnr.trdp_cd AS lnr_trdp_cd,                   lnr.trdp_nm AS lnr_trdp_nm,
                bl.rmk
         FROM   tb_intg_bl bl
			LEFT OUTER JOIN tb_pck_ut_cd pcd        
			           ON   bl.pck_ut_cd   = pcd.pck_ut_cd    AND pcd.delt_flg = 'N'
			LEFT OUTER JOIN tb_bl_prnr lnr
			           ON   bl.intg_bl_seq = lnr.intg_bl_seq  AND lnr.bl_trdp_tp_cd = 'L01' AND lnr.delt_flg = 'N'
        WHERE   bl.intg_bl_seq = cast(#intg_bl_seq# as varchar)
    </select>
    
    <!-- Work Order BL 요약 정보를 리턴함   -->
    <select id="selectWO_BL_SMRY" parameterClass="HashMap" resultClass="com.clt.apps.fis.see.bmd.workorder.dto.WoOrdVO">
        /* BlCmmSQL.xml > selectWO_BL_SMRY */
        SELECT TOP 1
        BL.INTG_BL_SEQ,
        BL.BKG_NO,
        BL.BL_NO,
        BL.REP_CMDT_CD,
        BL.REP_CMDT_NM,
        BL.PCK_QTY CGO_PCK_QTY,
        BL.PCK_UT_CD CGO_PCK_UT_CD,
        PCD.PCK_NM AS PCK_UT_NM,
        BL.GRS_WGT ACT_WGT_K,
        BL.GRS_WGT1 ACT_WGT_L,
        BL.GRS_WGT_UT_CD,
        BL.CHG_WGT,
        BL.CHG_WGT_UT_CD,
        BL.ACT_WGT,
        BL.ACT_WGT_UT_CD,
        BL.MEAS CGO_MEAS_M,
        BL.MEAS1 CGO_MEAS_F,
        BL.MEAS_UT_CD,
        BL.POR_CD,
        '' AS POR_NOD_CD,
        BL.POR_NM,
        BL.POL_CD,
        BL.POL_NOD_CD,
        BL.POL_NM,
        BL.POD_CD,
        BL.POD_NOD_CD,
        BL.POD_NM,
        BL.DEL_CD,
        '' AS DEL_NOD_CD,
        BL.DEL_NM,
        BL.ISS_LOC_CD,
        BL.ISS_LOC_NM,
        BL.PAY_LOC_CD,
        BL.PAY_LOC_NM,
        BL.FNL_DEST_LOC_CD,
        '' AS FNL_DEST_NOD_CD,
        BL.FNL_DEST_LOC_NM,
        BL.CGO_RCV_DT_TM,
        BL.CFS_LOC_CD,
        BL.CFS_NOD_CD,
        BL.DE_DUE_DT,
        BL.PRE_VSL_CD,
        BL.PRE_VSL_NM,
        BL.PRE_VOY,
        BL.TRNK_VSL_CD,
        BL.TRNK_VSL_NM,
        BL.TRNK_VOY,
        BL.CGO_CLZ_DT_TM,
        BL.OBRD_DT_TM,
        BL.ETD_DT_TM,
        BL.ETA_DT_TM,
        BL.LNR_BKG_NO,
        BL.REF_OFC_CD,
        LNR.TRDP_CD AS LNR_TRDP_CD,
        LNR.TRDP_NM AS LNR_TRDP_NM,
        BL.RMK,
        BL.REP_CMDT_CD AS CGO_ITM_CMDT_CD,
        BL.REP_CMDT_NM AS CGO_ITM_CMDT_NM,
        <!-- OFVFOUR-7857[SENKO USA] Container Summary on Pickup & Delivery Order form -->
        CASE
            WHEN ISNULL((SELECT OPT_VAL FROM TB_SYS_OPT WHERE OPT_KEY = 'WO_DEFAULT_CNTR_INFO'),'') = 'Y' THEN BL.CNTR_INFO
            ELSE ''
        END CNTR_INFO,
        ACT.TRDP_CD AS BILL_TO_TRDP_CD,
        ACT.TRDP_NM AS BILL_TO_TRDP_NM,
        (SELECT ISNULL(BILL_TO.LGL_ADDR,'') +
        (CASE WHEN ISNULL(BILL_TO.CITY_NM,'') != '' AND ISNULL(BILL_TO.STATE_CD,'') != '' AND ISNULL(BILL_TO.REP_ZIP,'') != '' THEN CHAR(13) + BILL_TO.CITY_NM + ', ' + BILL_TO.STATE_CD + ' ' + BILL_TO.REP_ZIP
        WHEN ISNULL(BILL_TO.CITY_NM,'') != '' AND ISNULL(BILL_TO.STATE_CD,'') != '' AND ISNULL(BILL_TO.REP_ZIP,'') = '' THEN CHAR(13) + BILL_TO.CITY_NM + ' ' + BILL_TO.STATE_CD
        WHEN ISNULL(BILL_TO.CITY_NM,'') != '' AND ISNULL(BILL_TO.STATE_CD,'') = '' AND ISNULL(BILL_TO.REP_ZIP,'') = '' THEN CHAR(13) + BILL_TO.CITY_NM
        WHEN ISNULL(BILL_TO.CITY_NM,'') != '' AND ISNULL(BILL_TO.STATE_CD,'') = '' AND ISNULL(BILL_TO.REP_ZIP,'') != '' THEN CHAR(13) + BILL_TO.CITY_NM + ', ' + BILL_TO.REP_ZIP
        ELSE '' END)
        FROM TB_TRDP BILL_TO
        WHERE ACT.TRDP_CD = BILL_TO.TRDP_CD) AS BILL_TO_TRDP_ADDR,
        BL.REF_NO AS BILL_TO_REF_NO,
        TRK.TRDP_CD TRUCKER_TRDP_CD,
        TRK.TRDP_NM TRUCKER_TRDP_NM,
        (SELECT B.PIC_NM  FROM TB_TRDP_CNTC_PSON B WHERE B.TRDP_CD = TRK.TRDP_CD AND B.REP_FLG = 'Y' AND B.DELT_FLG = 'N') AS TRUCKER_PIC,
        (SELECT B.PIC_PHN  FROM TB_TRDP_CNTC_PSON B WHERE B.TRDP_CD = TRK.TRDP_CD AND B.REP_FLG = 'Y' AND B.DELT_FLG = 'N') AS TRUCKER_PHN,
        (SELECT B.PIC_FAX  FROM TB_TRDP_CNTC_PSON B WHERE B.TRDP_CD = TRK.TRDP_CD AND B.REP_FLG = 'Y' AND B.DELT_FLG = 'N') AS TRUCKER_FAX,
        (SELECT ISNULL(TRK_TRDP.LGL_ADDR,'') +
        (CASE WHEN ISNULL(TRK_TRDP.CITY_NM,'') != '' AND ISNULL(TRK_TRDP.STATE_CD,'') != '' AND ISNULL(TRK_TRDP.REP_ZIP,'') != '' THEN CHAR(13) + TRK_TRDP.CITY_NM + ', ' + TRK_TRDP.STATE_CD + ' ' + TRK_TRDP.REP_ZIP
        WHEN ISNULL(TRK_TRDP.CITY_NM,'') != '' AND ISNULL(TRK_TRDP.STATE_CD,'') != '' AND ISNULL(TRK_TRDP.REP_ZIP,'') = '' THEN CHAR(13) + TRK_TRDP.CITY_NM + ' ' + TRK_TRDP.STATE_CD
        WHEN ISNULL(TRK_TRDP.CITY_NM,'') != '' AND ISNULL(TRK_TRDP.STATE_CD,'') = '' AND ISNULL(TRK_TRDP.REP_ZIP,'') = '' THEN CHAR(13) + TRK_TRDP.CITY_NM
        WHEN ISNULL(TRK_TRDP.CITY_NM,'') != '' AND ISNULL(TRK_TRDP.STATE_CD,'') = '' AND ISNULL(TRK_TRDP.REP_ZIP,'') != '' THEN CHAR(13) + TRK_TRDP.CITY_NM + ', ' + TRK_TRDP.REP_ZIP
        ELSE '' END)
        FROM TB_TRDP TRK_TRDP
        WHERE TRK.TRDP_CD = TRK_TRDP.TRDP_CD) AS TRUCKER_TRDP_ADDR,
        CASE WHEN BL.AIR_SEA_CLSS_CD = 'S' AND BND.BND_CLSS_CD = 'O' AND BL.BIZ_CLSS_CD = 'H' THEN MBL.PU_TRDP_CD ELSE '' END AS PICKUP_TRDP_CD,
        CASE WHEN BL.AIR_SEA_CLSS_CD = 'S' AND BND.BND_CLSS_CD = 'O' AND BL.BIZ_CLSS_CD = 'H' THEN (SELECT LOCL_NM FROM TB_TRDP WHERE TRDP_CD = MBL.PU_TRDP_CD AND DELT_FLG ='N') ELSE '' END AS PICKUP_TRDP_NM,
        CASE WHEN BL.AIR_SEA_CLSS_CD = 'S' AND BND.BND_CLSS_CD = 'O' AND BL.BIZ_CLSS_CD = 'H' THEN
        (SELECT ISNULL(PU_TRDP.LGL_ADDR,'') +
        (CASE WHEN ISNULL(PU_TRDP.CITY_NM,'') != '' AND ISNULL(PU_TRDP.STATE_CD,'') != '' AND ISNULL(PU_TRDP.REP_ZIP,'') != '' THEN CHAR(13) + PU_TRDP.CITY_NM + ', ' + PU_TRDP.STATE_CD + ' ' + PU_TRDP.REP_ZIP
        WHEN ISNULL(PU_TRDP.CITY_NM,'') != '' AND ISNULL(PU_TRDP.STATE_CD,'') != '' AND ISNULL(PU_TRDP.REP_ZIP,'') = '' THEN CHAR(13) + PU_TRDP.CITY_NM + ' ' + PU_TRDP.STATE_CD
        WHEN ISNULL(PU_TRDP.CITY_NM,'') != '' AND ISNULL(PU_TRDP.STATE_CD,'') = '' AND ISNULL(PU_TRDP.REP_ZIP,'') = '' THEN CHAR(13) + PU_TRDP.CITY_NM
        WHEN ISNULL(PU_TRDP.CITY_NM,'') != '' AND ISNULL(PU_TRDP.STATE_CD,'') = '' AND ISNULL(PU_TRDP.REP_ZIP,'') != '' THEN CHAR(13) + PU_TRDP.CITY_NM + ', ' + PU_TRDP.REP_ZIP
        ELSE '' END)
        FROM TB_TRDP PU_TRDP
        WHERE MBL.PU_TRDP_CD = PU_TRDP.TRDP_CD) ELSE '' END AS PICKUP_TRDP_ADDR,
        CASE WHEN BL.AIR_SEA_CLSS_CD = 'S' AND BND.BND_CLSS_CD = 'O' AND BL.BIZ_CLSS_CD = 'H' THEN (SELECT B.PIC_NM  FROM TB_TRDP_CNTC_PSON B WHERE B.TRDP_CD = MBL.PU_TRDP_CD AND B.REP_FLG = 'Y' AND B.DELT_FLG = 'N') ELSE '' END AS PICKUP_PIC,
        CASE WHEN BL.AIR_SEA_CLSS_CD = 'S' AND BND.BND_CLSS_CD = 'O' AND BL.BIZ_CLSS_CD = 'H' THEN (SELECT B.PIC_PHN FROM TB_TRDP_CNTC_PSON B WHERE B.TRDP_CD = MBL.PU_TRDP_CD AND B.REP_FLG = 'Y' AND B.DELT_FLG = 'N') ELSE '' END AS PICKUP_PHN,
        CASE WHEN BL.AIR_SEA_CLSS_CD = 'S' AND BND.BND_CLSS_CD = 'O' AND BL.BIZ_CLSS_CD = 'H' THEN (SELECT B.PIC_FAX FROM TB_TRDP_CNTC_PSON B WHERE B.TRDP_CD = MBL.PU_TRDP_CD AND B.REP_FLG = 'Y' AND B.DELT_FLG = 'N') ELSE '' END AS PICKUP_FAX,
        <!-- #34862 - [BINEX]Work Order - Trucker 정보 Link -->
        #pickup_ref_no# AS pickup_ref_no,
        #delivery_ref_no# AS delivery_ref_no,
        CASE WHEN BL.AIR_SEA_CLSS_CD = 'S' AND BND.BND_CLSS_CD = 'O' AND BL.BIZ_CLSS_CD = 'H' THEN DEL.TRDP_CD ELSE '' END AS DELIVERY_TRDP_CD,
        CASE WHEN BL.AIR_SEA_CLSS_CD = 'S' AND BND.BND_CLSS_CD = 'O' AND BL.BIZ_CLSS_CD = 'H' THEN DEL.TRDP_NM ELSE '' END AS DELIVERY_TRDP_NM,
        CASE WHEN BL.AIR_SEA_CLSS_CD = 'S' AND BND.BND_CLSS_CD = 'O' AND BL.BIZ_CLSS_CD = 'H' THEN (SELECT B.PIC_NM  FROM TB_TRDP_CNTC_PSON B WHERE B.TRDP_CD = DEL.TRDP_CD AND B.REP_FLG = 'Y' AND B.DELT_FLG = 'N') ELSE '' END AS DELIVERY_PIC,
        CASE WHEN BL.AIR_SEA_CLSS_CD = 'S' AND BND.BND_CLSS_CD = 'O' AND BL.BIZ_CLSS_CD = 'H' THEN (SELECT B.PIC_PHN  FROM TB_TRDP_CNTC_PSON B WHERE B.TRDP_CD = DEL.TRDP_CD AND B.REP_FLG = 'Y' AND B.DELT_FLG = 'N') ELSE '' END AS DELIVERY_PHN,
        CASE WHEN BL.AIR_SEA_CLSS_CD = 'S' AND BND.BND_CLSS_CD = 'O' AND BL.BIZ_CLSS_CD = 'H' THEN (SELECT B.PIC_FAX  FROM TB_TRDP_CNTC_PSON B WHERE B.TRDP_CD = DEL.TRDP_CD AND B.REP_FLG = 'Y' AND B.DELT_FLG = 'N') ELSE '' END AS DELIVERY_FAX,
        CASE WHEN BL.AIR_SEA_CLSS_CD = 'S' AND BND.BND_CLSS_CD = 'O' AND BL.BIZ_CLSS_CD = 'H' THEN
        (SELECT ISNULL(DEL_TRDP.LGL_ADDR,'') +
        (CASE WHEN ISNULL(DEL_TRDP.CITY_NM,'') != '' AND ISNULL(DEL_TRDP.STATE_CD,'') != '' AND ISNULL(DEL_TRDP.REP_ZIP,'') != '' THEN CHAR(13) + DEL_TRDP.CITY_NM + ', ' + DEL_TRDP.STATE_CD + ' ' + DEL_TRDP.REP_ZIP
        WHEN ISNULL(DEL_TRDP.CITY_NM,'') != '' AND ISNULL(DEL_TRDP.STATE_CD,'') != '' AND ISNULL(DEL_TRDP.REP_ZIP,'') = '' THEN CHAR(13) + DEL_TRDP.CITY_NM + ' ' + DEL_TRDP.STATE_CD
        WHEN ISNULL(DEL_TRDP.CITY_NM,'') != '' AND ISNULL(DEL_TRDP.STATE_CD,'') = '' AND ISNULL(DEL_TRDP.REP_ZIP,'') = '' THEN CHAR(13) + DEL_TRDP.CITY_NM
        WHEN ISNULL(DEL_TRDP.CITY_NM,'') != '' AND ISNULL(DEL_TRDP.STATE_CD,'') = '' AND ISNULL(DEL_TRDP.REP_ZIP,'') != '' THEN CHAR(13) + DEL_TRDP.CITY_NM + ', ' + DEL_TRDP.REP_ZIP
        ELSE '' END)
        FROM TB_TRDP DEL_TRDP
        WHERE DEL.TRDP_CD = DEL_TRDP.TRDP_CD) ELSE '' END AS DELIVERY_TRDP_ADDR,
        CASE WHEN BL.AIR_SEA_CLSS_CD = 'S' AND BND.BND_CLSS_CD = 'O' AND BL.BIZ_CLSS_CD = 'H' THEN MBL.RCV_WH_CD ELSE '' END AS RETURN_TRDP_CD,
        CASE WHEN BL.AIR_SEA_CLSS_CD = 'S' AND BND.BND_CLSS_CD = 'O' AND BL.BIZ_CLSS_CD = 'H' THEN (SELECT LOCL_NM FROM TB_TRDP WHERE TRDP_CD = MBL.RCV_WH_CD AND DELT_FLG ='N') ELSE '' END AS RETURN_TRDP_NM,
        CASE WHEN BL.AIR_SEA_CLSS_CD = 'S' AND BND.BND_CLSS_CD = 'O' AND BL.BIZ_CLSS_CD = 'H' THEN
        (SELECT ISNULL(RTN_TRDP.LGL_ADDR,'') +
        (CASE WHEN ISNULL(RTN_TRDP.CITY_NM,'') != '' AND ISNULL(RTN_TRDP.STATE_CD,'') != '' AND ISNULL(RTN_TRDP.REP_ZIP,'') != '' THEN CHAR(13) + RTN_TRDP.CITY_NM + ', ' + RTN_TRDP.STATE_CD + ' ' + RTN_TRDP.REP_ZIP
        WHEN ISNULL(RTN_TRDP.CITY_NM,'') != '' AND ISNULL(RTN_TRDP.STATE_CD,'') != '' AND ISNULL(RTN_TRDP.REP_ZIP,'') = '' THEN CHAR(13) + RTN_TRDP.CITY_NM + ' ' + RTN_TRDP.STATE_CD
        WHEN ISNULL(RTN_TRDP.CITY_NM,'') != '' AND ISNULL(RTN_TRDP.STATE_CD,'') = '' AND ISNULL(RTN_TRDP.REP_ZIP,'') = '' THEN CHAR(13) + RTN_TRDP.CITY_NM
        WHEN ISNULL(RTN_TRDP.CITY_NM,'') != '' AND ISNULL(RTN_TRDP.STATE_CD,'') = '' AND ISNULL(RTN_TRDP.REP_ZIP,'') != '' THEN CHAR(13) + RTN_TRDP.CITY_NM + ', ' + RTN_TRDP.REP_ZIP
        ELSE '' END)
        FROM TB_TRDP RTN_TRDP
        WHERE MBL.RCV_WH_CD = RTN_TRDP.TRDP_CD) ELSE '' END AS RETURN_TRDP_ADDR,
        CASE WHEN BL.AIR_SEA_CLSS_CD = 'S' AND BND.BND_CLSS_CD = 'O' AND BL.BIZ_CLSS_CD = 'H' THEN (SELECT B.PIC_NM  FROM TB_TRDP_CNTC_PSON B WHERE B.TRDP_CD = MBL.RCV_WH_CD AND B.REP_FLG = 'Y' AND B.DELT_FLG = 'N') ELSE '' END AS RETURN_PIC,
        CASE WHEN BL.AIR_SEA_CLSS_CD = 'S' AND BND.BND_CLSS_CD = 'O' AND BL.BIZ_CLSS_CD = 'H' THEN (SELECT B.PIC_PHN FROM TB_TRDP_CNTC_PSON B WHERE B.TRDP_CD = MBL.RCV_WH_CD AND B.REP_FLG = 'Y' AND B.DELT_FLG = 'N') ELSE '' END AS RETURN_PHN,
        CASE WHEN BL.AIR_SEA_CLSS_CD = 'S' AND BND.BND_CLSS_CD = 'O' AND BL.BIZ_CLSS_CD = 'H' THEN (SELECT B.PIC_FAX FROM TB_TRDP_CNTC_PSON B WHERE B.TRDP_CD = MBL.RCV_WH_CD AND B.REP_FLG = 'Y' AND B.DELT_FLG = 'N') ELSE '' END AS RETURN_FAX,
        bl.cargo_tp_cd
        FROM TB_INTG_BL BL
        LEFT OUTER JOIN TB_ADD_INFO_BND BND
        ON BL.INTG_BL_SEQ = BND.INTG_BL_SEQ
        LEFT OUTER JOIN TB_PCK_UT_CD PCD
        ON BL.PCK_UT_CD = PCD.PCK_UT_CD
        AND PCD.DELT_FLG = 'N'
        LEFT OUTER JOIN TB_BL_PRNR LNR
        ON BL.INTG_BL_SEQ = LNR.INTG_BL_SEQ
        AND LNR.BL_TRDP_TP_CD = 'L01'
        AND LNR.DELT_FLG = 'N'
        LEFT OUTER JOIN TB_BL_PRNR ACT
        ON BL.INTG_BL_SEQ = ACT.INTG_BL_SEQ
        AND ACT.BL_TRDP_TP_CD = 'S02'
        AND ACT.DELT_FLG = 'N'
        LEFT OUTER JOIN TB_BL_PRNR TRK
        ON BL.INTG_BL_SEQ = TRK.INTG_BL_SEQ
        AND TRK.BL_TRDP_TP_CD = 'T02'
        AND TRK.DELT_FLG = 'N'
        LEFT OUTER JOIN TB_BL_PRNR DEL
        ON BL.INTG_BL_SEQ = DEL.INTG_BL_SEQ
        AND DEL.BL_TRDP_TP_CD = 'S03'
        AND DEL.DELT_FLG = 'N'
        LEFT OUTER JOIN TB_INTG_BL_RLT RLT
        ON  BL.INTG_BL_SEQ = RLT.INTG_BL_SEQ AND RLT.DELT_FLG = 'N'
        LEFT OUTER JOIN TB_INTG_BL MBL
        ON  RLT.RLT_INTG_BL_SEQ = MBL.INTG_BL_SEQ AND MBL.BIZ_CLSS_CD = 'M' AND MBL.DELT_FLG = 'N'
        WHERE BL.INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
        AND BL.DELT_FLG = 'N'
    </select>
    
        <!-- Work Order BL 요약 정보를 리턴함   -->
    <select id="selectWO_BL_SMRY_OIH" parameterClass="HashMap" resultClass="com.clt.apps.fis.see.bmd.workorder.dto.WoOrdVO">
     /* BlCmmSQL.xml > selectWO_BL_SMRY_OIH */
         SELECT TOP 1
        		BL.INTG_BL_SEQ,        
                BL.BKG_NO,             
                BL.BL_NO,
                BL.REP_CMDT_CD,        
                BL.REP_CMDT_NM,        
                BL.PCK_QTY CGO_PCK_QTY,            
                BL.PCK_UT_CD CGO_PCK_UT_CD,              
                PCD.PCK_NM AS PCK_UT_NM,
                BL.GRS_WGT ACT_WGT_K,            
                BL.GRS_WGT1 ACT_WGT_L,			 
                BL.GRS_WGT_UT_CD,      
                BL.CHG_WGT,            	
                BL.CHG_WGT_UT_CD,          
                BL.ACT_WGT,            
                BL.ACT_WGT_UT_CD,      
                BL.MEAS CGO_MEAS_M,               
                BL.MEAS1 CGO_MEAS_F,					
                BL.MEAS_UT_CD,
                BL.POR_CD,             
                '' AS POR_NOD_CD,         
                BL.POR_NM,            
                BL.POL_CD,                 
                BL.POL_NOD_CD,    
                BL.POL_NM,                 
                BL.POD_CD,             
                BL.POD_NOD_CD,         
                BL.POD_NM,             
                BL.DEL_CD,                 
                '' AS DEL_NOD_CD,    
                BL.DEL_NM,
                BL.ISS_LOC_CD,         
                BL.ISS_LOC_NM,         
                BL.PAY_LOC_CD,         
                BL.PAY_LOC_NM,
                BL.FNL_DEST_LOC_CD,    
                '' AS FNL_DEST_NOD_CD,    
                BL.FNL_DEST_LOC_NM,    
                BL.CGO_RCV_DT_TM,          
                BL.CFS_LOC_CD,
                BL.CFS_NOD_CD,         
                BL.DE_DUE_DT,          
                BL.PRE_VSL_CD,         
                BL.PRE_VSL_NM,         
                BL.PRE_VOY,            
                BL.TRNK_VSL_CD,            
                BL.TRNK_VSL_NM,   
                BL.TRNK_VOY,           
                BL.CGO_CLZ_DT_TM,      
                BL.OBRD_DT_TM,         
                BL.ETD_DT_TM,          
                BL.ETA_DT_TM,
                BL.LNR_BKG_NO,  
                BL.REF_OFC_CD,       
                LNR.TRDP_CD AS LNR_TRDP_CD,                   
                LNR.TRDP_NM AS LNR_TRDP_NM,
                BL.RMK,
                BL.REP_CMDT_CD AS CGO_ITM_CMDT_CD, 
                BL.REP_CMDT_NM AS CGO_ITM_CMDT_NM,				   
                ACT.TRDP_CD AS BILL_TO_TRDP_CD,               
                ACT.TRDP_NM AS BILL_TO_TRDP_NM,   
                (SELECT ISNULL(BILL_TO.LGL_ADDR,'') + 
                		(CASE WHEN ISNULL(BILL_TO.CITY_NM,'') != '' AND ISNULL(BILL_TO.STATE_CD,'') != '' AND ISNULL(BILL_TO.REP_ZIP,'') != '' THEN CHAR(13) + BILL_TO.CITY_NM + ', ' + BILL_TO.STATE_CD + ' ' + BILL_TO.REP_ZIP
					  	      WHEN ISNULL(BILL_TO.CITY_NM,'') != '' AND ISNULL(BILL_TO.STATE_CD,'') != '' AND ISNULL(BILL_TO.REP_ZIP,'') = '' THEN CHAR(13) + BILL_TO.CITY_NM + ' ' + BILL_TO.STATE_CD
						      WHEN ISNULL(BILL_TO.CITY_NM,'') != '' AND ISNULL(BILL_TO.STATE_CD,'') = '' AND ISNULL(BILL_TO.REP_ZIP,'') = '' THEN CHAR(13) + BILL_TO.CITY_NM
						      WHEN ISNULL(BILL_TO.CITY_NM,'') != '' AND ISNULL(BILL_TO.STATE_CD,'') = '' AND ISNULL(BILL_TO.REP_ZIP,'') != '' THEN CHAR(13) + BILL_TO.CITY_NM + ', ' + BILL_TO.REP_ZIP
						      ELSE '' END)
		         FROM TB_TRDP BILL_TO
		         WHERE ACT.TRDP_CD = BILL_TO.TRDP_CD) AS BILL_TO_TRDP_ADDR,
                BL.REF_NO AS BILL_TO_REF_NO,
                TRK.TRDP_CD TRUCKER_TRDP_CD,
                TRK.TRDP_NM TRUCKER_TRDP_NM,
                (SELECT B.PIC_NM  FROM TB_TRDP_CNTC_PSON B WHERE B.TRDP_CD = TRK.TRDP_CD AND B.REP_FLG = 'Y' AND B.DELT_FLG = 'N') AS TRUCKER_PIC,
  				(SELECT B.PIC_PHN  FROM TB_TRDP_CNTC_PSON B WHERE B.TRDP_CD = TRK.TRDP_CD AND B.REP_FLG = 'Y' AND B.DELT_FLG = 'N') AS TRUCKER_PHN,
  				(SELECT B.PIC_FAX  FROM TB_TRDP_CNTC_PSON B WHERE B.TRDP_CD = TRK.TRDP_CD AND B.REP_FLG = 'Y' AND B.DELT_FLG = 'N') AS TRUCKER_FAX,
				(SELECT ISNULL(TRK_TRDP.LGL_ADDR,'') + 
	                	(CASE WHEN ISNULL(TRK_TRDP.CITY_NM,'') != '' AND ISNULL(TRK_TRDP.STATE_CD,'') != '' AND ISNULL(TRK_TRDP.REP_ZIP,'') != '' THEN CHAR(13) + TRK_TRDP.CITY_NM + ', ' + TRK_TRDP.STATE_CD + ' ' + TRK_TRDP.REP_ZIP
					  	      WHEN ISNULL(TRK_TRDP.CITY_NM,'') != '' AND ISNULL(TRK_TRDP.STATE_CD,'') != '' AND ISNULL(TRK_TRDP.REP_ZIP,'') = '' THEN CHAR(13) + TRK_TRDP.CITY_NM + ' ' + TRK_TRDP.STATE_CD
						      WHEN ISNULL(TRK_TRDP.CITY_NM,'') != '' AND ISNULL(TRK_TRDP.STATE_CD,'') = '' AND ISNULL(TRK_TRDP.REP_ZIP,'') = '' THEN CHAR(13) + TRK_TRDP.CITY_NM
						      WHEN ISNULL(TRK_TRDP.CITY_NM,'') != '' AND ISNULL(TRK_TRDP.STATE_CD,'') = '' AND ISNULL(TRK_TRDP.REP_ZIP,'') != '' THEN CHAR(13) + TRK_TRDP.CITY_NM + ', ' + TRK_TRDP.REP_ZIP
						      ELSE '' END)
		         FROM TB_TRDP TRK_TRDP
		         WHERE TRK.TRDP_CD = TRK_TRDP.TRDP_CD) AS TRUCKER_TRDP_ADDR,
				<!-- #34862 - [BINEX]Work Order - Trucker 정보 Link -->
				#pickup_ref_no# AS pickup_ref_no,
		  	  	#delivery_ref_no# AS delivery_ref_no,
			    CASE WHEN LEN(BL.CY_TRDP_CD) > 0 THEN BL.CY_TRDP_CD ELSE BL.CFS_TRDP_CD END AS PICKUP_TRDP_CD,
				(SELECT LOCL_NM FROM TB_TRDP WHERE TRDP_CD =  ISNULL(REPLACE(BL.CY_TRDP_CD,'',NULL),BL.CFS_TRDP_CD) AND DELT_FLG ='N')PICKUP_TRDP_NM,
				(SELECT ISNULL(PU_TRDP.LGL_ADDR,'') + 
	                	(CASE WHEN ISNULL(PU_TRDP.CITY_NM,'') != '' AND ISNULL(PU_TRDP.STATE_CD,'') != '' AND ISNULL(PU_TRDP.REP_ZIP,'') != '' THEN CHAR(13) + PU_TRDP.CITY_NM + ', ' + PU_TRDP.STATE_CD + ' ' + PU_TRDP.REP_ZIP
			  	      		  WHEN ISNULL(PU_TRDP.CITY_NM,'') != '' AND ISNULL(PU_TRDP.STATE_CD,'') != '' AND ISNULL(PU_TRDP.REP_ZIP,'') = '' THEN CHAR(13) + PU_TRDP.CITY_NM + ' ' + PU_TRDP.STATE_CD
				      		  WHEN ISNULL(PU_TRDP.CITY_NM,'') != '' AND ISNULL(PU_TRDP.STATE_CD,'') = '' AND ISNULL(PU_TRDP.REP_ZIP,'') = '' THEN CHAR(13) + PU_TRDP.CITY_NM
				      		  WHEN ISNULL(PU_TRDP.CITY_NM,'') != '' AND ISNULL(PU_TRDP.STATE_CD,'') = '' AND ISNULL(PU_TRDP.REP_ZIP,'') != '' THEN CHAR(13) + PU_TRDP.CITY_NM + ', ' + PU_TRDP.REP_ZIP
				      		  ELSE '' END)
		         FROM TB_TRDP PU_TRDP
		         WHERE PU_TRDP.TRDP_CD = (CASE WHEN LEN(BL.CY_TRDP_CD) > 0 THEN BL.CY_TRDP_CD ELSE BL.CFS_TRDP_CD END)) AS PICKUP_TRDP_ADDR,
				(SELECT B.PIC_NM  FROM TB_TRDP_CNTC_PSON B WHERE B.TRDP_CD = CASE WHEN LEN(BL.CY_TRDP_CD) > 0 THEN BL.CY_TRDP_CD ELSE BL.CFS_TRDP_CD END AND B.REP_FLG = 'Y' AND B.DELT_FLG = 'N') PICKUP_PIC,
				(SELECT B.PIC_PHN FROM TB_TRDP_CNTC_PSON B WHERE B.TRDP_CD = CASE WHEN LEN(BL.CY_TRDP_CD) > 0 THEN BL.CY_TRDP_CD ELSE BL.CFS_TRDP_CD END AND B.REP_FLG = 'Y' AND B.DELT_FLG = 'N') PICKUP_PHN,
				(SELECT B.PIC_FAX FROM TB_TRDP_CNTC_PSON B WHERE B.TRDP_CD = CASE WHEN LEN(BL.CY_TRDP_CD) > 0 THEN BL.CY_TRDP_CD ELSE BL.CFS_TRDP_CD END AND B.REP_FLG = 'Y' AND B.DELT_FLG = 'N') PICKUP_FAX,
				 BL.DOOR_LOC_CD DELIVERY_TRDP_CD,
				(
                    CASE 
                        WHEN ISNULL(BL.DOOR_LOC_NM,'') != '' THEN BL.DOOR_LOC_NM
                        ELSE (SELECT LOCL_NM FROM TB_TRDP WHERE TRDP_CD = BL.DOOR_LOC_CD AND DELT_FLG ='N')
                    END
                ) AS DELIVERY_TRDP_NM,
				(CASE WHEN ISNULL(TTA.TRDP_ADD_ADDR,'') != '' THEN TTA.TRDP_ADD_ADDR
				ELSE (SELECT ISNULL(DEL_TRDP.LGL_ADDR,'') +
	                	(CASE WHEN ISNULL(DEL_TRDP.CITY_NM,'') != '' AND ISNULL(DEL_TRDP.STATE_CD,'') != '' AND ISNULL(DEL_TRDP.REP_ZIP,'') != '' THEN CHAR(13) + DEL_TRDP.CITY_NM + ', ' + DEL_TRDP.STATE_CD + ' ' + DEL_TRDP.REP_ZIP
					  	      WHEN ISNULL(DEL_TRDP.CITY_NM,'') != '' AND ISNULL(DEL_TRDP.STATE_CD,'') != '' AND ISNULL(DEL_TRDP.REP_ZIP,'') = '' THEN CHAR(13) + DEL_TRDP.CITY_NM + ' ' + DEL_TRDP.STATE_CD
						      WHEN ISNULL(DEL_TRDP.CITY_NM,'') != '' AND ISNULL(DEL_TRDP.STATE_CD,'') = '' AND ISNULL(DEL_TRDP.REP_ZIP,'') = '' THEN CHAR(13) + DEL_TRDP.CITY_NM
						      WHEN ISNULL(DEL_TRDP.CITY_NM,'') != '' AND ISNULL(DEL_TRDP.STATE_CD,'') = '' AND ISNULL(DEL_TRDP.REP_ZIP,'') != '' THEN CHAR(13) + DEL_TRDP.CITY_NM + ', ' + DEL_TRDP.REP_ZIP
						      ELSE '' END)
		         FROM TB_TRDP DEL_TRDP
		         WHERE DEL_TRDP.TRDP_CD = BL.DOOR_LOC_CD)
		         END)
				 AS DELIVERY_TRDP_ADDR,
				(SELECT B.PIC_NM  FROM TB_TRDP_CNTC_PSON B WHERE B.TRDP_CD = BL.DOOR_LOC_CD AND B.REP_FLG = 'Y' AND B.DELT_FLG = 'N') DELIVERY_PIC,
				(SELECT B.PIC_PHN FROM TB_TRDP_CNTC_PSON B WHERE B.TRDP_CD = BL.DOOR_LOC_CD AND B.REP_FLG = 'Y' AND B.DELT_FLG = 'N') DELIVERY_PHN,
				(SELECT B.PIC_FAX FROM TB_TRDP_CNTC_PSON B WHERE B.TRDP_CD = BL.DOOR_LOC_CD AND B.REP_FLG = 'Y' AND B.DELT_FLG = 'N') DELIVERY_FAX,
				'' RETURN_TRDP_CD,
				'' RETURN_TRDP_NM,
                '' RETURN_TRDP_ADDR,
 			    '' RETURN_PIC,
				'' RETURN_PHN,
				'' RETURN_FAX     
           FROM TB_INTG_BL BL
		   LEFT OUTER JOIN TB_PCK_UT_CD PCD        
			 ON BL.PCK_UT_CD = PCD.PCK_UT_CD
		    AND PCD.DELT_FLG = 'N'
		   LEFT OUTER JOIN TB_BL_PRNR LNR
			 ON BL.INTG_BL_SEQ = LNR.INTG_BL_SEQ  
			AND LNR.BL_TRDP_TP_CD = 'L01' 
			AND LNR.DELT_FLG = 'N'
		   LEFT OUTER JOIN TB_BL_PRNR ACT            
			 ON BL.INTG_BL_SEQ = ACT.INTG_BL_SEQ  
			AND ACT.BL_TRDP_TP_CD = 'S02' 
			AND ACT.DELT_FLG = 'N'
		   LEFT OUTER JOIN TB_BL_PRNR TRK            
			 ON BL.INTG_BL_SEQ = TRK.INTG_BL_SEQ  
			AND TRK.BL_TRDP_TP_CD = 'T02' 
			AND TRK.DELT_FLG = 'N'
	       LEFT OUTER JOIN TB_TRDP_ADDR TTA ON TTA.TRDP_CD = BL.DOOR_LOC_CD
			AND TTA.TRDP_NM = BL.DOOR_LOC_NM
           WHERE BL.INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
             AND BL.DELT_FLG = 'N'
    </select>
    
    
  	<!-- Customer Booking 요약 정보 리턴 -->
       <select id="selectWO_CU_OE" parameterClass="HashMap" resultClass="com.clt.apps.fis.see.bmd.workorder.dto.WoOrdVO">
           	/* BlCmmSQL.xml > selectWO_CU_OE */
       SELECT TOP 1
           BKG.BKG_NO 
	      ,BKG.BKG_SEQ as BKG_SEQ
	      ,BKG.INTG_BL_SEQ
	      ,BL.BL_NO
	      ,BKG.BKG_DT_TM 
	      ,BKG.PO_NO 
	      ,BKG.LC_NO 
	      ,BKG.PRNR_TRDP_CD 
	      ,BKG.PRNR_TRDP_NM 
	      ,BKG.ACT_SHPR_TRDP_CD 
	      ,BKG.ACT_SHPR_TRDP_NM 
	      ,BKG.SHPR_TRDP_CD 
	      ,BKG.SHPR_TRDP_NM 
	      ,BKG.SHPR_TRDP_ADDR 
	      ,BKG.CNEE_TRDP_CD 
	      ,BKG.CNEE_TRDP_NM 
	      ,BKG.CNEE_TRDP_ADDR 
	      ,BKG.NTFY_TRDP_CD 
	      ,BKG.NTFY_TRDP_NM 
	      ,BKG.NTFY_TRDP_ADDR 
	      ,BKG.EXP_REF_NO 
	      
   <!--  Empty Pickup 매핑. Customer Booking에 Carrier Booking이 딸려있으면, Carrier Booking의 Empty Pickup을 조회한다 -->
        ,case when isnull(BKG.LNR_BKG_NO,'')!='' and BKG.BIZ_CLSS_CD='H' 
        then (select PU_TRDP_CD from TB_BKG where BKG_SEQ = (select RLT_BKG_SEQ from TB_BKG_RLT where 1=1 and BKG_SEQ=#bkg_seq#) )
        else BKG.PU_TRDP_CD
        end PICKUP_TRDP_CD,

        case when isnull(BKG.LNR_BKG_NO,'')!='' and BKG.BIZ_CLSS_CD='H' 
        then (select PU_TRDP_NM from TB_BKG where BKG_SEQ = (select RLT_BKG_SEQ from TB_BKG_RLT where 1=1 and BKG_SEQ=#bkg_seq#) )
        else BKG.PU_TRDP_NM
        end PICKUP_TRDP_NM,
        
        case when isnull(BKG.LNR_BKG_NO,'')!='' and BKG.BIZ_CLSS_CD='H' 
        then 	      
	      (SELECT ISNULL(PICKUP_TRDP.LGL_ADDR,'') + 
				(CASE WHEN ISNULL(PICKUP_TRDP.CITY_NM,'') != '' AND ISNULL(PICKUP_TRDP.STATE_CD,'') != '' AND ISNULL(PICKUP_TRDP.REP_ZIP,'') != '' THEN CHAR(13) + PICKUP_TRDP.CITY_NM + ', ' + PICKUP_TRDP.STATE_CD + ' ' + PICKUP_TRDP.REP_ZIP
				WHEN ISNULL(PICKUP_TRDP.CITY_NM,'') != '' AND ISNULL(PICKUP_TRDP.STATE_CD,'') != '' AND ISNULL(PICKUP_TRDP.REP_ZIP,'') = '' THEN CHAR(13) + PICKUP_TRDP.CITY_NM + ' ' + PICKUP_TRDP.STATE_CD
				WHEN ISNULL(PICKUP_TRDP.CITY_NM,'') != '' AND ISNULL(PICKUP_TRDP.STATE_CD,'') = '' AND ISNULL(PICKUP_TRDP.REP_ZIP,'') = '' THEN CHAR(13) + PICKUP_TRDP.CITY_NM
				WHEN ISNULL(PICKUP_TRDP.CITY_NM,'') != '' AND ISNULL(PICKUP_TRDP.STATE_CD,'') = '' AND ISNULL(PICKUP_TRDP.REP_ZIP,'') != '' THEN CHAR(13) + PICKUP_TRDP.CITY_NM + ', ' + PICKUP_TRDP.REP_ZIP
				ELSE '' END)
			FROM TB_TRDP PICKUP_TRDP
			WHERE PICKUP_TRDP.TRDP_CD = (select PU_TRDP_CD from TB_BKG where BKG_SEQ=(select RLT_BKG_SEQ from TB_BKG_RLT where 1=1 and BKG_SEQ=#bkg_seq#)))
        else 
	      (SELECT ISNULL(PICKUP_TRDP.LGL_ADDR,'') + 
				(CASE WHEN ISNULL(PICKUP_TRDP.CITY_NM,'') != '' AND ISNULL(PICKUP_TRDP.STATE_CD,'') != '' AND ISNULL(PICKUP_TRDP.REP_ZIP,'') != '' THEN CHAR(13) + PICKUP_TRDP.CITY_NM + ', ' + PICKUP_TRDP.STATE_CD + ' ' + PICKUP_TRDP.REP_ZIP
				WHEN ISNULL(PICKUP_TRDP.CITY_NM,'') != '' AND ISNULL(PICKUP_TRDP.STATE_CD,'') != '' AND ISNULL(PICKUP_TRDP.REP_ZIP,'') = '' THEN CHAR(13) + PICKUP_TRDP.CITY_NM + ' ' + PICKUP_TRDP.STATE_CD
				WHEN ISNULL(PICKUP_TRDP.CITY_NM,'') != '' AND ISNULL(PICKUP_TRDP.STATE_CD,'') = '' AND ISNULL(PICKUP_TRDP.REP_ZIP,'') = '' THEN CHAR(13) + PICKUP_TRDP.CITY_NM
				WHEN ISNULL(PICKUP_TRDP.CITY_NM,'') != '' AND ISNULL(PICKUP_TRDP.STATE_CD,'') = '' AND ISNULL(PICKUP_TRDP.REP_ZIP,'') != '' THEN CHAR(13) + PICKUP_TRDP.CITY_NM + ', ' + PICKUP_TRDP.REP_ZIP
				ELSE '' END)
			FROM TB_TRDP PICKUP_TRDP
			WHERE PICKUP_TRDP.TRDP_CD = BKG.PU_TRDP_CD)        
        end PICKUP_TRDP_ADDR,        
        
        
        case when isnull(BKG.LNR_BKG_NO,'')!='' and BKG.BIZ_CLSS_CD='H' 
        then (SELECT B.PIC_NM  FROM TB_TRDP_CNTC_PSON B WHERE B.TRDP_CD = (select PU_TRDP_CD from TB_BKG where BKG_SEQ=(select RLT_BKG_SEQ from TB_BKG_RLT where 1=1 and BKG_SEQ=#bkg_seq#)) AND B.REP_FLG = 'Y' AND B.DELT_FLG = 'N')
        else (SELECT B.PIC_NM  FROM TB_TRDP_CNTC_PSON B WHERE B.TRDP_CD = BKG.PU_TRDP_CD AND B.REP_FLG = 'Y' AND B.DELT_FLG = 'N')
        end PICKUP_PIC,
        
        
        
        case when isnull(BKG.LNR_BKG_NO,'')!='' and BKG.BIZ_CLSS_CD='H' 
        then (SELECT B.PIC_PHN  FROM TB_TRDP_CNTC_PSON B WHERE B.TRDP_CD = (select PU_TRDP_CD from TB_BKG where BKG_SEQ=(select RLT_BKG_SEQ from TB_BKG_RLT where 1=1 and BKG_SEQ=#bkg_seq#)) AND B.REP_FLG = 'Y' AND B.DELT_FLG = 'N')
        else (SELECT B.PIC_PHN FROM TB_TRDP_CNTC_PSON B WHERE B.TRDP_CD = BKG.PU_TRDP_CD AND B.REP_FLG = 'Y' AND B.DELT_FLG = 'N')
        end PICKUP_PHN,
        
        
        case when isnull(BKG.LNR_BKG_NO,'')!='' and BKG.BIZ_CLSS_CD='H' 
        then (SELECT B.PIC_FAX  FROM TB_TRDP_CNTC_PSON B WHERE B.TRDP_CD = (select PU_TRDP_CD from TB_BKG where BKG_SEQ=(select RLT_BKG_SEQ from TB_BKG_RLT where 1=1 and BKG_SEQ=#bkg_seq#)) AND B.REP_FLG = 'Y' AND B.DELT_FLG = 'N')
        else (SELECT B.PIC_FAX FROM TB_TRDP_CNTC_PSON B WHERE B.TRDP_CD = BKG.PU_TRDP_CD AND B.REP_FLG = 'Y' AND B.DELT_FLG = 'N')
        end PICKUP_FAX
		       
	      ,BKG.CGO_PU_TRDP_CD AS DELIVERY_TRDP_CD
	      ,BKG.CGO_PU_TRDP_NM AS DELIVERY_TRDP_NM
	      ,(SELECT ISNULL(DEL_TRDP.LGL_ADDR,'') + 
				(CASE WHEN ISNULL(DEL_TRDP.CITY_NM,'') != '' AND ISNULL(DEL_TRDP.STATE_CD,'') != '' AND ISNULL(DEL_TRDP.REP_ZIP,'') != '' THEN CHAR(13) + DEL_TRDP.CITY_NM + ', ' + DEL_TRDP.STATE_CD + ' ' + DEL_TRDP.REP_ZIP
				WHEN ISNULL(DEL_TRDP.CITY_NM,'') != '' AND ISNULL(DEL_TRDP.STATE_CD,'') != '' AND ISNULL(DEL_TRDP.REP_ZIP,'') = '' THEN CHAR(13) + DEL_TRDP.CITY_NM + ' ' + DEL_TRDP.STATE_CD
				WHEN ISNULL(DEL_TRDP.CITY_NM,'') != '' AND ISNULL(DEL_TRDP.STATE_CD,'') = '' AND ISNULL(DEL_TRDP.REP_ZIP,'') = '' THEN CHAR(13) + DEL_TRDP.CITY_NM
				WHEN ISNULL(DEL_TRDP.CITY_NM,'') != '' AND ISNULL(DEL_TRDP.STATE_CD,'') = '' AND ISNULL(DEL_TRDP.REP_ZIP,'') != '' THEN CHAR(13) + DEL_TRDP.CITY_NM + ', ' + DEL_TRDP.REP_ZIP
				ELSE '' END)
			FROM TB_TRDP DEL_TRDP
			WHERE DEL_TRDP.TRDP_CD = BKG.CGO_PU_TRDP_CD) AS DELIVERY_TRDP_ADDR
  		  ,(SELECT B.PIC_NM  FROM TB_TRDP_CNTC_PSON B WHERE B.TRDP_CD = BKG.CGO_PU_TRDP_CD AND B.REP_FLG = 'Y' AND B.DELT_FLG = 'N') DELIVERY_PIC
		  ,(SELECT B.PIC_PHN FROM TB_TRDP_CNTC_PSON B WHERE B.TRDP_CD = BKG.CGO_PU_TRDP_CD AND B.REP_FLG = 'Y' AND B.DELT_FLG = 'N') DELIVERY_PHN
		  ,(SELECT B.PIC_FAX FROM TB_TRDP_CNTC_PSON B WHERE B.TRDP_CD = BKG.CGO_PU_TRDP_CD AND B.REP_FLG = 'Y' AND B.DELT_FLG = 'N') DELIVERY_FAX
	      ,BKG.RCV_WH_CD 
	      ,BKG.RCV_WH_NM 
	      ,BKG.TRK_TRDP_CD AS TRUCKER_TRDP_CD
	      ,BKG.TRK_TRDP_NM AS TRUCKER_TRDP_NM
	      ,(SELECT ISNULL(TRUCKER_TRDP.LGL_ADDR,'') + 
				(CASE WHEN ISNULL(TRUCKER_TRDP.CITY_NM,'') != '' AND ISNULL(TRUCKER_TRDP.STATE_CD,'') != '' AND ISNULL(TRUCKER_TRDP.REP_ZIP,'') != '' THEN CHAR(13) + TRUCKER_TRDP.CITY_NM + ', ' + TRUCKER_TRDP.STATE_CD + ' ' + TRUCKER_TRDP.REP_ZIP
					WHEN ISNULL(TRUCKER_TRDP.CITY_NM,'') != '' AND ISNULL(TRUCKER_TRDP.STATE_CD,'') != '' AND ISNULL(TRUCKER_TRDP.REP_ZIP,'') = '' THEN CHAR(13) + TRUCKER_TRDP.CITY_NM + ' ' + TRUCKER_TRDP.STATE_CD
					WHEN ISNULL(TRUCKER_TRDP.CITY_NM,'') != '' AND ISNULL(TRUCKER_TRDP.STATE_CD,'') = '' AND ISNULL(TRUCKER_TRDP.REP_ZIP,'') = '' THEN CHAR(13) + TRUCKER_TRDP.CITY_NM
					WHEN ISNULL(TRUCKER_TRDP.CITY_NM,'') != '' AND ISNULL(TRUCKER_TRDP.STATE_CD,'') = '' AND ISNULL(TRUCKER_TRDP.REP_ZIP,'') != '' THEN CHAR(13) + TRUCKER_TRDP.CITY_NM + ', ' + TRUCKER_TRDP.REP_ZIP
					ELSE '' END)
			FROM TB_TRDP TRUCKER_TRDP
			WHERE TRUCKER_TRDP.TRDP_CD = BKG.TRK_TRDP_CD) AS TRUCKER_TRDP_ADDR
 		  ,(SELECT B.PIC_NM  FROM TB_TRDP_CNTC_PSON B WHERE B.TRDP_CD = BKG.TRK_TRDP_CD AND B.REP_FLG = 'Y' AND B.DELT_FLG = 'N') TRUCKER_PIC
 		  ,(SELECT B.PIC_PHN FROM TB_TRDP_CNTC_PSON B WHERE B.TRDP_CD = BKG.TRK_TRDP_CD AND B.REP_FLG = 'Y' AND B.DELT_FLG = 'N') TRUCKER_PHN
		  ,(SELECT B.PIC_FAX FROM TB_TRDP_CNTC_PSON B WHERE B.TRDP_CD = BKG.TRK_TRDP_CD AND B.REP_FLG = 'Y' AND B.DELT_FLG = 'N') TRUCKER_FAX
	      ,BKG.CUST_REF_NO 
	      ,BKG.CNTR_INFO 
	      ,BKG.TRNK_VSL_CD 
	      ,BKG.TRNK_VSL_NM 
	      ,BKG.TRNK_VOY 
	      ,BKG.POR_CD 
	      ,BKG.POR_NOD_CD 
	      ,BKG.POR_NM 
	      ,BKG.POL_CD AS POL_CD 
	      ,BKG.POL_NOD_CD 
	      ,BKG.POL_NM AS POL_NM
	      ,BKG.POD_CD AS POD_CD 
	      ,BKG.POD_NOD_CD 
	      ,BKG.POD_NM AS POD_NM
	      ,BKG.DEL_CD 
	      ,BKG.DEL_NOD_CD 
	      ,BKG.DEL_NM 
	      ,BKG.FNL_DEST_LOC_CD 
	      ,BKG.FNL_DEST_NOD_CD 
	      ,BKG.FNL_DEST_LOC_NM 
	      ,BKG.LNR_TRDP_CD AS LNR_TRDP_CD 
	      ,BKG.LNR_TRDP_NM AS LNR_TRDP_NM
	      ,BKG.LNR_BKG_NO AS LNR_BKG_NO
	      ,BKG.ETD_DT_TM 
	      ,BKG.ETA_DT_TM 
	      ,BKG.ETD_POR_TM 
	      ,BKG.SHP_MOD_CD 
	      ,BKG.REP_CMDT_CD AS CGO_ITM_CMDT_CD
	      ,BKG.REP_CMDT_NM AS CGO_ITM_CMDT_NM
	      ,BKG.PCK_QTY AS CGO_PCK_QTY
	      ,BKG.PCK_UT_CD AS CGO_PCK_UT_CD
	      ,BKG.PCK_QTY 
	      ,BKG.PCK_UT_CD 	      
	      ,BKG.GRS_WGT_UT_CD 
	      ,BKG.GRS_WGT AS ACT_WGT_K
	      ,BKG.GRS_WGT1 AS ACT_WGT_L
	      ,BKG.MEAS_UT_CD 
	      ,BKG.MEAS AS CGO_MEAS_M
	      ,BKG.MEAS1 AS CGO_MEAS_F
	      ,BKG.FM_SVC_TERM_CD 
	      ,BKG.TO_SVC_TERM_CD 
	      ,BKG.CARGO_TP_CD 
	      ,BKG.CUT_OFF_DT 
	      ,BKG.RAIL_CUT_OFF_DT 
	      ,BKG.WH_CUT_OFF_DT 
	      ,BKG.DOC_CUT_OFF_DT 
	      ,BKG.SLS_OFC_CD 
	      ,BKG.SLS_DEPT_CD 
	      ,BKG.SLS_USRID 
	      ,BKG.SLS_USR_NM 
	      ,BKG.RMK 
	      ,BKG.DEPT_CD 
	      ,BKG.DELT_FLG 
	      ,BKG.LNR_CTRT_NO
       	  ,BKG.FRT_TERM_CD
       	  ,BKG.PORT_OPEN_DT
       	  ,BKG.VGM_CUT_OFF_DT
       	  ,BKG.BKG_STS_CD
  		  ,BKG.PORT_OPEN_DT
       	  ,BKG.VGM_CUT_OFF_DT
	      ,BKG.RGST_USRID
	      ,BKG.RGST_OFC_CD
	      ,CONVERT(VARCHAR(10),DATEADD(MINUTE,60*CONVERT( float,isnull (ccd.RMK ,'0')),BKG.RGST_TMS ),112) + REPLACE(CONVERT(VARCHAR(8),DATEADD(MINUTE,60*CONVERT( float,isnull (ccd.RMK ,'0')),BKG.RGST_TMS ),108),':','')  AS RGST_TMS      
	      ,BKG.MODI_USRID
	      ,BKG.MODI_OFC_CD
	      ,CONVERT(VARCHAR(10),DATEADD(MINUTE,60*CONVERT( float,isnull (ccd.RMK ,'0')),BKG.MODI_TMS ),112) + REPLACE(CONVERT(VARCHAR(8),DATEADD(MINUTE,60*CONVERT( float,isnull (ccd.RMK ,'0')),BKG.MODI_TMS ),108),':','')  AS MODI_TMS     
          ,BKG.HBL_TP_CD
          ,BKG.NOMI_FLG   		
          ,BKG.ISS_USRID
          ,BKG.ASGN_USRID 
          ,BKG.INTER_RMK_TXT
          ,BKG.CSTMS_SVC_FLG 
		  ,BKG.TRKG_SVC_FLG 
	      , (
			SELECT 
				BL.REF_NO
			  FROM TB_BKG CUS
			  JOIN TB_BKG_RLT RLT
			   ON(CUS.BKG_SEQ = RLT.BKG_SEQ  )
			  JOIN TB_BKG CARI 
			   ON(CARI.BKG_SEQ = RLT.RLT_BKG_SEQ   )
			  JOIN TB_ADD_INFO_BND BND 
	            ON CARI.BKG_SEQ = BND.INTG_BKG_SEQ  AND BND.DELT_FLG = 'N'   
	          JOIN TB_INTG_BL BL 
	            ON BND.INTG_BL_SEQ = BL.INTG_BL_SEQ 
	            AND BL.DELT_FLG = 'N'              
			 WHERE CUS.BKG_SEQ = BKG.BKG_SEQ
			   AND CUS.BKG_NO  = BKG.BKG_NO
			  
			   )   AS REF_NO   	       
       		,CARI.BKG_SEQ AS CARRIER_BKG_SEQ
       		,CARI.BKG_NO  AS CARRIER_BKG_NO
       		,BKG.VNDR_TRDP_CD
       		,BKG.VNDR_TRDP_NM
       		,BKG.VNDR_TRDP_ADDR
       		,BKG.CSTMS_TP_CD
 			,BKG.ACT_SHPR_TRDP_CD as cust_cd
			,(select LOCL_NM from TB_TRDP where TRDP_CD=BKG.ACT_SHPR_TRDP_CD) as cust_nm
			,(select LGL_ADDR from TB_TRDP where TRDP_CD=BKG.ACT_SHPR_TRDP_CD) as cust_addr
			,(select pic_nm from TB_TRDP_CNTC_PSON where REP_FLG='Y' and TRDP_CD=BKG.ACT_SHPR_TRDP_CD) as cust_pic
			,(select PIC_PHN from TB_TRDP_CNTC_PSON where REP_FLG='Y' and TRDP_CD=BKG.ACT_SHPR_TRDP_CD) as cust_phn
			,(select PIC_FAX from TB_TRDP_CNTC_PSON where REP_FLG='Y' and TRDP_CD=BKG.ACT_SHPR_TRDP_CD) as cust_fax
			
			,case when #biz_clss_cd# ='H' then BKG.cust_trdp_cd  else  '' end as cstms_cust_cd
			,case when #biz_clss_cd# ='H' then (select LOCL_NM from TB_TRDP where TRDP_CD=BKG.cust_trdp_cd)  else  '' end as cstms_cust_nm
			,case when #biz_clss_cd# ='H' then (select LGL_ADDR from TB_TRDP where TRDP_CD=BKG.cust_trdp_cd) else  '' end as cstms_cust_addr
			,case when #biz_clss_cd# ='H' then (select pic_nm from TB_TRDP_CNTC_PSON where REP_FLG='Y' and TRDP_CD=BKG.cust_trdp_cd) else  '' end as cstms_cust_pic
			,case when #biz_clss_cd# ='H' then (select PIC_PHN from TB_TRDP_CNTC_PSON where REP_FLG='Y' and TRDP_CD=BKG.cust_trdp_cd) else  '' end as cstms_cust_phn
			,case when #biz_clss_cd# ='H' then (select PIC_FAX from TB_TRDP_CNTC_PSON where REP_FLG='Y' and TRDP_CD=BKG.cust_trdp_cd)  else  '' end as cstms_cust_fax
  			,BKG.rcv_wh_cd as return_trdp_cd
			,(select LOCL_NM from TB_TRDP where TRDP_CD=BKG.rcv_wh_cd)  as return_trdp_nm
			,(select LGL_ADDR from TB_TRDP where TRDP_CD=BKG.rcv_wh_cd) as return_trdp_addr
			,(select pic_nm from TB_TRDP_CNTC_PSON where REP_FLG='Y' and TRDP_CD=BKG.rcv_wh_cd) as return_pic
			,(select PIC_PHN from TB_TRDP_CNTC_PSON where REP_FLG='Y' and TRDP_CD=BKG.rcv_wh_cd) as return_phn
			,(select PIC_FAX from TB_TRDP_CNTC_PSON where REP_FLG='Y' and TRDP_CD=BKG.rcv_wh_cd) as return_fax
   			,BKG.rcv_wh_cd as wh_cd
			,(select LOCL_NM from TB_TRDP where TRDP_CD=BKG.rcv_wh_cd)  as wh_nm
			,(select LGL_ADDR from TB_TRDP where TRDP_CD=BKG.rcv_wh_cd) as wh_addr
			
			,(SELECT OFC_FM_HR FROM TB_TRDP WHERE TRDP_CD =  BKG.rcv_wh_cd AND DELT_FLG ='N') WH_TRDP_OFC_FM_HR
			,(SELECT OFC_TO_HR FROM TB_TRDP WHERE TRDP_CD =  BKG.rcv_wh_cd AND DELT_FLG ='N') WH_TRDP_OFC_TO_HR
			,case when isnull(BKG.LNR_BKG_NO,'')!='' and BKG.BIZ_CLSS_CD='H' 
        	 then (SELECT B.OFC_FM_HR  FROM TB_TRDP B WHERE B.TRDP_CD = (select PU_TRDP_CD from TB_BKG where BKG_SEQ=(select RLT_BKG_SEQ from TB_BKG_RLT where 1=1 and BKG_SEQ=#bkg_seq#)) AND B.DELT_FLG = 'N')
             else (SELECT B.OFC_FM_HR  FROM TB_TRDP B WHERE B.TRDP_CD = BKG.PU_TRDP_CD AND B.DELT_FLG = 'N')
        	 end PICKUP_TRDP_OFC_FM_HR
			,case when isnull(BKG.LNR_BKG_NO,'')!='' and BKG.BIZ_CLSS_CD='H' 
        	 then (SELECT B.OFC_TO_HR  FROM TB_TRDP B WHERE B.TRDP_CD = (select PU_TRDP_CD from TB_BKG where BKG_SEQ=(select RLT_BKG_SEQ from TB_BKG_RLT where 1=1 and BKG_SEQ=#bkg_seq#)) AND B.DELT_FLG = 'N')
             else (SELECT B.OFC_TO_HR  FROM TB_TRDP B WHERE B.TRDP_CD = BKG.PU_TRDP_CD AND B.DELT_FLG = 'N')
        	 end PICKUP_TRDP_OFC_TO_HR
			,(SELECT OFC_FM_HR FROM TB_TRDP WHERE TRDP_CD =  BKG.CGO_PU_TRDP_CD  AND DELT_FLG ='N') DELIVERY_TRDP_OFC_FM_HR
			,(SELECT OFC_FM_HR FROM TB_TRDP WHERE TRDP_CD =  BKG.CGO_PU_TRDP_CD  AND DELT_FLG ='N') DELIVERY_TRDP_OFC_TO_HR	 
			,(SELECT OFC_FM_HR FROM TB_TRDP WHERE TRDP_CD =  BKG.rcv_wh_cd AND DELT_FLG ='N') RETURN_TRDP_OFC_FM_HR
			,(SELECT OFC_TO_HR FROM TB_TRDP WHERE TRDP_CD =  BKG.rcv_wh_cd AND DELT_FLG ='N') RETURN_TRDP_OFC_TO_HR
           <!-- OFVFOUR-7798: [Southeast] Update the Title/Subject of Pickup# Notice -->
			, case when #biz_clss_cd# ='H' then (select bl_no
			                                     from tb_intg_bl
			                                     where intg_bl_seq = ( select RLT_INTG_BL_SEQ
                                                                        from tb_intg_bl_rlt a
                                                                        where INTG_BL_SEQ = BL.intg_bl_seq))
                else ''
                end as mbl_no_ref
	  FROM TB_BKG BKG
	  LEFT OUTER JOIN TB_ADD_INFO_BND BND
	   ON  BND.INTG_BKG_SEQ = BKG.BKG_SEQ AND BND.DELT_FLG = 'N'
	  LEFT OUTER JOIN TB_INTG_BL BL
	   ON  BL.INTG_BL_SEQ = BND.INTG_BL_SEQ AND BL.AIR_SEA_CLSS_CD = 'S' AND BL.BIZ_CLSS_CD = 'H' AND BL.DELT_FLG = 'N'
	  LEFT OUTER JOIN TB_BKG_RLT RLT
	   ON  RLT.BKG_SEQ = BKG.BKG_SEQ
	   AND RLT.RLT_BKG_SEQ is not null  AND RLT.RLT_BKG_SEQ != '' AND RLT.DELT_FLG ='N'
	  LEFT OUTER JOIN TB_BKG CARI 
	   ON  RLT.RLT_BKG_SEQ = CARI.BKG_SEQ		   
	  LEFT OUTER JOIN
		   TB_OFC TOF 
	   ON BKG.RGST_OFC_CD = TOF.OFC_CD           
	  LEFT OUTER JOIN
		   TB_COM_CD_DTL CCD 
	   ON CCD.COM_CD = 'TIMEZN'  AND TOF.TIME_ZONE = CCD.CD_VAL  		   
	 WHERE 1 = 1
	   AND BKG.DELT_FLG = 'N'
	   AND BKG.BIZ_CLSS_CD = #biz_clss_cd#
       <dynamic>
       	<isNotEmpty property="bkg_no">
               AND BKG.BKG_NO = #bkg_no#
           </isNotEmpty>
           <isNotEmpty property="bkg_seq">
               AND BKG.BKG_SEQ = #bkg_seq#
           </isNotEmpty> 
       </dynamic>
   </select>
        
        <!-- Work Order BL 요약 정보를 리턴함   -->
    <select id="selectWO_BL_SMRY_AIH" parameterClass="HashMap" resultClass="com.clt.apps.fis.see.bmd.workorder.dto.WoOrdVO">
     /* BlCmmSQL.xml > selectWO_BL_SMRY_AIH */
         SELECT TOP 1
        		BL.INTG_BL_SEQ,        
                BL.BKG_NO,             
                BL.BL_NO,
                BL.REP_CMDT_CD,        
                BL.REP_CMDT_NM,        
                BL.PCK_QTY CGO_PCK_QTY,            
                BL.PCK_UT_CD CGO_PCK_UT_CD,              
                PCD.PCK_NM AS PCK_UT_NM,
                BL.GRS_WGT ACT_WGT_K,            
                BL.GRS_WGT1 ACT_WGT_L,			 
                BL.GRS_WGT_UT_CD,      
                BL.CHG_WGT,            	
                BL.CHG_WGT_UT_CD,          
                BL.ACT_WGT,            
                BL.ACT_WGT_UT_CD,      
                BL.MEAS CGO_MEAS_M,               
                BL.MEAS1 CGO_MEAS_F,					
                BL.MEAS_UT_CD,
                BL.POR_CD,             
                '' AS POR_NOD_CD,         
                BL.POR_NM,            
                BL.POL_CD,                 
                BL.POL_NOD_CD,    
                BL.POL_NM,                 
                BL.POD_CD,             
                BL.POD_NOD_CD,         
                BL.POD_NM,             
                BL.DEL_CD,                 
                '' AS DEL_NOD_CD,    
                BL.DEL_NM,
                BL.ISS_LOC_CD,         
                BL.ISS_LOC_NM,         
                BL.PAY_LOC_CD,         
                BL.PAY_LOC_NM,
                BL.FNL_DEST_LOC_CD,    
                '' AS FNL_DEST_NOD_CD,    
                BL.FNL_DEST_LOC_NM,    
                BL.CGO_RCV_DT_TM,          
                BL.CFS_LOC_CD,
                BL.CFS_NOD_CD,         
                BL.DE_DUE_DT,          
                BL.PRE_VSL_CD,         
                BL.PRE_VSL_NM,         
                BL.PRE_VOY,            
                BL.TRNK_VSL_CD,            
                BL.TRNK_VSL_NM,   
                BL.TRNK_VOY,           
                BL.CGO_CLZ_DT_TM,      
                BL.OBRD_DT_TM,         
                BL.ETD_DT_TM,          
                BL.ETA_DT_TM,
                BL.LNR_BKG_NO,    
                BL.REF_OFC_CD,     
                LNR.TRDP_CD AS LNR_TRDP_CD,                   
                LNR.TRDP_NM AS LNR_TRDP_NM,
                BL.RMK,
                BL.REP_CMDT_CD AS CGO_ITM_CMDT_CD, 
                BL.REP_CMDT_NM AS CGO_ITM_CMDT_NM,				   
                ACT.TRDP_CD AS BILL_TO_TRDP_CD,               
                ACT.TRDP_NM AS BILL_TO_TRDP_NM,   
                (SELECT ISNULL(BILL_TO.LGL_ADDR,'') + 
	                	(CASE WHEN ISNULL(BILL_TO.CITY_NM,'') != '' AND ISNULL(BILL_TO.STATE_CD,'') != '' AND ISNULL(BILL_TO.REP_ZIP,'') != '' THEN CHAR(13) + BILL_TO.CITY_NM + ', ' + BILL_TO.STATE_CD + ' ' + BILL_TO.REP_ZIP
					  	      WHEN ISNULL(BILL_TO.CITY_NM,'') != '' AND ISNULL(BILL_TO.STATE_CD,'') != '' AND ISNULL(BILL_TO.REP_ZIP,'') = '' THEN CHAR(13) + BILL_TO.CITY_NM + ' ' + BILL_TO.STATE_CD
						      WHEN ISNULL(BILL_TO.CITY_NM,'') != '' AND ISNULL(BILL_TO.STATE_CD,'') = '' AND ISNULL(BILL_TO.REP_ZIP,'') = '' THEN CHAR(13) + BILL_TO.CITY_NM
						      WHEN ISNULL(BILL_TO.CITY_NM,'') != '' AND ISNULL(BILL_TO.STATE_CD,'') = '' AND ISNULL(BILL_TO.REP_ZIP,'') != '' THEN CHAR(13) + BILL_TO.CITY_NM + ', ' + BILL_TO.REP_ZIP
						      ELSE '' END)
	           	 FROM TB_TRDP BILL_TO
	          	 WHERE ACT.TRDP_CD = BILL_TO.TRDP_CD) AS BILL_TO_TRDP_ADDR,
                BL.REF_NO AS BILL_TO_REF_NO,
                TRK.TRDP_CD TRUCKER_TRDP_CD,
                TRK.TRDP_NM TRUCKER_TRDP_NM,
                (SELECT B.PIC_NM  FROM TB_TRDP_CNTC_PSON B WHERE B.TRDP_CD = TRK.TRDP_CD AND B.REP_FLG = 'Y' AND B.DELT_FLG = 'N') AS TRUCKER_PIC,
  				(SELECT B.PIC_PHN  FROM TB_TRDP_CNTC_PSON B WHERE B.TRDP_CD = TRK.TRDP_CD AND B.REP_FLG = 'Y' AND B.DELT_FLG = 'N') AS TRUCKER_PHN,
  				(SELECT B.PIC_FAX  FROM TB_TRDP_CNTC_PSON B WHERE B.TRDP_CD = TRK.TRDP_CD AND B.REP_FLG = 'Y' AND B.DELT_FLG = 'N') AS TRUCKER_FAX,
				(SELECT ISNULL(TRK_TRDP.LGL_ADDR,'') + 
	                	(CASE WHEN ISNULL(TRK_TRDP.CITY_NM,'') != '' AND ISNULL(TRK_TRDP.STATE_CD,'') != '' AND ISNULL(TRK_TRDP.REP_ZIP,'') != '' THEN CHAR(13) + TRK_TRDP.CITY_NM + ', ' + TRK_TRDP.STATE_CD + ' ' + TRK_TRDP.REP_ZIP
					  	      WHEN ISNULL(TRK_TRDP.CITY_NM,'') != '' AND ISNULL(TRK_TRDP.STATE_CD,'') != '' AND ISNULL(TRK_TRDP.REP_ZIP,'') = '' THEN CHAR(13) + TRK_TRDP.CITY_NM + ' ' + TRK_TRDP.STATE_CD
						      WHEN ISNULL(TRK_TRDP.CITY_NM,'') != '' AND ISNULL(TRK_TRDP.STATE_CD,'') = '' AND ISNULL(TRK_TRDP.REP_ZIP,'') = '' THEN CHAR(13) + TRK_TRDP.CITY_NM
						      WHEN ISNULL(TRK_TRDP.CITY_NM,'') != '' AND ISNULL(TRK_TRDP.STATE_CD,'') = '' AND ISNULL(TRK_TRDP.REP_ZIP,'') != '' THEN CHAR(13) + TRK_TRDP.CITY_NM + ', ' + TRK_TRDP.REP_ZIP
						      ELSE '' END)
		         FROM TB_TRDP TRK_TRDP
		         WHERE TRK.TRDP_CD = TRK_TRDP.TRDP_CD) AS TRUCKER_TRDP_ADDR,
				<!-- #34862 - [BINEX]Work Order - Trucker 정보 Link -->
				#pickup_ref_no# AS pickup_ref_no,
		  	  	#delivery_ref_no# AS delivery_ref_no,
			    CASE WHEN LEN(BL.CY_TRDP_CD) > 0 THEN BL.CY_TRDP_CD ELSE BL.CFS_TRDP_CD END AS  PICKUP_TRDP_CD,
				(SELECT LOCL_NM FROM TB_TRDP WHERE TRDP_CD =  ISNULL(REPLACE(BL.CY_TRDP_CD,'',NULL),BL.CFS_TRDP_CD) AND DELT_FLG ='N')PICKUP_TRDP_NM,
				(SELECT ISNULL(PU_TRDP.LGL_ADDR,'') + 
	                	(CASE WHEN ISNULL(PU_TRDP.CITY_NM,'') != '' AND ISNULL(PU_TRDP.STATE_CD,'') != '' AND ISNULL(PU_TRDP.REP_ZIP,'') != '' THEN CHAR(13) + PU_TRDP.CITY_NM + ', ' + PU_TRDP.STATE_CD + ' ' + PU_TRDP.REP_ZIP
					  	      WHEN ISNULL(PU_TRDP.CITY_NM,'') != '' AND ISNULL(PU_TRDP.STATE_CD,'') != '' AND ISNULL(PU_TRDP.REP_ZIP,'') = '' THEN CHAR(13) + PU_TRDP.CITY_NM + ' ' + PU_TRDP.STATE_CD
						      WHEN ISNULL(PU_TRDP.CITY_NM,'') != '' AND ISNULL(PU_TRDP.STATE_CD,'') = '' AND ISNULL(PU_TRDP.REP_ZIP,'') = '' THEN CHAR(13) + PU_TRDP.CITY_NM
						      WHEN ISNULL(PU_TRDP.CITY_NM,'') != '' AND ISNULL(PU_TRDP.STATE_CD,'') = '' AND ISNULL(PU_TRDP.REP_ZIP,'') != '' THEN CHAR(13) + PU_TRDP.CITY_NM + ', ' + PU_TRDP.REP_ZIP
						      ELSE '' END)
		         FROM TB_TRDP PU_TRDP
		         WHERE PU_TRDP.TRDP_CD = (CASE WHEN LEN(BL.CY_TRDP_CD) > 0 THEN BL.CY_TRDP_CD ELSE BL.CFS_TRDP_CD END)) AS PICKUP_TRDP_ADDR,
				(SELECT B.PIC_NM  FROM TB_TRDP_CNTC_PSON B WHERE B.TRDP_CD = CASE WHEN LEN(BL.CY_TRDP_CD) > 0 THEN BL.CY_TRDP_CD ELSE BL.CFS_TRDP_CD END AND B.REP_FLG = 'Y' AND B.DELT_FLG = 'N') PICKUP_PIC,
				(SELECT B.PIC_PHN FROM TB_TRDP_CNTC_PSON B WHERE B.TRDP_CD = CASE WHEN LEN(BL.CY_TRDP_CD) > 0 THEN BL.CY_TRDP_CD ELSE BL.CFS_TRDP_CD END AND B.REP_FLG = 'Y' AND B.DELT_FLG = 'N') PICKUP_PHN,
				(SELECT B.PIC_FAX FROM TB_TRDP_CNTC_PSON B WHERE B.TRDP_CD = CASE WHEN LEN(BL.CY_TRDP_CD) > 0 THEN BL.CY_TRDP_CD ELSE BL.CFS_TRDP_CD END AND B.REP_FLG = 'Y' AND B.DELT_FLG = 'N') PICKUP_FAX,
				 BL.DOOR_LOC_CD DELIVERY_TRDP_CD,
				(
                    CASE 
                        WHEN ISNULL(BL.DOOR_LOC_NM,'') != '' THEN BL.DOOR_LOC_NM
                        ELSE (SELECT LOCL_NM FROM TB_TRDP WHERE TRDP_CD = BL.DOOR_LOC_CD AND DELT_FLG ='N')
                    END
                ) AS DELIVERY_TRDP_NM,
				(CASE WHEN ISNULL(TTA.TRDP_ADD_ADDR,'') != '' THEN TTA.TRDP_ADD_ADDR
				 ELSE(SELECT ISNULL(DEL_TRDP.LGL_ADDR,'') +
	                	(CASE WHEN ISNULL(DEL_TRDP.CITY_NM,'') != '' AND ISNULL(DEL_TRDP.STATE_CD,'') != '' AND ISNULL(DEL_TRDP.REP_ZIP,'') != '' THEN CHAR(13) + DEL_TRDP.CITY_NM + ', ' + DEL_TRDP.STATE_CD + ' ' + DEL_TRDP.REP_ZIP
					  	      WHEN ISNULL(DEL_TRDP.CITY_NM,'') != '' AND ISNULL(DEL_TRDP.STATE_CD,'') != '' AND ISNULL(DEL_TRDP.REP_ZIP,'') = '' THEN CHAR(13) + DEL_TRDP.CITY_NM + ' ' + DEL_TRDP.STATE_CD
						      WHEN ISNULL(DEL_TRDP.CITY_NM,'') != '' AND ISNULL(DEL_TRDP.STATE_CD,'') = '' AND ISNULL(DEL_TRDP.REP_ZIP,'') = '' THEN CHAR(13) + DEL_TRDP.CITY_NM
						      WHEN ISNULL(DEL_TRDP.CITY_NM,'') != '' AND ISNULL(DEL_TRDP.STATE_CD,'') = '' AND ISNULL(DEL_TRDP.REP_ZIP,'') != '' THEN CHAR(13) + DEL_TRDP.CITY_NM + ', ' + DEL_TRDP.REP_ZIP
						      ELSE '' END)
		         FROM TB_TRDP DEL_TRDP
		         WHERE DEL_TRDP.TRDP_CD = BL.DOOR_LOC_CD)
		         END) AS DELIVERY_TRDP_ADDR,
				(SELECT B.PIC_NM  FROM TB_TRDP_CNTC_PSON B WHERE B.TRDP_CD = BL.DOOR_LOC_CD AND B.REP_FLG = 'Y' AND B.DELT_FLG = 'N') DELIVERY_PIC,
				(SELECT B.PIC_PHN FROM TB_TRDP_CNTC_PSON B WHERE B.TRDP_CD = BL.DOOR_LOC_CD AND B.REP_FLG = 'Y' AND B.DELT_FLG = 'N') DELIVERY_PHN,
				(SELECT B.PIC_FAX FROM TB_TRDP_CNTC_PSON B WHERE B.TRDP_CD = BL.DOOR_LOC_CD AND B.REP_FLG = 'Y' AND B.DELT_FLG = 'N') DELIVERY_FAX,
				'' RETURN_TRDP_CD,
				'' RETURN_TRDP_NM,
                '' RETURN_TRDP_ADDR,
 			    '' RETURN_PIC,
				'' RETURN_PHN,
				'' RETURN_FAX      
           FROM TB_INTG_BL BL
		   LEFT OUTER JOIN TB_PCK_UT_CD PCD        
			 ON BL.PCK_UT_CD = PCD.PCK_UT_CD
		    AND PCD.DELT_FLG = 'N'
		   LEFT OUTER JOIN TB_BL_PRNR LNR
			 ON BL.INTG_BL_SEQ = LNR.INTG_BL_SEQ  
			AND LNR.BL_TRDP_TP_CD = 'L01' 
			AND LNR.DELT_FLG = 'N'
		   LEFT OUTER JOIN TB_BL_PRNR ACT            
			 ON BL.INTG_BL_SEQ = ACT.INTG_BL_SEQ  
			AND ACT.BL_TRDP_TP_CD = 'S02' 
			AND ACT.DELT_FLG = 'N'
		   LEFT OUTER JOIN TB_BL_PRNR TRK            
			 ON BL.INTG_BL_SEQ = TRK.INTG_BL_SEQ  
			AND TRK.BL_TRDP_TP_CD = 'T02' 
			AND TRK.DELT_FLG = 'N'
		   LEFT OUTER JOIN TB_TRDP_ADDR TTA ON TTA.TRDP_CD = BL.DOOR_LOC_CD
			AND TTA.TRDP_NM = BL.DOOR_LOC_NM
           WHERE BL.INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
             AND BL.DELT_FLG = 'N'
    </select>
    
    <!-- Other BL 요약 정보를 리턴함   -->
    <select id="selectOth_BL_SMRY" parameterClass="HashMap" resultClass="HBLInfoVO">
    /* BlCmmSQL.xml > selectOth_BL_SMRY */
        SELECT
        bl.oth_seq as intg_bl_seq,
        '' bkg_no,
        bl.hbl_no bl_no,
        '' rep_cmdt_cd,
        '' rep_cmdt_nm,
        bl.pck_qty,
        bl.pck_ut_cd,
        '' pck_ut_nm,
        bl.grs_wgt_l as grs_wgt,
        bl.GRS_WGT_K as grs_wgt1,
        '' grs_wgt_ut_cd,
        '' chg_wgt,
        '' chg_wgt_ut_cd,
        '' act_wgt,
        '' act_wgt_ut_cd,
        bl.meas_m as meas,
        bl.meas_f meas1,
        '' meas_ut_cd,
        '' por_cd,
        '' AS por_nod_cd,
        '' por_nm,
        bl.pol_cd,
        '' pol_nod_cd,
        bl.pol_nm,
        bl.pod_cd,
        '' pod_nod_cd,
        bl.pod_nm,
        '' del_cd,
        '' del_nod_cd,
        '' del_nm,
        '' iss_loc_cd,
        '' iss_loc_nm,
        '' pay_loc_cd,
        '' pay_loc_nm,
        '' fnl_dest_loc_cd,
        '' fnl_dest_nod_cd,
        '' fnl_dest_loc_nm,
        '' cgo_rcv_dt_tm,
        '' cfs_loc_cd,
        '' cfs_nod_cd,
        '' de_due_dt,
        '' pre_vsl_cd,
        '' pre_vsl_nm,
        '' pre_voy,
        '' trnk_vsl_cd,
        '' trnk_vsl_nm,
        '' trnk_voy,
        '' cgo_clz_dt_tm,
        '' obrd_dt_tm,
        bl.etd_dt_tm,
        bl.eta_dt_tm,
        '' lnr_bkg_no,
        lnr.trdp_cd AS lnr_trdp_cd,
        lnr.trdp_nm AS lnr_trdp_nm,
        '' rmk                           
    FROM
        TB_OTH_SALES bl 
    LEFT OUTER JOIN
        tb_bl_prnr lnr            
            ON   bl.oth_seq = lnr.intg_bl_seq  
            AND lnr.bl_trdp_tp_cd = 'L01' 
            AND lnr.delt_flg = 'N'                  
    WHERE
        bl.ref_no =  #oth_ref_no#
    </select>
    
    <!--BL과 관련된 거래처 정보를 조회  -->
    <select id="selectTRDP_CD_LIST" parameterClass="HashMap" resultClass="BlCmmVO">
        SELECT  shp.trdp_cd AS shpr_trdp_cd,
                cne.trdp_cd AS cnee_trdp_cd,
                ntf.trdp_cd AS ntfy_trdp_cd,
                act.trdp_cd AS act_shpr_trdp_cd,  
                lnr.trdp_cd AS lnr_trdp_cd,
                ptn.trdp_cd AS prnr_trdp_cd,
                
                agent.trdp_cd AS agent_trdp_cd,
                third.trdp_cd AS third_trdp_cd,
                ptn2.trdp_cd AS prnr_trdp_cd2,
                
                cust.trdp_cd AS cust_trdp_cd,
                carr.trdp_cd AS carr_trdp_cd,
                
                iss.trdp_cd AS iss_trdp_cd,

                trk.trdp_cd AS trk_trdp_cd,

                vndr.trdp_cd AS vndr_trdp_cd,
                
                cgo_pu.trdp_cd AS cgo_pu_trdp_cd,
                
                wh.trdp_cd AS wh_trdp_cd,
                
                ISNULL(shp.trdp_nm, '') AS shpr_trdp_nm,
                ISNULL(cne.trdp_nm, '') AS cnee_trdp_nm,
                ISNULL(ntf.trdp_nm, '') AS ntfy_trdp_nm,
                ISNULL(act.trdp_nm, '') AS act_shpr_trdp_nm,  
                ISNULL(lnr.trdp_nm, '') AS lnr_trdp_nm,
                ISNULL(ptn.trdp_nm, '') AS prnr_trdp_nm,
                
                ISNULL(agent.trdp_nm, '') AS agent_trdp_nm,
                ISNULL(third.trdp_nm, '') AS third_trdp_nm,
                ISNULL(ptn2.trdp_nm, '') AS prnr_trdp_nm2,
                
                ISNULL(cust.trdp_nm, '') AS cust_trdp_nm,
                ISNULL(carr.trdp_nm, '') AS carr_trdp_nm,
                
                ISNULL(iss.trdp_nm, '') AS iss_trdp_nm,

                ISNULL(trk.trdp_nm, '') AS trk_trdp_nm,

                ISNULL(vndr.trdp_nm, '') AS vndr_trdp_nm,
                
                ISNULL(cgo_pu.trdp_nm, '') AS cgo_pu_trdp_nm,
                
                ISNULL(wh.trdp_nm, '') AS wh_trdp_nm,
                
                ISNULL(shp.trdp_addr, '') AS shpr_trdp_addr,
                ISNULL(cne.trdp_addr, '') AS cnee_trdp_addr,
                ISNULL(ntf.trdp_addr, '') AS ntfy_trdp_addr,
                ISNULL(act.trdp_addr, '') AS act_shpr_trdp_addr,  
                ISNULL(lnr.trdp_addr, '') AS lnr_trdp_addr,
                ISNULL(ptn.trdp_addr, '') AS prnr_trdp_addr,
                
                ISNULL(agent.trdp_addr, '') AS agent_trdp_addr,
                ISNULL(third.trdp_addr, '') AS third_trdp_addr,
                ISNULL(ptn2.trdp_addr, '') AS prnr_trdp_addr2,
                
                ISNULL(cust.trdp_addr, '') AS cust_trdp_addr,
                ISNULL(carr.trdp_addr, '') AS carr_trdp_addr,
                
                ISNULL(iss.trdp_addr, '') AS iss_trdp_addr,

                ISNULL(trk.trdp_addr, '') AS trk_trdp_addr,

                ISNULL(vndr.trdp_addr, '') AS vndr_trdp_addr,
                
                ISNULL(cgo_pu.trdp_addr, '') AS cgo_pu_trdp_addr,
                
                ISNULL(wh.trdp_addr, '') AS wh_trdp_addr

         FROM   tb_intg_bl bl
        
         JOIN   tb_add_info_bnd bnd
           ON   bl.intg_bl_seq = bnd.intg_bl_seq AND bnd.bnd_clss_cd = #bnd_clss_cd#   AND bnd.delt_flg = 'N'
        
LEFT OUTER JOIN tb_bl_prnr act
           ON   bl.intg_bl_seq = act.intg_bl_seq  AND act.bl_trdp_tp_cd = 'S02' AND act.delt_flg = 'N'
        
LEFT OUTER JOIN tb_bl_prnr shp
           ON   bl.intg_bl_seq = shp.intg_bl_seq  AND shp.bl_trdp_tp_cd = 'S01' AND shp.delt_flg = 'N'
         
LEFT OUTER JOIN tb_bl_prnr cne
           ON   bl.intg_bl_seq = cne.intg_bl_seq  AND cne.bl_trdp_tp_cd = 'C01' AND cne.delt_flg = 'N'

LEFT OUTER JOIN tb_bl_prnr ntf
           ON   bl.intg_bl_seq = ntf.intg_bl_seq  AND ntf.bl_trdp_tp_cd = 'N01' AND ntf.delt_flg = 'N'

LEFT OUTER JOIN tb_bl_prnr lnr
           ON   bl.intg_bl_seq = lnr.intg_bl_seq  AND lnr.bl_trdp_tp_cd = 'L01' AND lnr.delt_flg = 'N'

LEFT OUTER JOIN tb_bl_prnr ptn
           ON   bl.intg_bl_seq = ptn.intg_bl_seq  AND ptn.bl_trdp_tp_cd = 'P01' AND ptn.delt_flg = 'N'

LEFT OUTER JOIN tb_bl_prnr agent
           ON   bl.intg_bl_seq = agent.intg_bl_seq  AND agent.bl_trdp_tp_cd = 'A01' AND agent.delt_flg = 'N'
           
LEFT OUTER JOIN tb_bl_prnr third
           ON   bl.intg_bl_seq = third.intg_bl_seq  AND third.bl_trdp_tp_cd = 'T01' AND third.delt_flg = 'N'           
           
LEFT OUTER JOIN tb_bl_prnr ptn2
           ON   bl.intg_bl_seq = ptn2.intg_bl_seq  AND ptn2.bl_trdp_tp_cd = 'P03' AND ptn2.delt_flg = 'N'

LEFT OUTER JOIN tb_bl_prnr carr
           ON   bl.intg_bl_seq = carr.intg_bl_seq  AND carr.bl_trdp_tp_cd = 'B01' AND carr.delt_flg = 'N'
           
LEFT OUTER JOIN tb_bl_prnr cust
           ON   bl.intg_bl_seq = cust.intg_bl_seq  AND cust.bl_trdp_tp_cd = 'C03' AND cust.delt_flg = 'N'     

LEFT OUTER JOIN tb_bl_prnr iss
           ON   bl.intg_bl_seq = iss.intg_bl_seq  AND iss.bl_trdp_tp_cd = 'I01' AND iss.delt_flg = 'N'     

LEFT OUTER JOIN tb_bl_prnr trk
           ON   bl.intg_bl_seq = trk.intg_bl_seq  AND trk.bl_trdp_tp_cd = 'T02' AND trk.delt_flg = 'N'     

LEFT OUTER JOIN tb_bl_prnr vndr
           ON   bl.intg_bl_seq = vndr.intg_bl_seq  AND vndr.bl_trdp_tp_cd = 'V01' AND vndr.delt_flg = 'N'
           
LEFT OUTER JOIN tb_bl_prnr cgo_pu
           ON   bl.intg_bl_seq = cgo_pu.intg_bl_seq  AND cgo_pu.bl_trdp_tp_cd = 'S03' AND cgo_pu.delt_flg = 'N'           
           
LEFT OUTER JOIN tb_bl_prnr wh
           ON   bl.intg_bl_seq = wh.intg_bl_seq  AND wh.bl_trdp_tp_cd = 'WH' AND wh.delt_flg = 'N'                

        WHERE bl.delt_flg = 'N' AND bl.intg_bl_seq = cast(#intg_bl_seq# as varchar)
    </select>
    
<!-- BL PARTNER 등록  -->
    <insert id="insertBL_PRNR" parameterClass="HashMap">
        INSERT INTO tb_bl_prnr(                                                      
              intg_bl_seq,          bl_trdp_tp_cd,    
              trdp_cd,              trdp_addr,          trdp_nm,
              
              trdp_pic_usr_id,      trdp_pic,           trdp_phn,      trdp_fax,     trdp_eml,
              
              rgst_usrid,           rgst_ofc_cd,        rgst_tms,        
              modi_usrid,           modi_ofc_cd,        modi_tms,      delt_flg                                                       
        ) SELECT  #intg_bl_seq#,    #bl_trdp_tp_cd#, 
                  #trdp_cd#,        UPPER(#trdp_addr#),  #trdp_nm#,
                  b.cntc_pson_seq,  b.pic_nm,            b.pic_phn,    b.pic_fax,    b.pic_eml,
                  #proc_usrid#,     #proc_ofccd#,        getdate(),
                  #proc_usrid#,     #proc_ofccd#,        GETUTCDATE(),    'N'
            FROM  tb_trdp a 
 LEFT OUTER JOIN  tb_trdp_cntc_pson b
              ON  a.trdp_cd=b.trdp_cd 
             AND  b.cntc_pson_seq = ( SELECT MIN(cntc_pson_seq)  
                                        FROM tb_trdp_cntc_pson
                                        <!-- OFVFOUR-7767: [PQC][OEH B/L Entry] The phone number on 'To' field on Shipping Advice show wrong in case user checked from record 2 at Contract Person-->
                                       WHERE delt_flg = 'N' AND trdp_cd = a.trdp_cd AND rep_flg = 'Y')
             AND  a.delt_flg = 'N'
           WHERE  a.trdp_cd = #trdp_cd# 
           /* AND a.delt_flg = 'N' */
    </insert>
    
    <insert id="insertBlPrnrByAutoAEM" parameterClass="HashMap">
        INSERT INTO tb_bl_prnr(                                                      
              intg_bl_seq,          bl_trdp_tp_cd,    
              trdp_cd,              trdp_addr,          trdp_nm,
              
              trdp_pic_usr_id,      trdp_pic,           trdp_phn,      trdp_fax,     trdp_eml,
              
              rgst_usrid,           rgst_ofc_cd,        rgst_tms,        
              modi_usrid,           modi_ofc_cd,        modi_tms,      delt_flg                                                       
        ) SELECT  #intg_bl_seq#,    #bl_trdp_tp_cd#, 
                  #trdp_cd#,        UPPER(#trdp_addr#),  (SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = #trdp_cd#),
                  b.cntc_pson_seq,  b.pic_nm,            b.pic_phn,    b.pic_fax,    b.pic_eml,
                  #proc_usrid#,     #proc_ofccd#,        getdate(),
                  #proc_usrid#,     #proc_ofccd#,        GETUTCDATE(),    'N'
            FROM  tb_trdp a 
 			LEFT OUTER JOIN  tb_trdp_cntc_pson b
              ON  a.trdp_cd=b.trdp_cd 
             AND  b.cntc_pson_seq = ( SELECT MIN(cntc_pson_seq)  
                                        FROM tb_trdp_cntc_pson
        <!-- OFVFOUR-7767: [PQC][OEH B/L Entry] The phone number on 'To' field on Shipping Advice show wrong in case user checked from record 2 at Contract Person -->
                                       WHERE delt_flg = 'N' AND trdp_cd = a.trdp_cd AND rep_flg = 'Y')
             AND  a.delt_flg = 'N'
           WHERE  a.trdp_cd = #trdp_cd# 
           /* AND a.delt_flg = 'N' */
    </insert>

    <!--거래처 수정  -->
    <!-- OFVFOUR-7699: [ANX SHIPPING] Logic of phone number on 'To' field on Shipping Advice -->
    <update id="updateBL_PRNR" parameterClass="HashMap">
        UPDATE  tb_bl_prnr                                                      
           SET  trdp_addr   = UPPER(#trdp_addr#),    trdp_nm  = #trdp_nm#, trdp_cd = #trdp_cd#,
         		trdp_pic_usr_id = b.cntc_pson_seq, trdp_pic = b.pic_nm, trdp_phn = b.pic_phn, trdp_fax = b.pic_fax, trdp_eml = b.pic_eml
		FROM tb_trdp a
	LEFT OUTER JOIN tb_trdp_cntc_pson b
		ON a.trdp_cd = b.trdp_cd
		AND b.cntc_pson_seq = (SELECT MIN(cntc_pson_seq)
						FROM tb_trdp_cntc_pson
						<!-- OFVFOUR-7767: [PQC][OEH B/L Entry] The phone number on 'To' field on Shipping Advice show wrong in case user checked from record 2 at Contract Person -->
						WHERE delt_flg = 'N' AND trdp_cd = a.trdp_cd AND rep_flg = 'Y')
		AND a.delt_flg = 'N'
		WHERE a.trdp_cd = #trdp_cd# AND intg_bl_seq = cast (#intg_bl_seq# as varchar) AND bl_trdp_tp_cd = #bl_trdp_tp_cd#
    </update>
    
    <update id="updatePIC_NAME" parameterClass="HashMap">
        UPDATE  tb_bl_prnr                                                      
           SET  trdp_pic   =#trdp_pic#
         WHERE  intg_bl_seq = cast(#intg_bl_seq# as varchar)   AND  bl_trdp_tp_cd = #bl_trdp_tp_cd#
    </update>
    
    <!--거래처 삭제  -->
    <delete id="deleteBL_PRNR" parameterClass="HashMap">
        DELETE  tb_bl_prnr                                                      
         WHERE  intg_bl_seq = cast(#intg_bl_seq# as varchar)   AND  bl_trdp_tp_cd = #bl_trdp_tp_cd#
    </delete>
    
    <update id="updateHBLPol" parameterClass="HashMap">
        /* BlCmmSQL.xml -- updateHBLPol  */
        UPDATE  tb_intg_bl                                                      
           SET  pol_cd   = #pol_cd#
               ,pol_nm   = #pol_nm#
         WHERE  intg_bl_seq = cast(#intg_bl_seq# as varchar)
    </update>
    
    <update id="updateHBLPod" parameterClass="HashMap">
    	/* BlCmmSQL.xml -- updateHBLPod  */
        UPDATE  tb_intg_bl                                                      
           SET  pod_cd   = #pod_cd#
               ,pod_nm   = #pod_nm#
         WHERE  intg_bl_seq = cast(#intg_bl_seq# as varchar)
    </update>
    
    <!-- BL추가정보 테이블   -->
    <insert id="insertADD_INFO_BND" parameterClass="HashMap">
        INSERT INTO tb_add_info_bnd( 
            intg_bl_seq,     bnd_clss_cd,      jb_tmplt_seq,
            clz_flg,         cfm_flg,
            sls_ofc_cd,      sls_dept_cd,      sls_usrid,     sls_usr_nm,     pic_usrid,   
            rgst_usrid,      rgst_ofc_cd,      rgst_tms,        
            modi_usrid,      modi_ofc_cd,      modi_tms,      delt_flg,		  item_no,
            fst_to_cd,		 fst_to_nm,  
            exp_frt_desc,	 hbl_ser_no,
            ts1_port_cd,     ts1_port_nm,      ts1_etd_dt_tm, 	ts1_eta_dt_tm,
            issued_by,		 ctrb_ofc_cd, 	   ctrb_dept_cd, 	ctrb_ratio_yn,    ctrb_mgn ,state_cnt_cd, certi_sts_cd, certi_hndl_info
            ,doc_form
            <!-- #30 #52843 - [IMPEX] 독일 지점 OPUS 기능 추가 관련의 건 -->
            , surrend,		 ucr_no,		   mrn_no,			intg_bkg_seq
            , port_open_dt    ,vgm_cut_off_dt
			,svc_lane_nm     <!--  #943  [PATENT] Lane 추가  -->
			,first_port_nm <!--#1619 [CLT] Original B/L Type- 항목 정리,  bl_rlse_tp_cd   --><!--#1430 [PATENT] 0215_15 B/L TYPE DIVERSELY  -->
			,pkup_dt <!--#1743 [PATENT]OEM B/L Pickup Date/Time 필요  -->
			<!-- #2109 [PATENT] PAYMENT VERIFICATION 화면 로직 보완 -->
			,verify_dt_tm
			,inter_use_flag   <!-- #657 [OCEAN BLUE, IMPEX] B/L SELECTION FLAG TO SHOW ON VISIBILITY PORTAL -->
			,bk_usrid <!-- #1423 -->
			<!-- #3608 [JTC]OEH Entry 에 DOC Cut-Off Date 추가 -->
			,hbl_cut_off_dt
			<!-- #4128 [JAPT] New request - OEH TRI#, TLI# -->
			,tli_no
			,org_tp, org_cd
        <!-- OFVFOUR-7976: [MATRIX] ADDING CS PIC ON ALL B/L ENTRY AND TRADE PARTNER ENTRY SCREEN -->
			,cs_usrid ,cs_usr_nm
        )
		SELECT 
            #intg_bl_seq#,   #bnd_clss_cd#,    #jb_tmplt_seq#,
            'N',             'N',         
            #sls_ofc_cd#,    #sls_dept_cd#,    #sls_usrid#,   #sls_usr_nm#,     #pic_usrid#,
            #proc_usrid#,    #proc_ofccd#,     getdate(),            
            #proc_usrid#,    #proc_ofccd#,     GETUTCDATE(),     'N',			#item_no#,
            #fst_to_cd#,	 #fst_to_nm#,
            #exp_frt_desc#,  #hbl_ser_no#,
            #ts1_port_cd#,   #ts1_port_nm#,    #ts1_etd_dt_tm#,	 #ts1_eta_dt_tm#,
            #issued_by#,	 #ctrb_ofc_cd#,    #ctrb_dept_cd#,   #ctrb_ratio_yn#,  #ctrb_mgn#,#state_cnt_cd#, #certi_sts_cd#, #certi_hndl_info#
            
            ,#doc_form#
            <!-- #30 #52843 - [IMPEX] 독일 지점 OPUS 기능 추가 관련의 건 -->
            ,#surrend#,		 #ucr_no#,		   #mrn_no#,		#bkg_seq#
            ,#port_open_dt#    ,#vgm_cut_off_dt#
            ,#svc_lane_nm#     <!--  #943  [PATENT] Lane 추가  -->
            ,#first_port_nm#<!-- #1619 [CLT] Original B/L Type- 항목 정리 , #bl_rlse_tp_cd#--> <!--#1430 [PATENT] 0215_15 B/L TYPE DIVERSELY  -->
            ,#pkup_dt#
            <!-- #2109 [PATENT] PAYMENT VERIFICATION 화면 로직 보완 -->
					,(CASE WHEN 'Y' = (SELECT ISNULL(VERIFY_FLAG,'') FROM TB_ADD_INFO_BND WHERE intg_bl_seq = cast(#intg_bl_seq# as varchar)) 
					     THEN (SELECT verify_dt_tm FROM TB_ADD_INFO_BND WHERE intg_bl_seq = cast(#intg_bl_seq# as varchar)) 
					     ELSE
						(CASE WHEN '1' = (SELECT ISNULL(OPT_VAL,'') FROM TB_SYS_OPT WHERE OPT_KEY =  'PAY_VERIFY_OPT') 
						      THEN (SELECT CONVERT(VARCHAR, CONVERT(DATETIME, SUBSTRING(OBRD_DT_TM, 1, 8)), 23) FROM TB_INTG_BL WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar))
	            	          WHEN '2' = (SELECT ISNULL(OPT_VAL,'') FROM TB_SYS_OPT WHERE OPT_KEY =  'PAY_VERIFY_OPT') 
	            	          THEN
		            	   		(CASE WHEN '1' = (SELECT COUNT(INTG_BL_SEQ) FROM TB_INTG_BL WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar) AND HBL_TP_CD IN ('DR','FW','DT')) 
		            	   		      THEN
				            	   		 (CASE WHEN 'O' = (SELECT ISNULL(OBL_TP_CD, '') FROM TB_INTG_BL WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)) 
				            	   		       THEN (SELECT CONVERT(VARCHAR, DATEADD(D,-1,CONVERT(DATETIME, SUBSTRING(ETD_DT_TM, 1, 8))),23) FROM TB_INTG_BL WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar))
				            	   		       ELSE (SELECT CONVERT(VARCHAR, DATEADD(D,-7,CONVERT(DATETIME, SUBSTRING(ETA_DT_TM, 1, 8))),23) FROM TB_INTG_BL WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar))
				            	   		  END)
		            	   		     ELSE (SELECT CONVERT(VARCHAR, DATEADD(D,-7,CONVERT(DATETIME, SUBSTRING(ETA_DT_TM, 1, 8))),23) FROM TB_INTG_BL WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)) 
		            	   		END)
	              			  ELSE '' 
	              		END)
	              	END)
            , #inter_use_flag# <!-- #657 [OCEAN BLUE, IMPEX] B/L SELECTION FLAG TO SHOW ON VISIBILITY PORTAL -->
			<!-- #1423 -->
            ,#bk_usrid#
			<!-- #3608 [JTC]OEH Entry 에 DOC Cut-Off Date 추가 -->
			,#hbl_cut_off_dt#       
			<!-- #4128 [JAPT] New request - OEH TRI#, TLI# -->
			,#tli_no#
			,#org_tp#
			,#org_cd#
			<!-- OFVFOUR-7976: [MATRIX] ADDING CS PIC ON ALL B/L ENTRY AND TRADE PARTNER ENTRY SCREEN -->
			,#cs_usrid#
			,#cs_usr_nm#
            FROM TB_INTG_BL
            WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
    </insert>
    
    <!-- 추가정보 테이블을 업데이트함   -->
    <update id="updateADD_INFO_BND" parameterClass="HBLInfoVO">
        UPDATE  tb_add_info_bnd
           SET  sls_ofc_cd  = #sls_ofc_cd#,		sls_dept_cd = #sls_dept_cd#, 
                sls_usrid   = #sls_usrid#,      sls_usr_nm  = #sls_usr_nm#,
                modi_usrid  = #proc_usrid#,     modi_ofc_cd = #proc_ofccd#,    
                modi_tms    = GETUTCDATE(),		item_no = #item_no#,
                fst_to_cd   = #fst_to_cd#,      fst_to_nm = #fst_to_nm#,
                exp_frt_desc = #exp_frt_desc#,
                ts1_port_cd = #ts1_port_cd#,  ts1_port_nm = #ts1_port_nm#,
                ts1_etd_dt_tm = #ts1_etd_dt_tm#,  ts1_eta_dt_tm = #ts1_eta_dt_tm#
                ,issued_by = #issued_by#
                ,hbl_ser_pfx = #hbl_ser_pfx#
                ,hbl_ser_no = #hbl_ser_no#
                ,ctrb_ofc_cd = #ctrb_ofc_cd#
				,ctrb_dept_cd = #ctrb_dept_cd#
				,ctrb_ratio_yn = #ctrb_ratio_yn#
				,ctrb_mgn = #ctrb_mgn#
				,state_cnt_cd = #state_cnt_cd#
				,cfs_rmk = #cfs_rmk#
				,entr_no = #entr_no#
				,csms_rlse_dt = #csms_rlse_dt#
				,pkup_dt = #pkup_dt#
				,doc_form = #doc_form#
				<!-- #30 #52843 - [IMPEX] 독일 지점 OPUS 기능 추가 관련의 건 -->
				,surrend = #surrend#
				,mrn_no = #mrn_no#
				,intg_bkg_seq = #bkg_seq#
				,port_open_dt = #port_open_dt#
				,vgm_cut_off_dt = #vgm_cut_off_dt#
				,svc_lane_nm = #svc_lane_nm#
				<!-- #1619 [CLT] Original B/L Type- 항목 정리,bl_rlse_tp_cd = #bl_rlse_tp_cd# --> <!--#1430 [PATENT] 0215_15 B/L TYPE DIVERSELY  -->
				
				<!-- #2109 [PATENT] PAYMENT VERIFICATION 화면 로직 보완 -->
				,verify_dt_tm = (
					CASE WHEN 'Y' = (SELECT ISNULL(VERIFY_FLAG,'') FROM TB_ADD_INFO_BND WHERE intg_bl_seq = cast(#intg_bl_seq# as varchar)) 
					     THEN (SELECT verify_dt_tm FROM TB_ADD_INFO_BND WHERE intg_bl_seq = cast(#intg_bl_seq# as varchar)) 
					     ELSE
						(CASE WHEN '1' = (SELECT ISNULL(OPT_VAL,'') FROM TB_SYS_OPT WHERE OPT_KEY =  'PAY_VERIFY_OPT') 
						      THEN (SELECT CONVERT(VARCHAR, CONVERT(DATETIME, SUBSTRING(OBRD_DT_TM, 1, 8)), 23) FROM TB_INTG_BL WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar))
	            	          WHEN '2' = (SELECT ISNULL(OPT_VAL,'') FROM TB_SYS_OPT WHERE OPT_KEY =  'PAY_VERIFY_OPT') 
	            	          THEN
		            	   		(CASE WHEN '1' = (SELECT COUNT(INTG_BL_SEQ) FROM TB_INTG_BL WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar) AND HBL_TP_CD IN ('DR','FW','DT')) 
		            	   		      THEN
				            	   		 (CASE WHEN 'O' = (SELECT ISNULL(OBL_TP_CD, '') FROM TB_INTG_BL WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)) 
				            	   		       THEN (SELECT CONVERT(VARCHAR, DATEADD(D,-1,CONVERT(DATETIME, SUBSTRING(ETD_DT_TM, 1, 8))),23) FROM TB_INTG_BL WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar))
				            	   		       ELSE (SELECT CONVERT(VARCHAR, DATEADD(D,-7,CONVERT(DATETIME, SUBSTRING(ETA_DT_TM, 1, 8))),23) FROM TB_INTG_BL WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar))
				            	   		  END)
		            	   		     ELSE (SELECT CONVERT(VARCHAR, DATEADD(D,-7,CONVERT(DATETIME, SUBSTRING(ETA_DT_TM, 1, 8))),23) FROM TB_INTG_BL WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)) 
		            	   		END)
	              			  ELSE '' 
	              		END)
	              	END
              	)
              	,inter_use_flag = #inter_use_flag#  <!-- #657 [OCEAN BLUE, IMPEX] B/L SELECTION FLAG TO SHOW ON VISIBILITY PORTAL -->
				<!-- #3608 [JTC]OEH Entry 에 DOC Cut-Off Date 추가 -->
              	,hbl_cut_off_dt = #hbl_cut_off_dt#
              	
              	<!-- #4128 [JAPT] New request - OEH TRI#, TLI# -->
              	,tli_no = #tli_no#
              	<!-- OFVFOUR-7976: [MATRIX] ADDING CS PIC ON ALL B/L ENTRY AND TRADE PARTNER ENTRY SCREEN -->
                ,cs_usrid   = #cs_usrid#
                ,cs_usr_nm  = #cs_usr_nm#
         WHERE  intg_bl_seq = cast(#intg_bl_seq# as varchar)
    </update>
    
    <!-- #27545 [BINEX] OIM Issued by를 수정하면 OIM, OIH Entry의 Issued by를 자동 반영(변경)   -->
    <update id="updateADD_INFO_BND_ISSBY" parameterClass="HBLInfoVO">
    	/* BlCmmSQL.xml -- updateADD_INFO_BND_ISSBY  */
        UPDATE  tb_add_info_bnd
           SET  modi_usrid  = #proc_usrid#, modi_ofc_cd = #proc_ofccd#,    
                modi_tms    = GETUTCDATE(), issued_by = #issued_by#
         WHERE  intg_bl_seq = cast(#intg_bl_seq# as varchar)
    </update>
    
    <update id="updateADD_INFO_BND_MRN" parameterClass="HBLInfoVO">
    	/* BlCmmSQL.xml -- updateADD_INFO_BND_MRN  */
        UPDATE  tb_add_info_bnd
           SET  modi_usrid  = #proc_usrid#, modi_ofc_cd = #proc_ofccd#,    
                modi_tms    = GETUTCDATE(), mrn_no = #mrn_no#
         WHERE  intg_bl_seq = cast(#intg_bl_seq# as varchar)
    </update>
    

	<!-- #141 #49037 - [IMPEX] OIH COPY후 OIM FILING# 입력 후 | {CO} MB/L and HB/L, MAWB and HAWB items copy rule opti -->
    <update id="updateHblADD_INFO_BND" parameterClass="HBLInfoVO">
    	/* BlCmmSQL.xml -- updateHblADD_INFO_BND  */
        UPDATE  tb_add_info_bnd
           SET  modi_usrid  = #proc_usrid#,
                modi_ofc_cd = #proc_ofccd#,
                modi_tms    = GETUTCDATE(), 
                ctrb_dept_cd  = #ctrb_dept_cd#,
                ctrb_ofc_cd   = #ctrb_ofc_cd#,
                ctrb_ratio_yn = #ctrb_ratio_yn#,
                ctrb_mgn      = #ctrb_mgn#
         WHERE  intg_bl_seq = cast(#intg_bl_seq# as varchar)
    </update>
    
    <!-- MST 추가정보 테이블을 업데이트함   -->
    <update id="updateMST_ADD_INFO_BND" parameterClass="HashMap">
        /* BlCmmSQL.xml -- updateMST_ADD_INFO_BND  */
        UPDATE  tb_add_info_bnd
           SET  sls_ofc_cd  = #sls_ofc_cd#,		sls_dept_cd = #sls_dept_cd#, 
                sls_usrid   = #sls_usrid#,      sls_usr_nm  = #sls_usr_nm#, modi_usrid  = #proc_usrid#,
                <!-- OFVFOUR-7976: [MATRIX] ADDING CS PIC ON ALL B/L ENTRY AND TRADE PARTNER ENTRY SCREEN -->
                cs_usrid   = #cs_usrid#,      cs_usr_nm  = #cs_usr_nm#,
                modi_ofc_cd = #proc_ofccd#, 	modi_tms    = GETUTCDATE()		,issued_by = #issued_by#,
                ctrb_ofc_cd = #ctrb_ofc_cd#,
				ctrb_dept_cd = #ctrb_dept_cd#,
				ctrb_ratio_yn = #ctrb_ratio_yn#,
				ctrb_mgn = #ctrb_mgn#,
				cfs_rmk = #cfs_rmk#,
				mrn_no = #mrn_no#,
				intg_bkg_seq = #bkg_seq#,
				port_open_dt = #port_open_dt#,
				vgm_cut_off_dt = #vgm_cut_off_dt#,
				<!-- #1743 [PATENT]OEM B/L Pickup Date/Time 필요 -->
				pkup_dt = #pkup_dt#,
				svc_lane_nm  = #svc_lane_nm#,   <!--  #943  [PATENT] Lane 추가  -->
				ts1_port_cd = #ts1_port_cd#,
				ts1_port_nm = #ts1_port_nm#,
				ts1_etd_dt_tm = #ts1_etd_dt_tm#,
				ts1_eta_dt_tm = #ts1_eta_dt_tm#
				<!--#1619 [CLT] Original B/L Type- 항목 정리 ,bl_rlse_tp_cd = #bl_rlse_tp_cd#  --><!--#1430 [PATENT] 0215_15 B/L TYPE DIVERSELY  -->
				
				<!-- #2109 [PATENT] PAYMENT VERIFICATION 화면 로직 보완 -->
					,verify_dt_tm = (
					CASE WHEN 'Y' = (SELECT ISNULL(VERIFY_FLAG,'') FROM TB_ADD_INFO_BND WHERE intg_bl_seq = cast(#intg_bl_seq# as varchar)) 
					     THEN (SELECT verify_dt_tm FROM TB_ADD_INFO_BND WHERE intg_bl_seq = cast(#intg_bl_seq# as varchar)) 
					     ELSE
						(CASE WHEN '1' = (SELECT ISNULL(OPT_VAL,'') FROM TB_SYS_OPT WHERE OPT_KEY =  'PAY_VERIFY_OPT') 
						      THEN (SELECT CONVERT(VARCHAR, CONVERT(DATETIME, SUBSTRING(OBRD_DT_TM, 1, 8)), 23) FROM TB_INTG_BL WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar))
	            	          WHEN '2' = (SELECT ISNULL(OPT_VAL,'') FROM TB_SYS_OPT WHERE OPT_KEY =  'PAY_VERIFY_OPT') 
	            	          THEN
		            	   		(CASE WHEN '1' = (SELECT COUNT(INTG_BL_SEQ) FROM TB_INTG_BL WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar) AND HBL_TP_CD IN ('DR','FW','DT')) 
		            	   		      THEN
				            	   		 (CASE WHEN 'O' = (SELECT ISNULL(OBL_TP_CD, '') FROM TB_INTG_BL WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)) 
				            	   		       THEN (SELECT CONVERT(VARCHAR, DATEADD(D,-1,CONVERT(DATETIME, SUBSTRING(ETD_DT_TM, 1, 8))),23) FROM TB_INTG_BL WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar))
				            	   		       ELSE (SELECT CONVERT(VARCHAR, DATEADD(D,-7,CONVERT(DATETIME, SUBSTRING(ETA_DT_TM, 1, 8))),23) FROM TB_INTG_BL WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar))
				            	   		  END)
		            	   		     ELSE (SELECT CONVERT(VARCHAR, DATEADD(D,-7,CONVERT(DATETIME, SUBSTRING(ETA_DT_TM, 1, 8))),23) FROM TB_INTG_BL WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)) 
		            	   		END)
	              			  ELSE '' 
	              		END)
	              	END
              		)
              	<!-- #657 [OCEAN BLUE, IMPEX] B/L SELECTION FLAG TO SHOW ON VISIBILITY PORTAL -->
              , inter_use_flag = #inter_use_flag#
              , item_no =#item_no#
              , org_tp = #org_tp#
              , org_cd = #org_cd#
         WHERE  intg_bl_seq = cast(#intg_bl_seq# as varchar)
    </update>
    
    <!-- Work Flow 템플릿을 등록한다   -->
    <procedure id="insertWRK_FLOW" parameterClass="HashMap">
         { CALL SP_BL_JBTMPL(#intg_bl_seq#, #jb_tmplt_seq#, #proc_usrid#, #proc_ofccd#) } 
    </procedure>
    
    <!-- BL처리에 따라 처리 상태를 업데이트 한다   -->
    <update id="updateWRK_FLOW" parameterClass="HashMap">
        UPDATE  tb_wrk_flow
           SET  jb_act_dt_tm= getdate(),
                modi_usrid  = #proc_usrid#,     modi_ofc_cd = #proc_ofccd#,    
                modi_tms    = GETUTCDATE()
         WHERE  intg_bl_seq = cast(#intg_bl_seq# as varchar) AND jb_sts_cd = #bl_sts_cd#
    </update>
        
    <!-- SR에서 업데이트 처리에 따라 처리 상태를 업데이트 한다   -->
    <update id="updateSR_WRK_FLOW" parameterClass="com.clt.apps.fis.see.bmd.shippingreq.dto.ShippingReqVO">
        UPDATE  tb_wrk_flow
           SET  jb_act_dt_tm= getdate(),
                modi_usrid  = #proc_usrid#,     modi_ofc_cd = #proc_ofccd#,    
                modi_tms    = GETUTCDATE()
         WHERE  intg_bl_seq = cast(#intg_bl_seq# as varchar) AND jb_sts_cd = #bl_sts_cd#
    </update>

    <!-- MBL 생성시 Work Flow 처리 상태를 업데이트 한다   -->
    <update id="updateMBL_WRK_FLOW" parameterClass="HashMap">
        UPDATE  tb_wrk_flow
           SET  jb_act_dt_tm= getdate(),
                modi_usrid  = #proc_usrid#,     modi_ofc_cd = #proc_ofccd#,    
                modi_tms    = GETUTCDATE()
         WHERE  intg_bl_seq IN (SELECT intg_bl_seq FROM tb_intg_bl_rlt WHERE rlt_intg_bl_seq = cast(#intg_bl_seq# as varchar)) 
           AND  jb_sts_cd = #bl_sts_cd#
    </update>
    
    <!--#125 #52033 - [CLC]MB/L 단위로도 Job Visibility 표시 필요 (Workflow요건): Work Flow 저장전 비교 -->
	<select id="selectBL_ORGMBL_WRK_FLOW" resultClass="SeeMasterBLVO" parameterClass="String">	
		SELECT  isnull(bl.wh_cut_off_dt,'') as wh_cut_off_dt,  isnull(bl.rail_cut_off_dt,'') as rail_cut_off_dt             
	      FROM  tb_intg_bl bl
		  WHERE  bl.intg_bl_seq  = #value#
	</select>  
	<select id="selectBL_ORGHBL_WRK_FLOW" resultClass="HBLInfoVO" parameterClass="String">	
		SELECT  isnull(bl.wh_cut_off_dt,'') as wh_cut_off_dt,  isnull(bl.rail_cut_off_dt,'') as rail_cut_off_dt             
	      FROM  tb_intg_bl bl
		  WHERE  bl.intg_bl_seq  = #value#
	</select> 
	<!-- #125 #52033 - [CLC]MB/L 단위로도 Job Visibility 표시 필요 (Workflow요건): Work Flow JB_ACT_DT_TM 저장  --> 	
	<update id="updateWRK_FLOW_DT" parameterClass="HashMap">
        UPDATE  tb_wrk_flow SET  
			   <isNotEmpty property="jb_act_dt_tm">
				JB_ACT_DT_TM = CONVERT(DATETIME, #jb_act_dt_tm#, 120),
			   </isNotEmpty>
			   <isEmpty property="jb_act_dt_tm">
			    JB_ACT_DT_TM = NULL,
			   </isEmpty>           
                modi_usrid  = #rgst_usrid#,     modi_ofc_cd = #rgst_ofc_cd#,    
                modi_tms    = GETUTCDATE()
         WHERE  intg_bl_seq = cast(#intg_bl_seq# as varchar) AND jb_sts_cd = #jb_sts_cd#
	</update>	  
    
    <!-- Work Flow List를 조회함   -->
    <select id="selectWRK_FLOW_LIST" resultClass="com.clt.apps.fis.see.bmd.housebl.dto.WrkFlowVO" parameterClass="HashMap">
        SELECT   wrk.jb_sts_cd,
<!--        		,tpls.bl_sts_lbl AS jb_sts_nm, 
        		 (SELECT cd_nm 
                    FROM tb_com_cd_dtl b    
                   WHERE b.com_cd =   ( CASE tpls.jb_tmplt_seq WHEN 3 THEN 'C063' ELSE 'C062' END )  
                     and b.cd_val = wrk.jb_sts_cd) AS jb_sts_nm, -->
                      (SELECT BSE_TM_NM  FROM TB_JB_BSE_ITM b                        
			        	WHERE b.BSE_TM_CD = wrk.jb_sts_cd AND b.LGS_CLSS_CD = tpls.LGS_CLSS_CD) AS jb_sts_nm,
                <!-- SUBSTRING(convert(VARCHAR(16), wrk.jb_pln_dt_tm, 121), 1,10) AS jb_pln_dt,  -->
                wrk.jb_pln_dt_tm AS jb_pln_dt,
		        SUBSTRING(convert(VARCHAR(16), wrk.jb_pln_dt_tm, 121), 11,6) AS jb_pln_tm,
		        <!--  SUBSTRING(convert(VARCHAR(16), wrk.jb_act_dt_tm, 121), 1,10) AS jb_act_dt,  -->
		        wrk.jb_act_dt_tm AS jb_act_dt,
		        SUBSTRING(convert(VARCHAR(16), wrk.jb_act_dt_tm, 121), 11,6) AS jb_act_tm,
    <![CDATA[   CASE   WHEN (wrk.jb_act_dt_tm IS NULL) AND (  wrk.jb_pln_dt_tm < getdate())
                       THEN '1'
                       WHEN (wrk.jb_act_dt_tm IS NULL) AND (  wrk.jb_pln_dt_tm >= getdate())    
                       THEN '0'
                       WHEN datediff(hour, wrk.jb_pln_dt_tm , wrk.jb_act_dt_tm)<act_itval_hrs
                       THEN '0'
                       WHEN datediff(hour, wrk.jb_pln_dt_tm , wrk.jb_act_dt_tm)>=act_itval_hrs
                       THEN '1'
    ]]> 
                       <!-- WHEN wrk.jb_pln_dt_tm >= wrk.jb_act_dt_tm 
                       THEN '0'
                       WHEN wrk.jb_pln_dt_tm < wrk.jb_act_dt_tm   
                      
                       THEN '1'
                       -->
                  END AS sts_img,
                   
                 wrk.srt_seq
                ,wrk.modi_usrid
                ,tpls.jb_tmplt_seq
                ,tpls.pln_itval_hrs as dur_tm_qty
          FROM  tb_add_info_bnd bnd
          
           JOIN  tb_wrk_flow wrk
           ON   bnd.intg_bl_seq = wrk.intg_bl_seq
           
          LEFT OUTER JOIN  tb_jb_tmplt_itm tpls
            ON  tpls.jb_tmplt_seq = bnd.jb_tmplt_seq AND wrk.jb_sts_cd = tpls.bse_tm_cd
            
         WHERE  bnd.intg_bl_seq = cast(#intg_bl_seq# as varchar)
      ORDER BY  wrk.srt_seq ASC 
    </select>
    
    <!--Container Master에서 정보 조회   -->
    <select id="selectCNTR_CMDT_LIST" parameterClass="HashMap" resultClass="CntrLstVO">
        SELECT cms.cntr_no,         cms.cntr_tpsz_cd,         cms.lr_trdp_cd AS cntr_sprl_trdp_cd,     
               cms.cntr_sts_cd,     cms.lstm_cd AS soc_flg,  cmp.eng_nm AS cntr_sprl_trdp_nm,  
               agm.agmt_dt,         agm.eff_dt
        
         FROM  tb_cntr_mst cms, tb_cntr_agmt agm, tb_trdp cmp
        WHERE  cms.agmt_no = agm.agmt_no 
          AND  cmp.trdp_cd = cms.lr_trdp_cd
        <isEmpty property="rgst_cntr_yn">
          AND  agm.eff_dt >= CONVERT(varchar(8), getdate(), 112)
          AND  cms.cntr_sts_cd = #f_cntr_sts_cd#
        </isEmpty>
        <isNotEmpty property="f_cntr_sprl_trdp_cd">
            AND cms.lr_trdp_cd = #f_cntr_sprl_trdp_cd#
        </isNotEmpty>
        <isNotEmpty property="f_cntr_tpsz_cd">
            AND cms.cntr_tpsz_cd = #f_cntr_tpsz_cd#
        </isNotEmpty>
    </select>
    
    <select id="selectCNTR_CMDT_LIST_CNT" parameterClass="HashMap" resultClass="Integer">
        SELECT count(cms.cntr_no)
         FROM  tb_cntr_mst cms, tb_cntr_agmt agm, tb_trdp cmp
        WHERE  cms.agmt_no = agm.agmt_no 
          AND  cmp.trdp_cd = cms.lr_trdp_cd
        <isEmpty property="rgst_cntr_yn">
          AND  agm.eff_dt >= CONVERT(varchar(8), getdate(), 112)
          AND  cms.cntr_sts_cd = #f_cntr_sts_cd#
        </isEmpty>
        <isNotEmpty property="f_cntr_sprl_trdp_cd">
            AND cms.lr_trdp_cd = #f_cntr_sprl_trdp_cd#
        </isNotEmpty>
        <isNotEmpty property="f_cntr_tpsz_cd">
            AND cms.cntr_tpsz_cd = #f_cntr_tpsz_cd#
        </isNotEmpty>
    </select>
    
<!-- Booking Contaienr 정보   -->
    <!--CONTAINER SUMMARY SEQ생성  -->
    <select id="selectCONSUMPK" resultClass="Integer">
        SELECT  ISNULL(MAX(cntr_smry_seq),0)+1
          FROM  tb_cntr_smry
    </select>

    <!-- CONTAINER SUMMARY 등록  -->
    <insert id="insertCNTR_SMRY" parameterClass="BkgCntrInfoVO">
        INSERT INTO tb_cntr_smry(
                    intg_bl_seq,        cntr_smry_seq,      cntr_tpsz_cd,          cntr_qty,
                    rgst_usrid,         rgst_ofc_cd,        rgst_tms,          
                    modi_usrid,         modi_ofc_cd,        modi_tms,              delt_flg
                    
            )VALUES(
                    #intg_bl_seq#,      #cntr_smry_seq#,    #smry_cntr_tpsz_cd#,   #smry_cntr_qty#,
                    #proc_usrid#,       #proc_ofccd#,       getdate(),
                    #proc_usrid#,       #proc_ofccd#,       GETUTCDATE(),         'N'
            )    
    </insert>
    
    <!-- CONTAINER SUMMARY 수정  -->
    <update id="updateCNTR_SMRY" parameterClass="BkgCntrInfoVO">
        UPDATE tb_cntr_smry
               cntr_tpsz_cd = #smry_cntr_tpsz_cd#,     cntr_qty    = #smry_cntr_qty#,        
               modi_usrid   = #proc_usrid#,            modi_ofc_cd = #proc_ofccd#,        modi_tms = GETUTCDATE()
        WHERE  intg_bl_seq  = cast(#intg_bl_seq# as varchar) 
          AND  cntr_smry_seq= #cntr_smry_seq#           
    </update>

    <!-- CONTAINER SUMMARY 삭제  -->
    <delete id="deleteCNTR_SMRY" parameterClass="BkgCntrInfoVO">
        DELETE tb_cntr_smry
        WHERE  intg_bl_seq  = cast(#intg_bl_seq# as varchar) 
          AND  cntr_smry_seq= #cntr_smry_seq#           
    </delete>   
    
    
    <!-- Conainer Summary리를 조호회함   -->
    <select id="selectCNTR_SMRY" parameterClass="HashMap" resultClass="BkgCntrInfoVO">
        SELECT  intg_bl_seq,        cntr_smry_seq,      cntr_tpsz_cd AS smry_cntr_tpsz_cd,          
                cntr_qty AS smry_cntr_qty
          FROM  tb_cntr_smry
         WHERE  intg_bl_seq = cast(#intg_bl_seq# as varchar) AND delt_flg = 'N' 
      ORDER BY  cntr_smry_seq ASC
    </select>
    
<!-- Container List 정보   -->
    <!--CONTAINER LIST SEQ생성  -->
    <select id="selectCNTR_LIST_PK" resultClass="Integer">
        SELECT ISNULL(MAX(cntr_list_seq),0)+1
          FROM tb_cntr_list
    </select>
    
    <!--Container목록에 저장  -->
    <!-- #20417 : [BINEX] MLB/IPI 건들 Pickup and LFD 추가 - jsjang 2013.9.6 -->
    <insert id="insertCNTR_LIST" parameterClass="CntrLstVO">
        INSERT INTO tb_cntr_list(
            intg_bl_seq,        cntr_list_seq,       rgst_cntr_yn,
            cntr_no,            cntr_tpsz_cd,
            cgo_pck_qty,        cgo_pck_ut,          cgo_wgt,           cgo_meas,         vol_meas,
            soc_flg,            dg_gds_flg,          cntr_rmk,
            seal_no1,           seal_no2,            seal_no3, 
            cntr_sprl_trdp_cd,
            rgst_usrid,         rgst_ofc_cd,         rgst_tms,
            modi_usrid,         modi_ofc_cd,         modi_tms,          delt_flg,
            cgo_wgt1, cgo_meas1
            ,pickup_number, lfd, cntr_go_date, temp_cd, vent_cd, cfs_in_dt, devan_dt
            ,org_pkup_dt 			,fnl_dest_eta_dt 	,apnt_dt 			,de_dt 			,free_det_dt , emty_rt_dt
            <isNotEmpty property="temp_val">
            ,temp_val
            </isNotEmpty>
            ,SEAL_TP1		,SEAL_TP2		,VGM_CGO_WGT		,VGM_CGO_WGT_TP		,VGM_DT		,VGM_TM		,VGM_METHOD	,VGM_CNTR_TP
			,VGM_AM_TRDP_CD	,VGM_AM_TRDP_NM	,VGM_AM_TRDP_PIC	,VGM_SPC_TRDP_CD	,VGM_SPC_TRDP_NM	,VGM_SPC_TRDP_PIC	
			,VGM_SEQ
			,cntr_ref_no
			,trkg_fee_txt
			<!-- #2107 [PATENT] HB/L의 FCL Shipmode 시 SAY 항목 표시 보완 -->
			,prt_cgo_flg
			
            ,rc_flg
            ,mgset_flg
            ,ca_flg
            ,air_flow
            ,air_flow_unit
            ,humid			
            <!-- OFVFOUR-7949 [SENKO USA] Show CCN# for Multiple Containers on AN -->
        	, cntr_ccn_no
        )VALUES(
            #intg_bl_seq#,       #cntr_list_seq#,    #rgst_cntr_yn#, 
            #cntr_no#,           #cntr_tpsz_cd#, 
            #cgo_pck_qty#,       #cgo_pck_ut#,       #cgo_wgt#,          #cgo_meas#,        #vol_meas#, 
            #soc_flg#,           #dg_gds_flg#,       #cntr_rmk#, 
            #seal_no1#,          #seal_no2#,         #seal_no3#, 
            #cntr_sprl_trdp_cd#, 
            #proc_usrid#,        #proc_ofccd#,       getdate(),
            #proc_usrid#,        #proc_ofccd#,       GETUTCDATE(),         'N',
            #cgo_wgt1#, #cgo_meas1#
            ,#pickup_number#, #lfd#, #cntr_go_date#, #temp_cd#, #vent_cd#, #cfs_in_dt#, #devan_dt#
            ,#org_pkup_dt# 		,#fnl_dest_eta_dt# 	,#apnt_dt# 		,#de_dt# 		,#free_det_dt# , #emty_rt_dt#
            <isNotEmpty property="temp_val">
            , #temp_val#
            </isNotEmpty>
            ,#seal_tp1#		,#seal_tp2#		,#vgm_cgo_wgt#		,#vgm_cgo_wgt_tp#		,#vgm_dt#		,#vgm_tm#		,#vgm_method#	,#vgm_cntr_tp#
			,#vgm_am_trdp_cd#	,#vgm_am_trdp_nm#	,#vgm_am_trdp_pic#	,#vgm_spc_trdp_cd#	,#vgm_spc_trdp_nm#	,#vgm_spc_trdp_pic#	
			,CONVERT(varchar,#cntr_list_seq#)+CONVERT(varchar,#intg_bl_seq#)
			,#cntr_ref_no#
			,#trkg_fee_txt#
			,CASE WHEN #prt_cgo_flg# = '1' THEN 'Y' ELSE 'N' END
			,#rc_flg#
            ,#mgset_flg#
            ,#ca_flg#
            ,#air_flow#
            ,#air_flow_unit#
            ,#humid#
            <!-- OFVFOUR-7949 [SENKO USA] Show CCN# for Multiple Containers on AN -->
        	, #cntr_ccn_no#
        )
    </insert>
    
    <!-- 컨테이너 등록 삭제시 Equipment의 상태 정보를 수정한다.  -->
    <update id="updateCNTR_MST_STS" parameterClass="CntrLstVO">
       UPDATE  tb_cntr_mst
          SET  cntr_sts_cd  = #rgst_cntr_yn#
        WHERE  cntr_no = #cntr_no#
    </update>
    
    <!-- Container목록 수정  -->
    <!-- #20417 : [BINEX] MLB/IPI 건들 Pickup and LFD 추가 - jsjang 2013.9.6  -->
    <update id="updateCNTR_LIST" parameterClass="CntrLstVO">
        UPDATE  tb_cntr_list
           SET  cntr_no    = #cntr_no#,       cntr_tpsz_cd= #cntr_tpsz_cd#,
                cgo_pck_qty= #cgo_pck_qty#,   cgo_pck_ut  = #cgo_pck_ut#,          
                cgo_wgt    = #cgo_wgt#,       cgo_meas    = #cgo_meas#,       vol_meas = #vol_meas#,
                soc_flg    = #soc_flg#,       dg_gds_flg  = #dg_gds_flg#,     cntr_rmk = #cntr_rmk#,
                seal_no1   = #seal_no1#,      seal_no2    = #seal_no2#,       seal_no3 = #seal_no3#,
                cntr_sprl_trdp_cd = #cntr_sprl_trdp_cd#,
                modi_usrid = #proc_usrid#,    modi_ofc_cd = #proc_ofccd#,     modi_tms = GETUTCDATE(),
                cgo_wgt1 = #cgo_wgt1#, cgo_meas1 = #cgo_meas1#
                ,pickup_number = #pickup_number#, lfd = #lfd#, cntr_go_date = #cntr_go_date#, emty_rt_dt = #emty_rt_dt#
                ,cfs_in_dt = #cfs_in_dt#, devan_dt = #devan_dt#
                ,org_pkup_dt = #org_pkup_dt#
                ,fnl_dest_eta_dt = #fnl_dest_eta_dt#
                ,apnt_dt = #apnt_dt#
                ,de_dt = #de_dt#
                ,free_det_dt = #free_det_dt#
                <isNotEmpty property="temp_cd">
				, temp_cd = #temp_cd#
        		</isNotEmpty>
				, vent_cd = #vent_cd#
        		<isNotEmpty property="temp_val">
        		, temp_val = #temp_val#
        		</isNotEmpty>
        		, seal_tp1 = #seal_tp1#		
        		, seal_tp2 = #seal_tp2#		
        		, vgm_cgo_wgt = #vgm_cgo_wgt#		
        		, vgm_cgo_wgt_tp = #vgm_cgo_wgt_tp#		
        		, vgm_dt = #vgm_dt#		
        		, vgm_tm = #vgm_tm#
				, vgm_method = #vgm_method#
				, vgm_cntr_tp = #vgm_cntr_tp#
				, vgm_am_trdp_cd = #vgm_am_trdp_cd#	
				, vgm_am_trdp_nm = #vgm_am_trdp_nm#
				, vgm_am_trdp_pic = #vgm_am_trdp_pic#	
				, vgm_spc_trdp_cd = #vgm_spc_trdp_cd#	
				, vgm_spc_trdp_nm = #vgm_spc_trdp_nm#	
				, vgm_spc_trdp_pic = #vgm_spc_trdp_pic#	
				, vgm_seq =  CONVERT(varchar,#cntr_list_seq#) +  CONVERT(varchar,#intg_bl_seq#)
				, cntr_ref_no = #cntr_ref_no#
				, trkg_fee_txt = #trkg_fee_txt#
				, prt_cgo_flg = CASE WHEN #prt_cgo_flg# = '1' THEN 'Y' ELSE 'N' END
				, rc_flg = #rc_flg#
            	, mgset_flg = #mgset_flg#
            	, ca_flg = #ca_flg#
            	, air_flow = #air_flow#
            	, air_flow_unit = #air_flow_unit#
            	, humid = #humid#
            	<!-- OFVFOUR-7949 [SENKO USA] Show CCN# for Multiple Containers on AN -->
        		, cntr_ccn_no = #cntr_ccn_no#
         WHERE  intg_bl_seq = cast(#intg_bl_seq# as varchar) AND   cntr_list_seq = #cntr_list_seq#
    </update>
    
    <!-- #26042 : [BINEX] HBL수정전 cont_no취득 - SYLEE 2014.4.15  -->
    <select id="selectCNTR_NO" parameterClass="HashMap" resultClass="String">
    	/*	selectCNTR_NO */
        SELECT  cntr_no
		  FROM  tb_cntr_list
		 WHERE  intg_bl_seq = cast(#intg_bl_seq# as varchar)
		   AND  cntr_list_seq = #cntr_list_seq#
    </select>
    <!-- #26042 : [BINEX] MBL에서 등록한 컨테이너NO가 HBL에 존재하면 컨테이너NO 취득 cont_no취득 - SYLEE 2014.4.15  -->
    <select id="selectCNTR_NO_HBL" parameterClass="HashMap" resultClass="String">
        SELECT  DISTINCT(cntr_no)
		  FROM  tb_cntr_list
		 WHERE  cntr_no = #cntr_no#
    </select>
	<!-- #26042 : [BINEX] MLB수정에 따른 HBL 수정 - SYLEE 2014.4.15  -->
    <update id="updateCNTR_LIST_HBL" parameterClass="HashMap">
        /*updateCNTR_LIST_HBL*/
        UPDATE  tb_cntr_list
           SET  cntr_no       = #cntr_no#,       
           		cntr_tpsz_cd  = #cntr_tpsz_cd#,
                seal_no1      = #seal_no1#,      
                seal_no2      = #seal_no2#,  
                
				<!-- //#141 #49037 - [IMPEX] OIH COPY후 OIM FILING# 입력 후 | {CO} MB/L and HB/L, MAWB and HAWB items copy rule opti -->
				<isEqual property="hbl_tp_cd" compareValue="DR">
					dg_gds_flg = #dg_gds_flg#,
					cntr_rmk = #cntr_rmk#,
					<!-- [Great Luck]  Export OEH *Shipment Item ( PCS, Weight, Measurement ) -->
					<!-- cgo_meas = #cgo_meas#,
					cgo_meas1 = #cgo_meas1#,
					cgo_wgt = #cgo_wgt#,
					cgo_wgt1 = #cgo_wgt1#,
					cgo_pck_qty = #cgo_pck_qty#,
					cgo_pck_ut = #cgo_pck_ut#, -->
					temp_val = #temp_val#,
					temp_cd = #temp_cd#,
					vent_cd = #vent_cd#,
				</isEqual>
				
				<isNotEqual property="hbl_tp_cd" compareValue="DR">
					<!--#5109 - [JAPT]OEH & OIH - Container Sync Logic 수정  (Duc Nguyen) -->
					<isNotEqual property="shp_mod_cd" compareValue="FAK">
						dg_gds_flg = #dg_gds_flg#,
						cntr_rmk = #cntr_rmk#,
						<!-- [Great Luck]  Export OEH *Shipment Item ( PCS, Weight, Measurement ) -->
						<!-- cgo_meas = #cgo_meas#,
						cgo_meas1 = #cgo_meas1#,
						cgo_wgt = #cgo_wgt#,
						cgo_wgt1 = #cgo_wgt1#,
						cgo_pck_qty = #cgo_pck_qty#,
						cgo_pck_ut = #cgo_pck_ut#, -->
						temp_val = #temp_val#,
						temp_cd = #temp_cd#,
						vent_cd = #vent_cd#,
					</isNotEqual>
				</isNotEqual>
                
                
                pickup_number = #pickup_number#
         WHERE  cntr_no = #pre_cntr_no#
         		and intg_bl_seq IN
						(SELECT intg_bl_seq 
						   FROM tb_intg_bl_rlt 
						  WHERE rlt_intg_bl_seq = cast(#intg_bl_seq# as varchar))
<!--          WHERE  cntr_list_seq IN (
		  			SELECT cntr_list_seq 
					FROM tb_cntr_list
					WHERE intg_bl_seq IN
						(SELECT intg_bl_seq 
						   FROM tb_intg_bl_rlt 
						  WHERE rlt_intg_bl_seq = #intg_bl_seq#)
					AND cntr_no = #pre_cntr_no#
			     ) -->
    </update>
    <update id="updateCNTR_LIST_HBL_RENEW" parameterClass="HashMap">
        /*updateCNTR_LIST_HBL_RENEW*/
        UPDATE  tb_cntr_list
           SET  cntr_no       = #cntr_no#,       
           		cntr_tpsz_cd  = #cntr_tpsz_cd#,
                seal_no1      = #seal_no1#,      
                seal_no2      = #seal_no2#,  
                org_pkup_dt   = #org_pkup_dt#,
                
				<!-- //#141 #49037 - [IMPEX] OIH COPY후 OIM FILING# 입력 후 | {CO} MB/L and HB/L, MAWB and HAWB items copy rule opti -->
				<isEqual property="hbl_tp_cd" compareValue="DR">
					apnt_dt = #apnt_dt#,
					<!-- cgo_meas = #cgo_meas#,
					cgo_meas1 = #cgo_meas1#,
					cgo_wgt = #cgo_wgt#,
					cgo_wgt1 = #cgo_wgt1#,
					cgo_pck_qty = #cgo_pck_qty#,
					cgo_pck_ut = #cgo_pck_ut#, -->
					cfs_in_dt = #cfs_in_dt#,
					dg_gds_flg = #dg_gds_flg#,
					de_dt = #de_dt#,
					fnl_dest_eta_dt = #fnl_dest_eta_dt#,
					cntr_rmk = #cntr_rmk#,
					pickup_number = #pickup_number#,
				</isEqual>
				
				<isNotEqual property="hbl_tp_cd" compareValue="DR">
				<!--#5109 - [JAPT]OEH & OIH - Container Sync Logic 수정  (Duc Nguyen) -->
					<isNotEqual property="shp_mod_cd" compareValue="FAK">
						apnt_dt = #apnt_dt#,
						<!-- cgo_meas = #cgo_meas#,
						cgo_meas1 = #cgo_meas1#,
						cgo_wgt = #cgo_wgt#,
						cgo_wgt1 = #cgo_wgt1#,
						cgo_pck_qty = #cgo_pck_qty#,
						cgo_pck_ut = #cgo_pck_ut#, -->
						cfs_in_dt = #cfs_in_dt#,
						dg_gds_flg = #dg_gds_flg#,
						de_dt = #de_dt#,
						fnl_dest_eta_dt = #fnl_dest_eta_dt#,
						cntr_rmk = #cntr_rmk#,
						pickup_number = #pickup_number#,
					</isNotEqual>
				</isNotEqual>
				
				free_det_dt = #free_det_dt#,
				devan_dt = #devan_dt#,
				cntr_go_date = #cntr_go_date#,
                lfd           = #lfd#,
                emty_rt_dt = #emty_rt_dt#
                <!-- OFVFOUR-7949 [SENKO USA] Show CCN# for Multiple Containers on AN -->
                , cntr_ccn_no = #cntr_ccn_no#
         WHERE  cntr_no = #pre_cntr_no#
         		and intg_bl_seq IN (SELECT intg_bl_seq 
						              FROM tb_intg_bl_rlt 
						             WHERE rlt_intg_bl_seq = cast(#intg_bl_seq# as varchar))

    </update>
    
    <update id="updateCNTR_LIST_HBL_MEASURE" parameterClass="HashMap">
        /*updateCNTR_LIST_HBL_MEASURE*/
        UPDATE  tb_cntr_list
           SET                  
				<isEqual property="hbl_tp_cd" compareValue="DR">
					<!-- [Great Luck]  Export OEH *Shipment Item ( PCS, Weight, Measurement ) -->
					cgo_meas = #cgo_meas#,
					cgo_meas1 = #cgo_meas1#,
				</isEqual>
				
				<isNotEqual property="hbl_tp_cd" compareValue="DR">
					<!--#5109 - [JAPT]OEH & OIH - Container Sync Logic 수정  (Duc Nguyen) -->
					<isNotEqual property="shp_mod_cd" compareValue="FAK">
						<!-- [Great Luck]  Export OEH *Shipment Item ( PCS, Weight, Measurement ) -->
						cgo_meas = #cgo_meas#,
						cgo_meas1 = #cgo_meas1#,
					</isNotEqual>
				</isNotEqual>
                modi_tms = GETUTCDATE()                
         WHERE  cntr_no = #pre_cntr_no#
         		and intg_bl_seq IN
						(SELECT intg_bl_seq 
						   FROM tb_intg_bl_rlt 
						  WHERE rlt_intg_bl_seq = cast(#intg_bl_seq# as varchar))
				<isNotEqual property="ofc_cnt_cd" compareValue="US">
					and cgo_meas  = 0
					and cgo_meas1 = 0
				</isNotEqual>
    </update>
    
    <update id="updateCNTR_LIST_HBL_WEIGHT" parameterClass="HashMap">
        /*updateCNTR_LIST_HBL_WEIGHT*/
        UPDATE  tb_cntr_list
           SET                  
				<isEqual property="hbl_tp_cd" compareValue="DR">
					<!-- [Great Luck]  Export OEH *Shipment Item ( PCS, Weight, Measurement ) -->
					cgo_wgt = #cgo_wgt#,
					cgo_wgt1 = #cgo_wgt1#,
				</isEqual>
				
				<isNotEqual property="hbl_tp_cd" compareValue="DR">
					<!--#5109 - [JAPT]OEH & OIH - Container Sync Logic 수정  (Duc Nguyen) -->
					<isNotEqual property="shp_mod_cd" compareValue="FAK">
						<!-- [Great Luck]  Export OEH *Shipment Item ( PCS, Weight, Measurement ) -->
						cgo_wgt = #cgo_wgt#,
						cgo_wgt1 = #cgo_wgt1#,
					</isNotEqual>
				</isNotEqual>
                modi_tms = GETUTCDATE()
         WHERE  cntr_no = #pre_cntr_no#
         		and intg_bl_seq IN
						(SELECT intg_bl_seq 
						   FROM tb_intg_bl_rlt 
						  WHERE rlt_intg_bl_seq = cast(#intg_bl_seq# as varchar))
			<isNotEqual property="ofc_cnt_cd" compareValue="US">
				and cgo_wgt  = 0
				and cgo_wgt1 = 0
			</isNotEqual>		  
    </update>
    
    <update id="updateCNTR_LIST_HBL_PACKAGE" parameterClass="HashMap">
        /*updateCNTR_LIST_HBL_PACKAGE*/
        UPDATE  tb_cntr_list
           SET                  
				<isEqual property="hbl_tp_cd" compareValue="DR">
					<!-- [Great Luck]  Export OEH *Shipment Item ( PCS, Weight, Measurement ) -->
					cgo_pck_qty = #cgo_pck_qty#,
					cgo_pck_ut = #cgo_pck_ut#,
				</isEqual>
				
				<isNotEqual property="hbl_tp_cd" compareValue="DR">
					<!--#5109 - [JAPT]OEH & OIH - Container Sync Logic 수정  (Duc Nguyen) -->
					<isNotEqual property="shp_mod_cd" compareValue="FAK">
						<!-- [Great Luck]  Export OEH *Shipment Item ( PCS, Weight, Measurement ) -->
						cgo_pck_qty = #cgo_pck_qty#,
						cgo_pck_ut = #cgo_pck_ut#,
					</isNotEqual>
				</isNotEqual>
                modi_tms = GETUTCDATE()
         WHERE  cntr_no = #pre_cntr_no#
         		and intg_bl_seq IN
						(SELECT intg_bl_seq 
						   FROM tb_intg_bl_rlt 
						  WHERE rlt_intg_bl_seq = cast(#intg_bl_seq# as varchar))
				<isNotEqual property="ofc_cnt_cd" compareValue="US">
					and cgo_pck_qty = 0
				</isNotEqual>
    </update>
    
    <update id="updateCNTR_LIST_HBL_RENEW_MEASURE" parameterClass="HashMap">
        /*updateCNTR_LIST_HBL_RENEW_MEASURE*/
        UPDATE  tb_cntr_list
           SET  
				<isEqual property="hbl_tp_cd" compareValue="DR">
					cgo_meas = #cgo_meas#,
					cgo_meas1 = #cgo_meas1#,
				</isEqual>
				
				<isNotEqual property="hbl_tp_cd" compareValue="DR">
					<!--#5109 - [JAPT]OEH & OIH - Container Sync Logic 수정  (Duc Nguyen) -->
					<isNotEqual property="shp_mod_cd" compareValue="FAK">
						cgo_meas = #cgo_meas#,
						cgo_meas1 = #cgo_meas1#,
					</isNotEqual>
				</isNotEqual>
				modi_tms = GETUTCDATE()
         WHERE  cntr_no = #pre_cntr_no#
         		and intg_bl_seq IN (SELECT intg_bl_seq 
						              FROM tb_intg_bl_rlt 
						             WHERE rlt_intg_bl_seq = cast(#intg_bl_seq# as varchar))
				and cgo_meas  = 0
				and cgo_meas1 = 0
    </update>
    
    <update id="updateCNTR_LIST_HBL_RENEW_WEIGHT" parameterClass="HashMap">
        /*updateCNTR_LIST_HBL_RENEW_WEIGHT*/
        UPDATE  tb_cntr_list
           SET
				<isEqual property="hbl_tp_cd" compareValue="DR">
					cgo_wgt = #cgo_wgt#,
					cgo_wgt1 = #cgo_wgt1#,
				</isEqual>
				
				<isNotEqual property="hbl_tp_cd" compareValue="DR">
					<!--#5109 - [JAPT]OEH & OIH - Container Sync Logic 수정  (Duc Nguyen) -->
					<isNotEqual property="shp_mod_cd" compareValue="FAK">
					cgo_wgt = #cgo_wgt#,
					cgo_wgt1 = #cgo_wgt1#,
					</isNotEqual>
				</isNotEqual>
				modi_tms = GETUTCDATE()
         WHERE  cntr_no = #pre_cntr_no#
         		and intg_bl_seq IN (SELECT intg_bl_seq 
						              FROM tb_intg_bl_rlt 
						             WHERE rlt_intg_bl_seq = cast(#intg_bl_seq# as varchar))
				and cgo_wgt  = 0
				and cgo_wgt1 = 0
    </update>
    
    <update id="updateCNTR_LIST_HBL_RENEW_PACKAGE" parameterClass="HashMap">
        /*updateCNTR_LIST_HBL_RENEW_PACKAGE*/
        UPDATE  tb_cntr_list
           SET  
				<isEqual property="hbl_tp_cd" compareValue="DR">
					cgo_pck_qty = #cgo_pck_qty#,
					cgo_pck_ut = #cgo_pck_ut#,
				</isEqual>
				
				<isNotEqual property="hbl_tp_cd" compareValue="DR">
					<!--#5109 - [JAPT]OEH & OIH - Container Sync Logic 수정  (Duc Nguyen) -->
					<isNotEqual property="shp_mod_cd" compareValue="FAK">
						cgo_pck_qty = #cgo_pck_qty#,
						cgo_pck_ut = #cgo_pck_ut#,
					</isNotEqual>
				</isNotEqual>
				modi_tms = GETUTCDATE()
         WHERE  cntr_no = #pre_cntr_no#
         		and intg_bl_seq IN (SELECT intg_bl_seq 
						              FROM tb_intg_bl_rlt 
						             WHERE rlt_intg_bl_seq = cast(#intg_bl_seq# as varchar))
				and cgo_pck_qty = 0 
    </update>
    
    <!-- Hbl 의 Container No 수정  -->
    <update id="updateHblCntrNo" parameterClass="CntrLstVO">
        UPDATE  tb_cntr_list
           SET  cntr_no    = #cntr_no#,
                modi_usrid = #proc_usrid#,    modi_ofc_cd = #proc_ofccd#,     modi_tms = GETUTCDATE()
         WHERE  cntr_no = (SELECT cntr_no 
         					 FROM tb_cntr_list 
         				    WHERE intg_bl_seq = cast(#intg_bl_seq# as varchar) 
         				      AND cntr_list_seq = #cntr_list_seq#)
	       AND  intg_bl_seq in (SELECT intg_bl_seq 
	                              FROM tb_intg_bl_rlt 
	                             WHERE rlt_intg_bl_seq = cast(#intg_bl_seq# as varchar))
    </update>

    <!-- #2107 [PATENT] HB/L의 FCL Shipmode 시 SAY 항목 표시 보완 -->
    <update id="updateHblPrt" parameterClass="CntrLstVO">
        UPDATE  tb_cntr_list
           SET  prt_cgo_flg = CASE WHEN #prt_cgo_flg# = '1' THEN 'Y' ELSE 'N' END,
                modi_usrid = #proc_usrid#,    modi_ofc_cd = #proc_ofccd#,     modi_tms = GETUTCDATE()
         WHERE  cntr_no = (SELECT cntr_no 
         					 FROM tb_cntr_list 
         				    WHERE intg_bl_seq = cast(#intg_bl_seq# as varchar) 
         				      AND cntr_list_seq = #cntr_list_seq#)
	       AND  intg_bl_seq in (SELECT intg_bl_seq 
	                              FROM tb_intg_bl_rlt 
	                             WHERE rlt_intg_bl_seq = cast(#intg_bl_seq# as varchar))
    </update>
    
    <!-- Container목록 삭제  -->
    <update id="deleteCNTR_LIST" parameterClass="CntrLstVO">
        DELETE  tb_cntr_list
         WHERE  intg_bl_seq = cast(#intg_bl_seq# as varchar)   AND  cntr_list_seq = #cntr_list_seq#
    </update>   
    
    <!-- Container 목록 조회  -->
    <select id="selectCNTR_LIST" parameterClass="HashMap" resultClass="CntrLstVO">
    /* selectCNTR_LIST */
        SELECT  lst.intg_bl_seq,        lst.cntr_list_seq,       lst.rgst_cntr_yn,
                lst.cntr_no,            lst.cntr_tpsz_cd,
                lst.cgo_pck_qty,        lst.cgo_pck_ut,          lst.cgo_wgt,           lst.cgo_meas,         lst.vol_meas,
                lst.soc_flg,            lst.dg_gds_flg,          lst.cntr_rmk,
                lst.seal_no1,           lst.seal_no2,            lst.seal_no3, 
                lst.cntr_sprl_trdp_cd,  prn.eng_nm AS cntr_sprl_trdp_nm,
                lst.cgo_wgt1, lst.cgo_meas1
                , lst.pickup_number, CONVERT(VARCHAR, ISNULL(lst.lfd, ''), 120) AS lfd ,
               
                CONVERT(VARCHAR, ISNULL(lst.cntr_go_date, ''), 120) AS cntr_go_date ,
                CONVERT(VARCHAR, ISNULL(lst.org_pkup_dt, ''), 120) AS org_pkup_dt
                , lst.temp_cd, lst.vent_cd ,lst.temp_val 
                , lst.emty_rt_dt
                , lst.cntr_ref_no
                , lst.trkg_fee_txt
                , lst.prt_cgo_flg
                <!-- #1543 [LBS] Container Type/Size Reefer, Ventill 항목 관리 -->
          		,case when substring(tsz.ISO_CNTR_CD,3,1) = 'R' then 'Y' else 'N' end temp_flg
          		,tsz.vent_flg
          		,lst.rc_flg 
          		,lst.mgset_flg 
          		,lst.ca_flg
          		,lst.air_flow
          		,lst.air_flow_unit
          		,lst.humid
          		<!-- OFVFOUR-7518 [FULLTRANS USA] Adding more display columns on the OIH B/L Entry - Container Tab -->
          		,CONVERT(VARCHAR, ISNULL(lst.fnl_dest_eta_dt, ''), 120) AS fnl_dest_eta_dt 
          		,CONVERT(VARCHAR, ISNULL(lst.apnt_dt, ''), 120) AS apnt_dt 
          		,CONVERT(VARCHAR, ISNULL(lst.de_dt, ''), 120) AS de_dt 
          		,CONVERT(VARCHAR, ISNULL(lst.free_det_dt, ''), 120) AS free_det_dt
          		<!-- OFVFOUR-7949 [SENKO USA] Show CCN# for Multiple Containers on AN -->
				,lst.cntr_ccn_no
          FROM  tb_cntr_list lst
LEFT OUTER JOIN tb_trdp prn
            ON  lst.cntr_sprl_trdp_cd = prn.trdp_cd  AND prn.delt_flg = 'N'
LEFT JOIN  tb_cntr_tpsz tsz
		   ON   lst.cntr_tpsz_cd = tsz.cntr_tpsz_cd
         WHERE  lst.intg_bl_seq = cast(#intg_bl_seq# as varchar)      AND lst.delt_flg = 'N' 
      ORDER BY  lst.cntr_list_seq ASC
    </select>

    <!-- BKG Summary Container 목록 조회  -->
    <select id="selectBKGSMRYCNTR_LIST" parameterClass="HashMap" resultClass="CntrLstVO">
        select cntr_tpsz_cd, qty as cgo_pck_qty 
        from TB_BKG_CNTR 
		where BKG_SEQ = #bkg_seq# 
		and DELT_FLG = 'N'
		order by CNTR_SEQ 
    </select>
    
    <!-- BKG Container 목록 조회  -->
    <select id="selectBKGCNTR_LIST" parameterClass="HashMap" resultClass="CntrLstVO">
        select 
        	cntr_no, cntr_tpsz_cd, seal_no as seal_no1,        	
        	cntr_ref_no,
			cgo_pck_ut_cd as cgo_pck_ut,
			cgo_pgk_qty as cgo_pck_qty,
			cgo_kgs_wgt as cgo_wgt,
			cgo_lbs_wgt as cgo_wgt1,
			cgo_cbm_qty as cgo_meas,
			cgo_cft_qty as cgo_meas1,
			cntr_seq as clp_cntr_seq,
			
			rc_flg, temp_val, temp_cd,
			mgset_flg, vent_cd, ca_flg,        		
       		air_flow,
       		air_flow_unit,
       		humid,
       		cntr_rmk
        from TB_BKG_CNTR_LIST as cntr_list
		where BKG_SEQ = #bkg_seq# 
		and DELT_FLG = 'N'
		<isNotEmpty property="cust_bkg_seq">
		and NOT EXISTS (
						SELECT *
						  FROM TB_BKG_CNTR_LIST
						 WHERE CLP_CNTR_SEQ = cntr_list.CNTR_SEQ
						   and BKG_SEQ = #cust_bkg_seq#
						   and DELT_FLG = 'N'   
					    ) 
		</isNotEmpty>			    
		order by CNTR_SEQ 
    </select>

    <!-- MBL에 연결된 Container List를 조회함   -->
    <!-- #20417 : [BINEX] MLB/IPI 건들 Pickup and LFD 추가 - jsjang 2013.9.6 -->
    <select id="selectMBL_CNTR_LIST" parameterClass="HashMap" resultClass="CntrLstVO">
        <!-- 
        SELECT  lst.intg_bl_seq,        lst.cntr_list_seq,       lst.rgst_cntr_yn,
                lst.cntr_no,            lst.cntr_tpsz_cd,
                lst.cgo_pck_qty,        lst.cgo_pck_ut,          lst.cgo_wgt,           lst.cgo_meas,         lst.vol_meas,
                cdt.cd_nm AS soc_flg,
                lst.dg_gds_flg,         lst.cntr_rmk,
                lst.seal_no1,           lst.seal_no2,            lst.seal_no3, 
                lst.cntr_sprl_trdp_cd,  prn.eng_nm AS cntr_sprl_trdp_nm,
                hbl.bl_no
          
          FROM  tb_intg_bl_rlt rlt
          JOIN  tb_intg_bl   hbl
            ON  rlt.intg_bl_seq = hbl.intg_bl_seq
            
          JOIN  tb_cntr_list lst
           ON   hbl.intg_bl_seq = lst.intg_bl_seq
        
          JOIN  tb_com_cd_dtl cdt
           ON   lst.soc_flg = cdt.cd_val AND cdt.com_cd = 'C058' AND cdt.delt_flg = 'N'
        
LEFT OUTER JOIN tb_trdp prn
            ON  lst.cntr_sprl_trdp_cd= prn.trdp_cd        AND prn.delt_flg = 'N'
        
         WHERE   rlt.rlt_intg_bl_seq = #intg_bl_seq#      AND lst.delt_flg = 'N' 
      ORDER BY  lst.intg_bl_seq ASC, lst.cntr_list_seq ASC
		  -->
		/*	selectMBL_CNTR_LIST */  
		SELECT  lst.intg_bl_seq,        lst.cntr_list_seq,       lst.rgst_cntr_yn,
                lst.cntr_no,            lst.cntr_tpsz_cd,		 lst.temp_cd,           lst.vent_cd,
                lst.cgo_pck_qty,        lst.cgo_pck_ut,          lst.cgo_wgt,           lst.cgo_meas,         lst.vol_meas,
                cdt.cd_nm AS soc_flg,
                lst.dg_gds_flg,         lst.cntr_rmk,
                lst.seal_no1,           lst.seal_no2,            lst.seal_no3, 
                lst.cntr_sprl_trdp_cd,  prn.eng_nm AS cntr_sprl_trdp_nm,
          		lst.cgo_wgt1, 			lst.cgo_meas1
          		
          		, lst.pickup_number
          		,CONVERT(VARCHAR, ISNULL(lst.lfd, ''), 120) AS lfd
          		,CONVERT(VARCHAR, ISNULL(lst.cntr_go_date, ''), 120) AS cntr_go_date
                ,CONVERT(VARCHAR, ISNULL(lst.cfs_in_dt, ''), 120) AS cfs_in_dt
                ,CONVERT(VARCHAR, ISNULL(lst.devan_dt, ''), 120) AS devan_dt
          		,CONVERT(VARCHAR, ISNULL(lst.org_pkup_dt, ''), 120) AS org_pkup_dt
                ,CONVERT(VARCHAR, ISNULL(lst.fnl_dest_eta_dt, ''), 120) AS fnl_dest_eta_dt
                ,CONVERT(VARCHAR, ISNULL(lst.apnt_dt, ''), 120) AS apnt_dt
                ,CONVERT(VARCHAR, ISNULL(lst.de_dt, ''), 120) AS de_dt
                ,CONVERT(VARCHAR, ISNULL(lst.free_det_dt, ''), 120) AS free_det_dt

<!--           		, lst.temp_cd, lst.vent_cd ,lst.temp_val -->
          		, lst.emty_rt_dt
          		,lst.cntr_ref_no
          		,lst.trkg_fee_txt
          		<!-- #2107 [PATENT] HB/L의 FCL Shipmode 시 SAY 항목 표시 보완 -->
          		,lst.prt_cgo_flg
          		<!-- #1543 [LBS] Container Type/Size Reefer, Ventill 항목 관리 -->          		
          		,case when substring(tsz.ISO_CNTR_CD,3,1) = 'R' then 'Y' else 'N' end temp_flg
          		,tsz.vent_flg

          		,lst.rc_flg 
          		,lst.temp_val 
          		,lst.mgset_flg 
          		,lst.ca_flg
          		,lst.air_flow
          		,lst.air_flow_unit
          		,lst.humid
          		<!-- OFVFOUR-7949 [SENKO USA] Show CCN# for Multiple Containers on AN -->
				,lst.cntr_ccn_no
          		
          FROM  tb_intg_bl bl

          JOIN  tb_cntr_list lst
           ON   bl.intg_bl_seq = lst.intg_bl_seq
LEFT OUTER JOIN  tb_com_cd_dtl cdt
           ON   lst.soc_flg = cdt.cd_val AND cdt.com_cd = 'C058' AND cdt.delt_flg = 'N'
        
LEFT OUTER JOIN tb_trdp prn
            ON  lst.cntr_sprl_trdp_cd= prn.trdp_cd AND prn.delt_flg = 'N'
LEFT JOIN  tb_cntr_tpsz tsz
		   ON   lst.cntr_tpsz_cd = tsz.cntr_tpsz_cd
         WHERE  bl.intg_bl_seq = cast(#intg_bl_seq# as varchar)
		   AND  lst.delt_flg = 'N' 
      ORDER BY  lst.intg_bl_seq ASC, lst.cntr_list_seq ASC
      
    </select>
    
    <!-- MBL에 연결된 VGM Container List를 조회함   -->
    <select id="selectMBL_VGM_CNTR_LIST" parameterClass="HashMap" resultClass="CntrLstVO">
    /* selectMBL_VGM_CNTR_LIST */
		SELECT 
			CNTR_NO
			,CNTR_TPSZ_CD
			,CGO_WGT
			,convert(numeric(13,3), CGO_MEAS) AS CGO_MEAS
			,SEAL_NO1
			,SEAL_TP1
			,SEAL_NO2
			,SEAL_TP2
			,VGM_CGO_WGT
			,VGM_CGO_WGT_TP
			,VGM_DT
			,VGM_TM
			,VGM_METHOD
			,VGM_CNTR_TP
			,VGM_AM_TRDP_CD
			,VGM_AM_TRDP_NM
			,VGM_AM_TRDP_PIC
			,VGM_SPC_TRDP_CD
			,VGM_SPC_TRDP_NM
			,VGM_SPC_TRDP_PIC
			,VGM_SEQ 
			,INTG_BL_SEQ
			,CNTR_LIST_SEQ
		FROM TB_CNTR_LIST LST
		WHERE LST.INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
			AND ISNULL(LST.DELT_FLG,'') != 'Y'	
		ORDER BY  LST.INTG_BL_SEQ ASC, LST.CNTR_LIST_SEQ ASC
    </select>
    
<!--등록된 파일목록을 조회함   -->
    <select id="selectPALT_SHP_DOC_LIST" parameterClass="java.util.HashMap" resultClass="com.clt.apps.fis.see.bmd.shippingdoc.dto.PaltShpDocVO">
        SELECT  palt_doc_seq,         intg_bl_seq,          palt_trdp_cd,     
                palt_trdp_pic_nm,     palt_trdp_pic_fax,    palt_trdp_pic_phn,    
                palt_doc_tp_cd,       
                (SELECT CD_NM FROM TB_COM_CD_DTL WHERE COM_CD = 'C027' AND CD_VAL = palt_doc_tp_cd) AS palt_doc_tp_nm,
                palt_doc_nm,          palt_doc_no,      
                palt_doc_img_url,     palt_doc_img_nm,
                palt_doc_pdf_url,     palt_doc_pdf_nm,  
                palt_doc_msg,         palt_doc_rmk,			isnull(palt_ext_flg, 'N') AS palt_ext_flg,
                rgst_usrid,           rgst_ofc_cd,          rgst_tms
          FROM  tb_palt_shp_doc
         WHERE  intg_bl_seq  = cast(#intg_bl_seq# as varchar)  <!-- AND palt_doc_tp_cd = 'CL'   -->
         <!-- #6669 [Zencon] OPUS UPLOADED DOCUMENT SHOWS REGARDLESS OF MODULE   -->
          <dynamic>
			<isEmpty property="palt_mnu_cd">
                AND  palt_mnu_cd = '' 
            </isEmpty>
            <isNotEmpty property="palt_mnu_cd">
                AND  palt_mnu_cd = #palt_mnu_cd# 
            </isNotEmpty>
		</dynamic>		
         ORDER BY  palt_doc_seq DESC
    </select>
    
    
    <delete id="deletePALT_SHP_DOC" parameterClass="com.clt.apps.fis.see.bmd.shippingdoc.dto.PaltShpDocVO">
        DELETE  tb_palt_shp_doc
         WHERE  intg_bl_seq  = cast(#intg_bl_seq# as varchar) AND palt_doc_seq =#palt_doc_seq#
    </delete>
    
<!-- ITEM 등록  -->
    <!--CONTAINER SEAL NUMBER SEQ생성  -->
    <select id="selectSHP_CMDT_PK" resultClass="Integer">
        SELECT ISNULL(MAX(shp_cmdt_seq),0)+1
        FROM   tb_shp_cmdt
    </select>

    <!-- Item등록  -->
    <insert id="insertSHP_CMDT" parameterClass="ItmLstVO">
        INSERT INTO tb_shp_cmdt(
            shp_cmdt_seq,       intg_bl_seq,     cntr_list_seq,
            shp_cmdt_cd,        shp_cmdt_nm,
		
		    pck_qty,            pck_ut_cd,        
            wgt,                meas,            rmk,
		    dg_cd_tp,           dg_cd,  dg_cntc_nm,
		        
            rgst_usrid,         rgst_ofc_cd,     rgst_tms,
            modi_usrid,         modi_ofc_cd,     modi_tms,    delt_flg,
            
            hs_grp_cd,		 	cmdt_cd,		 po_cmdt_seq,		        
            po_sys_no,		 	pck_inr_qty,	 ea_cnt,		        
            ttl_qty,		 	lbs_wgt,		 cft_meas,
            item_sys_no            
        )VALUES(
           #item_shp_cmdt_seq#, #intg_bl_seq#,      #item_cntr_list_seq#,
           #item_shp_cmdt_cd#,  #item_shp_cmdt_nm#,
		 
		   #item_pck_qty#,      #item_pck_ut_cd#,
           #item_wgt#,          #item_meas#,        #item_rmk#,
		   #item_dg_cd_tp#,     #item_dg_cd#,		#item_dg_cntc_nm#,
		
           #proc_usrid#,        #proc_ofccd#,       getdate(),
           #proc_usrid#,        #proc_ofccd#,       GETUTCDATE(),    'N',
           
           #item_hs_grp_cd#,	#item_cmdt_cd#,		#item_po_cmdt_seq#,		        
           #item_po_sys_no#,	#item_pck_inr_qty#,	#item_ea_cnt#,		        
           #item_ttl_qty#,		#item_lbs_wgt#,		#item_cft_meas#,
           #item_sys_no#      
        )    
    </insert>
    
    <!-- Item수정  -->
    <update id="updateSHP_CMDT" parameterClass="ItmLstVO">
        UPDATE  tb_shp_cmdt
           SET  shp_cmdt_cd = #item_shp_cmdt_cd#,   shp_cmdt_nm= #item_shp_cmdt_nm#,
                pck_qty     = #item_pck_qty#,       pck_ut_cd  = #item_pck_ut_cd#,        
                wgt         = #item_wgt#,           meas       = #item_meas#,       rmk     = #item_rmk#,
		        dg_cd_tp    = #item_dg_cd_tp#,      dg_cd      = #item_dg_cd#,      dg_cntc_nm = #item_dg_cntc_nm#,
				cntr_list_seq = #item_cntr_list_seq# ,
                modi_usrid  = #proc_usrid#,         modi_ofc_cd= #proc_ofccd#,      modi_tms= GETUTCDATE(),
                
                hs_grp_cd 		= #item_hs_grp_cd#,
                cmdt_cd 		= #item_cmdt_cd#,
                po_cmdt_seq 	= #item_po_cmdt_seq#,
                po_sys_no 		= #item_po_sys_no#,
                pck_inr_qty 	= #item_pck_inr_qty#,
                ea_cnt 			= #item_ea_cnt#,
                ttl_qty 		= #item_ttl_qty#,
                lbs_wgt 		= #item_lbs_wgt#,
                cft_meas 		= #item_cft_meas#,
                item_sys_no     = #item_sys_no#
                       
         WHERE  intg_bl_seq  = cast(#intg_bl_seq# as varchar)  
           AND  shp_cmdt_seq = #item_shp_cmdt_seq#   
    </update>
    
    <!-- Item 삭제   -->
    <delete id="deleteSHP_CMDT" parameterClass="ItmLstVO">
        DELETE  tb_shp_cmdt
         WHERE  intg_bl_seq  = cast(#intg_bl_seq# as varchar) 
           AND  shp_cmdt_seq = #item_shp_cmdt_seq# 
    	<isNotEmpty property="item_cntr_list_seq">
		   AND  cntr_list_seq = #item_cntr_list_seq# 
        </isNotEmpty>  
    </delete>
    
    <!--Container Number 코드 생성위해   -->
    <select id="selectCNTR_NO_LIST" parameterClass="HashMap" resultClass="HashMap">
        SELECT  cntr_list_seq AS  cd_val , cntr_no AS cd_nm
          FROM  tb_cntr_list cntr
          LEFT OUTER JOIN tb_intg_bl bl ON cntr.intg_bl_seq = bl.intg_bl_seq
         WHERE  1 = 1
           AND cntr.DELT_FLG = 'N'
         <dynamic>
            <isNotEmpty property="f_intg_bl_seq">
                AND bl.intg_bl_seq = #f_intg_bl_seq#
            </isNotEmpty>           
            <isNotEmpty property="f_bl_no">
                AND bl.bl_no  = #f_bl_no#
            </isNotEmpty>
        </dynamic>
      ORDER BY  cntr_list_seq ASC
    </select>
    
    <!--Container Number 코드 생성위해   -->
    <select id="selectMBL_CNTR_NO_LIST" parameterClass="HashMap" resultClass="HashMap">
        SELECT  cntr_list_seq AS  cd_val , cntr_no AS cd_nm
          FROM  tb_cntr_list cntr
          LEFT OUTER JOIN tb_intg_bl bl ON cntr.intg_bl_seq = bl.intg_bl_seq
         WHERE  1 = 1
           AND bl.BIZ_CLSS_CD = 'M'
           AND cntr.DELT_FLG = 'N'
           AND bl.ref_no = #f_ref_no#
      ORDER BY  cntr_list_seq ASC
    </select>
    
    <!-- Item목록 조회   -->
    <select id="selectSHP_CMDT_LIST" parameterClass="HashMap" resultClass="ItmLstVO">
    
	        SELECT  cdt.intg_bl_seq,       cdt.cntr_list_seq AS item_cntr_list_seq,   cdt.shp_cmdt_seq AS item_shp_cmdt_seq,       
	                cdt.wgt AS item_wgt,   cdt.meas AS item_meas,    cdt.rmk          AS item_rmk,       
	                cdt.pck_qty     AS item_pck_qty,                 cdt.pck_ut_cd    AS item_pck_ut_cd,
			        cdt.dg_cd_tp    AS item_dg_cd_tp,                cdt.dg_cd  AS item_dg_cd, cdt.dg_cntc_nm  AS item_dg_cntc_nm,
			
	                cdt.shp_cmdt_cd AS item_shp_cmdt_cd,
	                cdt.shp_cmdt_nm AS item_shp_cmdt_nm,             pcd.pck_nm  AS item_pck_nm,
			           
	                ctl.cntr_no     AS item_cntr_no,
	                
	                cdt.hs_grp_cd		AS item_hs_grp_cd,
	                cdt.cmdt_cd     	AS item_cmdt_cd,
	                <!-- tb_shp_cmdt테이블의 Commodity(Item)을 ITEM_SYS_NO로 관리하지 않고 ITEM_NO로 관리하고 있어, 아래와 같이 쿼리를 작성하였습니다.
				         고객사 tb_shp_cmdt의 item을 ITEM_SYS_NO로 업데이트(마이그레이션)가 불가 
				      -->
	                CASE WHEN ISNULL(ritm.ITEM_NM,'') = '' THEN  
						ISNULL((SELECT TOP 1 ITEM_NM FROM TL_CTRT_CUST_ITEM ITEM 
						JOIN TL_CTRT CTRT ON CTRT.CTRT_NO = ITEM.CTRT_NO 
						JOIN TB_BL_PRNR PRNR ON PRNR.BL_TRDP_TP_CD ='C01' AND PRNR.TRDP_CD = CTRT.CTRT_CUST_CD AND PRNR.INTG_BL_SEQ =  CDT.INTG_BL_SEQ  
						WHERE ITEM.ITEM_CD = CDT.CMDT_CD),'') 
					ELSE ritm.ITEM_NM END AS  ITEM_CMDT_NM , 
	                cdt.po_cmdt_seq     AS item_po_cmdt_seq,
					cdt.po_sys_no     	AS item_po_sys_no,
					po.cust_po_no		AS item_cust_po_no,
					cdt.pck_inr_qty     AS item_pck_inr_qty,
					cdt.ea_cnt     		AS item_ea_cnt,					
					cdt.ttl_qty     	AS item_ttl_qty,					
					cdt.lbs_wgt     	AS item_lbs_wgt,					
					cdt.cft_meas     	AS item_cft_meas,
                    isnull(ritm.item_sys_no,'') as item_sys_no
	          FROM  tb_shp_cmdt cdt
	          LEFT OUTER JOIN  tb_cntr_list ctl ON cdt.cntr_list_seq = ctl.cntr_list_seq AND cdt.INTG_BL_SEQ = ctl.INTG_BL_SEQ
	          LEFT OUTER JOIN tb_pck_ut_cd pcd ON cdt.pck_ut_cd = pcd.pck_ut_cd
	          LEFT OUTER JOIN tb_po po ON cdt.po_sys_no = po.po_sys_no AND po.delt_flg = 'N'
	          LEFT OUTER JOIN tb_po_cmdt po_cmdt ON po.po_sys_no = po_cmdt.po_sys_no AND cdt.po_cmdt_seq = po_cmdt.po_cmdt_seq AND po_cmdt.delt_flg = 'N'
			  LEFT OUTER JOIN tl_ctrt_cust_item itm ON po_cmdt.ctrt_no = itm.ctrt_no AND po_cmdt.item_sys_no = itm.item_sys_no AND po_cmdt.cust_itm_id = itm.item_cd AND itm.item_use_flg = 'Y' 
	          LEFT OUTER JOIN tl_ctrt_cust_item ritm ON cdt.item_sys_no = ritm.item_sys_no and ritm.item_use_flg = 'Y' 
	         WHERE  cdt.intg_bl_seq = cast(#intg_bl_seq# as varchar) AND cdt.delt_flg = 'N'                  
	      ORDER BY  cdt.shp_cmdt_seq  ASC
    </select>
    
    
    <!-- PICKUP/WORKORDER 조회   -->
    <select id="selectWO_LIST" resultClass="com.clt.apps.fis.see.bmd.workorder.dto.WoOrdVO" parameterClass="HashMap">
    <!--BlCmmSQL> selectWO_LIST   -->
        SELECT wo.wo_no,
               wo.wo_sts_cd,
               wo.pickup_trdp_nm,
               wo.delivery_trdp_nm,
               wo.return_trdp_nm,
               wo.trucker_trdp_nm,
               wo.act_wgt_k
         FROM  tb_pd_ord wo
        WHERE  wo.intg_bl_seq = cast(#intg_bl_seq# as varchar)
          AND wo.delt_flg = 'N'
    </select>
    
    <!-- PICKUP/WORKORDER 조회   -->
    <select id="selectBkg_WO_LIST" resultClass="com.clt.apps.fis.see.bmd.workorder.dto.WoOrdVO" parameterClass="HashMap">
    <!--BlCmmSQL> selectWO_LIST   -->
        SELECT wo.wo_no,
               wo.wo_sts_cd,
               wo.pickup_trdp_nm,
               wo.delivery_trdp_nm,
               wo.return_trdp_nm,
               wo.trucker_trdp_nm,
               wo.act_wgt_k
         FROM  tb_pd_ord wo
        WHERE  wo.bkg_seq = #bkg_seq#
          AND wo.delt_flg = 'N'
    </select>    
    
    
<!--수출신고 번호   -->
    
    <!--CONTAINER SEAL NUMBER SEQ생성  -->
    <select id="selectEDI_INFO_PK" parameterClass="String" resultClass="Integer">
        SELECT  ISNULL(MAX(edi_xpt_seq),0)+1
          FROM  tb_edi_info
		 WHERE  intg_bl_seq = #value#
    </select>

    <!-- 수출신고 번호 등록   -->
    <insert id="insertEDI_INFO" parameterClass="com.clt.apps.fis.see.bmd.housebl.dto.EdiXptInfoVO">
        INSERT INTO tb_edi_info(
            intg_bl_seq,   edi_xpt_seq,    mbl_no,           xpt_no,     edi_snd_sts_cd,
            pck_qty,       pck_ut_cd,      edi_grs_wt,       sprt_flg,   
        <isNotEmpty property="sprt_seq">
            sprt_seq,
        </isNotEmpty>
            sam_pck_tp,    sam_pck_qty,    sam_pck_ut_cd,
        
            rgst_usrid,    rgst_ofc_cd,    rgst_tms,
            modi_usrid,    modi_ofc_cd,    modi_tms,         delt_flg
        )VALUES(
           #intg_bl_seq#,  #edi_xpt_seq#,  #mbl_no#,         #xpt_no#,     'CT',
           #edi_pck_qty#,  #edi_pck_ut_cd#,#edi_grs_wt#,     #sprt_flg#,   
        
        <isNotEmpty property="sprt_seq">
            #sprt_seq#,
        </isNotEmpty>
           #sam_pck_tp#,   #sam_pck_qty#,  #sam_pck_ut_cd#,
        
           #proc_usrid#,   #proc_ofccd#,   getdate(),
           #proc_usrid#,   #proc_ofccd#,   GETUTCDATE(),        'N'        
        )
    </insert>
    
    <!-- 수출신고 번호 수정   -->
    <update id="updateEDI_INFO" parameterClass="com.clt.apps.fis.see.bmd.housebl.dto.EdiXptInfoVO">
        UPDATE  tb_edi_info
           SET  mbl_no     = #mbl_no#,        xpt_no     = #xpt_no#,          edi_snd_sts_cd= #edi_snd_sts_cd#,
                pck_qty    = #edi_pck_qty#,   pck_ut_cd  = #edi_pck_ut_cd#,   edi_grs_wt    = #edi_grs_wt#,
                sprt_flg   = #sprt_flg#,      
        <isNotEmpty property="sprt_seq">
                sprt_seq   = #sprt_seq#,
        </isNotEmpty>
        <isEmpty property="sprt_seq">
                sprt_seq   = NULL,
        </isEmpty>
                sam_pck_tp = #sam_pck_tp#,    sam_pck_qty= #sam_pck_qty#,     sam_pck_ut_cd = #sam_pck_ut_cd#,
                modi_usrid = #proc_usrid#,    modi_ofc_cd= #proc_ofccd#,      modi_tms      = GETUTCDATE()
         WHERE  intg_bl_seq= cast(#intg_bl_seq# as varchar)  AND  edi_xpt_seq = #edi_xpt_seq#        
    </update>
    
    <!-- 수출신고 번호 삭제   -->
    <delete id="deleteEDI_INFO" parameterClass="com.clt.apps.fis.see.bmd.housebl.dto.EdiXptInfoVO">
        DELETE  tb_edi_info
         WHERE  intg_bl_seq= cast(#intg_bl_seq# as varchar)  AND  edi_xpt_seq = #edi_xpt_seq#        
    </delete>
    
    <!-- 수출신고 번호 조회   -->
    <select id="selectEDI_INFO" parameterClass="HashMap" resultClass="com.clt.apps.fis.see.bmd.housebl.dto.EdiXptInfoVO">
        SELECT xpt.intg_bl_seq,   xpt.edi_xpt_seq,    xpt.mbl_no,           xpt.xpt_no,     xpt.edi_snd_sts_cd,
               xpt.edi_grs_wt,    xpt.sprt_flg,       xpt.sprt_seq,         cdt.cd_nm AS edi_snd_sts_nm,
               xpt.sam_pck_tp,    xpt.sam_pck_qty,    xpt.sam_pck_ut_cd,
               xpt.pck_qty AS edi_pck_qty,            
               xpt.pck_ut_cd AS edi_pck_ut_cd,        utc.pck_nm AS edi_pck_ut_nm
         FROM  tb_edi_info xpt
        
LEFT OUTER JOIN tb_pck_ut_cd  utc
           ON  xpt.pck_ut_cd = utc.pck_ut_cd AND utc.delt_flg = 'N'
        
LEFT OUTER JOIN tb_com_cd_dtl cdt
           ON  xpt.edi_snd_sts_cd = cdt.cd_val AND cdt.com_cd = 'C061'
        
        WHERE  xpt.intg_bl_seq = cast(#intg_bl_seq# as varchar)  
          AND  xpt.delt_flg    = 'N'
     ORDER BY  xpt.edi_xpt_seq ASC
    </select>
    
    
<!-- 거래처 사업자 정보 조회  -->
    <select id="selectCmpInfo" parameterClass="HashMap" resultClass="com.clt.apps.fis.mdm.mcm.partner.dto.TrdpVO">  
        SELECT  trdp_cd, eng_nm, biz_no 
          FROM  tb_trdp
         WHERE  trdp_cd = #trdp_cd# AND delt_flg = 'N'
    </select>
    
    <!-- 담당자정보를 조회한다.   -->
    <select id="selectBlUserList" parameterClass="HashMap" resultClass="com.clt.apps.fis.sal.tpm.tradepartner.dto.TrdpCntcPsonVO">
        SELECT  ps.cntc_pson_seq,    ps.pic_nm,         ps.trd_div_nm,    
                ps.pic_phn,          ps.pic_fax,        ps.pic_eml,        ps.pic_desc, 
                CASE WHEN pnr.trdp_pic_usr_id = ps.cntc_pson_seq THEN 'Y'
                     ELSE 'N'
                END  AS rep_flg
          FROM  tb_trdp_cntc_pson ps
          JOIN  tb_bl_prnr pnr
            ON  ps.trdp_cd  = pnr.trdp_cd
         WHERE  ps.delt_flg = 'N'
           AND  pnr.trdp_cd = #trdp_cd#
           AND  pnr.intg_bl_seq= cast(#intg_bl_seq# as varchar)
		   AND  bl_trdp_tp_cd  = #trdp_tp#
           AND  pnr.DELT_FLG   = 'N'
      ORDER BY  ps.cntc_pson_seq ASC
    </select>
    
    <!-- 거래처 담당자 정보를 수정함   -->
    <update id="updateBlPicInfo" parameterClass="HashMap">
        UPDATE tb_bl_prnr
           SET trdp_pic_usr_id = #trdp_pic_usr_id#
         WHERE intg_bl_seq     = cast(#intg_bl_seq# as varchar) 
           AND trdp_cd = #trdp_cd# 
    </update>
    
    <!--통합 BL테이블 복사   -->
    <insert id="insertMBL_INTG_BL_COPY" parameterClass="HashMap">
        INSERT  tb_intg_bl(
                intg_bl_seq,        bkg_no,             hbl_tp_cd,          po_no,
                bl_sts_cd,          bkg_seq,            sr_no,              sr_seq,                 sr_cre_dt,
                biz_clss_cd,        air_sea_clss_cd,    shp_tp_cd,
                lnr_bkg_no,         shp_mod_cd,         inco_cd,            bkg_dt_tm,              bl_iss_dt,
                frt_term_cd,        rep_cmdt_cd,        rep_cmdt_nm,        pck_qty,                pck_ut_cd,
                grs_wgt,            grs_wgt_ut_cd,      act_wgt,            act_wgt_ut_cd,          meas,          meas_ut_cd,         
                fm_svc_term_cd,     to_svc_term_cd,     srd_flg, 
             
                por_cd,             			        por_nm,             pol_cd,                 pol_nod_cd,    pol_nm,                 
                pod_cd,             pod_nod_cd,         pod_nm,             del_cd,                 del_nm,
                iss_loc_cd,         iss_loc_nm,         pay_loc_cd,         pay_loc_nm,
        
                fnl_dest_loc_cd,    fnl_dest_loc_nm,    cgo_rcv_dt_tm,          cfs_loc_cd,
                cfs_nod_cd,         de_due_dt,          
                pre_vsl_cd,         pre_vsl_nm,         pre_voy,            trnk_vsl_cd,            trnk_vsl_nm,    trnk_voy,           
                cgo_clz_dt_tm,      obrd_dt_tm,         etd_dt_tm,          eta_dt_tm,
                lnr_rmk,            mk_txt,             desc_txt,           rmk,                    say_txt,        sad_txt,              mm_txt,
                act_shp_info,       wgt_disp_cd,
        
                rgst_usrid,         rgst_ofc_cd,        rgst_tms,
                modi_usrid,         modi_ofc_cd,        dept_cd,              modi_usr_nm,          modi_tms,       delt_flg
                
        )  SELECT   #intg_bl_seq#,      #bkg_no#,           hbl_tp_cd,        po_no,
                    #bl_sts_cd#,        #bkg_seq#,          #sr_no#,          #sr_seq#,             getdate(),
                    biz_clss_cd,        air_sea_clss_cd,    shp_tp_cd,
                    lnr_bkg_no,         shp_mod_cd,         inco_cd,          bkg_dt_tm,            bl_iss_dt,
                    frt_term_cd,        rep_cmdt_cd,        rep_cmdt_nm,      pck_qty,              pck_ut_cd,
                    grs_wgt,            grs_wgt_ut_cd,      act_wgt,          act_wgt_ut_cd,        meas,          meas_ut_cd,         
                    fm_svc_term_cd,     to_svc_term_cd,     srd_flg, 
                 
                    por_cd,             					por_nm,           pol_cd,               pol_nod_cd,    pol_nm,                 
                    pod_cd,             pod_nod_cd,         pod_nm,           del_cd,               del_nm,
                    iss_loc_cd,         iss_loc_nm,         pay_loc_cd,       pay_loc_nm,
            
                    fnl_dest_loc_cd,    fnl_dest_loc_nm,  cgo_rcv_dt_tm,        cfs_loc_cd,
                    cfs_nod_cd,         de_due_dt,          
                    pre_vsl_cd,         pre_vsl_nm,         pre_voy,          trnk_vsl_cd,          trnk_vsl_nm,    trnk_voy,           
                    cgo_clz_dt_tm,      obrd_dt_tm,         etd_dt_tm,        eta_dt_tm,
                    lnr_rmk,            mk_txt,             desc_txt,         rmk,                  say_txt,        sad_txt,              mm_txt,
                    act_shp_info,	    wgt_disp_cd,
            
                    #proc_usrid#,      #proc_ofccd#,        getdate(),
                    #proc_usrid#,      #proc_ofccd#,        #proc_dept_cd#,   #proc_usrnm#,         GETUTCDATE(),      delt_flg
             FROM   tb_intg_bl
            WHERE   intg_bl_seq = #org_intg_bl_seq# AND delt_flg = 'N'
    </insert>
    
    <!--통합 BL테이블 복사   -->
    <insert id="insertINTG_BL_COPY" parameterClass="HashMap">
        INSERT  tb_intg_bl(
                intg_bl_seq,        bl_sts_cd,          sr_no,        
                bkg_no,             bkg_seq,            bl_no,              hbl_seq,                hbl_cre_dt,
                hbl_tp_cd,          po_no,
                biz_clss_cd,        air_sea_clss_cd,    shp_tp_cd,
                lnr_bkg_no,         shp_mod_cd,         inco_cd,            bkg_dt_tm,              bl_iss_dt,
                frt_term_cd,        rep_cmdt_cd,        rep_cmdt_nm,        pck_qty,                pck_ut_cd,
                grs_wgt,            grs_wgt_ut_cd,      act_wgt,            act_wgt_ut_cd,          meas,          meas_ut_cd,         
                fm_svc_term_cd,     to_svc_term_cd,     srd_flg, 
             
                por_cd,             					por_nm,             pol_cd,                 pol_nod_cd,    pol_nm,                 
                pod_cd,             pod_nod_cd,         pod_nm,             del_cd,                 del_nm,
                iss_loc_cd,         iss_loc_nm,         pay_loc_cd,         pay_loc_nm,
        
                fnl_dest_loc_cd,    fnl_dest_loc_nm,    cgo_rcv_dt_tm,          cfs_loc_cd,
                cfs_nod_cd,         de_due_dt,          
                pre_vsl_cd,         pre_vsl_nm,         pre_voy,            trnk_vsl_cd,            trnk_vsl_nm,    trnk_voy,           
                cgo_clz_dt_tm,      obrd_dt_tm,         etd_dt_tm,          eta_dt_tm,
                lnr_rmk,            mk_txt,             desc_txt,           rmk,                    say_txt,        sad_txt,              mm_txt,
                act_shp_info,
        
                rgst_usrid,         rgst_ofc_cd,        rgst_tms,
                modi_usrid,         modi_ofc_cd,        dept_cd,            modi_usr_nm,            modi_tms,       delt_flg
                
        )  SELECT   #intg_bl_seq#,      #bl_sts_cd#,       #sr_no#,      
                    #bkg_no#,           #bkg_seq#,         #bl_no#,            #hbl_seq#,              getdate(),  
                    
                    #hbl_tp_cd#,        po_no,
                    
                    biz_clss_cd,        air_sea_clss_cd,    shp_tp_cd,
                    lnr_bkg_no,         shp_mod_cd,         inco_cd,            bkg_dt_tm,              bl_iss_dt,
                    frt_term_cd,        rep_cmdt_cd,        rep_cmdt_nm,        pck_qty,                pck_ut_cd,
                    grs_wgt,            grs_wgt_ut_cd,      act_wgt,            act_wgt_ut_cd,          meas,          meas_ut_cd,         
                    fm_svc_term_cd,     to_svc_term_cd,     srd_flg, 
                 
                    por_cd,             					por_nm,             pol_cd,                 pol_nod_cd,    pol_nm,                 
                    pod_cd,             pod_nod_cd,         pod_nm,             del_cd,                 del_nm,
                    iss_loc_cd,         iss_loc_nm,         pay_loc_cd,         pay_loc_nm,
            
                    fnl_dest_loc_cd,    fnl_dest_loc_nm,    cgo_rcv_dt_tm,          cfs_loc_cd,
                    cfs_nod_cd,         de_due_dt,          
                    pre_vsl_cd,         pre_vsl_nm,         pre_voy,            trnk_vsl_cd,            trnk_vsl_nm,    trnk_voy,           
                    cgo_clz_dt_tm,      obrd_dt_tm,         etd_dt_tm,          eta_dt_tm,
                    lnr_rmk,            mk_txt,             desc_txt,           rmk,                    say_txt,        sad_txt,              mm_txt,
                    act_shp_info,
            
                    #proc_usrid#,         #proc_ofccd#,         getdate(),
                    #proc_usrid#,         #proc_ofccd#,         #proc_dept_cd#,       #proc_usrnm#,              GETUTCDATE(),                 delt_flg
             FROM   tb_intg_bl
            WHERE   intg_bl_seq = #org_intg_bl_seq# AND delt_flg = 'N'
    </insert>
        
    <!-- BL추가정보 테이블 복사   -->
    <insert id="insertADD_INFO_BND_COPY" parameterClass="HashMap">
        INSERT INTO tb_add_info_bnd( 
            intg_bl_seq,     bnd_clss_cd,
            clz_flg,         cfm_flg,          jb_tmplt_seq,  
            sls_ofc_cd,      sls_dept_cd,      sls_usrid,     sls_usr_nm,     pic_usrid,   
            rgst_usrid,      rgst_ofc_cd,      rgst_tms,      
            modi_usrid,      modi_ofc_cd,      modi_tms,      delt_flg , doc_form
        )SELECT  #intg_bl_seq#,   #bnd_clss_cd#,
                 'N',             'N',              #jb_tmplt_seq#, 
                 sls_ofc_cd,      sls_dept_cd,      sls_usrid,       sls_usr_nm,     pic_usrid,
                 #proc_usrid#,    #proc_ofccd#,     getdate(),
                 #proc_usrid#,    #proc_ofccd#,     GETUTCDATE(),       'N' , doc_form
           FROM  tb_add_info_bnd
          WHERE  intg_bl_seq = #org_intg_bl_seq# AND delt_flg = 'N'
    </insert>

    <!-- BL PARTNER 등록  -->
    <insert id="insertBL_PRNR_COPY" parameterClass="HashMap">
        INSERT INTO tb_bl_prnr(                                                      
              intg_bl_seq,          bl_trdp_tp_cd,    
              trdp_cd,              trdp_addr,          trdp_nm,
              
              trdp_pic_usr_id,      trdp_pic,           trdp_phn,      trdp_fax,     trdp_eml,
              
              rgst_usrid,           rgst_ofc_cd,        rgst_tms,        
              modi_usrid,           modi_ofc_cd,        modi_tms,      delt_flg
                                                               
        )SELECT   #intg_bl_seq#,    bl_trdp_tp_cd,
                  trdp_cd,          trdp_addr,          trdp_nm,
                  trdp_pic_usr_id,  trdp_pic,           trdp_phn,      trdp_fax,     trdp_eml,
                  #proc_usrid#,     #proc_ofccd#,       getdate(),
                  #proc_usrid#,     #proc_ofccd#,       GETUTCDATE(),     delt_flg

           FROM  tb_bl_prnr
          WHERE  intg_bl_seq = #org_intg_bl_seq# AND delt_flg = 'N'
    </insert>
    
    
    <!--Container목록에 저장  -->
    <insert id="insertCNTR_LIST_COPY" parameterClass="HashMap">
        INSERT INTO tb_cntr_list(
            intg_bl_seq,        cntr_list_seq,       rgst_cntr_yn,
            cntr_no,            cntr_tpsz_cd,        
            temp_cd,           
            vent_cd,		  
            temp_val,
            cgo_pck_qty,        cgo_pck_ut,          cgo_wgt,           cgo_meas,         vol_meas,
            soc_flg,            dg_gds_flg,          cntr_rmk,
            seal_no1,           seal_no2,            seal_no3, 
            cntr_sprl_trdp_cd,
            rgst_usrid,         rgst_ofc_cd,         rgst_tms,
            modi_usrid,         modi_ofc_cd,         modi_tms,          delt_flg
        )
        SELECT #intg_bl_seq#,       cntr_list_seq,       rgst_cntr_yn, 
                cntr_no,            cntr_tpsz_cd,        
                temp_cd,           
                vent_cd,       
                temp_val,
                cgo_pck_qty,        cgo_pck_ut,          cgo_wgt,           cgo_meas,         vol_meas, 
                soc_flg,            dg_gds_flg,          cntr_rmk, 
                seal_no1,           seal_no2,            seal_no3, 
                cntr_sprl_trdp_cd,
                #proc_usrid#,        #proc_ofccd#,       getdate(),
                #proc_usrid#,        #proc_ofccd#,       GETUTCDATE(),         delt_flg
          FROM  tb_cntr_list
         WHERE  intg_bl_seq = #org_intg_bl_seq# AND delt_flg = 'N'
    </insert>

    <!-- Item등록  -->
    <insert id="insertSHP_CMDT_COPY" parameterClass="HashMap">
        INSERT INTO tb_shp_cmdt(
            intg_bl_seq,     shp_cmdt_seq,    cntr_list_seq,
            shp_cmdt_cd,     pck_qty,         pck_ut_cd,        
            wgt,             meas,            rmk,
		    dg_cd_tp,        dg_cd,  dg_cntc_nm,
		          
            rgst_usrid,      rgst_ofc_cd,     rgst_tms,
            modi_usrid,      modi_ofc_cd,     modi_tms,      delt_flg,
            
            hs_grp_cd,		 cmdt_cd,		  po_cmdt_seq,		        
            po_sys_no,		 pck_inr_qty,	  ea_cnt,		        
            ttl_qty,		 lbs_wgt,		  cft_meas
        )SELECT #intg_bl_seq#,   shp_cmdt_seq,    cntr_list_seq,
                shp_cmdt_cd,     pck_qty,         pck_ut_cd,
                wgt,             meas,            rmk,
		        dg_cd_tp,        dg_cd, dg_cntc_nm,
		
                #proc_usrid#,    #proc_ofccd#,    getdate(),
                #proc_usrid#,    #proc_ofccd#,    GETUTCDATE(),     delt_flg,
                hs_grp_cd,		 cmdt_cd,		  po_cmdt_seq,		        
	            po_sys_no,		 pck_inr_qty,	  ea_cnt,		        
	            ttl_qty,		 lbs_wgt,		  cft_meas
          FROM  tb_shp_cmdt
         WHERE  intg_bl_seq = #org_intg_bl_seq# AND delt_flg = 'N'
    </insert>

    
    <!-- MBL과 HBL 관계 테이블 생성   -->
    <insert id="insertINTG_BL_RLT_COPY" parameterClass="HashMap">
        INSERT INTO  tb_intg_bl_rlt(
                 intg_bl_seq,     rlt_intg_bl_seq,   intg_bl_rlt_cd,
                 rgst_usrid,      rgst_ofc_cd,       rgst_tms,         
                 modi_usrid,      modi_ofc_cd,       modi_tms,     delt_flg
        )VALUES(
                #intg_bl_seq#,    #rlt_intg_bl_seq#, #intg_bl_rlt_cd#,
                #proc_usrid#,     #proc_ofccd#,      getdate(),
                #proc_usrid#,     #proc_ofccd#,      GETUTCDATE(),        'N'
        )
    </insert>
    
	
    <!-- 수출신고 번호 등록   -->
    <insert id="insertEDI_INFO_COPY" parameterClass="HashMap">
        INSERT INTO tb_edi_info(
            intg_bl_seq,   edi_xpt_seq,    xpt_no,           edi_snd_sts_cd,
        
            rgst_usrid,    rgst_ofc_cd,    rgst_tms,
            modi_usrid,    modi_ofc_cd,    modi_tms,         delt_flg
        )VALUES(
           #intg_bl_seq#,  #edi_xpt_seq#,  #xpt_no#,         'CT',
        
           #proc_usrid#,   #proc_ofccd#,   getdate(),
           #proc_usrid#,   #proc_ofccd#,   GETUTCDATE(),        'N'        
        )
    </insert>

	
	<!-- 수출 정보를 조회함   -->
	<select id="selectEXP_INFO" parameterClass="String" resultClass="com.clt.apps.common.dto.CmmAjaxVO">
		  SELECT  mbl.bl_ser_no AS select_code,      '' AS code_shrt_name,
		          hbl.bl_ser_no AS select_sub_code    
			FROM  tb_intg_bl hbl
			JOIN  tb_intg_bl_rlt rlt
			  ON  hbl.intg_bl_seq = rlt.intg_bl_seq
		 
			JOIN  tb_intg_bl mbl
			  ON  mbl.intg_bl_seq = rlt.rlt_intg_bl_seq   
		     AND  mbl.biz_clss_cd = 'M'            AND  mbl.delt_flg = 'N'
		
		   WHERE  hbl.intg_bl_seq = cast(#intg_bl_seq# as varchar)  AND  hbl.delt_flg = 'N'
		     AND  hbl.biz_clss_cd = 'H'
	</select>
	
    <!--BL삭제시 Disable  -->
    <update id="removeEDI_INFO" parameterClass="HashMap">
        UPDATE  tb_edi_info
           SET  delt_flg   = #delt_flg#,
                modi_usrid = #proc_usrid#,     modi_ofc_cd = #proc_ofccd#, 
                modi_tms   = GETUTCDATE()
         WHERE  intg_bl_seq= cast(#intg_bl_seq# as varchar)
    </update>
    
    <update id="removeFRT" parameterClass="HashMap">
        UPDATE  tb_frt
           SET  delt_flg   = #delt_flg#,
                modi_usrid = #proc_usrid#,     modi_ofc_cd = #proc_ofccd#, 
                modi_tms   = GETUTCDATE()
         WHERE  intg_bl_seq= cast(#intg_bl_seq# as varchar)
    </update>
    
    <update id="removeBL_PRNR" parameterClass="HashMap">
        UPDATE  tb_bl_prnr
           SET  delt_flg   = #delt_flg#,
                modi_usrid = #proc_usrid#,     modi_ofc_cd = #proc_ofccd#, 
                modi_tms   = GETUTCDATE()
         WHERE  intg_bl_seq= cast(#intg_bl_seq# as varchar)
    </update>
    
    <update id="removeCNTR_SMRY" parameterClass="HashMap">
        UPDATE  tb_cntr_smry
           SET  delt_flg   = #delt_flg#,
                modi_usrid = #proc_usrid#,     modi_ofc_cd = #proc_ofccd#,  
                modi_tms   = GETUTCDATE()
         WHERE  intg_bl_seq= cast(#intg_bl_seq# as varchar)
    </update>
    
    <update id="removeADD_INFO_BND" parameterClass="HashMap">
        UPDATE  tb_add_info_bnd
           SET  delt_flg   = #delt_flg#,
                modi_usrid = #proc_usrid#,     modi_ofc_cd = #proc_ofccd#,   
                modi_tms   = GETUTCDATE()
         WHERE  intg_bl_seq= cast(#intg_bl_seq# as varchar)
    </update>
    
    <update id="removePALT_SHP_DOC" parameterClass="HashMap">
        UPDATE  tb_palt_shp_doc
           SET  delt_flg   = #delt_flg#,
                modi_usrid = #proc_usrid#,     modi_ofc_cd = #proc_ofccd#, 
                modi_tms   = GETUTCDATE()
         WHERE  intg_bl_seq= cast(#intg_bl_seq# as varchar)
    </update>
    
    <update id="removeSHP_CMDT" parameterClass="HashMap">
        UPDATE  tb_shp_cmdt
           SET  delt_flg   = #delt_flg#,
                modi_usrid = #proc_usrid#,     modi_ofc_cd = #proc_ofccd#, 
                modi_tms   = GETUTCDATE()
         WHERE  intg_bl_seq= cast(#intg_bl_seq# as varchar)
    </update>
    
    <update id="removeCNTR_LIST" parameterClass="HashMap">
        UPDATE  tb_cntr_list
                 SET  delt_flg   = #delt_flg#,
                modi_usrid = #proc_usrid#,     modi_ofc_cd = #proc_ofccd#, 
                modi_tms   = GETUTCDATE()
         WHERE  intg_bl_seq= cast(#intg_bl_seq# as varchar)
    </update>
    
    <update id="removeINTG_BL" parameterClass="HashMap">
        UPDATE  tb_intg_bl
           SET  delt_flg   = #delt_flg#,
                modi_usrid = #proc_usrid#,     modi_ofc_cd = #proc_ofccd#,    modi_usr_nm = #proc_usrnm#, 
                modi_tms   = GETUTCDATE()
         WHERE  intg_bl_seq= cast(#intg_bl_seq# as varchar)
    </update>
    
    <update id="removeBL_RLT" parameterClass="HashMap">
        <!--
        UPDATE  tb_intg_bl_rlt
           SET  delt_flg   = #delt_flg#,
                modi_usrid = #proc_usrid#,     modi_ofc_cd = #proc_ofccd#, 
                modi_tms   = getdate()
         WHERE  rlt_intg_bl_seq= #intg_bl_seq#
          -->
		/* BlCmmSQL.xml > removeBL_RLT */
        DELETE  tb_intg_bl_rlt
         WHERE  rlt_intg_bl_seq= cast(#intg_bl_seq# as varchar)
    </update>
    

    <update id="removeBL_RLT_BY_HBL" parameterClass="HashMap">
		/* BlCmmSQL.xml > removeBL_RLT_BY_HBL */
        DELETE  tb_intg_bl_rlt
         WHERE  intg_bl_seq= cast(#intg_bl_seq# as varchar)
    </update>

    <!-- ZOOT=NoPaging 처리  -->
    <select id="selectBL_LIST_NOPAGING_MAX" parameterClass="java.util.HashMap" resultClass="HashMap">
           /* selectBL_LIST_NOPAGING_MAX */
	        SELECT MIN(post_dt) post_dt_start, MAX(post_dt) post_dt_end 
	        	FROM (
			        SELECT  TOP $topCnt$
				         			post_dt
							  FROM  tb_intg_bl bl with(nolock) 
							  JOIN  tb_add_info_bnd bnd  with(nolock) 
								ON  bl.intg_bl_seq = bnd.intg_bl_seq AND bnd.bnd_clss_cd = #bnd_clss_cd#       
							 WHERE  bl.delt_flg = 'N' 
							<isNotEmpty property="f_ofc_cd">
							   AND  bl.ref_ofc_cd = #f_ofc_cd#
							</isNotEmpty>
							   AND  bl.air_sea_clss_cd = #air_sea_clss_cd#
							   AND  bl.biz_clss_cd  = #biz_clss_cd#
			 			    ORDER BY BL.post_dt DESC, BL.modi_tms DESC
			 	) A
		 	
    </select>
    <!-- ZOOT=NoPaging 처리  -->
     <!-- ZOOT=LIST PAGE AR_AP_DC STAUS PROCESS -->
    <!-- ZOOT=2015-01-08 NoPaging 처리  --> 
    <select id="selectHBL_LIST_NOPAGING" parameterClass="java.util.HashMap" resultClass="HBLInfoVO">
           /* selectHBL_LIST_NOPAGING */
            	with blinfo as (
					select a1.* from (
						select 
								ROW_NUMBER() OVER (
							ORDER BY
								BL.POST_DT DESC,
								BL.MODI_TMS DESC) as ROWNUM,
								BL.*
								,ISNULL(bnd.AR_CHK,'X') AS AR_CHK
								,ISNULL(bnd.AP_CHK,'X') AS AP_CHK
								,ISNULL(bnd.DC_CHK,'X') AS DC_CHK
								,ISNULL(bnd.FRT_CHK,'X') AS FRT_CHK
								,bnd.issued_by
								,bnd.hbl_ser_no
								,bnd.entr_no
								,bnd.hbl_cut_off_dt
								,bnd.pkup_dt
								,bnd.an_fax_snd_dt
								,bnd.an_eml_snd_dt
								<!-- #30 #52843 - [IMPEX] 독일 지점 OPUS 기능 추가 관련의 건 -->
								,bnd.surrend
								,bnd.sls_usrid
								,bnd.sls_usr_nm
								<!-- OFVFOUR-7976: [MATRIX] ADDING CS PIC ON ALL B/L ENTRY AND TRADE PARTNER ENTRY SCREEN -->
								,bnd.cs_usrid
								,bnd.cs_usr_nm
								,bnd.VERIFY_FLAG
						        ,bnd.PAY_FLAG
								<!-- #1619 [CLT] Original B/L Type- 항목 정리,bnd.bl_rlse_tp_cd  --> <!--#1430 [PATENT] 0215_15 B/L TYPE DIVERSELY  -->
								,bnd.RELEASE_FLAG as bnd_release_flag
            					,bnd.HOLD_FLAG  as bnd_hold_flag
            					,bnd.tli_no
            					
						 from 
							TB_INTG_BL BL with(nolock) 
							JOIN  tb_add_info_bnd bnd with(nolock) 
							ON  bl.intg_bl_seq = bnd.intg_bl_seq AND bnd.bnd_clss_cd = #bnd_clss_cd# 						
							<isNotEmpty property="f_ofc_cd">
							   AND  bl.ref_ofc_cd = #f_ofc_cd#
							</isNotEmpty>
							<isNotEmpty property="f_bl_ser_no_frm">
								<isNotEmpty property="f_bl_ser_no_to">
								 	AND  bnd.hbl_ser_no between #f_bl_ser_no_frm# and #f_bl_ser_no_to#
								</isNotEmpty>
							</isNotEmpty>
							<isNotEmpty property="sls_usrid">
								AND bnd.sls_usrid = #sls_usrid#
							</isNotEmpty>
							<!-- OFVFOUR-7976: [MATRIX] ADDING CS PIC ON ALL B/L ENTRY AND TRADE PARTNER ENTRY SCREEN -->
                            <isNotEmpty property="cs_usrid">
                                AND bnd.cs_usrid = #cs_usrid#
                            </isNotEmpty>
						WHERE  bl.delt_flg = 'N'
						  AND  bl.air_sea_clss_cd = #air_sea_clss_cd#
						  AND  bl.biz_clss_cd  = #biz_clss_cd#					
					) a1   
				<![CDATA[ where a1.ROWNUM > #beginIdx# AND a1.ROWNUM <= #topCnt#	]]>
				)
            	SELECT  
		         			BL.INTG_BL_SEQ, X.RLT_INTG_BL_SEQ, 
		         			<!-- x.DOC_CUT_OFF_DT, -->
		         			BL.HBL_CUT_OFF_DT as DOC_CUT_OFF_DT,
							BL.BL_NO AS HBL_NO, BL.REF_NO, BL.REF_OFC_CD, X.BL_NO AS MBL_NO,
							(SELECT UPPER(X.CNT_CD) FROM TB_OFC X WHERE X.OFC_CD = BL.REF_OFC_CD AND X.DELT_FLG = 'N') AS REF_OFC_CNT,
							BL.ETD_DT_TM, BL.ETA_DT_TM,
							BL.POR_CD, BL.POR_NM, 
							BL.POL_CD, BL.POL_NM, 
							BL.POD_CD, BL.POD_NM, 
							BL.DEL_CD, BL.DEL_NM,		
							PRNR.TRDP_CD AS PRNR_TRDP_CD, PRNR.TRDP_NM AS PRNR_TRDP_NM,
							SHPR.TRDP_CD AS SHPR_TRDP_CD, SHPR.TRDP_NM AS SHPR_TRDP_NM,
							CNEE.TRDP_CD AS CNEE_TRDP_CD, CNEE.TRDP_NM AS CNEE_TRDP_NM,
							ACT.TRDP_CD AS ACT_SHPR_TRDP_CD, ACT.TRDP_NM AS ACT_SHPR_TRDP_NM,
							LNR.TRDP_CD AS LNR_TRDP_CD, LNR.TRDP_NM AS LNR_TRDP_NM,
							NTFY.TRDP_CD AS NTFY_TRDP_CD, NTFY.TRDP_NM AS NTFY_TRDP_NM,
							TRK.TRDP_CD TRK_TRDP_CD, TRK.TRDP_NM TRK_TRDP_NM,
							CUST.TRDP_CD AS CUST_TRDP_CD, CUST.TRDP_NM AS CUST_TRDP_NM, CUST.TRDP_ADDR AS CUST_TRDP_ADDR,
							VNDR.TRDP_CD VNDR_TRDP_CD, VNDR.TRDP_NM VNDR_TRDP_NM,
							BL.CFS_TRDP_CD, CFS.ENG_NM AS CFS_TRDP_NM,							
							BL.HBL_TP_CD, BL.SHP_MOD_CD, BL.INCO_CD, BL.RGST_USRID, BL.REP_CMDT_NM,
							BL.CUST_REF_NO, BL.LNR_BKG_NO, BL.EXP_REF_NO,
							(SELECT x.cnt_cd FROM TB_OFC x WHERE x.OFC_CD = bl.rgst_ofc_cd) AS BL_CNT, 
							(SELECT max(X.ENG_USR_NM) FROM TB_USR X WHERE X.USR_TP = 'I' AND X.USRID = BL.issued_by ) AS PROC_USRNM,
							BL.POST_DT, BL.TRNK_VSL_NM, BL.TRNK_VOY, BL.DOC_RECPT_NO, BL.IT_NO,							
							BL.PCK_QTY, BL.GRS_WGT, BL.GRS_WGT1, BL.MEAS,							
							BL.RLSD_FLG, BL.RLSD_DT_TM,
							CASE WHEN bl.EXPRESS_TP_CD ='Y' THEN 'YES' ELSE 'NO' END EXPRESS_TP_CD,
							BL.ORG_BL_RCVD_FLG, BL.RCVD_DT_TM,							
							(SELECT MAX(X.CNTR_NO) FROM TB_CNTR_LIST X WHERE X.INTG_BL_SEQ = BL.INTG_BL_SEQ AND X.DELT_FLG = 'N') AS CNTR_NO,
							
							(SELECT COUNT(X.CNTR_NO)-1 FROM TB_CNTR_LIST X WHERE X.INTG_BL_SEQ = BL.INTG_BL_SEQ AND X.DELT_FLG = 'N') AS CNTR_CNT, 
							<!-- #1230 HBL list modification FULLTRANS -->
					       STUFF(( SELECT ',  ' + CNTR_TPSZ_CD +' X ' + LTRIM(STR(COUNT(CNTR_TPSZ_CD)))
					               FROM TB_CNTR_LIST X
					               WHERE ( X.INTG_BL_SEQ = BL.INTG_BL_SEQ
					               <!-- #4057[JAPT] question for our profit report -->
					               AND X.DELT_FLG = 'N'
					               )
					               GROUP BY CNTR_TPSZ_CD
					               FOR XML PATH ('')),1,1,'') AS CNTR_SUMMARY,  							
							
							ISNULL(DBO.FC_MK_MEMO_SCRIPT(BL.INTG_BL_SEQ), '') AS MEMO,
		  					CASE WHEN CHARINDEX(CHAR(13)+CHAR(10), BL.PO_NO) = 0 THEN BL.PO_NO
							ELSE SUBSTRING(BL.PO_NO, 1, CHARINDEX(CHAR(13)+CHAR(10), BL.PO_NO)-1) END AS PO_NO , 					
							BL.LC_NO, BL.INV_NO,
							ISNULL(BLCK.BL_STS_CD1, BL.BL_STS_CD) AS BL_STS_CD,
							ISNULL(BL.ISF_NO,'') AS ISF_NO,
							ISNULL(BL.AMS_NO,'') AS AMS_NO,
		    				BL.CCN_NO,
							BL.CCN_DT,
							BL.PRE_CCN_NO,
							BL.MNF_FR_LOC,
							BL.MNF_TO_LOC,
							BL.MODI_TMS,
							DATEADD(HH, DATEDIFF(HH,GETUTCDATE(),GETDATE()), BL.MODI_TMS ) AS MODI_TMS_LOCAL,
							ISNULL(BL.AR_CHK,'X') AS AR_CHK,
							ISNULL(BL.AP_CHK,'X') AS AP_CHK,
							ISNULL(BL.DC_CHK,'X') AS DC_CHK,     				
							ISNULL(BL.FRT_CHK,'X') AS FRT_CHK,     				
							BL.hbl_ser_no,
							BL.FNL_DEST_LOC_CD,
							BL.FNL_DEST_LOC_NM,
							BL.F_ETA_DT_TM,
							BL.ENTR_NO,
							BL.PKUP_DT,
							BL.SUB_BL_NO,
							CASE WHEN bl.EXPRESS_TP_CD ='Y' 
							     THEN 'YES' 
							     ELSE 'NO' 
							 END EXPRESS_TP_CD,
							CASE WHEN ISNULL(BL.AN_EML_SND_DT,'') = ''
							     THEN ''
							     ELSE (SUBSTRING(BL.AN_EML_SND_DT,5,2)+'-'+SUBSTRING(BL.AN_EML_SND_DT,7,2)+'-'+SUBSTRING(BL.AN_EML_SND_DT,1,4)+' '+
							           SUBSTRING(BL.AN_EML_SND_DT,9,2)+':'+SUBSTRING(BL.AN_EML_SND_DT,11,2)) 
                             END AS AN_EML_SND_DT,
							CASE WHEN ISNULL(BL.AN_FAX_SND_DT,'') = ''
							     THEN ''
							     ELSE (SUBSTRING(BL.AN_FAX_SND_DT,5,2)+'-'+SUBSTRING(BL.AN_FAX_SND_DT,7,2)+'-'+SUBSTRING(BL.AN_FAX_SND_DT,1,4)+' '+
							           SUBSTRING(BL.AN_FAX_SND_DT,9,2)+':'+SUBSTRING(BL.AN_FAX_SND_DT,11,2)) 
                             END AS AN_FAX_SND_DT
                             <!-- #30 #52843 - [IMPEX] 독일 지점 OPUS 기능 추가 관련의 건 -->
                             ,BL.SURREND
                             ,BL.SLS_USRID
                             ,BL.SLS_USR_NM
                             <!-- OFVFOUR-7976: [MATRIX] ADDING CS PIC ON ALL B/L ENTRY AND TRADE PARTNER ENTRY SCREEN -->
                             ,BL.CS_USRID
                             ,BL.CS_USR_NM
                             ,BL.VERIFY_FLAG
						     ,BL.PAY_FLAG
						     ,isnull(bl.obl_tp_cd,'') AS obl_tp_cd
                            <!--#1619 [CLT] Original B/L Type- 항목 정리  ,BL.BL_RLSE_TP_CD	 #1430 [PATENT] 0215_15 B/L TYPE DIVERSELY  
                             ,dtl.CD_NM BL_RLSE_TP_NM-->
                            ,bl.bnd_release_flag
            				,bl.bnd_hold_flag
            				
            				<!-- #4980 [Best Ocean] Created Time and Last Modify Time columns add to BL List-->
            				,BL.RGST_TMS
            				,BL.MODI_USR_NM

					  FROM  blinfo BL with(nolock)					  
		   LEFT OUTER JOIN  tb_bl_prnr PRNR with(nolock) 
						ON  bl.intg_bl_seq = prnr.intg_bl_seq  AND prnr.bl_trdp_tp_cd = 'P01' AND prnr.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr SHPR with(nolock) 
						ON  bl.intg_bl_seq = SHPR.intg_bl_seq  AND SHPR.bl_trdp_tp_cd = 'S01' AND SHPR.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr CNEE with(nolock) 
						ON  bl.intg_bl_seq = CNEE.intg_bl_seq  AND CNEE.bl_trdp_tp_cd = 'C01' AND CNEE.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr ACT with(nolock) 
						ON  bl.intg_bl_seq = act.intg_bl_seq  AND act.bl_trdp_tp_cd = 'S02' AND act.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr LNR with(nolock) 
						ON  bl.intg_bl_seq = lnr.intg_bl_seq  AND lnr.bl_trdp_tp_cd = 'L01' AND lnr.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr NTFY with(nolock) 
						ON  bl.intg_bl_seq = ntfy.intg_bl_seq  AND ntfy.bl_trdp_tp_cd = 'N01' AND ntfy.delt_flg = 'N'
		   LEFT OUTER JOIN tb_bl_prnr TRK with(nolock) 
		   				ON bl.intg_bl_seq = TRK.intg_bl_seq  AND TRK.bl_trdp_tp_cd = 'T02' AND TRK.delt_flg = 'N'
		   LEFT OUTER JOIN	tb_bl_prnr CUST with(nolock) 
		           		ON	bl.intg_bl_seq = cust.intg_bl_seq  AND cust.bl_trdp_tp_cd = 'C03' AND cust.delt_flg = 'N'
		   LEFT OUTER JOIN tb_bl_prnr VNDR with(nolock) 
						ON bl.intg_bl_seq = VNDR.intg_bl_seq  AND VNDR.bl_trdp_tp_cd = 'V01' AND VNDR.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_trdp CFS with(nolock) 
						ON  bl.cfs_trdp_cd = cfs.trdp_cd  AND cfs.delt_flg = 'N'
		   LEFT OUTER JOIN (
						SELECT  rlt.intg_bl_seq, mbl.bl_no, rlt.rlt_intg_bl_seq, mbl.DOC_CUT_OFF_DT
						  FROM  tb_intg_bl mbl with(nolock) 
			   LEFT OUTER JOIN  tb_intg_bl_rlt rlt with(nolock) 
							ON  rlt.rlt_intg_bl_seq = mbl.intg_Bl_seq AND mbl.delt_flg = 'N'  
							) X ON X.intg_bl_seq = bl.intg_Bl_seq	
		   LEFT OUTER JOIN(SELECT INTG_BL_SEQ AS INTG_BL_SEQ1, BL_STS_CD AS BL_STS_CD1 FROM TB_INTG_BL_BLCK) BLCK 
		   					ON BL.INTG_BL_SEQ = BLCK.INTG_BL_SEQ1	
		 <!--#1619 [CLT] Original B/L Type- 항목 정리   
		  LEFT OUTER JOIN TB_COM_CD_DTL dtl
         				ON dtl.com_cd = 'C222' and BL.BL_RLSE_TP_CD = dtl.CD_VAL      --> 		   																   			
					 WHERE  bl.delt_flg = 'N'
					   AND  bl.air_sea_clss_cd= #air_sea_clss_cd#
					   AND  bl.biz_clss_cd  = #biz_clss_cd#
	 			    ORDER BY  
	 			    
			<isNotEmpty property="f_orderByInfo">
			 $f_orderByInfo$
			</isNotEmpty>
			<isEmpty property="f_orderByInfo"> 
			BL.POST_DT DESC, BL.MODI_TMS DESC
			</isEmpty>
				 			    
    </select>
     
    <!-- #50591 [BNX TORONTO] FREIGHT LOCATION인 RAIL 회사인 CN과 CP의 CONTAINER LIST 및 EXCEL 다운로드 화면 추가  -->
    <select id="selectHBL_LIST_NOPAGING_CN_CP_EXCEL" parameterClass="java.util.HashMap" resultClass="HBLInfoVO">
           /* selectHBL_LIST_NOPAGING_CN_CP_EXCEL */
            	SELECT a1.*
				  FROM (
		         	SELECT   
		         	
		         	    BL.BL_NO AS HBL_NO,
			            BL.REF_NO,     
			            BL.POST_DT,  
			            CFS.ENG_NM AS CFS_TRDP_NM,                
			            (CASE WHEN 'CN' = #f_cn_cp# THEN SUBSTRING(LIST.CNTR_NO,1,LEN(LIST.CNTR_NO)-1) 
            			ELSE LIST.CNTR_NO END) as CNTR_NO,
                        BL.MODI_TMS
					  FROM  TB_INTG_BL BL
					  <isEqual property="bnd_clss_cd" compareValue="O">
							with(index(IDX_ETD_DT_TM), nolock)
					  </isEqual>     
					  <isEqual property="bnd_clss_cd" compareValue="I">
							with(index(IDX_ETA_DT_TM), nolock)
					  </isEqual>  
					  JOIN  tb_add_info_bnd bnd with(nolock)
						ON  bl.intg_bl_seq = bnd.intg_bl_seq AND bnd.bnd_clss_cd = #bnd_clss_cd# AND bnd.delt_flg = 'N'
						<isNotEmpty property="f_bl_ser_no_frm">
						   	<isNotEmpty property="f_bl_ser_no_to">
						  	 	AND  bnd.hbl_ser_no between #f_bl_ser_no_frm# and #f_bl_ser_no_to#
							</isNotEmpty>
						</isNotEmpty>
		   LEFT OUTER JOIN TB_CNTR_LIST list with(nolock)
		   				ON  bl.intg_bl_seq = list.intg_bl_seq AND list.delt_flg = 'N'    
		   LEFT OUTER JOIN  tb_bl_prnr PRNR with(nolock)
						ON  bl.intg_bl_seq = prnr.intg_bl_seq  AND prnr.bl_trdp_tp_cd = 'P01' AND prnr.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr SHPR with(nolock)
						ON  bl.intg_bl_seq = SHPR.intg_bl_seq  AND SHPR.bl_trdp_tp_cd = 'S01' AND SHPR.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr CNEE with(nolock)
						ON  bl.intg_bl_seq = CNEE.intg_bl_seq  AND CNEE.bl_trdp_tp_cd = 'C01' AND CNEE.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr ACT with(nolock)
						ON  bl.intg_bl_seq = act.intg_bl_seq  AND act.bl_trdp_tp_cd = 'S02' AND act.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr LNR with(nolock)
						ON  bl.intg_bl_seq = lnr.intg_bl_seq  AND lnr.bl_trdp_tp_cd = 'L01' AND lnr.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr NTFY with(nolock)
						ON  bl.intg_bl_seq = ntfy.intg_bl_seq  AND ntfy.bl_trdp_tp_cd = 'N01' AND ntfy.delt_flg = 'N'
		   LEFT OUTER JOIN tb_bl_prnr TRK with(nolock)
		   				ON bl.intg_bl_seq = TRK.intg_bl_seq  AND TRK.bl_trdp_tp_cd = 'T02' AND TRK.delt_flg = 'N'
		   LEFT OUTER JOIN	tb_bl_prnr CUST with(nolock)
		           		ON	bl.intg_bl_seq = cust.intg_bl_seq  AND cust.bl_trdp_tp_cd = 'C03' AND cust.delt_flg = 'N'
		   LEFT OUTER JOIN tb_bl_prnr VNDR with(nolock)
						ON bl.intg_bl_seq = VNDR.intg_bl_seq  AND VNDR.bl_trdp_tp_cd = 'V01' AND VNDR.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_trdp CFS with(nolock)
						ON  bl.cfs_trdp_cd = cfs.trdp_cd  AND cfs.delt_flg = 'N'
		   LEFT OUTER JOIN (
						SELECT  rlt.intg_bl_seq, mbl.bl_no, rlt.rlt_intg_bl_seq
						  FROM  tb_intg_bl mbl with(nolock) 
			   LEFT OUTER JOIN  tb_intg_bl_rlt rlt with(nolock) 
							ON  rlt.rlt_intg_bl_seq = mbl.intg_Bl_seq AND mbl.delt_flg = 'N'  
							) X ON X.intg_bl_seq = bl.intg_Bl_seq
		   LEFT OUTER JOIN(SELECT INTG_BL_SEQ AS INTG_BL_SEQ1, BL_STS_CD AS BL_STS_CD1 FROM TB_INTG_BL_BLCK with(nolock)) BLCK 
		   				ON BL.INTG_BL_SEQ = BLCK.INTG_BL_SEQ1																   			
					 WHERE  bl.delt_flg = 'N'
					   AND  bl.air_sea_clss_cd= #air_sea_clss_cd#
					   AND  bl.biz_clss_cd  = #biz_clss_cd#
					<isNotEmpty property="f_hbl_no">
						<!-- #1061 [Binex, Sunway, AIF] V440 Search function -->
					   AND  BL.BL_NO LIKE #f_hbl_no# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_ref_no">
						<!-- #1061 [Binex, Sunway, AIF] V440 Search function -->
					   AND  BL.REF_NO LIKE #f_ref_no# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_mbl_no">
						<!-- #1061 [Binex, Sunway, AIF] V440 Search function -->
					   AND  X.BL_NO LIKE #f_mbl_no# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_cntr_no">
					   AND  BL.INTG_BL_SEQ IN (SELECT  CNTR.INTG_BL_SEQ
												 FROM  TB_CNTR_LIST CNTR with(nolock)
												WHERE  CNTR.CNTR_NO LIKE  #f_cntr_no# + '%' )
					</isNotEmpty>
					<isNotEmpty property="etd_strdt">
					   AND  BL.ETD_DT_TM BETWEEN #etd_strdt# AND #etd_enddt#
					</isNotEmpty>
					<isNotEmpty property="eta_strdt">
					   AND  BL.ETA_DT_TM BETWEEN #eta_strdt# AND #eta_enddt#
					</isNotEmpty>
					<isNotEmpty property="f_pol_cd">
					   AND  BL.POL_CD = #f_pol_cd#
					</isNotEmpty>
					<isNotEmpty property="f_pol_nm">
					   AND  BL.POL_NM LIKE  #f_pol_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_por_cd">
					   AND  BL.POR_CD = #f_por_cd#
					</isNotEmpty>
					<isNotEmpty property="f_por_nm">
					   AND  BL.POR_NM LIKE  #f_por_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_pod_cd">
					   AND  BL.POD_CD = #f_pod_cd#
					</isNotEmpty>
					<isNotEmpty property="f_pod_nm">
					   AND  BL.POD_NM LIKE  #f_pod_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_del_cd">
					   AND  BL.DEL_CD = #f_del_cd#
					</isNotEmpty>
					<isNotEmpty property="f_del_nm">
					   AND  BL.DEL_NM LIKE  #f_del_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_prnr_trdp_nm">
					   AND  PRNR.TRDP_NM LIKE  #f_prnr_trdp_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_shpr_trdp_nm">
					   AND  SHPR.TRDP_NM LIKE  #f_shpr_trdp_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_cnee_trdp_nm">
					   AND  CNEE.TRDP_NM LIKE  #f_cnee_trdp_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_ahpr_trdp_nm">
					   AND  ACT.TRDP_NM LIKE  #f_ahpr_trdp_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_ntfy_trdp_nm">
					   AND  NTFY.TRDP_NM LIKE  #f_ntfy_trdp_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_lnr_trdp_nm"><!-- #1230 HBL list modification FULLTRANS -->
					   AND  LNR.TRDP_NM LIKE  #f_lnr_trdp_nm# + '%'
					</isNotEmpty>					
					<isNotEmpty property="f_cfs_trdp_nm">
					   AND  CFS.ENG_NM LIKE  #f_cfs_trdp_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_hbl_tp_cd">
					   AND  BL.HBL_TP_CD = #f_hbl_tp_cd#
					</isNotEmpty>
					<isNotEmpty property="f_ofc_cd">
					   AND  BL.REF_OFC_CD = #f_ofc_cd#
					</isNotEmpty>
					<isNotEmpty property="f_shp_mod_cd">
					   AND  BL.SHP_MOD_CD = #f_shp_mod_cd#
					</isNotEmpty>
					<isNotEmpty property="f_inco_cd">
					   AND  BL.INCO_CD = #f_inco_cd#
					</isNotEmpty>
					<isNotEmpty property="f_pic_id">
					   AND  BL.RGST_USRID LIKE  #f_pic_id# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_cmdt_nm">
					   AND  BL.REP_CMDT_NM LIKE  #f_cmdt_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_trnk_vsl_nm">
					   AND  BL.TRNK_VSL_NM LIKE  #f_trnk_vsl_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_grs_wgt">
					   AND  BL.GRS_WGT LIKE  #f_grs_wgt# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_grs_wgt1">
					   AND  BL.GRS_WGT1 LIKE  #f_grs_wgt1# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_meas">
					   AND  BL.MEAS LIKE  #f_meas# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_it_no">
					   AND  BL.IT_NO LIKE  #f_it_no# + '%'
					</isNotEmpty>
					<isNotEmpty property="fm_pck_qty">
					   AND  BL.PCK_QTY BETWEEN #fm_pck_qty# AND #to_pck_qty#
					</isNotEmpty>
					<isNotEmpty property="fm_grs_wgt">
						<isNotEmpty property="to_grs_wgt">
							<isEqual property="f_grs_wgt_sel_cd" compareValue="KG">
								AND  BL.GRS_WGT BETWEEN #fm_grs_wgt# AND #to_grs_wgt#
							</isEqual>
							<isEqual property="f_grs_wgt_sel_cd" compareValue="LG">
								AND  BL.GRS_WGT1 BETWEEN #fm_grs_wgt# AND #to_grs_wgt#
							</isEqual>
						</isNotEmpty>
						
						<isEmpty property="to_grs_wgt">
							<isEqual property="f_grs_wgt_sel_cd" compareValue="KG">
								AND BL.GRS_WGT <![CDATA[>=]]> #fm_grs_wgt# 
							</isEqual>
							<isEqual property="f_grs_wgt_sel_cd" compareValue="LG">
								AND BL.GRS_WGT1 <![CDATA[>=]]> #fm_grs_wgt#
							</isEqual>
						</isEmpty>
					</isNotEmpty>
					<isEmpty property="fm_grs_wgt">
						<isNotEmpty property="to_grs_wgt">
							<isEqual property="f_grs_wgt_sel_cd" compareValue="KG">
								AND BL.GRS_WGT <![CDATA[<=]]> #to_grs_wgt#
							</isEqual>
							<isEqual property="f_grs_wgt_sel_cd" compareValue="LG">
								AND BL.GRS_WGT1 <![CDATA[<=]]> #to_grs_wgt#
							</isEqual>
						</isNotEmpty>
					</isEmpty>
					<isNotEmpty property="fm_meas">
					   AND  BL.MEAS BETWEEN #fm_meas# AND #to_meas#
					</isNotEmpty>
					<isNotEmpty property="f_po_no">
					   AND  BL.PO_NO LIKE  #f_po_no# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_lc_no">
					   AND  BL.LC_NO = #f_lc_no#
					</isNotEmpty>
					<isNotEmpty property="f_inv_no">
					   AND  BL.INV_NO = #f_inv_no#
					</isNotEmpty>
					<isNotEmpty property="f_lnr_bkg_no">
					   AND  BL.LNR_BKG_NO = #f_lnr_bkg_no#
					</isNotEmpty>
					<isNotEmpty property="f_cust_ref_no">
					   AND  BL.CUST_REF_NO LIKE  #f_cust_ref_no# + '%'
					</isNotEmpty>			
					<isNotEmpty property="f_ams_no">
					   AND  BL.AMS_NO LIKE  #f_ams_no# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_isf_no">
					   AND  BL.ISF_NO LIKE  #f_isf_no# + '%'
					</isNotEmpty>	
					<isNotEmpty property="f_ccn_no">
					   AND  BL.CCN_NO LIKE  #f_ccn_no# + '%'
					</isNotEmpty>		
					<isNotEmpty property="f_fnl_dest_loc_cd">
					   AND  BL.FNL_DEST_LOC_CD = #f_fnl_dest_loc_cd#
					</isNotEmpty>
					<isNotEmpty property="f_fnl_dest_loc_nm">
					   AND  BL.FNL_DEST_LOC_NM LIKE  #f_fnl_dest_loc_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_entr_no">
					   AND  BND.ENTR_NO LIKE  #f_entr_no# + '%'
					</isNotEmpty>	
					<isNotEmpty property="post_strdt">
					   AND  BL.POST_DT BETWEEN #post_strdt# AND #post_enddt#
					</isNotEmpty>			
					<isNotEmpty property="f_sub_bl_no">
						<!-- #1061 [Binex, Sunway, AIF] V440 Search function -->
					   AND  BL.SUB_BL_NO LIKE #f_sub_bl_no# + '%'
					</isNotEmpty>
					<isNotEmpty property="opr_usrid">
					   AND  BND.ISSUED_BY = #opr_usrid#
					</isNotEmpty>	
					<isNotEmpty property="f_cn_cp">
					   AND  (CFS.ENG_NM = #f_cn_cp# OR CFS.ENG_NM LIKE #f_cn_cp# + ' %')
					</isNotEmpty>	
					<!-- #1327 [OCEAN BLUE] CUSTOM BROKER SEARCH FIELD ADD TO IMPORT HBL LIST  -->	
					<isNotEmpty property="f_cust_trdp_nm">
					   AND  CUST.TRDP_NM LIKE  #f_cust_trdp_nm# + '%'
					</isNotEmpty> 				
					 ) a1
			ORDER BY  a1.POST_DT DESC, a1.MODI_TMS DESC
    </select>
    <!-- House B/L List select    -->
    <!-- #18782 : [BINEX, GPL] OBL RCV and Release update function (From BL List) - add BL.ORG_BL_RCVD_FLG, BL.RCVD_DT_TM jsjang 2013.9.14    -->
     <!-- ZOOT=LIST PAGE AR_AP_DC STAUS PROCESS -->
    <select id="selectHBL_LIST" parameterClass="java.util.HashMap" resultClass="com.clt.apps.fis.see.bmd.housebl.dto.SeeHouseBLVO">
		/* BlCmmSQL.xml > selectHBL_LIST */		
     	  		SELECT a1.*
				  FROM (
		         	SELECT  ROW_NUMBER() OVER (ORDER BY  BL.POST_DT DESC, BL.MODI_TMS DESC) as ROWNUM,
           		         	BL.INTG_BL_SEQ, X.RLT_INTG_BL_SEQ, 
           		         	<!-- x.DOC_CUT_OFF_DT, -->
           		         	bnd.hbl_cut_off_dt as DOC_CUT_OFF_DT,
							BL.BL_NO AS HBL_NO, BL.REF_NO, BL.REF_OFC_CD, X.BL_NO AS MBL_NO,
							(SELECT UPPER(X.CNT_CD) FROM TB_OFC X WHERE X.OFC_CD = BL.REF_OFC_CD AND X.DELT_FLG = 'N') AS REF_OFC_CNT,
							BL.ETD_DT_TM, BL.ETA_DT_TM,
							BL.POR_CD, BL.POR_NM, 
							BL.POL_CD, BL.POL_NM, 
							BL.POD_CD, BL.POD_NM, 
							BL.DEL_CD, BL.DEL_NM,		
							PRNR.TRDP_CD AS PRNR_TRDP_CD, PRNR.TRDP_NM AS PRNR_TRDP_NM,
							SHPR.TRDP_CD AS SHPR_TRDP_CD, SHPR.TRDP_NM AS SHPR_TRDP_NM,
							CNEE.TRDP_CD AS CNEE_TRDP_CD, CNEE.TRDP_NM AS CNEE_TRDP_NM,
							ACT.TRDP_CD AS ACT_SHPR_TRDP_CD, ACT.TRDP_NM AS ACT_SHPR_TRDP_NM,
							LNR.TRDP_CD AS LNR_TRDP_CD, LNR.TRDP_NM AS LNR_TRDP_NM,
							NTFY.TRDP_CD AS NTFY_TRDP_CD, NTFY.TRDP_NM AS NTFY_TRDP_NM,
							TRK.TRDP_CD TRK_TRDP_CD, TRK.TRDP_NM TRK_TRDP_NM,
							CUST.TRDP_CD AS CUST_TRDP_CD, CUST.TRDP_NM AS CUST_TRDP_NM, CUST.TRDP_ADDR AS CUST_TRDP_ADDR,
							VNDR.TRDP_CD VNDR_TRDP_CD, VNDR.TRDP_NM VNDR_TRDP_NM,
							BL.CFS_TRDP_CD, CFS.ENG_NM AS CFS_TRDP_NM,							
							BL.HBL_TP_CD, BL.SHP_MOD_CD, BL.INCO_CD, BL.RGST_USRID, BL.REP_CMDT_NM,
							BL.CUST_REF_NO, BL.LNR_BKG_NO, BL.EXP_REF_NO,
							(SELECT x.cnt_cd FROM TB_OFC x WHERE x.OFC_CD = bl.rgst_ofc_cd) AS BL_CNT, 
							(SELECT max(X.ENG_USR_NM) FROM TB_USR X WHERE X.USR_TP = 'I' AND X.USRID = bnd.issued_by ) AS PROC_USRNM,
							BL.POST_DT, BL.TRNK_VSL_NM, BL.TRNK_VOY, BL.DOC_RECPT_NO, BL.IT_NO,							
							BL.PCK_QTY, BL.GRS_WGT, BL.GRS_WGT1, BL.MEAS,							
							BL.RLSD_FLG, BL.RLSD_DT_TM,
							CASE WHEN bl.EXPRESS_TP_CD ='Y' THEN 'YES' ELSE 'NO' END EXPRESS_TP_CD,
							BL.ORG_BL_RCVD_FLG, BL.RCVD_DT_TM,							
							(SELECT MAX(X.CNTR_NO) FROM TB_CNTR_LIST X WHERE X.INTG_BL_SEQ = BL.INTG_BL_SEQ AND X.DELT_FLG = 'N') AS CNTR_NO,
							(SELECT COUNT(X.CNTR_NO)-1 FROM TB_CNTR_LIST X WHERE X.INTG_BL_SEQ = BL.INTG_BL_SEQ AND X.DELT_FLG = 'N') AS CNTR_CNT,
							<!-- #1230 HBL list modification FULLTRANS -->
					       STUFF(( SELECT ',  ' + CNTR_TPSZ_CD +' X ' + LTRIM(STR(COUNT(CNTR_TPSZ_CD)))
					               FROM TB_CNTR_LIST X
					               WHERE ( X.INTG_BL_SEQ = BL.INTG_BL_SEQ 
					               <!-- #4057[JAPT] question for our profit report -->
					               AND X.DELT_FLG = 'N'					               
					               )
					               GROUP BY CNTR_TPSZ_CD
					               FOR XML PATH ('')),1,1,'') AS CNTR_SUMMARY, 		
					               					
							ISNULL(DBO.FC_MK_MEMO_SCRIPT(BL.INTG_BL_SEQ), '') AS MEMO,
		  					CASE WHEN CHARINDEX(CHAR(13)+CHAR(10), BL.PO_NO) = 0 THEN BL.PO_NO
							ELSE SUBSTRING(BL.PO_NO, 1, CHARINDEX(CHAR(13)+CHAR(10), BL.PO_NO)-1) END AS PO_NO , 					
							BL.LC_NO, 
							BL.INV_NO,
							BL.AMS_ID,
							ISNULL(BLCK.BL_STS_CD1, BL.BL_STS_CD) AS BL_STS_CD,
							BL.ISF_NO,
							BL.AMS_NO,
		    				BL.CCN_NO,
							BL.CCN_DT,
							BL.PRE_CCN_NO,
							BL.MNF_FR_LOC,
							BL.MNF_TO_LOC,
							BL.MODI_TMS,
							<!-- #4980 [Best Ocean] Created Time and Last Modify Time columns add to BL List-->
            				DATEADD(HH, DATEDIFF(HH,GETUTCDATE(),GETDATE()), BL.MODI_TMS ) AS MODI_TMS_LOCAL,
            				BL.RGST_TMS, BL.MODI_USR_NM,
							BL.BL_ISS_DT,
							ISNULL(bnd.AR_CHK,'X') AS AR_CHK,
							ISNULL(bnd.AP_CHK,'X') AS AP_CHK,
							ISNULL(bnd.DC_CHK,'X') AS DC_CHK,
							ISNULL(bnd.FRT_CHK,'X') AS FRT_CHK,
							BND.HBL_SER_NO,
							BL.FNL_DEST_LOC_CD,
							BL.FNL_DEST_LOC_NM,
							BL.F_ETA_DT_TM,
							BND.ENTR_NO,
							BND.PKUP_DT,
							BL.SUB_BL_NO,
							CASE WHEN ISNULL(BND.AN_EML_SND_DT,'') = ''
							     THEN ''
							     ELSE (SUBSTRING(BND.AN_EML_SND_DT,5,2)+'-'+SUBSTRING(BND.AN_EML_SND_DT,7,2)+'-'+SUBSTRING(BND.AN_EML_SND_DT,1,4)+' '+
							           SUBSTRING(BND.AN_EML_SND_DT,9,2)+':'+SUBSTRING(BND.AN_EML_SND_DT,11,2)) 
                             END AS AN_EML_SND_DT,
							CASE WHEN ISNULL(BND.AN_FAX_SND_DT,'') = ''
							     THEN ''
							     ELSE (SUBSTRING(BND.AN_FAX_SND_DT,5,2)+'-'+SUBSTRING(BND.AN_FAX_SND_DT,7,2)+'-'+SUBSTRING(BND.AN_FAX_SND_DT,1,4)+' '+
							           SUBSTRING(BND.AN_FAX_SND_DT,9,2)+':'+SUBSTRING(BND.AN_FAX_SND_DT,11,2)) 
                             END AS AN_FAX_SND_DT
                             <!-- #30 #52843 - [IMPEX] 독일 지점 OPUS 기능 추가 관련의 건 -->
                             , BND.SURREND
                             , BND.SLS_USRID
                             , BND.SLS_USR_NM
                             <!-- OFVFOUR-7976: [MATRIX] ADDING CS PIC ON ALL B/L ENTRY AND TRADE PARTNER ENTRY SCREEN -->
                             , BND.CS_USRID
                             , BND.CS_USR_NM
                             , BND.VERIFY_FLAG
						     , BND.PAY_FLAG
						     , isnull(bl.obl_tp_cd,'') AS obl_tp_cd
                             ,COUNT(*) OVER(PARTITION BY 1) as total_rows_cnt
                            <!-- #1619 [CLT] Original B/L Type- 항목 정리  ,BND.BL_RLSE_TP_CD  #1430 [PATENT] 0215_15 B/L TYPE DIVERSELY  
                             ,dtl.CD_NM BL_RLSE_TP_NM -->
                             ,bnd.RELEASE_FLAG as bnd_release_flag
            				 ,bnd.HOLD_FLAG  as bnd_hold_flag
            				 ,bnd.TLI_NO AS tli_no
					  FROM  TB_INTG_BL BL
					  <isEqual property="bnd_clss_cd" compareValue="O">
							with(index(IDX_ETD_DT_TM), nolock)
					  </isEqual>     
					  <isEqual property="bnd_clss_cd" compareValue="I">
							with(index(IDX_ETA_DT_TM), nolock)
					  </isEqual>  
					  JOIN  tb_add_info_bnd bnd with(nolock)
						ON  bl.intg_bl_seq = bnd.intg_bl_seq AND bnd.bnd_clss_cd = #bnd_clss_cd# AND bnd.delt_flg = 'N'
						<isNotEmpty property="f_bl_ser_no_frm">
						   	<isNotEmpty property="f_bl_ser_no_to">
						  	 	AND  bnd.hbl_ser_no between #f_bl_ser_no_frm# and #f_bl_ser_no_to#
							</isNotEmpty>
						</isNotEmpty>
		   LEFT OUTER JOIN  tb_bl_prnr PRNR with(nolock)
						ON  bl.intg_bl_seq = prnr.intg_bl_seq  AND prnr.bl_trdp_tp_cd = 'P01' AND prnr.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr SHPR with(nolock)
						ON  bl.intg_bl_seq = SHPR.intg_bl_seq  AND SHPR.bl_trdp_tp_cd = 'S01' AND SHPR.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr CNEE with(nolock)
						ON  bl.intg_bl_seq = CNEE.intg_bl_seq  AND CNEE.bl_trdp_tp_cd = 'C01' AND CNEE.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr ACT with(nolock)
						ON  bl.intg_bl_seq = act.intg_bl_seq  AND act.bl_trdp_tp_cd = 'S02' AND act.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr LNR with(nolock)
						ON  bl.intg_bl_seq = lnr.intg_bl_seq  AND lnr.bl_trdp_tp_cd = 'L01' AND lnr.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr NTFY with(nolock)
						ON  bl.intg_bl_seq = ntfy.intg_bl_seq  AND ntfy.bl_trdp_tp_cd = 'N01' AND ntfy.delt_flg = 'N'
		   LEFT OUTER JOIN tb_bl_prnr TRK with(nolock)
		   				ON bl.intg_bl_seq = TRK.intg_bl_seq  AND TRK.bl_trdp_tp_cd = 'T02' AND TRK.delt_flg = 'N'
		   LEFT OUTER JOIN	tb_bl_prnr CUST with(nolock)
		           		ON	bl.intg_bl_seq = cust.intg_bl_seq  AND cust.bl_trdp_tp_cd = 'C03' AND cust.delt_flg = 'N'
		   LEFT OUTER JOIN tb_bl_prnr VNDR with(nolock)
						ON bl.intg_bl_seq = VNDR.intg_bl_seq  AND VNDR.bl_trdp_tp_cd = 'V01' AND VNDR.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_trdp CFS with(nolock)
						ON  bl.cfs_trdp_cd = cfs.trdp_cd  AND cfs.delt_flg = 'N'
		   LEFT OUTER JOIN (
						SELECT  rlt.intg_bl_seq, mbl.bl_no, rlt.rlt_intg_bl_seq, mbl.doc_cut_off_dt
						  FROM  tb_intg_bl mbl with(nolock) 
			   LEFT OUTER JOIN  tb_intg_bl_rlt rlt with(nolock) 
							ON  rlt.rlt_intg_bl_seq = mbl.intg_Bl_seq AND mbl.delt_flg = 'N'  
							) X ON X.intg_bl_seq = bl.intg_Bl_seq
		   LEFT OUTER JOIN(SELECT INTG_BL_SEQ AS INTG_BL_SEQ1, BL_STS_CD AS BL_STS_CD1 FROM TB_INTG_BL_BLCK with(nolock)) BLCK 
		   				ON BL.INTG_BL_SEQ = BLCK.INTG_BL_SEQ1
		  <!-- #1619 [CLT] Original B/L Type- 항목 정리 
		   LEFT OUTER JOIN TB_COM_CD_DTL dtl
         				ON dtl.com_cd = 'C222' and BND.BL_RLSE_TP_CD = dtl.CD_VAL  		 -->   																				   			
					 WHERE  bl.delt_flg = 'N'
					   AND  bl.air_sea_clss_cd= #air_sea_clss_cd#
					   AND  bl.biz_clss_cd  = #biz_clss_cd#
					<isNotEmpty property="f_hbl_no">
						<!-- #1061 [Binex, Sunway, AIF] V440 Search function -->
					   AND  BL.BL_NO LIKE #f_hbl_no# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_ref_no">
						<!-- #1061 [Binex, Sunway, AIF] V440 Search function -->
					   AND  BL.REF_NO LIKE #f_ref_no# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_mbl_no">
						<!-- #1061 [Binex, Sunway, AIF] V440 Search function -->
					   AND  X.BL_NO LIKE #f_mbl_no# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_bkg_no">
					   AND  BL.LNR_BKG_NO LIKE  #f_bkg_no# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_cntr_no">
					   AND  BL.INTG_BL_SEQ IN (SELECT  CNTR.INTG_BL_SEQ
												 FROM  TB_CNTR_LIST CNTR with(nolock)
												WHERE  CNTR.CNTR_NO LIKE  #f_cntr_no# + '%' )
					</isNotEmpty>
					<isNotEmpty property="f_prnr_trdp_nm">
						<isEqual property="f_tp_type" compareValue="SHP">
							AND  SHPR.TRDP_NM LIKE  #f_prnr_trdp_nm# + '%'
						</isEqual>
						<isEqual property="f_tp_type" compareValue="CUS">
							AND  ACT.TRDP_NM LIKE  #f_prnr_trdp_nm# + '%'
						</isEqual>
						<isEqual property="f_tp_type" compareValue="NOT">
							AND  NTFY.TRDP_NM LIKE  #f_prnr_trdp_nm# + '%'
						</isEqual>     
						<isEqual property="f_tp_type" compareValue="PAR">
							AND  PRNR.TRDP_NM LIKE  #f_prnr_trdp_nm# + '%'
						</isEqual>     
						<isEqual property="f_tp_type" compareValue="CBR">
							AND  CUST.TRDP_NM LIKE  #f_prnr_trdp_nm# + '%'
						</isEqual>     
						<isEqual property="f_tp_type" compareValue="CAR">
							AND  LNR.TRDP_NM LIKE  #f_prnr_trdp_nm# + '%'
						</isEqual>     
					</isNotEmpty>
					<isNotEmpty property="f_po_no">
						AND BL.PO_NO LIKE  #f_po_no# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_strdt">
						<isEqual property="f_date_type" compareValue="ETA">
					   	AND  BL.ETA_DT_TM BETWEEN #f_strdt# AND #f_enddt#
					   	</isEqual>
						<isEqual property="f_date_type" compareValue="ETD">
					   	AND  BL.ETD_DT_TM BETWEEN #f_strdt# AND #f_enddt#
					   	</isEqual>
						<isEqual property="f_date_type" compareValue="PDT">
					   	AND  BL.POST_DT BETWEEN #f_strdt# AND #f_enddt#
					   	</isEqual>
						<isEqual property="f_date_type" compareValue="DCT">
					   	<!-- AND  SUBSTRING(x.DOC_CUT_OFF_DT,1,8) BETWEEN #f_strdt# AND #f_enddt# -->
					   	AND  SUBSTRING(bnd.hbl_cut_off_dt,1,8) BETWEEN #f_strdt# AND #f_enddt#
					   	</isEqual>					   	
					   	
					</isNotEmpty>
					<isNotEmpty property="f_it_no">
					   AND  BL.IT_NO LIKE  #f_it_no# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_cust_ref_no">
					   AND  BL.CUST_REF_NO LIKE  #f_cust_ref_no# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_ams_no">
						<isEqual property="f_ams_isf_sel_cd" compareValue="AMS">
							AND  BL.AMS_NO LIKE  #f_ams_no# + '%'
						</isEqual>
						<isEqual property="f_ams_isf_sel_cd" compareValue="ISF">
							AND  BL.ISF_NO LIKE  #f_ams_no# + '%'
						</isEqual>
					</isNotEmpty>
					<isNotEmpty property="f_cfs_trdp_nm">
					   AND  CFS.ENG_NM LIKE  #f_cfs_trdp_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_sub_bl_no">
					   AND  BL.SUB_BL_NO LIKE #f_sub_bl_no# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_ccn_no">
					   AND  BL.CCN_NO LIKE  #f_ccn_no# + '%'
					</isNotEmpty>		
					<isNotEmpty property="f_fnl_dest_loc_cd">
					   AND  BL.FNL_DEST_LOC_CD = #f_fnl_dest_loc_cd#
					</isNotEmpty>
					<isNotEmpty property="f_fnl_dest_loc_nm">
					   AND  BL.FNL_DEST_LOC_NM LIKE  #f_fnl_dest_loc_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="fm_pck_qty">
					   AND  BL.PCK_QTY BETWEEN #fm_pck_qty# AND #to_pck_qty#
					</isNotEmpty>
					<isNotEmpty property="fm_grs_wgt">
						<isNotEmpty property="to_grs_wgt">
							<isEqual property="f_grs_wgt_sel_cd" compareValue="KG">
								AND  BL.GRS_WGT BETWEEN #fm_grs_wgt# AND #to_grs_wgt#
							</isEqual>
							<isEqual property="f_grs_wgt_sel_cd" compareValue="LG">
								AND  BL.GRS_WGT1 BETWEEN #fm_grs_wgt# AND #to_grs_wgt#
							</isEqual>
						</isNotEmpty>
						
						<isEmpty property="to_grs_wgt">
							<isEqual property="f_grs_wgt_sel_cd" compareValue="KG">
								AND BL.GRS_WGT <![CDATA[>=]]> #fm_grs_wgt# 
							</isEqual>
							<isEqual property="f_grs_wgt_sel_cd" compareValue="LG">
								AND BL.GRS_WGT1 <![CDATA[>=]]> #fm_grs_wgt#
							</isEqual>
						</isEmpty>
					</isNotEmpty>
					<isEmpty property="fm_grs_wgt">
						<isNotEmpty property="to_grs_wgt">
							<isEqual property="f_grs_wgt_sel_cd" compareValue="KG">
								AND BL.GRS_WGT <![CDATA[<=]]> #to_grs_wgt#
							</isEqual>
							<isEqual property="f_grs_wgt_sel_cd" compareValue="LG">
								AND BL.GRS_WGT1 <![CDATA[<=]]> #to_grs_wgt#
							</isEqual>
						</isNotEmpty>
					</isEmpty>
					<isNotEmpty property="fm_meas">
					   AND  BL.MEAS BETWEEN #fm_meas# AND #to_meas#
					</isNotEmpty>
					<isNotEmpty property="f_trnk_vsl_nm">
					   AND  BL.TRNK_VSL_NM LIKE  #f_trnk_vsl_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_no">
						<isEqual property="f_no_type" compareValue="LC">
							AND  BL.LC_NO = #f_no#
						</isEqual>
						<isEqual property="f_no_type" compareValue="INV">
							AND  BL.INV_NO = #f_no#
						</isEqual>
						<isEqual property="f_no_type" compareValue="BKG">
							AND  BL.LNR_BKG_NO = #f_no#
						</isEqual>
						<isEqual property="f_no_type" compareValue="TLI">
							AND  BND.TLI_NO = #f_no#
						</isEqual>						
					</isNotEmpty>
					<isNotEmpty property="f_inco_cd">
					   AND  BL.INCO_CD = #f_inco_cd#
					</isNotEmpty>
					<isNotEmpty property="f_shp_mod_cd">
					   AND  BL.SHP_MOD_CD = #f_shp_mod_cd#
					</isNotEmpty>
					<isNotEmpty property="opr_usrid">
					   AND  BND.ISSUED_BY = #opr_usrid#
					</isNotEmpty>	
					<isNotEmpty property="sls_usrid">
					   AND  BND.SLS_USRID = #sls_usrid#
					</isNotEmpty>
					<!-- OFVFOUR-7976: [MATRIX] ADDING CS PIC ON ALL B/L ENTRY AND TRADE PARTNER ENTRY SCREEN -->
                    <isNotEmpty property="cs_usrid">
                        AND  BND.CS_USRID = #cs_usrid#
                    </isNotEmpty>
				    <isNotEmpty property="or_usrid">
					  AND  (BND.ISSUED_BY = #or_usrid# or BND.SLS_USRID = #or_usrid# or BND.CS_USRID = #or_usrid#)
					</isNotEmpty>
					<isNotEmpty property="f_pol_cd">
					   AND  BL.POL_CD = #f_pol_cd#
					</isNotEmpty>
					<isNotEmpty property="f_pol_nm">
					   AND  BL.POL_NM LIKE  #f_pol_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_por_cd">
					   AND  BL.POR_CD = #f_por_cd#
					</isNotEmpty>
					<isNotEmpty property="f_por_nm">
					   AND  BL.POR_NM LIKE  #f_por_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_pod_cd">
					   AND  BL.POD_CD = #f_pod_cd#
					</isNotEmpty>
					<isNotEmpty property="f_pod_nm">
					   AND  BL.POD_NM LIKE  #f_pod_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_del_cd">
					   AND  BL.DEL_CD = #f_del_cd#
					</isNotEmpty>
					<isNotEmpty property="f_del_nm">
					   AND  BL.DEL_NM LIKE  #f_del_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_cnee_trdp_nm">
					   AND  CNEE.TRDP_NM LIKE  #f_cnee_trdp_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_ofc_cd">
					   AND  BL.REF_OFC_CD = #f_ofc_cd#
					</isNotEmpty>
					<isNotEmpty property="f_pic_id">
					   AND  BL.RGST_USRID LIKE  #f_pic_id# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_entr_no">
					   AND  BND.ENTR_NO LIKE  #f_entr_no# + '%'
					</isNotEmpty>
					<!-- OFVFOUR-7105 [JAPAN TRUST] Adding "Original B/L Type" Column and Search on B/L List -->
					<isNotEmpty property="f_obl_tp_cd">
					   AND BL.OBL_TP_CD =  #f_obl_tp_cd#
					</isNotEmpty>

					<!-- OFVFOUR-8056: [BNX-LA] Adding Search option in AR/AP list and OIH List screen -->
                    <isNotEmpty property="f_cmdt_nm">
                        AND  BL.INTG_BL_SEQ IN (SELECT  INTG_BL_SEQ
                        FROM TB_INTG_BL
                        WHERE REP_CMDT_NM <![CDATA[ <> ]]> '' AND REP_CMDT_NM LIKE #f_cmdt_nm# + '%')
                    </isNotEmpty>
					 ) a1
		 <![CDATA[ where a1.ROWNUM > #beginIdx# AND a1.ROWNUM <= #topCnt#	]]> 		
		 
			<isNotEmpty property="f_orderByInfo">
			ORDER BY $f_orderByInfo$
			</isNotEmpty>
			<isEmpty property="f_orderByInfo"> 
			</isEmpty>
			
		 		
    </select>
    
    <!--  House B/L List select count    -->
    <!-- ZOOT -->
    <select id="selectHBL_LIST_CNT" parameterClass="java.util.HashMap" resultClass="Integer">
        /* BlCmmSQL.xml > selectHBL_LIST_CNT */
        SELECT  COUNT(bl.intg_bl_seq)    
          FROM  TB_INTG_BL BL          
			  JOIN  tb_add_info_bnd bnd with(nolock)
				ON  bl.intg_bl_seq = bnd.intg_bl_seq AND bnd.bnd_clss_cd = #bnd_clss_cd# AND bnd.delt_flg = 'N'
				<isNotEmpty property="f_bl_ser_no_frm">
				   	<isNotEmpty property="f_bl_ser_no_to">
				  	 	AND  bnd.hbl_ser_no between #f_bl_ser_no_frm# and #f_bl_ser_no_to#
					</isNotEmpty>
				</isNotEmpty>
   LEFT OUTER JOIN  tb_bl_prnr PRNR with(nolock)
				ON  bl.intg_bl_seq = prnr.intg_bl_seq  AND prnr.bl_trdp_tp_cd = 'P01' AND prnr.delt_flg = 'N'
   LEFT OUTER JOIN  tb_bl_prnr SHPR with(nolock)
				ON  bl.intg_bl_seq = SHPR.intg_bl_seq  AND SHPR.bl_trdp_tp_cd = 'S01' AND SHPR.delt_flg = 'N'
   LEFT OUTER JOIN  tb_bl_prnr CNEE with(nolock)
				ON  bl.intg_bl_seq = CNEE.intg_bl_seq  AND CNEE.bl_trdp_tp_cd = 'C01' AND CNEE.delt_flg = 'N'
   LEFT OUTER JOIN  tb_bl_prnr ACT with(nolock)
				ON  bl.intg_bl_seq = act.intg_bl_seq  AND act.bl_trdp_tp_cd = 'S02' AND act.delt_flg = 'N'
   LEFT OUTER JOIN  tb_bl_prnr LNR with(nolock)
				ON  bl.intg_bl_seq = lnr.intg_bl_seq  AND lnr.bl_trdp_tp_cd = 'L01' AND lnr.delt_flg = 'N'
   LEFT OUTER JOIN  tb_bl_prnr NTFY with(nolock)
				ON  bl.intg_bl_seq = ntfy.intg_bl_seq  AND ntfy.bl_trdp_tp_cd = 'N01' AND ntfy.delt_flg = 'N'
   LEFT OUTER JOIN	tb_bl_prnr CUST with(nolock)
           		ON	bl.intg_bl_seq = cust.intg_bl_seq  AND cust.bl_trdp_tp_cd = 'C03' AND cust.delt_flg = 'N'
   LEFT OUTER JOIN	tb_bl_prnr trk with(nolock)
           		ON	bl.intg_bl_seq = cust.intg_bl_seq  AND cust.bl_trdp_tp_cd = 'T02' AND cust.delt_flg = 'N'
   LEFT OUTER JOIN	tb_bl_prnr vndr with(nolock)
           		ON	bl.intg_bl_seq = vndr.intg_bl_seq  AND vndr.bl_trdp_tp_cd = 'V01' AND vndr.delt_flg = 'N'
   LEFT OUTER JOIN  tb_trdp CFS with(nolock)
				ON  bl.cfs_trdp_cd = cfs.trdp_cd  AND cfs.delt_flg = 'N'
   LEFT OUTER JOIN (
				SELECT  rlt.intg_bl_seq, mbl.bl_no
				  FROM  tb_intg_bl mbl with(nolock)
	   LEFT OUTER JOIN  tb_intg_bl_rlt rlt with(nolock)
					ON  rlt.rlt_intg_bl_seq = mbl.intg_Bl_seq AND mbl.delt_flg = 'N'  
					) X ON X.intg_bl_seq = bl.intg_Bl_seq   
        WHERE   bl.delt_flg = 'N'  AND bl.air_sea_clss_cd= #air_sea_clss_cd#
          AND bl.biz_clss_cd  = #biz_clss_cd#
    		<isNotEmpty property="f_hbl_no">
    			<!-- #1061 [Binex, Sunway, AIF] V440 Search function -->
			   AND  BL.BL_NO LIKE #f_hbl_no# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_ref_no">
				<!-- #1061 [Binex, Sunway, AIF] V440 Search function -->
			   AND  BL.REF_NO LIKE #f_ref_no# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_mbl_no">
				<!-- #1061 [Binex, Sunway, AIF] V440 Search function -->
			   AND  X.BL_NO LIKE #f_mbl_no# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_cntr_no">
			   AND  BL.INTG_BL_SEQ IN (SELECT  CNTR.INTG_BL_SEQ
										 FROM  TB_CNTR_LIST CNTR with(nolock)
										WHERE  CNTR.CNTR_NO LIKE  #f_cntr_no# + '%')
			</isNotEmpty>
			<isNotEmpty property="etd_strdt">
			   AND  BL.ETD_DT_TM BETWEEN #etd_strdt# AND #etd_enddt#
			</isNotEmpty>
			<isNotEmpty property="eta_strdt">
			   AND  BL.ETA_DT_TM BETWEEN #eta_strdt# AND #eta_enddt#
			</isNotEmpty>
			<isNotEmpty property="f_pol_cd">
			   AND  BL.POL_CD = #f_pol_cd#
			</isNotEmpty>
			<isNotEmpty property="f_pol_nm">
			   AND  BL.POL_NM LIKE  #f_pol_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_por_cd">
			   AND  BL.POR_CD = #f_por_cd#
			</isNotEmpty>
			<isNotEmpty property="f_por_nm">
			   AND  BL.POR_NM LIKE  #f_por_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_pod_cd">
			   AND  BL.POD_CD = #f_pod_cd#
			</isNotEmpty>
			<isNotEmpty property="f_pod_nm">
			   AND  BL.POD_NM LIKE  #f_pod_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_del_cd">
			   AND  BL.DEL_CD = #f_del_cd#
			</isNotEmpty>
			<isNotEmpty property="f_del_nm">
			   AND  BL.DEL_NM LIKE  #f_del_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_prnr_trdp_nm">
			   AND  PRNR.TRDP_NM LIKE  #f_prnr_trdp_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_shpr_trdp_nm">
			   AND  SHPR.TRDP_NM LIKE  #f_shpr_trdp_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_cnee_trdp_nm">
			   AND  CNEE.TRDP_NM LIKE  #f_cnee_trdp_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_ahpr_trdp_nm">
			   AND  ACT.TRDP_NM LIKE  #f_ahpr_trdp_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_ntfy_trdp_nm">
			   AND  NTFY.TRDP_NM LIKE  #f_ntfy_trdp_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_lnr_trdp_nm"><!-- #1230 HBL list modification FULLTRANS -->
			   AND  LNR.TRDP_NM LIKE  #f_lnr_trdp_nm# + '%'
			</isNotEmpty>			
			<isNotEmpty property="f_cfs_trdp_nm">
			   AND  CFS.ENG_NM LIKE  #f_cfs_trdp_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_hbl_tp_cd">
			   AND  BL.HBL_TP_CD = #f_hbl_tp_cd#
			</isNotEmpty>
			<isNotEmpty property="f_ofc_cd">
			   AND  BL.REF_OFC_CD = #f_ofc_cd#
			</isNotEmpty>
			<isNotEmpty property="f_shp_mod_cd">
			   AND  BL.SHP_MOD_CD = #f_shp_mod_cd#
			</isNotEmpty>
			<isNotEmpty property="f_inco_cd">
			   AND  BL.INCO_CD = #f_inco_cd#
			</isNotEmpty>
			<isNotEmpty property="f_pic_id">
			   AND  BL.RGST_USRID LIKE  #f_pic_id# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_cmdt_nm">
			   AND  BL.REP_CMDT_NM LIKE  #f_cmdt_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_trnk_vsl_nm">
			   AND  BL.TRNK_VSL_NM LIKE  #f_trnk_vsl_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_trnk_voy">
			   AND  BL.TRNK_VOY LIKE  #f_trnk_voy# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_grs_wgt">
			   AND  BL.GRS_WGT LIKE  #f_grs_wgt# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_grs_wgt1">
			   AND  BL.GRS_WGT1 LIKE  #f_grs_wgt1# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_meas">
			   AND  BL.MEAS LIKE  #f_meas# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_it_no">
			   AND  BL.IT_NO LIKE  #f_it_no# + '%'
			</isNotEmpty>
			<isNotEmpty property="fm_pck_qty">
			   AND  BL.PCK_QTY BETWEEN #fm_pck_qty# AND #to_pck_qty#
			</isNotEmpty>
			<isNotEmpty property="fm_grs_wgt">
					<isNotEmpty property="to_grs_wgt">
						<isEqual property="f_grs_wgt_sel_cd" compareValue="KG">
							AND  BL.GRS_WGT BETWEEN #fm_grs_wgt# AND #to_grs_wgt#
						</isEqual>
						<isEqual property="f_grs_wgt_sel_cd" compareValue="LG">
							AND  BL.GRS_WGT1 BETWEEN #fm_grs_wgt# AND #to_grs_wgt#
						</isEqual>
					</isNotEmpty>
					
					<isEmpty property="to_grs_wgt">
						<isEqual property="f_grs_wgt_sel_cd" compareValue="KG">
							AND BL.GRS_WGT <![CDATA[>=]]> #fm_grs_wgt# 
						</isEqual>
						<isEqual property="f_grs_wgt_sel_cd" compareValue="LG">
							AND BL.GRS_WGT1 <![CDATA[>=]]> #fm_grs_wgt#
						</isEqual>
					</isEmpty>
				</isNotEmpty>
				<isEmpty property="fm_grs_wgt">
					<isNotEmpty property="to_grs_wgt">
						<isEqual property="f_grs_wgt_sel_cd" compareValue="KG">
							AND BL.GRS_WGT <![CDATA[<=]]> #to_grs_wgt#
						</isEqual>
						<isEqual property="f_grs_wgt_sel_cd" compareValue="LG">
							AND BL.GRS_WGT1 <![CDATA[<=]]> #to_grs_wgt#
						</isEqual>
					</isNotEmpty>
				</isEmpty>
			<isNotEmpty property="fm_meas">
			   AND  BL.MEAS BETWEEN #fm_meas# AND #to_meas#
			</isNotEmpty>
			<isNotEmpty property="f_po_no">
			   AND  BL.PO_NO LIKE  #f_po_no# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_lc_no">
			   AND  BL.LC_NO = #f_lc_no#
			</isNotEmpty>
			<isNotEmpty property="f_inv_no">
			   AND  BL.INV_NO = #f_inv_no#
			</isNotEmpty>
			<isNotEmpty property="f_lnr_bkg_no">
			   AND  BL.LNR_BKG_NO = #f_lnr_bkg_no#
			</isNotEmpty>
			<isNotEmpty property="f_cust_ref_no">
			   AND  BL.CUST_REF_NO LIKE  #f_cust_ref_no# + '%'
			</isNotEmpty>	
			<isNotEmpty property="f_ams_no">
			   AND  BL.AMS_NO LIKE  #f_ams_no# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_isf_no">
			   AND  BL.ISF_NO LIKE  #f_isf_no# + '%'
			</isNotEmpty>		
			<isNotEmpty property="f_ccn_no">
			   AND  BL.CCN_NO LIKE  #f_ccn_no# + '%'
			</isNotEmpty>			
			<isNotEmpty property="f_fnl_dest_loc_cd">
			   AND  BL.FNL_DEST_LOC_CD = #f_fnl_dest_loc_cd#
			</isNotEmpty>
			<isNotEmpty property="f_fnl_dest_loc_nm">
			   AND  BL.FNL_DEST_LOC_NM LIKE  #f_fnl_dest_loc_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_entr_no">
			   AND  BND.ENTR_NO LIKE  #f_entr_no# + '%'
			</isNotEmpty>	
			<isNotEmpty property="post_strdt">
			   AND  BL.POST_DT BETWEEN #post_strdt# AND #post_enddt#
			</isNotEmpty>					
			<isNotEmpty property="f_sub_bl_no">
				<!-- #1061 [Binex, Sunway, AIF] V440 Search function -->
			   AND  BL.SUB_BL_NO LIKE #f_sub_bl_no# + '%'
			</isNotEmpty>
			<isNotEmpty property="opr_usrid">
			    AND  BND.ISSUED_BY = #opr_usrid#
			</isNotEmpty>
			<isNotEmpty property="sls_usrid">
			    AND  BND.SLS_USRID = #sls_usrid#
			</isNotEmpty>
		    <isNotEmpty property="or_usrid">
				AND  (BND.ISSUED_BY = #or_usrid# or BND.SLS_USRID = #or_usrid#)
			</isNotEmpty>		
			<!-- #1327 [OCEAN BLUE] CUSTOM BROKER SEARCH FIELD ADD TO IMPORT HBL LIST  -->	
			<isNotEmpty property="f_cust_trdp_nm">
			   AND  CUST.TRDP_NM LIKE  #f_cust_trdp_nm# + '%'
			</isNotEmpty> 		
	</select>

    <!-- House B/L List select    -->
    <select id="selectIMP_HBL_LIST" parameterClass="java.util.HashMap" resultClass="HBLInfoVO">
        SELECT  TOP $topCnt$
                bl.intg_bl_seq,     bl.biz_clss_cd,     bl.bl_no,         bl.bkg_no,    
                bl.obrd_dt_tm,      bl.etd_dt_tm,       bl.eta_dt_tm, 
                bl.por_cd,          bl.por_nm,          '' AS por_nod_cd,      
                bl.pol_cd,          bl.pol_nm,          bl.pol_nod_cd,
                bl.pod_cd,          bl.pod_nm,          bl.pod_nod_cd,      
                bl.del_cd,          bl.del_nm,          '' AS del_nod_cd,
                bl.fnl_dest_loc_cd, bl.fnl_dest_loc_nm, '' AS fnl_dest_nod_cd,
				(select max(eng_usr_nm) from tb_usr where usrid = bnd.issued_by )  AS proc_usrnm,
				dpt.cd_nm AS proc_dept_nm,
				act.trdp_cd AS act_shpr_trdp_cd,  act.trdp_nm AS act_shpr_trdp_nm,
                shp.trdp_cd AS shpr_trdp_cd,      shp.trdp_nm AS shpr_trdp_nm,
                cne.trdp_cd AS cnee_trdp_cd,      cne.trdp_nm AS cnee_trdp_nm,
                lnr.trdp_cd AS lnr_trdp_cd,       lnr.trdp_nm AS lnr_trdp_nm,
                
                prnr.trdp_cd AS prnr_trdp_cd,     prnr.trdp_nm AS prnr_trdp_nm,
                
				ISNULL(BLCK.BL_STS_CD1, BL.BL_STS_CD) AS BL_STS_CD,                     stp.cd_nm AS bl_sts_label,
				bl.cust_ref_no,
				
				bl.ref_ofc_cd, bl.ref_no, bl.sub_bl_no, bl.post_dt, X.bl_no AS mbl_no,
                bl.trnk_vsl_nm, bl.trnk_voy
        
          FROM  tb_intg_bl bl 
          JOIN  tb_add_info_bnd bnd
            ON   bl.intg_bl_seq = bnd.intg_bl_seq AND bnd.bnd_clss_cd   = #bnd_clss_cd#   AND bnd.delt_flg = 'N'

LEFT OUTER JOIN(SELECT INTG_BL_SEQ AS INTG_BL_SEQ1, BL_STS_CD AS BL_STS_CD1 FROM TB_INTG_BL_BLCK) BLCK 
			ON BL.INTG_BL_SEQ = BLCK.INTG_BL_SEQ1
			
LEFT OUTER JOIN  tb_com_cd_dtl dpt
            ON  dpt.cd_val = bl.dept_cd  AND  dpt.com_cd = 'C056'  AND  dpt.delt_flg = 'N'
		
LEFT OUTER JOIN  tb_com_cd_dtl stp
            ON  stp.cd_val = ISNULL(BLCK.BL_STS_CD1, BL.BL_STS_CD)  AND stp.com_cd = #f_sts_cd_tp# AND stp.delt_flg = 'N'
		
LEFT OUTER JOIN tb_bl_prnr shp
           ON   bl.intg_bl_seq = shp.intg_bl_seq  AND shp.bl_trdp_tp_cd = 'S01' AND shp.delt_flg = 'N'

LEFT OUTER JOIN tb_bl_prnr act
           ON   bl.intg_bl_seq = act.intg_bl_seq  AND act.bl_trdp_tp_cd = 'S02' AND shp.delt_flg = 'N'
                  
LEFT OUTER JOIN tb_bl_prnr cne
           ON   bl.intg_bl_seq = cne.intg_bl_seq  AND cne.bl_trdp_tp_cd = 'C01' AND cne.delt_flg = 'N'

LEFT OUTER JOIN tb_bl_prnr lnr
           ON   bl.intg_bl_seq = lnr.intg_bl_seq  AND lnr.bl_trdp_tp_cd = 'L01' AND lnr.delt_flg = 'N'

LEFT OUTER JOIN tb_bl_prnr prnr
           ON   bl.intg_bl_seq = prnr.intg_bl_seq  AND prnr.bl_trdp_tp_cd = 'P01' AND prnr.delt_flg = 'N'
           
LEFT OUTER JOIN (
				SELECT rlt.intg_bl_seq, mbl.bl_no
				  FROM tb_intg_bl mbl
	   LEFT OUTER JOIN tb_intg_bl_rlt rlt ON rlt.rlt_intg_bl_seq = mbl.intg_Bl_seq AND mbl.delt_flg = 'N'  
) X ON X.intg_bl_seq = bl.intg_Bl_seq        
        
        WHERE   bl.delt_flg = 'N'                 AND bl.air_sea_clss_cd= #air_sea_clss_cd#
          AND bl.biz_clss_cd  = #biz_clss_cd#
    <isNotNull property="f_dpt_cd">
          AND   bl.dept_cd = #f_dpt_cd#
    </isNotNull>
    <isNotNull property="f_ofc_cd">
          AND   bl.ref_ofc_cd = #f_ofc_cd#
    </isNotNull>
    <isNotNull property="f_pic_id">
          AND   bl.modi_usr_nm  = #f_pic_id#
    </isNotNull>
    <isNotNull property="f_hbl_no">
          AND   bl.bl_no  LIKE  '%' + #f_hbl_no# + '%'
    </isNotNull>
    <isNotNull property="f_hbl_tp_cd">
          AND   bl.hbl_tp_cd = #f_hbl_tp_cd#
    </isNotNull>
    <isNotEmpty property="eta_strdt">
          AND   bl.eta_dt_tm BETWEEN #eta_strdt# AND #eta_enddt#
    </isNotEmpty>
    <isNotNull property="f_act_shp_nm">
          AND   act.trdp_nm  LIKE  '%' + #f_act_shp_nm# + '%'
    </isNotNull>
    <isNotNull property="f_pol_cd">
          AND   bl.pol_cd = #f_pol_cd#
    </isNotNull>
    <isNotNull property="f_pod_cd">
          AND   bl.pod_cd = #f_pod_cd#
    </isNotNull>
    <isNotNull property="f_mbl_no">
          AND    bl.intg_bl_seq IN 
               (
                 SELECT  rlt.intg_bl_seq 
                   FROM  tb_intg_bl_rlt rlt
                   JOIN  tb_intg_bl mbl
                     ON  rlt.rlt_intg_bl_seq = mbl.intg_bl_seq
                   JOIN  tb_add_info_bnd bnd
                     ON  mbl.intg_bl_seq = bnd.intg_bl_seq AND bnd.bnd_clss_cd =  #bnd_clss_cd#   
                    AND  bnd.delt_flg = 'N'           
                    <!-- #1061 [Binex, Sunway, AIF] V440 Search function -->
                  WHERE  mbl.BL_NO LIKE #f_mbl_no# + '%'
                  	AND mbl.biz_clss_cd = 'M' 
                    AND  mbl.air_sea_clss_cd = #air_sea_clss_cd#
               )
    </isNotNull>
	<isNotNull property="f_cntr_no">
          AND    bl.intg_bl_seq IN 
                 (
                    SELECT intg_bl_seq 
                      FROM tb_cntr_list
                     WHERE cntr_no LIKE '%'+#f_cntr_no#+'%'
                 )
	</isNotNull>
	<isNotNull property="f_ref_no">
		<!-- #1061 [Binex, Sunway, AIF] V440 Search function -->
          AND   BL.REF_NO LIKE #f_ref_no# + '%'
    </isNotNull>
        ORDER BY bl.post_dt DESC, bl.obrd_dt_tm DESC, bl.intg_bl_seq DESC
    </select>
    
    <!--  House B/L List select count    -->
    <select id="selectIMP_HBL_LIST_CNT" parameterClass="java.util.HashMap" resultClass="Integer">
        SELECT  COUNT(bl.intg_bl_seq)    
          FROM  tb_intg_bl bl 
          JOIN  tb_add_info_bnd bnd
            ON   bl.intg_bl_seq = bnd.intg_bl_seq AND bnd.bnd_clss_cd   = #bnd_clss_cd#   AND bnd.delt_flg = 'N'

LEFT OUTER JOIN tb_bl_prnr shp
           ON   bl.intg_bl_seq = shp.intg_bl_seq  AND shp.bl_trdp_tp_cd = 'S01' AND shp.delt_flg = 'N'

LEFT OUTER JOIN tb_bl_prnr act
           ON   bl.intg_bl_seq = act.intg_bl_seq  AND act.bl_trdp_tp_cd = 'S02' AND shp.delt_flg = 'N'
                  
LEFT OUTER JOIN tb_bl_prnr cne
           ON   bl.intg_bl_seq = cne.intg_bl_seq  AND cne.bl_trdp_tp_cd = 'C01' AND cne.delt_flg = 'N'

LEFT OUTER JOIN tb_bl_prnr lnr
           ON   bl.intg_bl_seq = lnr.intg_bl_seq  AND lnr.bl_trdp_tp_cd = 'L01' AND lnr.delt_flg = 'N'
        
        WHERE   bl.delt_flg = 'N'                 AND bl.air_sea_clss_cd= #air_sea_clss_cd#
          AND bl.biz_clss_cd  = #biz_clss_cd#
    <isNotNull property="f_dpt_cd">
          AND   bl.dept_cd = #f_dpt_cd#
    </isNotNull>
    <isNotNull property="f_ofc_cd">
          AND   bl.ref_ofc_cd = #f_ofc_cd#
    </isNotNull>
    <isNotNull property="f_pic_id">
          AND   bl.modi_usr_nm  = #f_pic_id#
    </isNotNull>
    <isNotNull property="f_hbl_no">
          AND   bl.bl_no  LIKE  '%' + #f_hbl_no# + '%'
    </isNotNull>
    <isNotNull property="f_hbl_tp_cd">
          AND   bl.hbl_tp_cd = #f_hbl_tp_cd#
    </isNotNull>
    <isNotEmpty property="eta_strdt">
          AND   bl.eta_dt_tm BETWEEN #eta_strdt# AND #eta_enddt#
    </isNotEmpty>
    <isNotNull property="f_act_shp_nm">
          AND   act.trdp_nm  LIKE  '%' + #f_act_shp_nm# + '%'
    </isNotNull>
    <isNotNull property="f_pol_cd">
          AND   bl.pol_cd = #f_pol_cd#
    </isNotNull>
    <isNotNull property="f_pod_cd">
          AND   bl.pod_cd = #f_pod_cd#
    </isNotNull>
    <isNotNull property="f_mbl_no">
          AND    bl.intg_bl_seq IN 
               (
                 SELECT  rlt.intg_bl_seq 
                   FROM  tb_intg_bl_rlt rlt
                   JOIN  tb_intg_bl mbl
                     ON  rlt.rlt_intg_bl_seq = mbl.intg_bl_seq
                   JOIN  tb_add_info_bnd bnd
                     ON  mbl.intg_bl_seq = bnd.intg_bl_seq AND bnd.bnd_clss_cd =  #bnd_clss_cd#   
                    AND  bnd.delt_flg = 'N'
                    <!-- #1061 [Binex, Sunway, AIF] V440 Search function -->
                  WHERE  mbl.BL_NO LIKE #f_mbl_no# + '%'           AND mbl.biz_clss_cd = 'M' 
                    AND  mbl.air_sea_clss_cd = #air_sea_clss_cd#
               )
    </isNotNull>
    <isNotNull property="f_cntr_no">
          AND    bl.intg_bl_seq IN 
                 (
                    SELECT intg_bl_seq 
                      FROM tb_cntr_list
                     WHERE cntr_no LIKE '%'+#f_cntr_no#+'%'
                 )
    </isNotNull>
    <isNotNull property="f_ref_no">
    	<!-- #1061 [Binex, Sunway, AIF] V440 Search function -->
          AND   BL.REF_NO LIKE #f_ref_no# + '%'
    </isNotNull>
    </select>

	
    <!-- Master B/L List select    -->
    <select id="selectMBL_SUB_LIST" parameterClass="java.util.HashMap" resultClass="HBLInfoVO">
        SELECT  bl.intg_bl_seq,     bl.biz_clss_cd,     bl.bl_no,        bl.etd_dt_tm,    bl.eta_dt_tm,    bl.bkg_no,
        		bl.ref_no,    
                bl.por_cd,          bl.por_nm,          '' AS por_nod_cd,   bl.pol_cd,       bl.pol_nm,       bl.pol_nod_cd,
                bl.pod_cd,          bl.pod_nm,          bl.pod_nod_cd,   bl.del_cd,       bl.del_nm,       '' AS del_nod_cd,
                shp.trdp_cd AS shpr_trdp_cd,            shp.trdp_nm AS shpr_trdp_nm,
                <!-- #6417 [Binex-LA] AEH AWB LIST에서 CONSIGNEE 대신 CARRIER가 표시되는 문제 -->
                cnee.trdp_cd AS cnee_trdp_cd,           cnee.trdp_nm AS cnee_trdp_nm,
                lnr.trdp_cd AS lnr_trdp_cd,             lnr.trdp_nm AS lnr_trdp_nm, ISNULL(BLCK.BL_STS_CD1, BL.BL_STS_CD) AS BL_STS_CD
          FROM  tb_intg_bl bl
          JOIN  tb_intg_bl_rlt rlt
            ON  bl.intg_bl_seq = rlt.rlt_intg_bl_seq AND rlt.delt_flg = 'N'
LEFT OUTER JOIN tb_bl_prnr shp
            ON  bl.intg_bl_seq = shp.intg_bl_seq  AND shp.bl_trdp_tp_cd = 'S01' AND shp.delt_flg = 'N'
<!-- #6417 [Binex-LA] AEH AWB LIST에서 CONSIGNEE 대신 CARRIER가 표시되는 문제 -->
LEFT OUTER JOIN tb_bl_prnr cnee
			ON  bl.intg_bl_seq = cnee.intg_bl_seq AND cnee.bl_trdp_tp_cd = 'C01' AND cnee.delt_flg = 'N'
LEFT OUTER JOIN tb_bl_prnr lnr
            ON  bl.intg_bl_seq = lnr.intg_bl_seq  AND lnr.bl_trdp_tp_cd = 'L01' AND lnr.delt_flg = 'N'
            
LEFT OUTER JOIN(SELECT INTG_BL_SEQ AS INTG_BL_SEQ1, BL_STS_CD AS BL_STS_CD1 FROM TB_INTG_BL_BLCK) BLCK 
			ON BL.INTG_BL_SEQ = BLCK.INTG_BL_SEQ1
			            
         WHERE  rlt.intg_bl_seq = #f_intg_bl_seq#
           AND  bl.DELT_FLG = 'N'
    </select>    
    
    <!-- ZOOT=NoPaging 처리  -->    
    <!-- ZOOT=LIST PAGE AR_AP_DC STAUS PROCESS -->    
    <!-- ZOOT=2015-01-08 NoPaging 처리  -->
    <select id="selectMBL_LIST_NOPAGING" parameterClass="java.util.HashMap" resultClass="com.clt.apps.fis.see.bmd.masterbl.dto.SeeMasterBLVO">
           /* selectMBL_LIST_NOPAGING */
            	with blinfo as (
					select a1.* 
					from (
						select 
								ROW_NUMBER() OVER (
							ORDER BY
								BL.POST_DT DESC,
								BL.MODI_TMS DESC) as ROWNUM,
								BL.*
								,ISNULL(bnd.VGM_CUT_OFF_DT,'') as vgm_cut_off_dt
								,ISNULL(bnd.AR_CHK,'X') AS AR_CHK
								,ISNULL(bnd.AP_CHK,'X') AS AP_CHK
								,ISNULL(bnd.DC_CHK,'X') AS DC_CHK
								,ISNULL(bnd.FRT_CHK,'X') AS FRT_CHK
								,bnd.issued_by
								,bnd.sls_usrid
								,bnd.sls_usr_nm
								<!-- OFVFOUR-7976: [MATRIX] ADDING CS PIC ON ALL B/L ENTRY AND TRADE PARTNER ENTRY SCREEN -->
                                ,bnd.cs_usrid
                                ,bnd.cs_usr_nm
								,bnd.svc_lane_nm  <!--  #943  [PATENT] Lane 추가  -->
								,bnd.VERIFY_FLAG
								,bnd.PAY_FLAG
								<!-- #1619 [CLT] Original B/L Type- 항목 정리,bnd.bl_rlse_tp_cd -->  <!--#1430 [PATENT] 0215_15 B/L TYPE DIVERSELY  -->
								,bnd.PKUP_DT <!--  #1743  [PATENT]OEM B/L Pickup Date/Time 필요  -->
                             	,bnd.RELEASE_FLAG as bnd_release_flag
            				 	,bnd.HOLD_FLAG  as bnd_hold_flag								
						 from 
							TB_INTG_BL BL with(nolock) 
							JOIN  tb_add_info_bnd bnd with(nolock) 
							ON  bl.intg_bl_seq = bnd.intg_bl_seq 
							   AND bnd.bnd_clss_cd = #bnd_clss_cd#							    
							<isNotEmpty property="opr_usrid">
					           AND BND.ISSUED_BY = #opr_usrid#
					        </isNotEmpty>
					        <isNotEmpty property="sls_usrid">
					           AND BND.SLS_USRID = #sls_usrid#
					        </isNotEmpty>
					        <!-- OFVFOUR-7976: [MATRIX] ADDING CS PIC ON ALL B/L ENTRY AND TRADE PARTNER ENTRY SCREEN -->
                            <isNotEmpty property="cs_usrid">
                                AND BND.CS_USRID = #cs_usrid#
                            </isNotEmpty>
							<isNotEmpty property="f_ofc_cd">
							   AND  bl.ref_ofc_cd = #f_ofc_cd#
							</isNotEmpty>	
						WHERE  bl.delt_flg = 'N'
						  AND  bl.air_sea_clss_cd = #air_sea_clss_cd#
						  AND  bl.biz_clss_cd  = #biz_clss_cd#					
					) a1   
				<![CDATA[ where a1.ROWNUM > #beginIdx# AND a1.ROWNUM <= #topCnt#	]]>
				)
				SELECT 
				A1.*
				<!-- #4035 B/L EDI validation 추가 -->
		        ,CASE WHEN ISNULL(TRDP.AGT_EDI_CD,'') != ''
	 				 THEN 
						(SELECT CASE WHEN COUNT(*) > 0 
									 THEN 'Y' 
		             				 ELSE 'N' 
		         				 END 
					       FROM TB_EDI_SND_HIS  
					      WHERE EDI_MSG_NO LIKE 'AGT%' 
		   				    AND EDI_MSG_TXT LIKE '%' + a1.INTG_BL_SEQ + '%' )
		
					 ELSE 'X'
				END	AS SND_FLG  
				FROM (
            	SELECT  
		         			BL.INTG_BL_SEQ,
		         			BL.DOC_CUT_OFF_DT,	
							BL.BL_NO, BL.REF_NO, BL.REF_OFC_CD, BL.LNR_BKG_NO,
							BL.ETD_DT_TM, BL.ETA_DT_TM, BL.F_ETA_DT_TM,
							BL.POR_CD, BL.POR_NM, 
							BL.POL_CD, BL.POL_NM, 
							BL.POD_CD, BL.POD_NM, 
							BL.DEL_CD, BL.DEL_NM,
							(SELECT MAX(X.CNTR_NO) FROM TB_CNTR_LIST X WHERE X.INTG_BL_SEQ = BL.INTG_BL_SEQ AND X.DELT_FLG = 'N') AS CNTR_NO,
							(SELECT COUNT(X.CNTR_NO)-1 FROM TB_CNTR_LIST X WHERE X.INTG_BL_SEQ = BL.INTG_BL_SEQ AND X.DELT_FLG = 'N') AS CNTR_CNT, 
							<!-- #1230 HBL list modification FULLTRANS -->
					       STUFF(( SELECT ',  ' + CNTR_TPSZ_CD +' X ' + LTRIM(STR(COUNT(CNTR_TPSZ_CD)))
					               FROM TB_CNTR_LIST X
					               WHERE ( X.INTG_BL_SEQ = BL.INTG_BL_SEQ
					               <!-- #4057[JAPT] question for our profit report -->				               
					               AND X.DELT_FLG = 'N'
					                )
					               GROUP BY CNTR_TPSZ_CD
					               FOR XML PATH ('')),1,1,'') AS cntr_summary, 	
							agent.TRDP_CD AS PRNR_TRDP_CD4, agent.TRDP_NM AS PRNR_TRDP_NM4,
							PRNR.TRDP_CD AS PRNR_TRDP_CD3, PRNR.TRDP_NM AS PRNR_TRDP_NM3,
							PRNR2.TRDP_CD AS PRNR_TRDP_CD2, PRNR2.TRDP_NM AS PRNR_TRDP_NM2,
							SHPR.TRDP_CD AS SHPR_TRDP_CD, SHPR.TRDP_NM AS SHPR_TRDP_NM,
							CNEE.TRDP_CD AS CNEE_TRDP_CD, CNEE.TRDP_NM AS CNEE_TRDP_NM,
							LNR.TRDP_CD AS LNR_TRDP_CD, LNR.TRDP_NM AS LNR_TRDP_NM,
							CARR.TRDP_CD AS CARR_TRDP_CD, CARR.TRDP_NM AS CARR_TRDP_NM,
							BL.CY_TRDP_CD, CY.ENG_NM AS CY_TRDP_NM,
							BL.CFS_TRDP_CD, CFS.ENG_NM AS CFS_TRDP_NM,
							BL.HBL_TP_CD, BL.SHP_MOD_CD, BL.INCO_CD, BL.RGST_USRID, BL.REP_CMDT_NM,
							BL.CUST_REF_NO,
							(SELECT x.cnt_cd FROM TB_OFC x WHERE x.OFC_CD = bl.rgst_ofc_cd) AS BL_CNT, 
							(SELECT MAX(X.ENG_USR_NM) FROM TB_USR X WHERE X.USR_TP = 'I' AND X.USRID = bl.issued_by) AS PROC_USRNM,
							BL.POST_DT, BL.TRNK_VSL_NM, BL.TRNK_VOY,
							(  SELECT COUNT(*) FROM TB_INTG_BL_RLT RLT WHERE  RLT.RLT_INTG_BL_SEQ = BL.INTG_BL_SEQ AND RLT.DELT_FLG = 'N') AS HBL_CNT,    	
							ISNULL(DBO.FC_MK_MEMO_SCRIPT(BL.INTG_BL_SEQ), '') AS MEMO,
							BL.AMS_ID
							, BL.RLSD_FLG, BL.RLSD_DT_TM , ISNULL(BLCK.BL_STS_CD1, BL.BL_STS_CD) AS BL_STS_CD
							<!-- #4724	[Best Ocean] Ocean Import OBL Received and Received Date column and entry add -->
							,BL.org_bl_rcvd_flg
							,BL.rcvd_dt_tm
							
	    					,BL.CCN_NO
							,BL.CCN_DT
							,BL.PRE_CCN_NO
							,BL.MNF_FR_LOC
							,BL.MNF_TO_LOC
							,BL.IMP_REF_NO
							,BL.MODI_TMS	
							,ISNULL(BL.AR_CHK,'X') AS AR_CHK
							,ISNULL(BL.AP_CHK,'X') AS AP_CHK
							,ISNULL(BL.DC_CHK,'X') AS DC_CHK       						
							,ISNULL(BL.FRT_CHK,'X') AS FRT_CHK       	
							,BL.SLS_USRID	
							,BL.SLS_USR_NM
							<!-- OFVFOUR-7976: [MATRIX] ADDING CS PIC ON ALL B/L ENTRY AND TRADE PARTNER ENTRY SCREEN -->
                            ,BL.CS_USRID
                            ,BL.CS_USR_NM
							,BL.SVC_LANE_NM  <!--  #943  [PATENT] Lane 추가  -->
							,BL.VERIFY_FLAG
						    ,BL.PAY_FLAG	
						    ,BL.PKUP_DT <!--  #1743  [PATENT]OEM B/L Pickup Date/Time 필요  -->
						    ,isnull(bl.obl_tp_cd,'') AS obl_tp_cd
							<!-- #1619 [CLT] Original B/L Type- 항목 정리,BL.BL_RLSE_TP_CD	 #1430 [PATENT] 0215_15 B/L TYPE DIVERSELY  
							,dtl.CD_NM BL_RLSE_TP_NM-->
                             ,BL.bnd_release_flag
            				 ,BL.bnd_hold_flag
						<!-- #5087 Agent EDI Version 1.0, Version 2.0 관리로 인한 로직 변경 -->
            				<!-- ,ISNULL(PRNR.TRDP_CD,CNEE.TRDP_CD) AS AGENT_EDI_CD -->
            				,PRNR.TRDP_CD AS AGENT_EDI_CD       				 
            				<!-- #4980 [Best Ocean] Created Time and Last Modify Time columns add to BL List -->  
							,DATEADD(HH, DATEDIFF(HH,GETUTCDATE(),GETDATE()), BL.MODI_TMS ) AS MODI_TMS_LOCAL       				
            				,BL.RGST_TMS
            				,BL.MODI_USR_NM
            				<!-- OFVFOUR-7337: [GPL] Adding Service Term column on OI MBL List-->
							,(ISNULL((SELECT TOP 1 CD_NM FROM TB_COM_CD_DTL  WHERE COM_CD ='C031' AND CD_VAL = BL.FM_SVC_TERM_CD),'') + '/' + ISNULL((SELECT TOP 1 CD_NM FROM TB_COM_CD_DTL  WHERE COM_CD ='C031' AND CD_VAL = BL.TO_SVC_TERM_CD),'')) AS FM_TO_SVC_TERM				 
					  FROM  blinfo BL with(nolock)					
		   LEFT OUTER JOIN  tb_bl_prnr PRNR2 with(nolock) 
						ON  bl.intg_bl_seq = prnr2.intg_bl_seq  AND prnr2.bl_trdp_tp_cd = 'P03' AND prnr2.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr PRNR
						ON  bl.intg_bl_seq = PRNR.intg_bl_seq  AND PRNR.bl_trdp_tp_cd = 'P01' AND PRNR.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr agent
						ON  bl.intg_bl_seq = agent.intg_bl_seq  AND agent.bl_trdp_tp_cd = 'A01' AND agent.delt_flg = 'N'							
		   LEFT OUTER JOIN  tb_bl_prnr SHPR with(nolock) 
						ON  bl.intg_bl_seq = SHPR.intg_bl_seq  AND SHPR.bl_trdp_tp_cd = 'S01' AND SHPR.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr CNEE with(nolock) 
						ON  bl.intg_bl_seq = CNEE.intg_bl_seq  AND CNEE.bl_trdp_tp_cd = 'C01' AND CNEE.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr CARR with(nolock) 
						ON  bl.intg_bl_seq = carr.intg_bl_seq  AND carr.bl_trdp_tp_cd = 'B01' AND carr.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr LNR with(nolock) 
						ON  bl.intg_bl_seq = lnr.intg_bl_seq  AND lnr.bl_trdp_tp_cd = 'L01' AND lnr.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_trdp CY with(nolock) 
						ON  bl.cy_trdp_cd = cy.trdp_cd  AND cy.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_trdp CFS with(nolock) 
						ON  bl.cfs_trdp_cd = cfs.trdp_cd  AND cfs.delt_flg = 'N' 
		   LEFT OUTER JOIN(SELECT INTG_BL_SEQ AS INTG_BL_SEQ1, BL_STS_CD AS BL_STS_CD1 FROM TB_INTG_BL_BLCK) BLCK 
		   				ON BL.INTG_BL_SEQ = BLCK.INTG_BL_SEQ1		
		   <!-- #1619 [CLT] Original B/L Type- 항목 정리 LEFT OUTER JOIN TB_COM_CD_DTL dtl
         				ON dtl.com_cd = 'C222' and BL.BL_RLSE_TP_CD = dtl.CD_VAL   
			-->       
					 WHERE  bl.delt_flg = 'N'
					   AND  bl.air_sea_clss_cd = #air_sea_clss_cd#
					   AND  bl.biz_clss_cd  = #biz_clss_cd#		
				  <isNotEmpty property="f_carr_trdp_nm">
					   AND  CARR.TRDP_NM LIKE  #f_carr_trdp_nm# + '%'
				  </isNotEmpty>
				  <isNotEmpty property="f_lnr_trdp_nm">
					   AND  LNR.TRDP_NM LIKE  #f_lnr_trdp_nm# + '%'
				  </isNotEmpty>	
				  <!-- OFVFOUR-7105 [JAPAN TRUST] Adding "Original B/L Type" Column and Search on B/L List -->
				  <isNotEmpty property="f_obl_tp_cd">
					   AND  BL.OBL_TP_CD = #f_obl_tp_cd#
				  </isNotEmpty>		
			) A1	
 		    <!-- #4035 B/L EDI validation 추가 -->
			LEFT JOIN TB_TRDP TRDP
			ON A1.AGENT_EDI_CD = TRDP.TRDP_CD
			ORDER BY  
			<isNotEmpty property="f_orderByInfo">
			 $f_orderByInfo$
			</isNotEmpty>
			<isEmpty property="f_orderByInfo"> 
			A1.POST_DT DESC, A1.MODI_TMS DESC     
			</isEmpty>
    </select>
    
    <!-- Master B/L List select    -->
    <!-- ZOOT -->
    <select id="selectMBL_LIST_BACKUP" parameterClass="java.util.HashMap" resultClass="com.clt.apps.fis.see.bmd.masterbl.dto.SeeMasterBLVO">        
           /* selectMBL_LIST NEW IN/OUT */
            SELECT T1.*,
			<![CDATA[ 
			    CASE WHEN ISNULL(inv_sum.ar_cnt, 0)  = 0 THEN 'X'
                     WHEN inv_sum.ar_bal_amt = 0 THEN 'Y'
                     WHEN inv_sum.ar_inv_sum_amt = inv_sum.ar_bal_amt THEN 'N'
                     WHEN inv_sum.ar_bal_amt < 0 THEN 'O'   
                     ELSE 'P'
                END AS AR_CHK,
                CASE WHEN ISNULL(inv_sum.ap_cnt, 0)  = 0 THEN 'X'
                     WHEN inv_sum.ap_bal_amt = 0 THEN 'Y'
                     WHEN inv_sum.ap_inv_sum_amt = inv_sum.ap_bal_amt THEN 'N'
                     WHEN inv_sum.ap_bal_amt < 0 THEN 'O'   
                     ELSE 'P'
                END AS AP_CHK,
                CASE WHEN ISNULL(inv_sum.dc_cnt, 0)  = 0 THEN 'X'
                     WHEN inv_sum.dc_bal_amt = 0 THEN 'Y'
                     WHEN inv_sum.dc_inv_sum_amt = inv_sum.dc_bal_amt THEN 'N'
                     WHEN inv_sum.dc_bal_amt < 0 THEN 'O'   
                     ELSE 'P'
                END AS DC_CHK
    		]]> 
			FROM 
			(
	            SELECT a1.*
				  FROM (
		         	SELECT  ROW_NUMBER() OVER (ORDER BY  BL.POST_DT DESC, BL.MODI_TMS DESC) as ROWNUM,
		         			BL.INTG_BL_SEQ,
							BL.BL_NO, BL.REF_NO, BL.REF_OFC_CD, BL.LNR_BKG_NO,
							BL.ETD_DT_TM, BL.ETA_DT_TM, BL.F_ETA_DT_TM,
							BL.POR_CD, BL.POR_NM, 
							BL.POL_CD, BL.POL_NM, 
							BL.POD_CD, BL.POD_NM, 
							BL.DEL_CD, BL.DEL_NM,
		
							(SELECT MAX(X.CNTR_NO) FROM TB_CNTR_LIST X WHERE X.INTG_BL_SEQ = BL.INTG_BL_SEQ AND X.DELT_FLG = 'N') AS CNTR_NO,
		
							PRNR2.TRDP_CD AS PRNR_TRDP_CD2, PRNR2.TRDP_NM AS PRNR_TRDP_NM2,
							SHPR.TRDP_CD AS SHPR_TRDP_CD, SHPR.TRDP_NM AS SHPR_TRDP_NM,
							CNEE.TRDP_CD AS CNEE_TRDP_CD, CNEE.TRDP_NM AS CNEE_TRDP_NM,
							LNR.TRDP_CD AS LNR_TRDP_CD, LNR.TRDP_NM AS LNR_TRDP_NM,
							CARR.TRDP_CD AS CARR_TRDP_CD, CARR.TRDP_NM AS CARR_TRDP_NM,
							BL.CY_TRDP_CD, CY.ENG_NM AS CY_TRDP_NM,
							BL.CFS_TRDP_CD, CFS.ENG_NM AS CFS_TRDP_NM,
							BL.HBL_TP_CD, BL.SHP_MOD_CD, BL.INCO_CD, BL.RGST_USRID, BL.REP_CMDT_NM,
							BL.CUST_REF_NO,
							(SELECT x.cnt_cd FROM TB_OFC x WHERE x.OFC_CD = bl.rgst_ofc_cd) AS BL_CNT, 
							(SELECT MAX(X.ENG_USR_NM) FROM TB_USR X WHERE X.USR_TP = 'I' AND X.USRID = bnd.issued_by) AS PROC_USRNM,
							BL.POST_DT, BL.TRNK_VSL_NM, BL.TRNK_VOY,
							(  SELECT COUNT(*) FROM TB_INTG_BL_RLT RLT WHERE  RLT.RLT_INTG_BL_SEQ = BL.INTG_BL_SEQ AND RLT.DELT_FLG = 'N') AS HBL_CNT,    
							ISNULL(DBO.FC_MK_MEMO_SCRIPT(BL.INTG_BL_SEQ), '') AS MEMO,
							AMS_ID
							, BL.RLSD_FLG, BL.RLSD_DT_TM , ISNULL(BLCK.BL_STS_CD1, BL.BL_STS_CD) AS BL_STS_CD
	    					,BL.CCN_NO
							,BL.CCN_DT
							,BL.PRE_CCN_NO
							,BL.MNF_FR_LOC
							,BL.MNF_TO_LOC
							,BL.IMP_REF_NO
					  FROM  TB_INTG_BL BL
					  <isEqual property="bnd_clss_cd" compareValue="O">
							with(index(IDX_ETD_DT_TM), nolock)
					  </isEqual>     
					  <isEqual property="bnd_clss_cd" compareValue="I">
							with(index(IDX_ETA_DT_TM), nolock)
					  </isEqual>  
					  JOIN  tb_add_info_bnd bnd
						ON  bl.intg_bl_seq = bnd.intg_bl_seq AND bnd.bnd_clss_cd = #bnd_clss_cd# AND bnd.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr PRNR2
						ON  bl.intg_bl_seq = prnr2.intg_bl_seq  AND prnr2.bl_trdp_tp_cd = 'P03' AND prnr2.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr SHPR
						ON  bl.intg_bl_seq = SHPR.intg_bl_seq  AND SHPR.bl_trdp_tp_cd = 'S01' AND SHPR.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr CNEE
						ON  bl.intg_bl_seq = CNEE.intg_bl_seq  AND CNEE.bl_trdp_tp_cd = 'C01' AND CNEE.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr CARR
						ON  bl.intg_bl_seq = carr.intg_bl_seq  AND carr.bl_trdp_tp_cd = 'B01' AND carr.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr LNR
						ON  bl.intg_bl_seq = lnr.intg_bl_seq  AND lnr.bl_trdp_tp_cd = 'L01' AND lnr.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_trdp CY
						ON  bl.cy_trdp_cd = cy.trdp_cd  AND cy.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_trdp CFS
						ON  bl.cfs_trdp_cd = cfs.trdp_cd  AND cfs.delt_flg = 'N'   
		   LEFT OUTER JOIN(SELECT INTG_BL_SEQ AS INTG_BL_SEQ1, BL_STS_CD AS BL_STS_CD1 FROM TB_INTG_BL_BLCK) BLCK 
		   				ON BL.INTG_BL_SEQ = BLCK.INTG_BL_SEQ1
					 WHERE  bl.delt_flg = 'N'
					   AND  bl.air_sea_clss_cd = #air_sea_clss_cd#
					   AND  bl.biz_clss_cd  = #biz_clss_cd#
					<isNotEmpty property="f_ref_no">
						<!-- #1061 [Binex, Sunway, AIF] V440 Search function -->
					   AND  BL.REF_NO LIKE #f_ref_no# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_mbl_no">
						<!-- #1061 [Binex, Sunway, AIF] V440 Search function -->
					   AND  BL.BL_NO LIKE #f_mbl_no# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_lnr_bkg_no">
					   AND  BL.LNR_BKG_NO LIKE  #f_lnr_bkg_no# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_cntr_no">
					   AND  BL.INTG_BL_SEQ IN (SELECT  CNTR.INTG_BL_SEQ
												 FROM  TB_CNTR_LIST CNTR
												WHERE  CNTR.CNTR_NO LIKE  #f_cntr_no# + '%')
					</isNotEmpty>
					<isNotEmpty property="etd_strdt">
					   AND  BL.ETD_DT_TM BETWEEN #etd_strdt# AND #etd_enddt#
					</isNotEmpty>
					<isNotEmpty property="eta_strdt">
					   AND  BL.ETA_DT_TM BETWEEN #eta_strdt# AND #eta_enddt#
					</isNotEmpty>
					<isNotEmpty property="f_eta_strdt">
					   AND  BL.F_ETA_DT_TM BETWEEN #f_eta_strdt# AND #f_eta_enddt#
					</isNotEmpty>
					<isNotEmpty property="f_pol_cd">
					   AND  BL.POL_CD = #f_pol_cd#
					</isNotEmpty>
					<isNotEmpty property="f_pol_nm">
					   AND  BL.POL_NM LIKE  #f_pol_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_pod_cd">
					   AND  BL.POD_CD = #f_pod_cd#
					</isNotEmpty>
					<isNotEmpty property="f_pod_nm">
					   AND  BL.POD_NM LIKE  #f_pod_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_del_cd">
					   AND  BL.DEL_CD = #f_del_cd#
					</isNotEmpty>
					<isNotEmpty property="f_del_nm">
					   AND  BL.DEL_NM LIKE  #f_del_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_prnr_trdp_nm2">
					   AND  PRNR2.TRDP_NM LIKE  #f_prnr_trdp_nm2# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_shpr_trdp_nm">
					   AND  SHPR.TRDP_NM LIKE  #f_shpr_trdp_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_cnee_trdp_nm">
					   AND  CNEE.TRDP_NM LIKE  #f_cnee_trdp_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_carr_trdp_nm">
					   AND  LNR.TRDP_NM LIKE  #f_carr_trdp_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_cy_trdp_nm">
					   AND  CY.ENG_NM LIKE  #f_cy_trdp_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_cfs_trdp_nm">
					   AND  CFS.ENG_NM LIKE  #f_cfs_trdp_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_hbl_tp_cd">
					   AND  BL.HBL_TP_CD = #f_hbl_tp_cd#
					</isNotEmpty>
					<isNotEmpty property="f_ofc_cd">
					   AND  BL.REF_OFC_CD = #f_ofc_cd#
					</isNotEmpty>
					<isNotEmpty property="f_shp_mod_cd">
					   AND  BL.SHP_MOD_CD = #f_shp_mod_cd#
					</isNotEmpty>
					<isNotEmpty property="f_pic_id">
					   AND  BL.RGST_USRID LIKE  #f_pic_id# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_trnk_vsl_nm">
					   AND  BL.TRNK_VSL_NM LIKE  #f_trnk_vsl_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_imp_ref_no">
					   AND  BL.IMP_REF_NO LIKE  #f_imp_ref_no# + '%'
					</isNotEmpty>				
					<isNotEmpty property="f_ccn_no">
					   AND  BL.CCN_NO LIKE  #f_ccn_no# + '%'
					</isNotEmpty>				
	<!--			  ORDER BY  BL.RGST_TMS DESC  -->
			  ) a1
	<![CDATA[ where a1.ROWNUM > #beginIdx# AND a1.ROWNUM <= #topCnt#	]]>
			) T1 
			LEFT OUTER JOIN (SELECT frt.intg_bl_seq ,
		             SUM(CASE WHEN frt.sell_buy_tp_cd = 'S'
							  THEN 1
							  ELSE 0
						 END) AS ar_cnt,
					 SUM(CASE WHEN frt.sell_buy_tp_cd = 'S'
							  THEN dtl.inv_sum_amt
							  ELSE 0
						 END) AS ar_inv_sum_amt,
					 SUM(CASE WHEN frt.sell_buy_tp_cd = 'S'
							  THEN dtl.bal_amt
							  ELSE 0
						 END) AS ar_bal_amt,
					 SUM(CASE WHEN frt.sell_buy_tp_cd = 'B'
							  THEN 1
							  ELSE 0
						 END) AS ap_cnt,	 
					 SUM(CASE WHEN frt.sell_buy_tp_cd = 'B'
							  THEN dtl.inv_sum_amt
							  ELSE 0
						 END) AS ap_inv_sum_amt,
					 SUM(CASE WHEN frt.sell_buy_tp_cd = 'B'
							  THEN dtl.bal_amt
							  ELSE 0
						 END) AS ap_bal_amt,
					 SUM(CASE WHEN frt.sell_buy_tp_cd = 'D' OR frt.sell_buy_tp_cd = 'C'
							  THEN 1
							  ELSE 0
						 END) AS dc_cnt,	 
					 SUM(CASE WHEN frt.sell_buy_tp_cd = 'D' OR frt.sell_buy_tp_cd = 'C'
							  THEN dtl.inv_sum_amt
							  ELSE 0
						 END) AS dc_inv_sum_amt,
					 SUM(CASE WHEN frt.sell_buy_tp_cd = 'D' OR frt.sell_buy_tp_cd = 'C'
							  THEN dtl.bal_amt
							  ELSE 0
						 END) AS dc_bal_amt
					FROM TB_INTG_BL A 
					<isEqual property="bnd_clss_cd" compareValue="O">
						with(index(IDX_ETD_DT_TM), nolock)
				   </isEqual>     
				   <isEqual property="bnd_clss_cd" compareValue="I">
						with(index(IDX_ETA_DT_TM), nolock)
				   </isEqual>  
					  	
						  JOIN tb_add_info_bnd bnd ON A.intg_bl_seq = bnd.intg_bl_seq AND bnd.bnd_clss_cd = #bnd_clss_cd# AND bnd.delt_flg = 'N'
			   			  JOIN TB_FRT frt ON A.intg_bl_seq = frt.intg_bl_seq 
			   			  JOIN TB_INV_DTL dtl with(index(XIF1TB_INV_DTL), nolock)
			   			    ON dtl.delt_flg = 'N' AND frt.inv_seq = dtl.inv_seq 
						 WHERE  frt.delt_flg = 'N'
						<isNotEmpty property="etd_strdt">  
						   AND A.ETD_DT_TM BETWEEN #etd_strdt# AND #etd_enddt#
						</isNotEmpty>
						<isNotEmpty property="eta_strdt">
						   AND A.ETA_DT_TM BETWEEN #eta_strdt# AND #eta_enddt#
						</isNotEmpty>	
						<isNotEmpty property="f_ofc_cd">
						   AND  A.REF_OFC_CD = #f_ofc_cd#
					    </isNotEmpty>					   
						   AND A.delt_flg = 'N'
						   AND A.air_sea_clss_cd = #air_sea_clss_cd#
						   AND A.biz_clss_cd = #biz_clss_cd#                						 
						 GROUP BY frt.intg_bl_seq
						) inv_sum 
			ON T1.intg_bl_seq = inv_sum.intg_bl_seq 
    </select>
    <!-- ZOOT=LIST PAGE AR_AP_DC STAUS PROCESS -->
    <select id="selectMBL_LIST" parameterClass="java.util.HashMap" resultClass="com.clt.apps.fis.see.bmd.masterbl.dto.SeeMasterBLVO">        
           /* BlCmmSQL.xml > selectMBL_LIST */
	            SELECT 
	            a1.*
	            <!-- #4035 B/L EDI validation 추가 -->
		        ,CASE WHEN ISNULL(TRDP.AGT_EDI_CD,'') != ''
	 				 THEN 
						(SELECT CASE WHEN COUNT(*) > 0 
									 THEN 'Y' 
		             				 ELSE 'N' 
		         				 END 
					       FROM TB_EDI_SND_HIS  
					      WHERE EDI_MSG_NO LIKE 'AGT%' 
		   				    AND EDI_MSG_TXT LIKE '%' + a1.INTG_BL_SEQ + '%' )
		
					 ELSE 'X'
				END	AS SND_FLG            
				  FROM (
		         	SELECT  ROW_NUMBER() OVER (ORDER BY  BL.POST_DT DESC, BL.MODI_TMS DESC) as ROWNUM,
		         	        COUNT(*) OVER(PARTITION BY 1) as total_rows_cnt,
		         			BL.INTG_BL_SEQ,
							BL.BL_NO, BL.REF_NO, BL.REF_OFC_CD, BL.LNR_BKG_NO,
							BL.ETD_DT_TM, BL.ETA_DT_TM, BL.F_ETA_DT_TM,
							BL.POR_CD, BL.POR_NM, 
							BL.POL_CD, BL.POL_NM, 
							BL.POD_CD, BL.POD_NM, 
							BL.DEL_CD, BL.DEL_NM,		
							(SELECT MAX(X.CNTR_NO) FROM TB_CNTR_LIST X WHERE X.INTG_BL_SEQ = BL.INTG_BL_SEQ AND X.DELT_FLG = 'N') AS CNTR_NO,
							(SELECT COUNT(X.CNTR_NO)-1 FROM TB_CNTR_LIST X WHERE X.INTG_BL_SEQ = BL.INTG_BL_SEQ AND X.DELT_FLG = 'N') AS CNTR_CNT, 
							<!-- #1230 HBL list modification FULLTRANS -->
					       STUFF(( SELECT ',  ' + CNTR_TPSZ_CD +' X ' + LTRIM(STR(COUNT(CNTR_TPSZ_CD)))
					               FROM TB_CNTR_LIST X
					               WHERE ( X.INTG_BL_SEQ = BL.INTG_BL_SEQ 
					               <!-- #4057[JAPT] question for our profit report -->
					               AND X.DELT_FLG = 'N'					               
					               )
					               GROUP BY CNTR_TPSZ_CD
					               FOR XML PATH ('')),1,1,'') AS cntr_summary, 	
				               						
							agent.TRDP_CD AS PRNR_TRDP_CD4, agent.TRDP_NM AS PRNR_TRDP_NM4,
							PRNR.TRDP_CD AS PRNR_TRDP_CD3, PRNR.TRDP_NM AS PRNR_TRDP_NM3,
							PRNR2.TRDP_CD AS PRNR_TRDP_CD2, PRNR2.TRDP_NM AS PRNR_TRDP_NM2,
							SHPR.TRDP_CD AS SHPR_TRDP_CD, SHPR.TRDP_NM AS SHPR_TRDP_NM,
							CNEE.TRDP_CD AS CNEE_TRDP_CD, CNEE.TRDP_NM AS CNEE_TRDP_NM,
							LNR.TRDP_CD AS LNR_TRDP_CD, LNR.TRDP_NM AS LNR_TRDP_NM,
							CARR.TRDP_CD AS CARR_TRDP_CD, CARR.TRDP_NM AS CARR_TRDP_NM,
							BL.CY_TRDP_CD, CY.ENG_NM AS CY_TRDP_NM,
							BL.CFS_TRDP_CD, CFS.ENG_NM AS CFS_TRDP_NM,
							BL.HBL_TP_CD, BL.SHP_MOD_CD, BL.INCO_CD, BL.RGST_USRID, BL.REP_CMDT_NM,
							BL.CUST_REF_NO,
							(SELECT x.cnt_cd FROM TB_OFC x WHERE x.OFC_CD = bl.rgst_ofc_cd) AS BL_CNT, 
							(SELECT MAX(X.ENG_USR_NM) FROM TB_USR X WHERE X.USR_TP = 'I' AND X.USRID = bnd.issued_by) AS PROC_USRNM,
							BL.POST_DT, BL.TRNK_VSL_NM, BL.TRNK_VOY,
							(  SELECT COUNT(*) FROM TB_INTG_BL_RLT RLT WHERE  RLT.RLT_INTG_BL_SEQ = BL.INTG_BL_SEQ AND RLT.DELT_FLG = 'N') AS HBL_CNT,    
							ISNULL(DBO.FC_MK_MEMO_SCRIPT(BL.INTG_BL_SEQ), '') AS MEMO,
							BL.AMS_ID
							, BL.RLSD_FLG, BL.RLSD_DT_TM , ISNULL(BLCK.BL_STS_CD1, BL.BL_STS_CD) AS BL_STS_CD
							<!-- #4724	[Best Ocean] Ocean Import OBL Received and Received Date column and entry add -->
							,BL.org_bl_rcvd_flg
							,BL.rcvd_dt_tm
														
	    					,BL.CCN_NO
							,BL.CCN_DT
							,BL.PRE_CCN_NO
							,BL.MNF_FR_LOC
							,BL.MNF_TO_LOC
							,BL.IMP_REF_NO
							,ISNULL(bnd.AR_CHK,'X') AS AR_CHK
							,ISNULL(bnd.AP_CHK,'X') AS AP_CHK
							,ISNULL(bnd.DC_CHK,'X') AS DC_CHK
							,ISNULL(bnd.FRT_CHK,'X') AS FRT_CHK
							,BL.MODI_TMS 
							,BL.BL_ISS_DT 
							,BL.DOC_CUT_OFF_DT
							,ISNULL(bnd.VGM_CUT_OFF_DT,'') as vgm_cut_off_dt
							,BND.SLS_USRID
							,BND.SLS_USR_NM
							<!-- OFVFOUR-7976: [MATRIX] ADDING CS PIC ON ALL B/L ENTRY AND TRADE PARTNER ENTRY SCREEN -->
                            ,BND.CS_USRID
                            ,BND.CS_USR_NM
							,BND.SVC_LANE_NM  <!--  #943  [PATENT] Lane 추가  -->
							,BND.VERIFY_FLAG
						    ,BND.PAY_FLAG
						    ,isnull(bl.obl_tp_cd,'') AS obl_tp_cd
							<!-- #1619 [CLT] Original B/L Type- 항목 정리,BND.BL_RLSE_TP_CD  #1430 [PATENT] 0215_15 B/L TYPE DIVERSELY  
							,dtl.CD_NM BL_RLSE_TP_NM-->
							<!-- #1743 [PATENT]OEM B/L Pickup Date/Time 필요 -->
							,isnull(bnd.PKUP_DT, '') AS pkup_dt  
							,bnd.RELEASE_FLAG as bnd_release_flag
            				,bnd.HOLD_FLAG  as bnd_hold_flag
            				<!-- #1019 [UFF] Add “FWDR Reference No” column and search field to OEM B/L List -->
            				,BL.prnr_ref_no
							<!-- #4035 B/L EDI validation 추가 -->
            				<!-- Agent EDI Spec 추가 사항 2018.12.10 -->
            				<!-- ,ISNULL(PRNR.TRDP_CD,CNEE.TRDP_CD) AS AGENT_EDI_CD -->
            				,PRNR.TRDP_CD AS AGENT_EDI_CD       	
            				<!-- #4980 [Best Ocean] Created Time and Last Modify Time columns add to BL List -->  
							,DATEADD(HH, DATEDIFF(HH,GETUTCDATE(),GETDATE()), BL.MODI_TMS ) AS MODI_TMS_LOCAL            				            				
            				,BL.RGST_TMS
            				,BL.MODI_USR_NM
            				<!-- OFVFOUR-7337: [GPL] Adding Service Term column on OI MBL List-->
							,(ISNULL((SELECT TOP 1 CD_NM FROM TB_COM_CD_DTL  WHERE COM_CD ='C031' AND CD_VAL = BL.FM_SVC_TERM_CD),'') + '/' + ISNULL((SELECT TOP 1 CD_NM FROM TB_COM_CD_DTL  WHERE COM_CD ='C031' AND CD_VAL = BL.TO_SVC_TERM_CD),'')) AS FM_TO_SVC_TERM				 
					  FROM  TB_INTG_BL BL
					  <isEqual property="bnd_clss_cd" compareValue="O">
							with(index(IDX_ETD_DT_TM), nolock)
					  </isEqual>     
					  <isEqual property="bnd_clss_cd" compareValue="I">
							with(index(IDX_ETA_DT_TM), nolock)
					  </isEqual>  
					  JOIN  tb_add_info_bnd bnd
						ON  bl.intg_bl_seq = bnd.intg_bl_seq AND bnd.bnd_clss_cd = #bnd_clss_cd# AND bnd.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr PRNR2
						ON  bl.intg_bl_seq = prnr2.intg_bl_seq  AND prnr2.bl_trdp_tp_cd = 'P03' AND prnr2.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr PRNR
						ON  bl.intg_bl_seq = PRNR.intg_bl_seq  AND PRNR.bl_trdp_tp_cd = 'P01' AND PRNR.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr agent
						ON  bl.intg_bl_seq = agent.intg_bl_seq  AND agent.bl_trdp_tp_cd = 'A01' AND agent.delt_flg = 'N'								
		   LEFT OUTER JOIN  tb_bl_prnr SHPR
						ON  bl.intg_bl_seq = SHPR.intg_bl_seq  AND SHPR.bl_trdp_tp_cd = 'S01' AND SHPR.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr CNEE
						ON  bl.intg_bl_seq = CNEE.intg_bl_seq  AND CNEE.bl_trdp_tp_cd = 'C01' AND CNEE.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr CARR
						ON  bl.intg_bl_seq = carr.intg_bl_seq  AND carr.bl_trdp_tp_cd = 'B01' AND carr.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr LNR
						ON  bl.intg_bl_seq = lnr.intg_bl_seq  AND lnr.bl_trdp_tp_cd = 'L01' AND lnr.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr cus
						ON  bl.intg_bl_seq = cus.intg_bl_seq  AND cus.bl_trdp_tp_cd = 'S02' AND cus.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr ntf
						ON  bl.intg_bl_seq = ntf.intg_bl_seq  AND ntf.bl_trdp_tp_cd = 'N01' AND ntf.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_trdp CY
						ON  bl.cy_trdp_cd = cy.trdp_cd  AND cy.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_trdp CFS
						ON  bl.cfs_trdp_cd = cfs.trdp_cd  AND cfs.delt_flg = 'N'  
		   LEFT OUTER JOIN(SELECT INTG_BL_SEQ AS INTG_BL_SEQ1, BL_STS_CD AS BL_STS_CD1 FROM TB_INTG_BL_BLCK) BLCK 
		   				ON BL.INTG_BL_SEQ = BLCK.INTG_BL_SEQ1
		   					
		 <!-- #1619 [CLT] Original B/L Type- 항목 정리 
		  LEFT OUTER JOIN TB_COM_CD_DTL dtl
         				ON dtl.com_cd = 'C222' and BND.BL_RLSE_TP_CD = dtl.CD_VAL  	
         				 --> 	   					            
					 WHERE  bl.delt_flg = 'N'
					   AND  bl.air_sea_clss_cd = #air_sea_clss_cd#
					   AND  bl.biz_clss_cd  = #biz_clss_cd#
					<isNotEmpty property="f_ref_no">
						<!-- #1061 [Binex, Sunway, AIF] V440 Search function -->
					   AND  BL.REF_NO LIKE #f_ref_no# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_mbl_no">
						<!-- #1061 [Binex, Sunway, AIF] V440 Search function -->
					   AND  BL.BL_NO LIKE #f_mbl_no# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_hbl_no">
					   AND  BL.INTG_BL_SEQ in (
					   (SELECT rlt_intg_bl_seq from tb_intg_bl_rlt rlt
		   				LEFT OUTER JOIN tb_intg_bl hbl
						ON rlt.intg_bl_seq = hbl.intg_bl_seq AND hbl.biz_clss_cd = 'H' AND hbl.delt_flg = 'N'      
					   WHERE rlt.delt_flg = 'N'
					   AND HBL.BL_NO LIKE #f_hbl_no# + '%')
					   )
					</isNotEmpty>
					<isNotEmpty property="f_lnr_bkg_no">
					   AND  BL.LNR_BKG_NO LIKE  #f_lnr_bkg_no# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_cntr_no">
					   AND  BL.INTG_BL_SEQ IN (SELECT  CNTR.INTG_BL_SEQ
												 FROM  TB_CNTR_LIST CNTR
												WHERE  CNTR.CNTR_NO LIKE  #f_cntr_no# + '%')
					</isNotEmpty>
					<isNotEmpty property="f_strdt">
						<isEqual property="f_date_type" compareValue="ETD">
							AND  left(BL.ETD_DT_TM,8) BETWEEN #f_strdt# AND #f_enddt#
						</isEqual>
						<isEqual property="f_date_type" compareValue="ETA">
							AND  left(BL.ETA_DT_TM,8) BETWEEN #f_strdt# AND #f_enddt#
						</isEqual>
						<isEqual property="f_date_type" compareValue="FEA">
							AND  left(BL.F_ETA_DT_TM,8) BETWEEN #f_strdt# AND #f_enddt#
						</isEqual>
						<isEqual property="f_date_type" compareValue="PDT">
							AND  left(BL.POST_DT,8) BETWEEN  #f_strdt# AND #f_enddt#
						</isEqual>
						<isEqual property="f_date_type" compareValue="DOC"> <!-- #3821 [JAPT] Adding a searching condition in date range item, 'Doc cut-off date' of MB/L -->
							AND  left(BL.doc_cut_off_dt,8) BETWEEN #f_strdt# AND #f_enddt#
						</isEqual>
					</isNotEmpty>
					<isNotEmpty property="f_pol_cd">
					   AND  BL.POL_CD = #f_pol_cd#
					</isNotEmpty>
					<isNotEmpty property="f_pol_nm">
					   AND  BL.POL_NM LIKE  #f_pol_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_por_cd">
					   AND  BL.POR_CD = #f_por_cd#
					</isNotEmpty>
					<isNotEmpty property="f_por_nm">
					   AND  BL.POR_NM LIKE  #f_por_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_pod_cd">
					   AND  BL.POD_CD = #f_pod_cd#
					</isNotEmpty>
					<isNotEmpty property="f_pod_nm">
					   AND  BL.POD_NM LIKE  #f_pod_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_del_cd">
					   AND  BL.DEL_CD = #f_del_cd#
					</isNotEmpty>
					<isNotEmpty property="f_del_nm">
					   AND  BL.DEL_NM LIKE  #f_del_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_prnr_trdp_nm">
						<isEqual property="f_tp_type" compareValue="SHP">
							AND  SHPR.TRDP_NM LIKE  #f_prnr_trdp_nm# + '%'
						</isEqual>
						<isEqual property="f_tp_type" compareValue="CUS">
							AND  CUS.TRDP_NM LIKE  #f_prnr_trdp_nm# + '%'
						</isEqual>
						<isEqual property="f_tp_type" compareValue="NOT">
							AND  NTF.TRDP_NM LIKE  #f_prnr_trdp_nm# + '%'
						</isEqual>
						<isEqual property="f_tp_type" compareValue="CAR">
							AND  LNR.TRDP_NM LIKE  #f_prnr_trdp_nm# + '%'
						</isEqual>
						<isEqual property="f_tp_type" compareValue="TRI">
							AND  PRNR2.TRDP_NM LIKE  #f_prnr_trdp_nm# + '%'
						</isEqual>
						<isEqual property="f_tp_type" compareValue="DES">
							AND  PRNR.TRDP_NM LIKE  #f_prnr_trdp_nm# + '%'
						</isEqual>
						<isEqual property="f_tp_type" compareValue="BCA">
							AND  CARR.TRDP_NM LIKE  #f_prnr_trdp_nm# + '%'
						</isEqual>
						<isEqual property="f_tp_type" compareValue="FWD">
							AND  AGENT.TRDP_NM LIKE  #f_prnr_trdp_nm# + '%'
						</isEqual>
					</isNotEmpty>
					<isNotEmpty property="f_po_no">
						AND  BL.PO_NO LIKE #f_po_no# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_cnee_trdp_nm">
					   AND  CNEE.TRDP_NM LIKE  #f_cnee_trdp_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_hbl_tp_cd">
					   AND  BL.HBL_TP_CD = #f_hbl_tp_cd#
					</isNotEmpty>
					<isNotEmpty property="f_ofc_cd">
					   AND  BL.REF_OFC_CD = #f_ofc_cd#
					</isNotEmpty>
					<isNotEmpty property="f_shp_mod_cd">
					   AND  BL.SHP_MOD_CD = #f_shp_mod_cd#
					</isNotEmpty>
					<isNotEmpty property="f_pic_id">
					   AND  BL.RGST_USRID LIKE  #f_pic_id# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_trnk_vsl_nm">
					   AND  BL.TRNK_VSL_NM LIKE  #f_trnk_vsl_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_trnk_voy">
					   AND  BL.TRNK_VOY LIKE  #f_trnk_voy# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_imp_ref_no">
					   AND  BL.IMP_REF_NO LIKE  #f_imp_ref_no# + '%'
					</isNotEmpty>				
					<isNotEmpty property="opr_usrid">
					   AND  BND.ISSUED_BY = #opr_usrid#
					</isNotEmpty>
					<isNotEmpty property="sls_usrid">
				    	AND BND.SLS_USRID = #sls_usrid#
					</isNotEmpty>
					<!-- OFVFOUR-7976: [MATRIX] ADDING CS PIC ON ALL B/L ENTRY AND TRADE PARTNER ENTRY SCREEN -->
                    <isNotEmpty property="cs_usrid">
                        AND BND.CS_USRID = #cs_usrid#
                    </isNotEmpty>
				    <isNotEmpty property="or_usrid">
					  AND  (BND.ISSUED_BY = #or_usrid# or BND.SLS_USRID = #or_usrid# or BND.CS_USRID = #or_usrid#)
					</isNotEmpty>
					<isNotEmpty property="f_cy_cfs_trdp_nm">
					   AND  (CY.ENG_NM LIKE  #f_cy_cfs_trdp_nm# + '%'
					   OR   CFS.ENG_NM LIKE  #f_cy_cfs_trdp_nm# + '%')
					</isNotEmpty>
					<isNotEmpty property="f_ccn_no">
					   AND  BL.CCN_NO LIKE  #f_ccn_no# + '%'
					</isNotEmpty>
					<!--#1019 [UFF] Add “FWDR Reference No” column and search field to OEM B/L List -->
					<isNotEmpty property="f_prnr_cust_no">
						<isEqual property="f_prnr_cust_cd" compareValue="CUST">
							AND  BL.CUST_REF_NO LIKE  #f_prnr_cust_no# + '%'
						</isEqual>
						<isEqual property="f_prnr_cust_cd" compareValue="PRNR">
							AND  BL.PRNR_REF_NO LIKE  #f_prnr_cust_no# + '%'
						</isEqual>
					</isNotEmpty>
					<!-- OFVFOUR-7105 [JAPAN TRUST] Adding "Original B/L Type" Column and Search on B/L List -->
					<isNotEmpty property="f_obl_tp_cd">
					   AND  BL.OBL_TP_CD = #f_obl_tp_cd#
					</isNotEmpty>
                    <!-- OFVFOUR-8056: [BNX-LA] Adding Search option in AR/AP list and OIH List screen -->
                    <isNotEmpty property="f_cmdt_nm">
                        AND  BL.INTG_BL_SEQ IN (SELECT  INTG_BL_SEQ
                        FROM TB_INTG_BL
                        WHERE REP_CMDT_NM <![CDATA[ <> ]]> '' AND REP_CMDT_NM LIKE #f_cmdt_nm# + '%')
                    </isNotEmpty>

			  ) a1
			  <!-- #4035 B/L EDI validation 추가 -->
				LEFT JOIN TB_TRDP TRDP
				ON A1.AGENT_EDI_CD = TRDP.TRDP_CD			  
	<![CDATA[ where a1.ROWNUM > #beginIdx# AND a1.ROWNUM <= #topCnt#	]]>			

			<isNotEmpty property="f_orderByInfo">
			ORDER BY $f_orderByInfo$
			</isNotEmpty>
			<isEmpty property="f_orderByInfo"> 
			</isEmpty>
			
				
    </select>

	<!-- Master B/L List select  (H/BL로 검색했을 경우)  -->
	<!-- #29408 [BINEX]B/L List 검색조건 추가 -->
     <!-- ZOOT=LIST PAGE AR_AP_DC STAUS PROCESS -->
    <select id="selectMHBL_LIST" parameterClass="java.util.HashMap" resultClass="com.clt.apps.fis.see.bmd.masterbl.dto.SeeMasterBLVO">
           /* selectMHBL_LIST */
            SELECT a1.*
			  FROM (
	         	SELECT  ROW_NUMBER() OVER (ORDER BY  BL.POST_DT DESC, BL.MODI_TMS DESC) as ROWNUM,
	         			BL.INTG_BL_SEQ,
	         			COUNT(*) OVER(PARTITION BY 1) as total_rows_cnt,
						BL.BL_NO, 
						(SELECT TOP 1
                    		XBL.BL_NO      
               			 FROM
                    		TB_INTG_BL XBL 
		                WHERE
		                    XBL.INTG_BL_SEQ IN (SELECT
		                        INTG_BL_SEQ 
		                    FROM
		                        TB_INTG_BL_RLT RLT 
		                    WHERE
		                        RLT.RLT_INTG_BL_SEQ = BL.INTG_BL_SEQ
								AND XBL.delt_flg = 'N'          
								AND XBL.air_sea_clss_cd =  #air_sea_clss_cd#         
								AND XBL.biz_clss_cd  =  #biz_clss_cd#         
								<!-- #1061 [Binex, Sunway, AIF] V440 Search function -->
								AND XBL.BL_NO LIKE  #f_mbl_no# + '%'  
		                        AND RLT.DELT_FLG = 'N')) AS HBL_NO,
						BL.REF_NO, BL.REF_OFC_CD, BL.LNR_BKG_NO,
						BL.ETD_DT_TM, BL.ETA_DT_TM, BL.F_ETA_DT_TM,
						BL.POR_CD, BL.POR_NM, 
						BL.POL_CD, BL.POL_NM, 
						BL.POD_CD, BL.POD_NM, 
						BL.DEL_CD, BL.DEL_NM,
	
						(SELECT MAX(X.CNTR_NO) FROM TB_CNTR_LIST X WHERE X.INTG_BL_SEQ = BL.INTG_BL_SEQ AND X.DELT_FLG = 'N') AS CNTR_NO,
						(SELECT COUNT(X.CNTR_NO)-1 FROM TB_CNTR_LIST X WHERE X.INTG_BL_SEQ = BL.INTG_BL_SEQ AND X.DELT_FLG = 'N') AS CNTR_CNT, 
						<!-- #1230 HBL list modification FULLTRANS -->
				       STUFF(( SELECT ',  ' + CNTR_TPSZ_CD +' X ' + LTRIM(STR(COUNT(CNTR_TPSZ_CD)))
				               FROM TB_CNTR_LIST X
				               WHERE ( X.INTG_BL_SEQ = BL.INTG_BL_SEQ
					           <!-- #4057[JAPT] question for our profit report -->				               
				               AND X.DELT_FLG = 'N'
				               )
				               GROUP BY CNTR_TPSZ_CD
				               FOR XML PATH ('')),1,1,'') AS cntr_summary, 	
	
						PRNR2.TRDP_CD AS PRNR_TRDP_CD2, PRNR2.TRDP_NM AS PRNR_TRDP_NM2,
						SHPR.TRDP_CD AS SHPR_TRDP_CD, SHPR.TRDP_NM AS SHPR_TRDP_NM,
						CNEE.TRDP_CD AS CNEE_TRDP_CD, CNEE.TRDP_NM AS CNEE_TRDP_NM,
						LNR.TRDP_CD AS LNR_TRDP_CD, LNR.TRDP_NM AS LNR_TRDP_NM,
						CARR.TRDP_CD AS CARR_TRDP_CD, CARR.TRDP_NM AS CARR_TRDP_NM,
						BL.CY_TRDP_CD, CY.ENG_NM AS CY_TRDP_NM,
						BL.CFS_TRDP_CD, CFS.ENG_NM AS CFS_TRDP_NM,
						
						BL.HBL_TP_CD, BL.SHP_MOD_CD, BL.INCO_CD, BL.RGST_USRID, BL.REP_CMDT_NM,
						BL.CUST_REF_NO,
						(SELECT x.cnt_cd FROM TB_OFC x WHERE x.OFC_CD = bl.rgst_ofc_cd) AS BL_CNT, 
						(SELECT MAX(X.ENG_USR_NM) FROM TB_USR X WHERE X.USR_TP = 'I' AND X.USRID = bnd.issued_by) AS PROC_USRNM,
						BL.POST_DT, BL.TRNK_VSL_NM, BL.TRNK_VOY,
						
						(SELECT COUNT(*) 
						   FROM TB_INTG_BL X 
						  WHERE X.INTG_BL_SEQ IN (SELECT INTG_BL_SEQ FROM TB_INTG_BL_RLT RLT WHERE RLT.RLT_INTG_BL_SEQ = BL.INTG_BL_SEQ AND RLT.DELT_FLG = 'N' AND X.DELT_FLG = 'N')) AS HBL_CNT, 						  				          				
						ISNULL(DBO.FC_MK_MEMO_SCRIPT(BL.INTG_BL_SEQ), '') AS MEMO,
						AMS_ID
						, BL.RLSD_FLG, BL.RLSD_DT_TM , ISNULL(BLCK.BL_STS_CD1, BL.BL_STS_CD) AS BL_STS_CD
            			<!-- #4980 [Best Ocean] Created Time and Last Modify Time columns add to BL List-->						
						,BL.RGST_TMS
						,BL.MODI_USR_NM
						,BL.MODI_TMS
						,DATEADD(HH, DATEDIFF(HH,GETUTCDATE(),GETDATE()), BL.MODI_TMS ) AS MODI_TMS_LOCAL            				
						,BL.CCN_NO
						,BL.CCN_DT
						,BL.PRE_CCN_NO
						,BL.MNF_FR_LOC
						,BL.MNF_TO_LOC
						,BL.IMP_REF_NO
						,ISNULL(bnd.AR_CHK,'X') AS AR_CHK
						,ISNULL(bnd.AP_CHK,'X') AS AP_CHK
						,ISNULL(bnd.DC_CHK,'X') AS DC_CHK
						,ISNULL(bnd.FRT_CHK,'X') AS FRT_CHK
						,bnd.VERIFY_FLAG
						,bnd.PAY_FLAG
						,isnull(bl.obl_tp_cd,'') AS obl_tp_cd
						<!-- #1619 [CLT] Original B/L Type- 항목 정리,bnd.bl_rlse_tp_cd  #1430 [PATENT] 0215_15 B/L TYPE DIVERSELY 
						,dtl.CD_NM BL_RLSE_TP_NM -->
						
						<!-- OFVFOUR-7337: [GPL] Adding Service Term column on OI MBL List -->
						,(ISNULL((SELECT TOP 1 CD_NM FROM TB_COM_CD_DTL  WHERE COM_CD ='C031' AND CD_VAL = BL.FM_SVC_TERM_CD),'') + '/' + ISNULL((SELECT TOP 1 CD_NM FROM TB_COM_CD_DTL  WHERE COM_CD ='C031' AND CD_VAL = BL.TO_SVC_TERM_CD),'')) AS FM_TO_SVC_TERM				 
				  FROM  TB_INTG_BL BL
				  JOIN  tb_add_info_bnd bnd
					ON  bl.intg_bl_seq = bnd.intg_bl_seq AND bnd.bnd_clss_cd = #bnd_clss_cd# AND bnd.delt_flg = 'N'
	   LEFT OUTER JOIN  tb_bl_prnr PRNR2
					ON  bl.intg_bl_seq = prnr2.intg_bl_seq  AND prnr2.bl_trdp_tp_cd = 'P03' AND prnr2.delt_flg = 'N'
	   LEFT OUTER JOIN  tb_bl_prnr SHPR
					ON  bl.intg_bl_seq = SHPR.intg_bl_seq  AND SHPR.bl_trdp_tp_cd = 'S01' AND SHPR.delt_flg = 'N'
	   LEFT OUTER JOIN  tb_bl_prnr CNEE
					ON  bl.intg_bl_seq = CNEE.intg_bl_seq  AND CNEE.bl_trdp_tp_cd = 'C01' AND CNEE.delt_flg = 'N'
	   LEFT OUTER JOIN  tb_bl_prnr CARR
					ON  bl.intg_bl_seq = carr.intg_bl_seq  AND carr.bl_trdp_tp_cd = 'B01' AND carr.delt_flg = 'N'
	   LEFT OUTER JOIN  tb_bl_prnr LNR
					ON  bl.intg_bl_seq = lnr.intg_bl_seq  AND lnr.bl_trdp_tp_cd = 'L01' AND lnr.delt_flg = 'N'
	   LEFT OUTER JOIN  tb_trdp CY
					ON  bl.cy_trdp_cd = cy.trdp_cd  AND cy.delt_flg = 'N'
	   LEFT OUTER JOIN  tb_trdp CFS
					ON  bl.cfs_trdp_cd = cfs.trdp_cd  AND cfs.delt_flg = 'N'
	   LEFT OUTER JOIN(SELECT INTG_BL_SEQ AS INTG_BL_SEQ1, BL_STS_CD AS BL_STS_CD1 FROM TB_INTG_BL_BLCK) BLCK 
	   				ON BL.INTG_BL_SEQ = BLCK.INTG_BL_SEQ1
	 <!-- #1619 [CLT] Original B/L Type- 항목 정리  
	   EFT OUTER JOIN TB_COM_CD_DTL dtl
         				ON dtl.com_cd = 'C222' and BND.BL_RLSE_TP_CD = dtl.CD_VAL  	 -->	  
				 WHERE  bl.delt_flg = 'N'
				   AND  bl.air_sea_clss_cd = #air_sea_clss_cd#
				   AND  bl.biz_clss_cd  = 'M'
				<isNotEmpty property="f_ref_no">
				   <!-- #1061 [Binex, Sunway, AIF] V440 Search function -->
				   AND  BL.REF_NO LIKE #f_ref_no# + '%'
				</isNotEmpty>
				<isNotEmpty property="f_mbl_no">
				   AND  
				   		BL.INTG_BL_SEQ 
				        IN (SELECT DISTINCT 
							(SELECT RLT_INTG_BL_SEQ FROM TB_INTG_BL_RLT RLT WHERE RLT.INTG_BL_SEQ = BL.INTG_BL_SEQ AND RLT.DELT_FLG = 'N') 
							 AS INTG_BL_SEQ
						  FROM  TB_INTG_BL BL
						 WHERE  bl.delt_flg = 'N'
						   AND  bl.air_sea_clss_cd = #air_sea_clss_cd#
						   AND  bl.biz_clss_cd  = #biz_clss_cd#
						   <!-- #1061 [Binex, Sunway, AIF] V440 Search function -->
						   AND  BL.BL_NO LIKE #f_mbl_no# + '%'
						) 
				</isNotEmpty>
				<isNotEmpty property="f_lnr_bkg_no">
				   AND  BL.LNR_BKG_NO LIKE  #f_lnr_bkg_no# + '%'
				</isNotEmpty>
				<isNotEmpty property="f_cntr_no">
				   AND  BL.INTG_BL_SEQ IN (SELECT  CNTR.INTG_BL_SEQ
											 FROM  TB_CNTR_LIST CNTR
											WHERE  CNTR.CNTR_NO LIKE  #f_cntr_no# + '%')
				</isNotEmpty>
				<isNotEmpty property="etd_strdt">
				   AND  BL.ETD_DT_TM BETWEEN #etd_strdt# AND #etd_enddt#
				</isNotEmpty>
				<isNotEmpty property="eta_strdt">
				   AND  BL.ETA_DT_TM BETWEEN #eta_strdt# AND #eta_enddt#
				</isNotEmpty>
				<isNotEmpty property="f_eta_strdt">
				   AND  BL.F_ETA_DT_TM BETWEEN #f_eta_strdt# AND #f_eta_enddt#
				</isNotEmpty>
				<isNotEmpty property="f_pol_cd">
				   AND  BL.POL_CD = #f_pol_cd#
				</isNotEmpty>
				<isNotEmpty property="f_pol_nm">
				   AND  BL.POL_NM LIKE  #f_pol_nm# + '%'
				</isNotEmpty>
				<isNotEmpty property="f_pod_cd">
				   AND  BL.POD_CD = #f_pod_cd#
				</isNotEmpty>
				<isNotEmpty property="f_pod_nm">
				   AND  BL.POD_NM LIKE  #f_pod_nm# + '%'
				</isNotEmpty>
				<isNotEmpty property="f_del_cd">
				   AND  BL.DEL_CD = #f_del_cd#
				</isNotEmpty>
				<isNotEmpty property="f_del_nm">
				   AND  BL.DEL_NM LIKE  #f_del_nm# + '%'
				</isNotEmpty>
				<isNotEmpty property="f_prnr_trdp_nm2">
				   AND  PRNR2.TRDP_NM LIKE  #f_prnr_trdp_nm2# + '%'
				</isNotEmpty>
				<isNotEmpty property="f_shpr_trdp_nm">
				   AND  SHPR.TRDP_NM LIKE  #f_shpr_trdp_nm# + '%'
				</isNotEmpty>
				<isNotEmpty property="f_cnee_trdp_nm">
				   AND  CNEE.TRDP_NM LIKE  #f_cnee_trdp_nm# + '%'
				</isNotEmpty>
				<isNotEmpty property="f_carr_trdp_nm">
				   AND  CARR.TRDP_NM LIKE  #f_carr_trdp_nm# + '%'
				</isNotEmpty>
				<isNotEmpty property="f_lnr_trdp_nm">
				   AND  LNR.TRDP_NM LIKE  #f_lnr_trdp_nm# + '%'
				</isNotEmpty>
				<isNotEmpty property="f_cy_trdp_nm">
				   AND  CY.ENG_NM LIKE  #f_cy_trdp_nm# + '%'
				</isNotEmpty>
				<isNotEmpty property="f_cfs_trdp_nm">
				   AND  CFS.ENG_NM LIKE  #f_cfs_trdp_nm# + '%'
				</isNotEmpty>
				<isNotEmpty property="f_hbl_tp_cd">
				   AND  BL.HBL_TP_CD = #f_hbl_tp_cd#
				</isNotEmpty>
				<isNotEmpty property="f_ofc_cd">
				   AND  BL.REF_OFC_CD = #f_ofc_cd#
				</isNotEmpty>
				<isNotEmpty property="f_shp_mod_cd">
				   AND  BL.SHP_MOD_CD = #f_shp_mod_cd#
				</isNotEmpty>
				<isNotEmpty property="f_pic_id">
				   AND  BL.RGST_USRID LIKE  #f_pic_id# + '%'
				</isNotEmpty>
				<isNotEmpty property="f_trnk_vsl_nm">
				   AND  BL.TRNK_VSL_NM LIKE  #f_trnk_vsl_nm# + '%'
				</isNotEmpty>
				<isNotEmpty property="f_imp_ref_no">
				   AND  BL.IMP_REF_NO LIKE  #f_imp_ref_no# + '%'
				</isNotEmpty>				
				<isNotEmpty property="f_ccn_no">
				   AND  BL.CCN_NO LIKE  #f_ccn_no# + '%'
				</isNotEmpty>		
				<isNotEmpty property="post_strdt">
				   AND  BL.POST_DT BETWEEN #post_strdt# AND #post_enddt#
				</isNotEmpty>
				<isNotEmpty property="opr_usrid">
				    AND BND.ISSUED_BY = #opr_usrid#
				</isNotEmpty>
				<isNotEmpty property="sls_usrid">
				    AND BND.SLS_USRID = #sls_usrid#
				</isNotEmpty>
				<!-- OFVFOUR-7976: [MATRIX] ADDING CS PIC ON ALL B/L ENTRY AND TRADE PARTNER ENTRY SCREEN -->
                <isNotEmpty property="cs_usrid">
                    AND BND.CS_USRID = #cs_usrid#
                </isNotEmpty>
        <!--#1430 [PATENT] 0215_15 B/L TYPE DIVERSELY  -->
				<!-- #1619 [CLT] Original B/L Type- 항목 정리
				<isNotEmpty property="f_bl_rlse_tp_cd">
				 	AND  BND.bl_rlse_tp_cd = #f_bl_rlse_tp_cd# 
				</isNotEmpty>		
				 -->	
<!--			  ORDER BY  BL.RGST_TMS DESC  -->
			  ) a1
<![CDATA[ where a1.ROWNUM > #beginIdx# AND a1.ROWNUM <= #topCnt#	]]>
    </select>
	<!--  Master B/L List select count    -->
	<!-- ZOOT -->
    <select id="selectMBL_LIST_CNT" parameterClass="java.util.HashMap" resultClass="Integer">
        /* BlCmmSQL.xml > selectMBL_LIST_CNT */
        SELECT  
        		COUNT(bl.intg_bl_seq)
          FROM  TB_INTG_BL BL          
			  JOIN  tb_add_info_bnd bnd
				ON  bl.intg_bl_seq = bnd.intg_bl_seq AND bnd.bnd_clss_cd = #bnd_clss_cd# AND bnd.delt_flg = 'N'
   LEFT OUTER JOIN  tb_bl_prnr PRNR2
				ON  bl.intg_bl_seq = prnr2.intg_bl_seq  AND prnr2.bl_trdp_tp_cd = 'P03' AND prnr2.delt_flg = 'N'
   LEFT OUTER JOIN  tb_bl_prnr SHPR
				ON  bl.intg_bl_seq = SHPR.intg_bl_seq  AND SHPR.bl_trdp_tp_cd = 'S01' AND SHPR.delt_flg = 'N'
   LEFT OUTER JOIN  tb_bl_prnr CNEE
				ON  bl.intg_bl_seq = CNEE.intg_bl_seq  AND CNEE.bl_trdp_tp_cd = 'C01' AND CNEE.delt_flg = 'N'
   LEFT OUTER JOIN  tb_bl_prnr CARR
				ON  bl.intg_bl_seq = carr.intg_bl_seq  AND carr.bl_trdp_tp_cd = 'B01' AND carr.delt_flg = 'N'
   LEFT OUTER JOIN  tb_bl_prnr LNR
				ON  bl.intg_bl_seq = lnr.intg_bl_seq  AND lnr.bl_trdp_tp_cd = 'L01' AND lnr.delt_flg = 'N'
   LEFT OUTER JOIN  tb_trdp CY
				ON  bl.cy_trdp_cd = cy.trdp_cd  AND cy.delt_flg = 'N'
   LEFT OUTER JOIN  tb_trdp CFS
				ON  bl.cfs_trdp_cd = cfs.trdp_cd  AND cfs.delt_flg = 'N'   
         WHERE  bl.bl_no IS NOT NULL
           AND  bl.delt_flg = 'N' AND   bl.biz_clss_cd = #biz_clss_cd#            
           AND  bl.air_sea_clss_cd = #air_sea_clss_cd#
           AND  bnd.bnd_clss_cd = #bnd_clss_cd#           
        <isNotEmpty property="f_ref_no">
        	   <!-- #1061 [Binex, Sunway, AIF] V440 Search function -->
			   AND  BL.REF_NO LIKE #f_ref_no# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_mbl_no">
			<!-- #1061 [Binex, Sunway, AIF] V440 Search function -->
			   AND  BL.BL_NO LIKE #f_mbl_no# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_lnr_bkg_no">
			   AND  BL.LNR_BKG_NO LIKE  #f_lnr_bkg_no# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_cntr_no">
			   AND  BL.INTG_BL_SEQ IN (SELECT  CNTR.INTG_BL_SEQ
										 FROM  TB_CNTR_LIST CNTR
										WHERE  CNTR.CNTR_NO LIKE  #f_cntr_no# + '%')
			</isNotEmpty>
			<isNotEmpty property="etd_strdt">
			   AND  BL.ETD_DT_TM BETWEEN #etd_strdt# AND #etd_enddt#
			</isNotEmpty>
			<isNotEmpty property="eta_strdt">
			   AND  BL.ETA_DT_TM BETWEEN #eta_strdt# AND #eta_enddt#
			</isNotEmpty>
			<isNotEmpty property="f_eta_strdt">
			   AND  BL.F_ETA_DT_TM BETWEEN #f_eta_strdt# AND #f_eta_enddt#
			</isNotEmpty>
			<isNotEmpty property="f_pol_cd">
			   AND  BL.POL_CD = #f_pol_cd#
			</isNotEmpty>
			<isNotEmpty property="f_pol_nm">
			   AND  BL.POL_NM LIKE  #f_pol_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_por_cd">
			   AND  BL.POR_CD = #f_por_cd#
			</isNotEmpty>
			<isNotEmpty property="f_por_nm">
			   AND  BL.POR_NM LIKE  #f_por_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_pod_cd">
			   AND  BL.POD_CD = #f_pod_cd#
			</isNotEmpty>
			<isNotEmpty property="f_pod_nm">
			   AND  BL.POD_NM LIKE  #f_pod_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_del_cd">
			   AND  BL.DEL_CD = #f_del_cd#
			</isNotEmpty>
			<isNotEmpty property="f_del_nm">
			   AND  BL.DEL_NM LIKE  #f_del_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_prnr_trdp_nm2">
			   AND  PRNR2.TRDP_NM LIKE  #f_prnr_trdp_nm2# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_shpr_trdp_nm">
			   AND  SHPR.TRDP_NM LIKE  #f_shpr_trdp_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_cnee_trdp_nm">
			   AND  CNEE.TRDP_NM LIKE  #f_cnee_trdp_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_carr_trdp_nm">
			   AND  CARR.TRDP_NM LIKE  #f_carr_trdp_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_lnr_trdp_nm">
			   AND  LNR.TRDP_NM LIKE  #f_lnr_trdp_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_cy_trdp_nm">
			   AND  CY.ENG_NM LIKE  #f_cy_trdp_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_cfs_trdp_nm">
			   AND  CFS.ENG_NM LIKE  #f_cfs_trdp_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_hbl_tp_cd">
			   AND  BL.HBL_TP_CD = #f_hbl_tp_cd#
			</isNotEmpty>
			<isNotEmpty property="f_ofc_cd">
			   AND  BL.REF_OFC_CD = #f_ofc_cd#
			</isNotEmpty>
			<isNotEmpty property="f_shp_mod_cd">
			   AND  BL.SHP_MOD_CD = #f_shp_mod_cd#
			</isNotEmpty>
			<isNotEmpty property="f_pic_id">
			   AND  BL.RGST_USRID LIKE  #f_pic_id# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_trnk_vsl_nm">
			   AND  BL.TRNK_VSL_NM LIKE  #f_trnk_vsl_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_trnk_voy">
			   AND  BL.TRNK_VOY LIKE  #f_trnk_voy# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_imp_ref_no">
			   AND  BL.IMP_REF_NO LIKE  #f_imp_ref_no# + '%'
			</isNotEmpty>				
			<isNotEmpty property="f_ccn_no">
			   AND  BL.CCN_NO LIKE  #f_ccn_no# + '%'
			</isNotEmpty>	
			<isNotEmpty property="post_strdt">
			   AND  BL.POST_DT BETWEEN #post_strdt# AND #post_enddt#
			</isNotEmpty>
			<isNotEmpty property="opr_usrid">
				AND  BND.ISSUED_BY = #opr_usrid#
			</isNotEmpty>
			<isNotEmpty property="sls_usrid">
				AND BND.SLS_USRID = #sls_usrid#
			</isNotEmpty>
		    <isNotEmpty property="or_usrid">
			  AND  (BND.ISSUED_BY = #or_usrid# or BND.SLS_USRID = #or_usrid#)
			</isNotEmpty>	
			<!--#1019 [UFF] Add “FWDR Reference No” column and search field to OEM B/L List -->
			<isNotEmpty property="f_ref_type_no">
				<isEqual property="f_ref_type" compareValue="CUST">
					AND  BL.CUST_REF_NO LIKE  #f_ref_type_no# + '%'
				</isEqual>
				<isEqual property="f_ref_type" compareValue="PRNR">
					AND  BL.PRNR_REF_NO LIKE  #f_ref_type_no# + '%'
				</isEqual>
			</isNotEmpty>													
	</select>		
    <!--  Master B/L List select count(House B/L 검색인 경우)  -->
    <!-- #29408 [BINEX]B/L List 검색조건 추가 -->
    <select id="selectMHBL_LIST_CNT" parameterClass="java.util.HashMap" resultClass="Integer">
        SELECT  
        		<!-- HB/L로 검색하는 경우, HB/L에 해당하는 MB/L을 COUNT -->
        		<!-- COUNT(bl.intg_bl_seq)  -->
        		COUNT(DISTINCT RLT.RLT_INTG_BL_SEQ) 
          FROM  TB_INTG_BL BL
			  JOIN  tb_add_info_bnd bnd
				ON  bl.intg_bl_seq = bnd.intg_bl_seq AND bnd.bnd_clss_cd = #bnd_clss_cd# AND bnd.delt_flg = 'N'
   LEFT OUTER JOIN  tb_bl_prnr PRNR2
				ON  bl.intg_bl_seq = prnr2.intg_bl_seq  AND prnr2.bl_trdp_tp_cd = 'P03' AND prnr2.delt_flg = 'N'
   LEFT OUTER JOIN  tb_bl_prnr SHPR
				ON  bl.intg_bl_seq = SHPR.intg_bl_seq  AND SHPR.bl_trdp_tp_cd = 'S01' AND SHPR.delt_flg = 'N'
   LEFT OUTER JOIN  tb_bl_prnr CNEE
				ON  bl.intg_bl_seq = CNEE.intg_bl_seq  AND CNEE.bl_trdp_tp_cd = 'C01' AND CNEE.delt_flg = 'N'
   LEFT OUTER JOIN  tb_bl_prnr CARR
				ON  bl.intg_bl_seq = carr.intg_bl_seq  AND carr.bl_trdp_tp_cd = 'B01' AND carr.delt_flg = 'N'
   LEFT OUTER JOIN  tb_bl_prnr LNR
				ON  bl.intg_bl_seq = lnr.intg_bl_seq  AND lnr.bl_trdp_tp_cd = 'L01' AND lnr.delt_flg = 'N'
   LEFT OUTER JOIN  tb_trdp CY
				ON  bl.cy_trdp_cd = cy.trdp_cd  AND cy.delt_flg = 'N'
   LEFT OUTER JOIN  tb_trdp CFS
				ON  bl.cfs_trdp_cd = cfs.trdp_cd  AND cfs.delt_flg = 'N'
   LEFT OUTER JOIN  tb_intg_bl_rlt RLT
				ON  bl.INTG_BL_SEQ = rlt.INTG_BL_SEQ  AND rlt.delt_flg = 'N'
   LEFT OUTER JOIN (
				SELECT  FRT.INTG_BL_SEQ, COUNT(FRT.INV_SEQ) AS CHK
				  FROM  TB_FRT FRT
				 WHERE  FRT.SELL_BUY_TP_CD = 'S'
				   AND  FRT.INV_SEQ IS NOT NULL
				   AND  FRT.DELT_FLG = 'N'
			  GROUP BY  FRT.INTG_BL_SEQ
				    ) AR_INV ON AR_INV.INTG_BL_SEQ = BL.INTG_BL_SEQ
   LEFT OUTER JOIN (
				SELECT  FRT.INTG_BL_SEQ, COUNT(FRT.INV_SEQ) AS CHK
				  FROM  TB_FRT FRT
				 WHERE  FRT.SELL_BUY_TP_CD = 'B'
				   AND  FRT.INV_SEQ IS NOT NULL
				   AND  FRT.DELT_FLG = 'N'
			  GROUP BY  FRT.INTG_BL_SEQ
				    ) AP_INV ON AP_INV.INTG_BL_SEQ = BL.INTG_BL_SEQ
   LEFT OUTER JOIN (
				SELECT  FRT.INTG_BL_SEQ, COUNT(FRT.INV_SEQ) AS CHK
				  FROM  TB_FRT FRT
				 WHERE  FRT.SELL_BUY_TP_CD IN ('D', 'C')
				   AND  FRT.INV_SEQ IS NOT NULL
				   AND  FRT.DELT_FLG = 'N'
			  GROUP BY  FRT.INTG_BL_SEQ
				    ) DC_INV ON DC_INV.INTG_BL_SEQ = BL.INTG_BL_SEQ
         WHERE  bl.bl_no IS NOT NULL
           AND  bl.delt_flg = 'N'                 AND   bl.biz_clss_cd = #biz_clss_cd#            
           AND  bl.air_sea_clss_cd = #air_sea_clss_cd#
           AND  bnd.bnd_clss_cd = #bnd_clss_cd# 
        <isNotEmpty property="f_ref_no">
        		<!-- #1061 [Binex, Sunway, AIF] V440 Search function -->
			   AND  BL.REF_NO LIKE #f_ref_no# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_mbl_no">
			<!-- #1061 [Binex, Sunway, AIF] V440 Search function -->
			   AND  BL.BL_NO LIKE #f_mbl_no# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_lnr_bkg_no">
			   AND  BL.LNR_BKG_NO LIKE  #f_lnr_bkg_no# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_cntr_no">
			   AND  BL.INTG_BL_SEQ IN (SELECT  CNTR.INTG_BL_SEQ
										 FROM  TB_CNTR_LIST CNTR
										WHERE  CNTR.CNTR_NO LIKE  #f_cntr_no# + '%')
			</isNotEmpty>
			<isNotEmpty property="etd_strdt">
			   AND  left(BL.ETD_DT_TM,8) BETWEEN #etd_strdt# AND #etd_enddt#
			</isNotEmpty>
			<isNotEmpty property="eta_strdt">
			   AND  left(BL.ETA_DT_TM,8) BETWEEN #eta_strdt# AND #eta_enddt#
			</isNotEmpty>
			<isNotEmpty property="f_eta_strdt">
			   AND  left(BL.F_ETA_DT_TM,8) BETWEEN #f_eta_strdt# AND #f_eta_enddt#
			</isNotEmpty>
			<isNotEmpty property="f_pol_cd">
			   AND  BL.POL_CD = #f_pol_cd#
			</isNotEmpty>
			<isNotEmpty property="f_pol_nm">
			   AND  BL.POL_NM LIKE  #f_pol_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_pod_cd">
			   AND  BL.POD_CD = #f_pod_cd#
			</isNotEmpty>
			<isNotEmpty property="f_pod_nm">
			   AND  BL.POD_NM LIKE  #f_pod_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_del_cd">
			   AND  BL.DEL_CD = #f_del_cd#
			</isNotEmpty>
			<isNotEmpty property="f_del_nm">
			   AND  BL.DEL_NM LIKE  #f_del_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_prnr_trdp_nm2">
			   AND  PRNR2.TRDP_NM LIKE  #f_prnr_trdp_nm2# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_shpr_trdp_nm">
			   AND  SHPR.TRDP_NM LIKE  #f_shpr_trdp_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_cnee_trdp_nm">
			   AND  CNEE.TRDP_NM LIKE  #f_cnee_trdp_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_carr_trdp_nm">
			   AND  CARR.TRDP_NM LIKE  #f_carr_trdp_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_cy_trdp_nm">
			   AND  CY.ENG_NM LIKE  #f_cy_trdp_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_cfs_trdp_nm">
			   AND  CFS.ENG_NM LIKE  #f_cfs_trdp_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_hbl_tp_cd">
			   AND  BL.HBL_TP_CD = #f_hbl_tp_cd#
			</isNotEmpty>
			<isNotEmpty property="f_ofc_cd">
			   AND  BL.REF_OFC_CD = #f_ofc_cd#
			</isNotEmpty>
			<isNotEmpty property="f_shp_mod_cd">
			   AND  BL.SHP_MOD_CD = #f_shp_mod_cd#
			</isNotEmpty>
			<isNotEmpty property="f_pic_id">
			   AND  BL.RGST_USRID LIKE  #f_pic_id# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_trnk_vsl_nm">
			   AND  BL.TRNK_VSL_NM LIKE  #f_trnk_vsl_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_imp_ref_no">
			   AND  BL.IMP_REF_NO LIKE  #f_imp_ref_no# + '%'
			</isNotEmpty>				
			<isNotEmpty property="f_ccn_no">
			   AND  BL.CCN_NO LIKE  #f_ccn_no# + '%'
			</isNotEmpty>				
			<isNotEmpty property="post_strdt">
			   AND  left(BL.POST_DT,8) BETWEEN #post_strdt# AND #post_enddt#
			</isNotEmpty>
			<isNotEmpty property="opr_usrid">
			    AND BND.ISSUED_BY = #opr_usrid#
			</isNotEmpty>   
	</select>
    
    <!-- House B/L List select    -->
    <!-- ZOOT=LIST PAGE AR_AP_DC STAUS PROCESS -->
    <select id="selectHBL_SUB_LIST" parameterClass="java.util.HashMap" resultClass="HBLInfoVO">
    /* selectHBL_SUB_LIST  */
        SELECT  bl.intg_bl_seq,    bl.biz_clss_cd,   
        		bl.bl_no,          bl.bkg_no,     	bl.lnr_bkg_no,
                CONVERT(VARCHAR, bl.etd_dt_tm, 120) AS etd_dt_tm,
                CONVERT(VARCHAR, bl.eta_dt_tm, 120) AS eta_dt_tm,
                bl.por_cd,        bl.por_nm,        '' AS por_nod_cd,     
                bl.pol_cd,        bl.pol_nm,        bl.pol_nod_cd,
                bl.pod_cd,        bl.pod_nm,        bl.pod_nod_cd,
                bl.del_cd,        bl.del_nm,        '' AS del_nod_cd,
        
                shp.trdp_cd AS shpr_trdp_cd,      shp.trdp_nm AS shpr_trdp_nm,
                cne.trdp_cd AS cnee_trdp_cd,      cne.trdp_nm AS cnee_trdp_nm,
                lnr.trdp_cd AS lnr_trdp_cd,       lnr.trdp_nm AS lnr_trdp_nm,
                prnr.trdp_cd AS prnr_trdp_cd,     prnr.trdp_nm AS prnr_trdp_nm,
                ntfy.trdp_cd AS ntfy_trdp_cd,     ntfy.trdp_nm AS ntfy_trdp_nm,

                bnd.cfm_flg,     bnd.clz_flg,
                
                bl.pck_qty,
                (SELECT X.pck_nm FROM TB_PCK_UT_CD X WHERE X.pck_ut_cd = bl.pck_ut_cd) AS pck_ut_nm,
                bl.grs_wgt, bl.grs_wgt1,
                bl.chg_wgt, bl.chg_wgt1,
                bl.meas, bl.meas1,
                ISNULL(BLCK.BL_STS_CD1, BL.BL_STS_CD) AS BL_STS_CD,
                bl.isf_no,
                <!-- #34257 [BINEX]OIM List 하단 HBL List 항목 추가 -->
                bl.ams_no,
                bl.cust_ref_no,
                bl.org_bl_rcvd_flg,
                CASE WHEN ISNULL(bl.EXPRESS_TP_CD,'N') = 'Y' THEN 'Y' ELSE '' END AS express_tp_cd,	
			    ISNULL(bnd.AR_CHK,'X') AS AR_CHK
				,ISNULL(bnd.AP_CHK,'X') AS AP_CHK
				,ISNULL(bnd.DC_CHK,'X') AS DC_CHK
				,ISNULL(bnd.FRT_CHK,'X') AS FRT_CHK
                
          FROM  tb_intg_bl bl
          JOIN  tb_add_info_bnd bnd
            ON  bl.intg_bl_seq = bnd.intg_bl_seq
LEFT OUTER JOIN tb_bl_prnr shp
            ON  bl.intg_bl_seq = shp.intg_bl_seq  AND shp.bl_trdp_tp_cd = 'S01' AND shp.delt_flg = 'N'
         
LEFT OUTER JOIN tb_bl_prnr cne
            ON  bl.intg_bl_seq = cne.intg_bl_seq  AND cne.bl_trdp_tp_cd = 'C01' AND cne.delt_flg = 'N'

LEFT OUTER JOIN tb_bl_prnr lnr
            ON  bl.intg_bl_seq = lnr.intg_bl_seq  AND lnr.bl_trdp_tp_cd = 'L01' AND lnr.delt_flg = 'N'
            
LEFT OUTER JOIN tb_bl_prnr prnr
            ON  bl.intg_bl_seq = prnr.intg_bl_seq  AND prnr.bl_trdp_tp_cd = 'P01' AND prnr.delt_flg = 'N'
            
LEFT OUTER JOIN tb_bl_prnr ntfy
            ON  bl.intg_bl_seq = ntfy.intg_bl_seq  AND ntfy.bl_trdp_tp_cd = 'N01' AND ntfy.delt_flg = 'N'
            
LEFT OUTER JOIN(SELECT INTG_BL_SEQ AS INTG_BL_SEQ1, BL_STS_CD AS BL_STS_CD1 FROM TB_INTG_BL_BLCK) BLCK 
			ON BL.INTG_BL_SEQ = BLCK.INTG_BL_SEQ1     
			      
         WHERE  bl.delt_flg    = 'N'        AND   bnd.delt_flg = 'N'
           AND  bl.biz_clss_cd = 'H'        AND   bl.air_sea_clss_cd = #air_sea_clss_cd#
           AND  bl.intg_bl_seq = bnd.intg_bl_seq 
           AND  bnd.bnd_clss_cd= #bnd_clss_cd#
           AND  bl.intg_bl_seq IN    
                              ( SELECT  intg_bl_seq
                                  FROM  tb_intg_bl_rlt
                                 WHERE  rlt_intg_bl_seq = #hbl_intg_bl_seq#
                                   AND  intg_bl_rlt_cd  ='HTM'    )
        ORDER BY bl.bl_no,bl.intg_bl_seq
    </select>
    
    <!-- 국가별 Descrition을 조회함   -->
    <select id="selectCNTR_DESC" resultClass="String" parameterClass="HashMap">
        SELECT cnt.descr 
          FROM tb_loc loc
          JOIN tb_cnt cnt
            ON loc.cnt_cd = cnt.cnt_cd
         WHERE loc.loc_cd = #loc_cd# AND cnt.delt_flg = 'N'
    </select>
    
    <!--S/R된 HBL 수정시 해당 S/R에 속하는 HBL의 수량, 무계, 중량을 S/R 테이블에 입력하기 위한 조회  -->
    <select id="selectHBL_SR_SUM_INFO" resultClass="HBLInfoVO" parameterClass="String">
        SELECT  sum(pck_qty) AS pck_qty, sum(grs_wgt) AS grs_wgt, sum(meas) AS meas, sum(act_wgt) AS act_wgt 
          FROM  tb_intg_bl
         WHERE  sr_no = #sr_no# AND biz_clss_cd = 'H' AND delt_flg = 'N'
    </select>
    
    <!--S/R된 HBL 수정시 해당 S/R에 속하는 HBL의 수량, 무계, 중량을 S/R 테이블에 업데이트함  -->
    <update id="updateHBL_SR_SUM_INFO" parameterClass="HBLInfoVO">
        UPDATE  tb_intg_bl
           SET  pck_qty    = #pck_qty#,        grs_wgt     = #grs_wgt#,      
                meas       = #meas#,           act_wgt     = #act_wgt#,
                modi_usrid = #proc_usrid#,     modi_ofc_cd = #proc_ofccd#,  modi_tms   = GETUTCDATE()
         WHERE  sr_no = #sr_no# AND biz_clss_cd = 'M' AND delt_flg = 'N'
    </update>
    
    
    <!-- MBL과 HBL 관계 테이블 생성   -->
    <insert id="insertIMP_INTG_BL_RLT" parameterClass="HashMap">
        INSERT INTO  tb_intg_bl_rlt(
                 intg_bl_seq,     rlt_intg_bl_seq,   intg_bl_rlt_cd,
                 rgst_usrid,      rgst_ofc_cd,       rgst_tms,         
                 modi_usrid,      modi_ofc_cd,       modi_tms,          delt_flg
        )SELECT  #intg_bl_seq#,   intg_bl_seq,       #intg_bl_rlt_cd#,
                 #proc_usrid#,    #proc_ofccd#,      getdate(),
                 #proc_usrid#,    #proc_ofccd#,      GETUTCDATE(),         'N'
           FROM  tb_intg_bl 
          WHERE  bl_no = #f_mbl_no# AND biz_clss_cd = 'M' AND delt_flg = 'N'
    </insert>
    
    <!-- Job Template Sequence를 조회함   -->
    <select id="selectJB_TMPLT_SEQ" resultClass="String" parameterClass="String">
        SELECT jb_tmplt_seq  
          FROM tb_jb_tmplt 
         WHERE tmplt_nm = #value# AND delt_flg = 'N'
    </select>   

	<!--BL내용중 변경된 내용을 로그로 기록하기 위해 원 정보를 조회함  -->
	<select id="selectBL_ORGINFO_READ" resultClass="HBLInfoVO" parameterClass="String">	
		SELECT  bl.biz_clss_cd,  bl.air_sea_clss_cd,                
		        bl.pod_nm,       bl.pol_nm,           bl.del_nm,
		
		        bl.pck_qty,      bl.pck_ut_cd, 
		        bl.chg_wgt,      bl.chg_wgt_ut_cd,
		        bl.grs_wgt,      bl.grs_wgt_ut_cd,
		        bl.meas,         bl.meas_ut_cd,
		        bl.obrd_dt_tm,   bl.etd_dt_tm,        bl.eta_dt_tm,
		
		        shp.trdp_nm AS shpr_trdp_nm, 
		        cne.trdp_nm AS cnee_trdp_nm
		
	      FROM  tb_intg_bl bl with(nolock)
LEFT OUTER JOIN tb_bl_prnr shp with(nolock)
	        ON  shp.intg_bl_seq = bl.intg_bl_seq AND shp.bl_trdp_tp_cd = 'S01' AND shp.delt_flg = 'N'
		 
LEFT OUTER JOIN tb_bl_prnr cne with(nolock)
	        ON  cne.intg_bl_seq = bl.intg_bl_seq AND cne.bl_trdp_tp_cd = 'C01' AND shp.delt_flg = 'N'
		 WHERE  bl.intg_bl_seq  = #value#
	</select>

	<!-- PK생성   -->
    <select id="selectBL_CNG_ITM_PK" parameterClass="String" resultClass="Integer">
        SELECT ISNULL(MAX(cng_seq),0)+1
          FROM tb_bl_cng_itm
		 WHERE intg_bl_seq = #value#
    </select>

		
	<!-- History를 등록함   -->
	<insert id="insertBL_CNG_ITM" parameterClass="HashMap">
		INSERT INTO tb_bl_cng_itm(
			intg_bl_seq,  cng_seq,
			itm_lbl,      bfr_cng_txt,   aft_cng_txt,
			rgst_usrid,   rgst_ofc_cd,   rgst_tms
		)VALUES(
			#intg_bl_seq#,  #cng_seq#,
			#itm_lbl#,      #bfr_cng_txt#,   #aft_cng_txt#,
			#rgst_usrid#,   #rgst_ofc_cd#,   getdate()
		)
	</insert>
	
	<!--BL 변경내역을 조회함   -->
	<select id="selectBL_CNG_ITM_LIST" parameterClass="HashMap" resultClass="com.clt.apps.fis.see.bmd.housebl.dto.BlCngItmVO">
<!-- 
		SELECT  cng_seq,       itm_lbl,       bfr_cng_txt,   aft_cng_txt,
                rgst_usrid,    rgst_ofc_cd,   rgst_tms
		  FROM  tb_bl_cng_itm
		 WHERE  intg_bl_seq = #intg_bl_seq#
	  ORDER BY  cng_seq DESC
	  
	   #52600 [BNX, COMMON] B/L EDIT HISTORY TO LEAVE SALESMAN INFORMATION|Modified history item's name to common word.
	   #52300 [BNX] Opus forwarding Time Zone 설정
   -->
		SELECT  PPT.LGC_ATTR_NM AS itm_lbl 
			  <!-- , CONVERT(VARCHAR(19),HIS.rgst_tms,110) + ' ' +CONVERT(VARCHAR(19),HIS.rgst_tms,108) AS rgst_tms, -->
			  , HIS.rgst_tms AS rgst_tms,
			   HIS.rgst_ofc_cd AS rgst_ofc_cd, HIS.rgst_usrid AS rgst_usrid
			  
			  ,(case  when PPT.PHYS_ATTR_NM  = 'MODI_TMS' and HIS.bfr_cng_txt != 'CREATE : B/L' then
			  	CONVERT(VARCHAR(19), DATEADD(MINUTE,
            60*CONVERT( float,  isnull (ccd.RMK , '0')) , convert(datetime,HIS.bfr_cng_txt) ), 120)
				else  
				<!-- #2106 [PATENT] B/L History 항목 추가 - Payment Term, SVC Term, Shipper, Consignee -->
					case when HIS.cng_attr_seq = '12' or HIS.cng_attr_seq = '13' then 
					( SELECT cd_nm FROM tb_com_cd_dtl WHERE com_cd = 'C031' AND use_flg ='Y' and CD_VAL = HIS.bfr_cng_txt)
					else HIS.bfr_cng_txt end 
				end  ) AS bfr_cng_txt 
			  ,(case  when PPT.PHYS_ATTR_NM  = 'MODI_TMS'  then
			  	CONVERT(VARCHAR(19), DATEADD(MINUTE,
            60*CONVERT( float,  isnull (ccd.RMK , '0')) , convert(datetime,HIS.aft_cng_txt) ), 120)
				else  
					case when HIS.cng_attr_seq = '12' or HIS.cng_attr_seq = '13' then 
					( SELECT cd_nm FROM tb_com_cd_dtl WHERE com_cd = 'C031' AND use_flg ='Y' and CD_VAL = HIS.aft_cng_txt)
					else HIS.aft_cng_txt  end 
				end  ) AS aft_cng_txt  
		
		  FROM  TB_INTG_CNG_HIS_AIF HIS
		  JOIN  TB_CNG_PPT PPT ON HIS.cng_attr_seq = PPT.CNG_ATTR_SEQ
		    LEFT OUTER JOIN
				TB_OFC TOF
				ON HIS.RGST_OFC_CD = TOF.OFC_CD
				
		    LEFT OUTER JOIN
				TB_COM_CD_DTL CCD
				ON CCD.COM_CD = 'TIMEZN'
				AND TOF.TIME_ZONE = CCD.CD_VAL
				  
		 WHERE  HIS.intg_bl_seq = cast(#intg_bl_seq# as varchar)
	  ORDER BY  HIS.intg_cng_his_seq DESC
	</select>
    
    <!-- BL번호 변경  -->
    <update id="updateCHG_BL_NO" parameterClass="HashMap">
        UPDATE  tb_intg_bl
           SET  bl_no = #bl_no#,
                modi_usrid = #proc_usrid#,     modi_ofc_cd = #proc_ofccd#,    modi_tms    = GETUTCDATE()
         WHERE  intg_bl_seq = cast(#intg_bl_seq# as varchar)  AND  biz_clss_cd = #biz_clss_cd#
    </update>
	
	<!--HBL에서 환률 기준일자로할 일자를 선택한다.  -->
    <select id="selectHBL_DT" parameterClass="String" resultClass="HBLInfoVO">
		SELECT  hbl.obrd_dt_tm, SUBSTRING(hbl.etd_dt_tm, 1, 8) AS etd_dt_tm,   SUBSTRING(hbl.eta_dt_tm, 1, 8) AS eta_dt_tm,
				 hbl.air_sea_clss_cd, bnd.bnd_clss_cd
		  FROM  tb_intg_bl hbl
		  JOIN  tb_add_info_bnd bnd
			ON  hbl.intg_bl_seq = bnd.intg_bl_seq
		 WHERE  hbl.intg_bl_seq = #value# AND hbl.biz_clss_cd = 'H'
    </select> 
    
    <select id="selectBLInv" parameterClass="HashMap" resultClass="String">
    	 SELECT  CASE WHEN COUNT(*) > 0 THEN 'N' ELSE 'Y' END AS CHKFLG
           FROM  TB_INTG_BL BL
           JOIN  TB_FRT FRT 
             ON  BL.INTG_BL_SEQ = FRT.INTG_BL_SEQ AND BL.DELT_FLG = 'N' AND FRT.DELT_FLG = 'N'
           JOIN  TB_INV INV 
             ON  FRT.INV_SEQ = INV.INV_SEQ AND INV.DELT_FLG = 'N'
          WHERE  1=1
            AND  BL.INTG_BL_SEQ = cast(#intg_bl_seq# as varchar) 
    </select>
    
    <!-- House B/L Info select    -->
    <select id="selectHBL_Info" parameterClass="java.util.HashMap" resultClass="com.clt.apps.fis.see.bmd.housebl.dto.DocumentPackageVO">
        SELECT	bl.intg_bl_seq,     bl.bl_no,			bl.hbl_tp_cd,
        		bl.flt_no,			bl.ref_ofc_cd,		
        		
        		<!-- #1247 [CLT] HB/L Company Name - Print 시 저장 요청 및 Document Package 시 표시	 -->
        		<!--  rofc.ofc_eng_nm AS ref_ofc_eng_nm, -->
        		CASE WHEN ISNULL(opt.SIGN_SHIP,'') = ''
        		THEN rofc.ofc_eng_nm
        		ELSE opt.SIGN_SHIP end AS ref_ofc_eng_nm,        		
        		
        		<!-- #4694 [IMPEX] AIR Document Package -->
        		ISNULL(ROFC.OFC_REP_NM,'') AS OFC_REP_NM,
        		
        		UPPER(rofc.cnt_cd) AS ref_ofc_cnt_cd,	rofc.sea_body,
        		shp.trdp_nm AS shpr_trdp_nm,			shp.trdp_addr AS shpr_trdp_addr,
        		cne.trdp_addr AS cnee_trdp_addr,		lnr.trdp_nm AS lnr_trdp_nm,
        		thr.trdp_nm AS thr_trdp_nm,
        		CASE (SELECT COUNT(frt.inv_seq) FROM tb_frt frt
        		WHERE frt.intg_bl_seq = bl.intg_bl_seq AND frt.sell_buy_tp_cd = 'S' AND frt.delt_flg = 'N')
        		WHEN 0 THEN 'N' ELSE 'Y' END AS loc_inv_flg,
        		CASE (SELECT COUNT(frt.inv_seq) FROM tb_frt frt
        		WHERE frt.intg_bl_seq = bl.intg_bl_seq AND frt.sell_buy_tp_cd IN ('C','D')  AND frt.INV_SEQ IS NOT NULL AND frt.delt_flg = 'N')
        		WHEN 0 THEN 'N' ELSE 'Y' END AS DC_INV_FLG,
        		(SELECT oth.intg_bl_seq FROM tb_bl_oth oth
        		WHERE oth.intg_bl_seq = bl.intg_bl_seq AND oth.wrk_tp = 'CI')AS cmc_inv_seq,
        		(SELECT oth.intg_bl_seq FROM tb_bl_oth oth
        		WHERE oth.intg_bl_seq = bl.intg_bl_seq AND oth.wrk_tp = 'PL') AS pck_inv_seq
        		, (select max(rmk_cd) from tb_bl_rmk where dft_flg = 'Y' and ofc_cd =  bl.ref_ofc_cd) as  rmk_cd
        		
          FROM  tb_intg_bl bl
          
          JOIN	tb_add_info_bnd bnd
		    ON	bnd.intg_bl_seq = bl.intg_bl_seq AND bnd.bnd_clss_cd = 'O' AND bnd.delt_flg = 'N'
          
LEFT OUTER JOIN tb_bl_prnr shp
            ON  bl.intg_bl_seq = shp.intg_bl_seq  AND shp.bl_trdp_tp_cd = 'S01' AND shp.delt_flg = 'N'

LEFT OUTER JOIN tb_bl_prnr cne
            ON  bl.intg_bl_seq = cne.intg_bl_seq  AND cne.bl_trdp_tp_cd = 'C01' AND cne.delt_flg = 'N'

LEFT OUTER JOIN tb_bl_prnr lnr
            ON  bl.intg_bl_seq = lnr.intg_bl_seq  AND lnr.bl_trdp_tp_cd = 'L01' AND lnr.delt_flg = 'N'
            
LEFT OUTER JOIN tb_bl_prnr thr
            ON  bl.intg_bl_seq = thr.intg_bl_seq  AND thr.bl_trdp_tp_cd = 'T01' AND lnr.delt_flg = 'N'
            
LEFT OUTER JOIN tb_ofc rofc
            ON  rofc.ofc_cd = bl.ref_ofc_cd AND rofc.delt_flg = 'N'
            
          LEFT OUTER JOIN TB_BLPRN_OPTINFO opt
            ON  opt.INTG_BL_SEQ = bl.INTG_BL_SEQ
                        
         WHERE  bl.delt_flg = 'N'
           AND	bl.biz_clss_cd = 'H'
           AND	bl.air_sea_clss_cd = #air_sea_clss_cd#
           AND	bl.bl_no = #f_bl_no#
    </select>
    
    <!-- Master B/L Info select    -->
    <select id="selectMBL_Info" parameterClass="java.util.HashMap" resultClass="com.clt.apps.fis.see.bmd.housebl.dto.DocumentPackageVO">
		SELECT	TOP 1  <!-- #892 [8][AEH Pickup/Delivery Order] Not reload -->
				bl.intg_bl_seq,     	bl.bl_no,		bl.ref_ofc_cd,		bl.ref_no,
				UPPER(rofc.cnt_cd) AS ref_ofc_cnt_cd,
						
        		<!-- #1247 [CLT] HB/L Company Name - Print 시 저장 요청 및 Document Package 시 표시	 -->
        		<!--  rofc.ofc_eng_nm AS ref_ofc_eng_nm, -->
        		CASE WHEN ISNULL(opt.SIGN_SHIP,'') = ''
        		THEN rofc.ofc_eng_nm
        		ELSE opt.SIGN_SHIP end AS ref_ofc_eng_nm,
        		
        		<!-- #4693 [BNX GE] AEM Doc package , HAWB Print 시 일부 칼럼 값 틀리게 출력되는 문제 -->		
        		ISNULL(ISS.TRDP_NM,'') AS ISS_TRDP_NM,
        		
        		BL.FLT_NO,
        		BL.HBL_TP_CD,
            	THR.TRDP_NM AS THR_TRDP_NM,
            	SHPR.TRDP_NM AS SHPR_TRDP_NM,
            	LNR.TRDP_NM AS LNR_TRDP_NM,
        		
        		<!-- #4694 [IMPEX] AIR Document Package -->
        		ISNULL(ROFC.OFC_REP_NM,'') AS OFC_REP_NM,
        		  				
				rofc.sea_body,			
				agt.trdp_cd AS agt_trdp_cd,
				agt.trdp_addr AS agt_trdp_addr,
        		CASE
        		(SELECT COUNT(hbl.intg_bl_seq) FROM tb_intg_bl_rlt rlt
        		JOIN tb_intg_bl hbl ON hbl.intg_bl_seq = rlt.intg_bl_seq AND hbl.delt_flg = 'N'
        		WHERE rlt.rlt_intg_bl_seq = bl.intg_bl_seq AND rlt.delt_flg = 'N')
        		WHEN 0 THEN 'N' ELSE 'Y' END AS hbl_flg,
        		CASE
        		(SELECT COUNT('X') FROM tb_intg_bl_rlt rlt
        		JOIN tb_bl_oth oth ON oth.intg_bl_seq = rlt.intg_bl_seq AND oth.wrk_tp = 'CI'
        		WHERE rlt.rlt_intg_bl_seq = bl.intg_bl_seq AND rlt.delt_flg = 'N')
        		WHEN 0 THEN 'N' ELSE 'Y' END AS cmc_inv_flg,
        		CASE
        		(SELECT COUNT('X') FROM tb_intg_bl_rlt rlt
        		JOIN tb_bl_oth oth ON oth.intg_bl_seq = rlt.intg_bl_seq AND oth.wrk_tp = 'PL'
        		WHERE rlt.rlt_intg_bl_seq = bl.intg_bl_seq AND rlt.delt_flg = 'N')
        		WHEN 0 THEN 'N' ELSE 'Y' END AS pck_inv_flg,
				CASE
				(SELECT COUNT(frt.inv_seq) FROM tb_frt frt
				WHERE frt.intg_bl_seq = bl.intg_bl_seq AND frt.sell_buy_tp_cd IN ('C','D') AND frt.delt_flg = 'N')
				+
				(SELECT COUNT(frt.inv_seq) FROM tb_intg_bl_rlt rlt
				JOIN tb_frt frt ON frt.intg_bl_seq = rlt.intg_bl_seq AND frt.sell_buy_tp_cd IN ('C','D') AND frt.delt_flg = 'N'
				WHERE rlt.rlt_intg_bl_seq = bl.intg_bl_seq AND rlt.delt_flg = 'N')
				WHEN 0 THEN 'N' ELSE 'Y' END AS cr_db_flg
				, (select max(rmk_cd) from tb_bl_rmk where dft_flg = 'Y' and ofc_cd =  bl.ref_ofc_cd) as  rmk_cd
          FROM  tb_intg_bl bl     
		  JOIN	tb_add_info_bnd bnd
		    ON	bnd.intg_bl_seq = bl.intg_bl_seq AND bnd.bnd_clss_cd = 'O' AND bnd.delt_flg = 'N'
          
LEFT OUTER JOIN tb_bl_prnr agt
			 ON	bl.intg_bl_seq = agt.intg_bl_seq AND agt.bl_trdp_tp_cd = 'C01' AND agt.delt_flg = 'N'
			 
<!-- #4693 [BNX GE] AEM Doc package , HAWB Print 시 일부 칼럼 값 틀리게 출력되는 issue -->			 
LEFT OUTER JOIN TB_BL_PRNR ISS  
			ON BL.INTG_BL_SEQ = ISS.INTG_BL_SEQ  AND ISS.BL_TRDP_TP_CD = 'I01' AND ISS.DELT_FLG = 'N'			 
LEFT OUTER JOIN TB_BL_PRNR SHPR      
            ON  BL.INTG_BL_SEQ = SHPR.INTG_BL_SEQ  AND SHPR.BL_TRDP_TP_CD = 'S01' AND SHPR.DELT_FLG = 'N'     
LEFT OUTER JOIN TB_BL_PRNR LNR
            ON  BL.INTG_BL_SEQ = LNR.INTG_BL_SEQ AND LNR.BL_TRDP_TP_CD = 'L01' AND LNR.DELT_FLG = 'N'
LEFT OUTER JOIN TB_BL_PRNR THR
            ON  BL.INTG_BL_SEQ = THR.INTG_BL_SEQ AND THR.BL_TRDP_TP_CD = 'T01' AND THR.DELT_FLG = 'N'  					 
			 
LEFT OUTER JOIN tb_ofc rofc
            ON  rofc.ofc_cd = bl.ref_ofc_cd AND rofc.delt_flg = 'N'

LEFT OUTER JOIN TB_BLPRN_OPTINFO opt
            ON  opt.INTG_BL_SEQ = bl.INTG_BL_SEQ        	
         WHERE  1=1
           AND	bl.delt_flg = 'N'
           AND	bl.biz_clss_cd = 'M'
           AND	bl.air_sea_clss_cd = #air_sea_clss_cd#
         <dynamic>
            <isNotEmpty property="bl_no">
         	AND bl.bl_no = #bl_no#
         	</isNotEmpty>
            <isNotEmpty property="ref_no">
         	AND bl.ref_no = #ref_no#
         	</isNotEmpty>
         </dynamic>	
    </select>
    
    <select id="selectCntrInfo" parameterClass="HashMap" resultClass="CntrLstVO">
    	SELECT cntr_no, seal_no1, cntr_tpsz_cd, seal_no2
		  FROM tb_cntr_list
		 WHERE intg_bl_seq = cast(#intg_bl_seq# as varchar)
    </select>
    
    
    <update id="updateWO_intg_bl_seq" parameterClass="SeeMasterBLVO">
		/*updateWO_intg_bl_seq*/
		update tb_pd_ord
		set INTG_BL_SEQ = ''
		where 1=1
		and INTG_BL_SEQ=cast(#intg_bl_seq# as varchar)
		
    </update>
    
    <update id="updateWO_Bkg_seq" parameterClass="SeeMasterBLVO">
	    /*updateWO_Bkg_seq*/
	    update TB_PD_ORD
		set INTG_BL_SEQ= #intg_bl_seq# 
		where 1=1
		<!-- and BKG_SEQ in (select BKG_SEQ from TB_BKG where LNR_BKG_NO=#lnr_bkg_no#) -->
    	and BKG_SEQ = #bkg_seq#

    </update>
    
        
    <update id="updateHBL_WO_Bkg_seq" parameterClass="HBLInfoVO">
	    /*updateHBL_WO_Bkg_seq*/
	    update TB_PD_ORD
		set INTG_BL_SEQ= #intg_bl_seq# 
		where 1=1
		<!-- and BKG_SEQ in (select BKG_SEQ from TB_BKG where BKG_NO=#bkg_no#) -->
    	and BKG_SEQ = #bkg_seq#    
    </update>

    <update id="updateHBL_WO_intg_bl_seq" parameterClass="HBLInfoVO">
		/*updateHBL_WO_intg_bl_seq*/
		update tb_pd_ord
		set INTG_BL_SEQ = ''
		where 1=1
		and INTG_BL_SEQ=cast(#intg_bl_seq# as varchar)
		
    </update>

    <insert id="insertMBL_INTG_BL" parameterClass="SeeMasterBLVO">
    	/* insertMBL_INTG_BL */
        INSERT  tb_intg_bl(
                intg_bl_seq,        bl_no,              bl_sts_cd,          bl_ser_no,
                sr_no,              sr_seq,             sr_cre_dt,
                
                biz_clss_cd,        air_sea_clss_cd,
                lnr_bkg_no,         shp_mod_cd,         bl_iss_dt,          
        
                frt_term_cd,        rep_cmdt_cd,        rep_cmdt_nm,        pck_qty,                pck_ut_cd,
                grs_wgt,            grs_wgt_ut_cd,      act_wgt,            act_wgt_ut_cd,          meas,          meas_ut_cd,         
                fm_svc_term_cd,     to_svc_term_cd, 
             
                por_cd,             			        por_nm,             pol_cd,                 pol_nod_cd,    pol_nm,                 
                pod_cd,             pod_nod_cd,         pod_nm,             del_cd,                 del_nm,
                iss_loc_cd,         iss_loc_nm,         pay_loc_cd,         pay_loc_nm,
        
                fnl_dest_loc_cd,    fnl_dest_loc_nm,
                
                obrd_dt_tm,
                
                trnk_vsl_cd,        trnk_vsl_nm,        trnk_voy,           
                etd_dt_tm,          eta_dt_tm,
                mk_txt,             desc_txt,           rmk,
        
                rgst_usrid,         rgst_ofc_cd,        rgst_tms,
                modi_usrid,         modi_ofc_cd,        dept_cd,            modi_usr_nm,            modi_tms,               DELT_FLG,

sad_txt,
hbl_tp_cd,
cargo_tp_cd,                
curr_cd,                 
ref_no,
sub_bl_no,
mbl_ref_no,
post_dt,
sub_mbl_flg,
state_cd,
grs_wgt1,
act_wgt1,
meas1,
size_ut_cd,
agent_rt,
agent_amt,
agent_curr_cd,
cust_rt,
cust_amt,
cust_curr_cd,
profit_share,
express_tp_cd,
iss_loc_cd1,
iss_loc_nm1,
trans_shipment,
itn_no,
onward_rout,
clean_on_board,
frt_term_c_cd,
frt_term_a_cd,
obrd_dt_tm1,
ref_ofc_cd,
exp_ref_no,
obl_tp_cd,
broker_rt,
cut_off_dt,
rcv_wh_cd,
sc_no,
cnt_cd,
mk_grs_wgt,
mk_grs_wgt1,
mk_meas,
mk_meas1,
f_eta_dt_tm,
d_eta_dt_tm,
avail_dt_tm,
lfd_dt_tm,
go_dt_tm,
rcvd_dt_tm,
rlsd_dt_tm,
te,
it_no,
it_loc,
bond_carr_cd,
bond_no,
goods_at,
goods_value,
door_loc_cd,
fnl_wh_cd,
org_bl_rcvd_flg,
ror_flg,
rlsd_flg,
rlsd_usrid,
te_dt_tm,
ams_no,
isf_no,
carr_trdp_cd1,
cy_trdp_cd,
cfs_trdp_cd,
rt_trdp_cd,
imp_ref_no,
cust_ref_no,
att_mk_txt,
att_desc_txt,
cntr_info,
desc_txt1,
reserve_field01,
reserve_field02,
reserve_field03,
reserve_field04,
reserve_field05,
reserve_field06,
reserve_field11,
rail_cut_off_dt,   
pu_trdp_cd,
ams_id,
etd_por_tm,
doc_cut_off_dt
,ccn_no
,ccn_dt
,pre_ccn_no
,mnf_fr_loc
,mnf_to_loc
,po_no    <!-- #1056 [OEM Entry]PO# 항목 추가 및 연계 -->

,act_shp_info
,nomi_flg
,pre_vsl_cd
,pre_vsl_nm
,pre_voy
,wgt_disp_cd
,prnr_ref_no
<!-- OFVFOUR-8115 [BNX] Adding Berth Date Field in OIM and OIH Entry -->
,berth_dt
        )VALUES(
                #intg_bl_seq#,        #bl_no#,              #bl_sts_cd#,          #bl_ser_no#,
                #sr_no#,              #sr_seq#,             getdate(),
        		
                #biz_clss_cd#,        #air_sea_clss_cd#,
                #lnr_bkg_no#,         #shp_mod_cd#,         #bl_iss_dt#,          
                
                #frt_term_cd#,        #rep_cmdt_cd#,        #rep_cmdt_nm#,        #pck_qty#,                #pck_ut_cd#,
                #grs_wgt#,            #grs_wgt_ut_cd#,      #act_wgt#,            #act_wgt_ut_cd#,          #meas#,         #meas_ut_cd#,
                #fm_svc_term_cd#,     #to_svc_term_cd#,
        
                #por_cd#,             						#por_nm#,             #pol_cd#,                 #pol_nod_cd#,   #pol_nm#,                 
                #pod_cd#,             #pod_nod_cd#,         #pod_nm#,             #del_cd#,                 #del_nm#,
                #iss_loc_cd#,         #iss_loc_nm#,         #pay_loc_cd#,         #pay_loc_nm#,
        
                #fnl_dest_loc_cd#,    #fnl_dest_loc_nm#,
                
                #obrd_dt_tm#,
                
                #trnk_vsl_cd#,        #trnk_vsl_nm#,        #trnk_voy#,           
                #etd_dt_tm#,          #eta_dt_tm#,
                #mk_txt#,             #desc_txt#,           #rmk#,
        
                #proc_usrid#,         #proc_ofccd#,         getdate(),
                #proc_usrid#,         #proc_ofccd#,         #proc_dept_cd#,       #proc_usrnm#,              GETUTCDATE(),                 'N',

#sad_txt#,
#hbl_tp_cd#,
#cargo_tp_cd#,
#curr_cd#,                
#ref_no#,
#sub_bl_no#,
#mbl_ref_no#,
#post_dt#,
#sub_mbl_flg#,
#state_cd#,
#grs_wgt1#,
#act_wgt1#,
#meas1#,
#size_ut_cd#,
#agent_rt#,
#agent_amt#,
#agent_curr_cd#,
#cust_rt#,
#cust_amt#,
#cust_curr_cd#,
#profit_share#,
#express_tp_cd#,
#iss_loc_cd1#,
#iss_loc_nm1#,
#trans_shipment#,
#itn_no#,
#onward_rout#,
#clean_on_board#,
#frt_term_c_cd#,
#frt_term_a_cd#,
#obrd_dt_tm1#,
#ref_ofc_cd#,
#exp_ref_no#,
#obl_tp_cd#,
#broker_rt#,
#cut_off_dt#,
#rcv_wh_cd#,
#sc_no#,
#cnt_cd#,
#mk_grs_wgt#,
#mk_grs_wgt1#,
#mk_meas#,
#mk_meas1#,
#f_eta_dt_tm#,
#d_eta_dt_tm#,
#avail_dt_tm#,
#lfd_dt_tm#,
#go_dt_tm#,
#rcvd_dt_tm#,
#rlsd_dt_tm#,
#te#,
#it_no#,
#it_loc#,
#bond_carr_cd#,
#bond_no#,
#goods_at#,
#goods_value#,
#door_loc_cd#,
#fnl_wh_cd#,
#org_bl_rcvd_flg#,
#ror_flg#,
#rlsd_flg#,
#rlsd_usrid#,
#te_dt_tm#,
#ams_no#,
#isf_no#,
#carr_trdp_cd1#,
#cy_trdp_cd#,
#cfs_trdp_cd#,
#rt_trdp_cd#,
#imp_ref_no#,
#cust_ref_no#,
#att_mk_txt#,
#att_desc_txt#,
#cntr_info#,
#desc_txt1#,
#reserve_field01#,
#reserve_field02#,
#reserve_field03#,
#reserve_field04#,
#reserve_field05#,
#reserve_field06#,
#reserve_field11#,
#rail_cut_off_dt#,   
#pu_trdp_cd#,
#ams_id#,
#etd_por_tm#,
#doc_cut_off_dt#
,#ccn_no#
,#ccn_dt#
,#pre_ccn_no#
,#mnf_fr_loc#
,#mnf_to_loc#
,#po_no#

,#act_shp_info#
,#nomi_flg#
,#pre_vsl_cd#
,#pre_vsl_nm#
,#pre_voy#
,#wgt_disp_cd#
,#prnr_ref_no#
<!-- OFVFOUR-8115 [BNX] Adding Berth Date Field in OIM and OIH Entry -->
,#berth_dt#      )
    </insert>
    
    <select id="selectINTG_MBL_INFO" parameterClass="HashMap" resultClass="SeeMasterBLVO">
	/* selectINTG_MBL_INFO */
	SELECT TOP 1
	bl.intg_bl_seq, ISNULL(BLCK.BL_STS_CD1, BL.BL_STS_CD) AS BL_STS_CD, bl.bl_no, bl.hbl_tp_cd,
	bl.sr_no, bl.sr_seq, bl.sr_cre_dt, bl.bl_ser_no,

	bl.biz_clss_cd, bl.air_sea_clss_cd,
	bl.lnr_bkg_no, bl.shp_mod_cd, bl.bl_iss_dt, bnd.mrn_no,

	bl.frt_term_cd, bl.rep_cmdt_cd, bl.rep_cmdt_nm, bl.pck_qty, bl.pck_ut_cd,
	bl.grs_wgt, bl.grs_wgt_ut_cd, bl.act_wgt, bl.act_wgt_ut_cd, bl.meas,
	bl.meas_ut_cd,
	bl.fm_svc_term_cd, bl.to_svc_term_cd,

	bl.por_cd, '' AS por_nod_cd, bl.por_nm, bl.pol_cd, bl.pol_nod_cd, bl.pol_nm,
	bl.pod_cd, bl.pod_nod_cd, bl.pod_nm, bl.del_cd, '' AS del_nod_cd,
	bl.del_nm,
	bl.iss_loc_cd, bl.iss_loc_nm, bl.pay_loc_cd, bl.pay_loc_nm,

	bl.fnl_dest_loc_cd, '' AS fnl_dest_nod_cd, bl.fnl_dest_loc_nm,

	bl.obrd_dt_tm,

	bl.trnk_vsl_cd, bl.trnk_vsl_nm, bl.trnk_voy,
	bl.etd_dt_tm, bl.eta_dt_tm,
	bl.mk_txt, bl.desc_txt, bl.rmk,

	bl.dept_cd, bl.modi_tms, 
	bnd.issued_by AS issued_by, 
	(select max(eng_usr_nm) from tb_usr where usrid = bnd.issued_by )  AS proc_usrnm,
	bl.modi_ofc_cd AS proc_ofccd, bl.dept_cd AS proc_dept_cd,

	CASE WHEN isNull(bnd.sls_ofc_cd,'') = '' THEN bl.modi_ofc_cd ELSE bnd.sls_ofc_cd END AS sls_ofc_cd,
	CASE WHEN isNull(bnd.sls_dept_cd,'') = '' THEN bl.dept_cd ELSE bnd.sls_dept_cd END AS sls_dept_cd ,
	CASE WHEN isNull(bnd.sls_usrid,'') = '' THEN #f_usrId# ELSE bnd.sls_usrid END AS sls_usrid,
	CASE WHEN isNull(bnd.sls_usr_nm,'') = '' THEN #f_usrNm# ELSE bnd.sls_usr_nm END AS sls_usr_nm,
	<!-- OFVFOUR-7976: [MATRIX] ADDING CS PIC ON ALL B/L ENTRY AND TRADE PARTNER ENTRY SCREEN -->
    CASE WHEN isNull(bnd.cs_usrid,'') = '' THEN #f_usrId# ELSE bnd.cs_usrid END AS cs_usrid,
    CASE WHEN isNull(bnd.cs_usr_nm,'') = '' THEN #f_usrNm# ELSE bnd.cs_usr_nm END AS cs_usr_nm,

	shp.trdp_cd AS shpr_trdp_cd, shp.trdp_nm AS shpr_trdp_nm, shp.trdp_addr AS
	shpr_trdp_addr,
	cne.trdp_cd AS cnee_trdp_cd, cne.trdp_nm AS cnee_trdp_nm, cne.trdp_addr AS
	cnee_trdp_addr,
	ntf.trdp_cd AS ntfy_trdp_cd, ntf.trdp_nm AS ntfy_trdp_nm, ntf.trdp_addr AS
	ntfy_trdp_addr,
	lnr.trdp_cd AS lnr_trdp_cd, lnr.trdp_nm AS lnr_trdp_nm, lnr.trdp_pic AS
	lnr_trdp_pic,
	agent.trdp_cd AS agent_trdp_cd, agent.trdp_nm AS agent_trdp_nm, agent.trdp_addr AS
	agent_trdp_addr, agent.trdp_pic AS agent_trdp_pic,
	prnr.trdp_cd AS prnr_trdp_cd, prnr.trdp_nm AS prnr_trdp_nm, prnr.trdp_addr AS
	prnr_trdp_addr,
	carr.trdp_cd AS carr_trdp_cd, carr.trdp_nm AS carr_trdp_nm, carr.trdp_pic AS
	carr_trdp_pic,
	prn2.trdp_cd AS prnr_trdp_cd2, prn2.trdp_nm AS prnr_trdp_nm2, prn2.trdp_pic AS
	prnr_trdp_pic2,
	third.trdp_cd AS third_trdp_cd, third.trdp_nm AS third_trdp_nm, third.trdp_pic AS
	third_trdp_pic,

	bl.sad_txt,
	bl.cargo_tp_cd,
	bl.curr_cd,
	bl.ref_no,
	bl.sub_bl_no,
	bl.mbl_ref_no,
	bl.post_dt,
	bl.sub_mbl_flg,
	bl.state_cd,
	bl.grs_wgt1,
	bl.act_wgt1,
	bl.meas1,
	bl.size_ut_cd,
	bl.agent_rt,
	bl.agent_amt,
	bl.agent_curr_cd,
	bl.cust_rt,
	bl.cust_amt,
	bl.cust_curr_cd,
	bl.profit_share,
	bl.express_tp_cd,
	bl.iss_loc_cd1,
	bl.iss_loc_nm1,
	bl.trans_shipment,
	bl.itn_no,
	bl.onward_rout,
	bl.clean_on_board,
	bl.frt_term_c_cd,
	bl.frt_term_a_cd,
	bl.obrd_dt_tm1,
	bl.ref_ofc_cd,
	bl.exp_ref_no,
	bl.obl_tp_cd,
	bl.broker_rt,
	bl.doc_cut_off_dt,
	bl.rcv_wh_cd,
	(SELECT eng_nm FROM tb_trdp x where x.trdp_cd = bl.rcv_wh_cd) AS rcv_wh_nm,
	bl.sc_no,
	bl.cnt_cd,
	bl.mk_grs_wgt,
	bl.mk_grs_wgt1,
	bl.mk_meas,
	bl.mk_meas1,
	bl.f_eta_dt_tm,
	bl.d_eta_dt_tm,
	bl.avail_dt_tm,
	bl.lfd_dt_tm,
	bl.go_dt_tm,
	bl.rcvd_dt_tm,
	bl.rlsd_dt_tm,
	bl.te,
	bl.it_no,
	bl.it_loc,
	bl.bond_carr_cd,
	bl.bond_no,
	bl.goods_at,
	bl.goods_value,
	bl.door_loc_cd,
	bl.fnl_wh_cd,
	(SELECT eng_nm FROM tb_trdp x where x.trdp_cd = bl.fnl_wh_cd) AS fnl_wh_nm,
	bl.org_bl_rcvd_flg,
	bl.ror_flg,
	bl.rlsd_flg,
	bl.rlsd_usrid,
	bl.te_dt_tm,
	bl.ams_no,
	bl.isf_no,
	bl.carr_trdp_cd1,
	(SELECT eng_nm FROM tb_trdp x where x.trdp_cd = carr_trdp_cd1) AS
	carr_trdp_nm1,
	bl.cy_trdp_cd,
	<!-- JPT 오류 수정 eng_nm to locl_nm 2018.01.15 (S) -->
	(SELECT case when (SELECT OPT_VAL FROM TB_SYS_OPT WHERE OPT_KEY = 'MULTI_LANGUAGE') = 'Y'
	             then locl_nm
	             else eng_nm
	        end
	   FROM tb_trdp x where x.trdp_cd = cy_trdp_cd) AS cy_trdp_nm,
	bl.cfs_trdp_cd,
	(SELECT case when (SELECT OPT_VAL FROM TB_SYS_OPT WHERE OPT_KEY = 'MULTI_LANGUAGE') = 'Y'
	             then locl_nm
	             else eng_nm
	        end
	   FROM tb_trdp x where x.trdp_cd = cfs_trdp_cd) AS cfs_trdp_nm,
	<!-- JPT 오류 수정 eng_nm to locl_nm 2018.01.15 (E) -->
	bl.rt_trdp_cd,
	(SELECT eng_nm FROM tb_trdp x where x.trdp_cd = rt_trdp_cd) AS rt_trdp_nm,
	bl.imp_ref_no,
	bl.cust_ref_no,
	bl.att_mk_txt,
	bl.att_desc_txt,
	bl.cntr_info,
	bl.desc_txt1,
	reserve_field01,
	reserve_field02,
	reserve_field03,
	reserve_field04,
	reserve_field05,
	reserve_field06,
	reserve_field11,
	bl.cut_off_dt,	<!-- #33408 OEM B/L Entry 화면에서 Port Cut-Off Date, Time 값이 저장 안됨 -->
	bl.rail_cut_off_dt,
	bl.pu_trdp_cd,
	(SELECT eng_nm FROM tb_trdp x where x.trdp_cd = bl.pu_trdp_cd) as pu_trdp_nm
	<!-- #1743 [Split - 1] [PATENT]OEM B/L Pickup Date/Time 필요 -->
	,ISNULL(bnd.pkup_dt, '') as pu_trdp_dt
	,bl.etd_por_tm
	,bl.ccn_no
	,bl.ccn_dt
	,bl.pre_ccn_no
	,bl.mnf_fr_loc
	,bl.mnf_to_loc
	,bnd.intg_bkg_seq AS bkg_seq
	,(select post_dt_imp from tb_ofc ofc where ofc.ofc_cd = bl.ref_ofc_cd and ofc.delt_flg = 'N') as i_post_dt_imp
	,bnd.ctrb_ofc_cd
	,bnd.ctrb_dept_cd
	,bnd.ctrb_ratio_yn
	,bnd.ctrb_mgn
    ,bnd.cfs_rmk
    ,ISNULL(bnd.port_open_dt,'') as port_open_dt
	,ISNULL(bnd.VGM_CUT_OFF_DT,'') as vgm_cut_off_dt 
	,bnd.svc_lane_nm    <!--  #943  [PATENT] Lane 추가  -->
	,bl.po_no <!-- #1056 [OEM Entry]PO# 항목 추가 및 연계 -->
	<!-- #1619 [CLT] Original B/L Type- 항목 정리,bnd.bl_rlse_tp_cd  --><!--#1430 [PATENT] 0215_15 B/L TYPE DIVERSELY  -->
	
	,act.trdp_cd AS act_shpr_trdp_cd,  act.trdp_nm AS act_shpr_trdp_nm, bl.act_shp_info, bl.nomi_flg
	<!-- #1804 [Split - 1] [PATENT] Payment Verification - 기능보완  -->
	,bnd.verify_flag  
	,bl.pre_vsl_cd
	,bl.pre_vsl_nm
	,bl.pre_voy
    ,bnd.ts1_port_cd
    ,bnd.ts1_port_nm
    ,bnd.ts1_etd_dt_tm
    ,bnd.ts1_eta_dt_tm 
    ,bl.wgt_disp_cd <!-- #1821 [PATENT] B/L 옵션 항목 - 기능 확인 -->	
    ,bnd.jb_tmplt_seq
    ,bnd.inter_use_flag  <!-- #657 [OCEAN BLUE, IMPEX] B/L SELECTION FLAG TO SHOW ON VISIBILITY PORTAL -->
    ,bnd.bk_usrid <!-- #1424 -->
    ,bl.prnr_ref_no
    ,bnd.item_no
    ,bnd.org_tp
    ,bnd.org_cd
	<!-- OFVFOUR-8115 [BNX] Adding Berth Date Field in OIM and OIH Entry -->
    ,bl.berth_dt
    FROM tb_intg_bl bl

	JOIN tb_add_info_bnd bnd
	ON bl.intg_bl_seq = bnd.intg_bl_seq AND bnd.bnd_clss_cd = #bnd_clss_cd#
	AND bnd.delt_flg = 'N'

	LEFT OUTER JOIN tb_bl_prnr shp
	ON bl.intg_bl_seq = shp.intg_bl_seq AND shp.bl_trdp_tp_cd = 'S01' AND
	shp.delt_flg = 'N'

	LEFT OUTER JOIN tb_bl_prnr cne
	ON bl.intg_bl_seq = cne.intg_bl_seq AND cne.bl_trdp_tp_cd = 'C01' AND
	cne.delt_flg = 'N'

	LEFT OUTER JOIN tb_bl_prnr ntf
	ON bl.intg_bl_seq = ntf.intg_bl_seq AND ntf.bl_trdp_tp_cd = 'N01' AND
	ntf.delt_flg = 'N'

	LEFT OUTER JOIN tb_bl_prnr lnr
	ON bl.intg_bl_seq = lnr.intg_bl_seq AND lnr.bl_trdp_tp_cd = 'L01' AND
	lnr.delt_flg = 'N'

	LEFT OUTER JOIN tb_bl_prnr agent
	ON bl.intg_bl_seq = agent.intg_bl_seq AND agent.bl_trdp_tp_cd = 'A01' AND
	agent.delt_flg = 'N'

	LEFT OUTER JOIN tb_bl_prnr prnr
	ON bl.intg_bl_seq = prnr.intg_bl_seq AND prnr.bl_trdp_tp_cd = 'P01' AND
	prnr.delt_flg = 'N'

	LEFT OUTER JOIN tb_bl_prnr carr
	ON bl.intg_bl_seq = carr.intg_bl_seq AND carr.bl_trdp_tp_cd = 'B01' AND
	carr.delt_flg = 'N'

	LEFT OUTER JOIN tb_bl_prnr prn2
	ON bl.intg_bl_seq = prn2.intg_bl_seq AND prn2.bl_trdp_tp_cd = 'P03' AND
	prn2.delt_flg = 'N'

	LEFT OUTER JOIN tb_bl_prnr third
	ON bl.intg_bl_seq = third.intg_bl_seq AND third.bl_trdp_tp_cd = 'T01' AND
	third.delt_flg = 'N'
	
	LEFT OUTER JOIN tb_bl_prnr act
    ON bl.intg_bl_seq = act.intg_bl_seq  AND act.bl_trdp_tp_cd = 'S02' AND 
    act.delt_flg = 'N'

	LEFT OUTER JOIN(SELECT INTG_BL_SEQ AS INTG_BL_SEQ1, BL_STS_CD AS BL_STS_CD1 FROM TB_INTG_BL_BLCK) BLCK 
	ON BL.INTG_BL_SEQ = BLCK.INTG_BL_SEQ1
	
	WHERE bl.delt_flg = 'N' AND bl.biz_clss_cd = 'M' AND bl.air_sea_clss_cd = #air_sea_clss_cd#
		<isNotEmpty property="f_intg_bl_seq">
			AND bl.intg_bl_seq = #f_intg_bl_seq#
		</isNotEmpty>
		<isNotEmpty property="f_sr_no">
			AND bl.sr_no = #f_sr_no#        AND     bl.sr_seq IS NOT NULL
		</isNotEmpty>
		<isNotEmpty property="f_bl_no">
			AND bl.bl_no = #f_bl_no#
		</isNotEmpty>
		<isNotEmpty property="f_ref_no">
			AND bl.ref_no = #f_ref_no#
		</isNotEmpty>
		<isNotEmpty property="f_lnr_bkg_no">
			AND bl.lnr_bkg_no = #f_lnr_bkg_no#
		</isNotEmpty>
        <isNotEmpty property="f_hbl_intg_bl_seq">
            AND bl.intg_bl_seq = (SELECT rlt_intg_bl_seq FROM tb_intg_bl_rlt WHERE intg_bl_seq = #f_hbl_intg_bl_seq# AND delt_flg = 'N')          
        </isNotEmpty>
        <isEqual property="f_uod_flg" compareValue="N">
			AND  (BND.ISSUED_BY = #opr_usrid# or BND.SLS_USRID = #opr_usrid#)
		</isEqual> 
    </select>
    
    <update id="updateINTG_MBL_INFO" parameterClass="SeeMasterBLVO">
        UPDATE  tb_intg_bl
           SET  lnr_bkg_no     = #lnr_bkg_no#,         shp_mod_cd     = #shp_mod_cd#,          bl_ser_no  = #bl_ser_no#,
				bl_no          = #bl_no#,
	   			
                frt_term_cd    = #frt_term_cd#,        rep_cmdt_cd    = #rep_cmdt_cd#,         rep_cmdt_nm= #rep_cmdt_nm#,
                pck_qty        = #pck_qty#,            pck_ut_cd      = #pck_ut_cd#,
                grs_wgt        = #grs_wgt#,            grs_wgt_ut_cd  = #grs_wgt_ut_cd#,
                act_wgt        = #act_wgt#,            act_wgt_ut_cd  = #act_wgt_ut_cd#,
                meas           = #meas#,               meas_ut_cd     = #meas_ut_cd#,

                fm_svc_term_cd = #fm_svc_term_cd#,     to_svc_term_cd = #to_svc_term_cd#,      srd_flg    = #srd_flg#,

                por_cd         = #por_cd#,             por_nm     = #por_nm#,
                pol_cd         = #pol_cd#,             pol_nod_cd     = #pol_nod_cd#,          pol_nm     = #pol_nm#,
                pod_cd         = #pod_cd#,             pod_nod_cd     = #pod_nod_cd#,          pod_nm     = #pod_nm#,
                del_cd         = #del_cd#,             del_nm     = #del_nm#,
                iss_loc_cd     = #iss_loc_cd#,         iss_loc_nm     = #iss_loc_nm#,
	            pay_loc_cd     = #pay_loc_cd#,         pay_loc_nm     = #pay_loc_nm#,
	   
                fnl_dest_loc_cd= #fnl_dest_loc_cd#,    fnl_dest_loc_nm= #fnl_dest_loc_nm#,

                obrd_dt_tm     = #obrd_dt_tm#,

                trnk_vsl_cd    = #trnk_vsl_cd#,        trnk_vsl_nm    = #trnk_vsl_nm#,         trnk_voy   = #trnk_voy#,

                bl_iss_dt      = #bl_iss_dt#,         
                etd_dt_tm      = #etd_dt_tm#,          eta_dt_tm = #eta_dt_tm#,

                mk_txt         = #mk_txt#,             desc_txt   = #desc_txt#,                 rmk       = #rmk#,

				<!-- #6312 [Binex-LA] Last Modified by 수정 issue -->
                modi_usrid     = #proc_usrid#,          modi_ofc_cd    = #proc_ofccd#,          dept_cd = #proc_dept_cd#,
                modi_usr_nm    = #proc_usrnm#,          modi_tms       = GETUTCDATE(),

sad_txt = #sad_txt#,
hbl_tp_cd = #hbl_tp_cd#,
cargo_tp_cd = #cargo_tp_cd#,                
curr_cd = #curr_cd#,
ref_no = #ref_no#,
sub_bl_no = #sub_bl_no#,
mbl_ref_no = #mbl_ref_no#,
post_dt = #post_dt#,
sub_mbl_flg = #sub_mbl_flg#,
state_cd = #state_cd#,
grs_wgt1 = #grs_wgt1#,
act_wgt1 = #act_wgt1#,
meas1 = #meas1#,
size_ut_cd = #size_ut_cd#,
agent_rt = #agent_rt#,
agent_amt = #agent_amt#,
agent_curr_cd = #agent_curr_cd#,
cust_rt = #cust_rt#,
cust_amt = #cust_amt#,
cust_curr_cd = #cust_curr_cd#,
profit_share = #profit_share#,
express_tp_cd = #express_tp_cd#,
iss_loc_cd1 = #iss_loc_cd1#,
iss_loc_nm1 = #iss_loc_nm1#,
trans_shipment = #trans_shipment#,
itn_no = #itn_no#,
onward_rout = #onward_rout#,
clean_on_board = #clean_on_board#,
frt_term_c_cd = #frt_term_c_cd#,
frt_term_a_cd = #frt_term_a_cd#,
obrd_dt_tm1 = #obrd_dt_tm1#,
ref_ofc_cd = #ref_ofc_cd#,
exp_ref_no = #exp_ref_no#,
obl_tp_cd = #obl_tp_cd#,
broker_rt = #broker_rt#,
cut_off_dt = #cut_off_dt#,
rcv_wh_cd = #rcv_wh_cd#,
sc_no = #sc_no#,
cnt_cd = #cnt_cd#,
mk_grs_wgt = #mk_grs_wgt#,
mk_grs_wgt1 = #mk_grs_wgt1#,
mk_meas = #mk_meas#,
mk_meas1 = #mk_meas1#,
f_eta_dt_tm = #f_eta_dt_tm#,
d_eta_dt_tm = #d_eta_dt_tm#,
avail_dt_tm = #avail_dt_tm#,
lfd_dt_tm = #lfd_dt_tm#,
go_dt_tm = #go_dt_tm#,
rcvd_dt_tm = #rcvd_dt_tm#,
rlsd_dt_tm = #rlsd_dt_tm#,
te = #te#,
it_no = #it_no#,
it_loc = #it_loc#,
bond_carr_cd = #bond_carr_cd#,
bond_no = #bond_no#,
goods_at = #goods_at#,
goods_value = #goods_value#,
door_loc_cd = #door_loc_cd#,
fnl_wh_cd = #fnl_wh_cd#,
org_bl_rcvd_flg = #org_bl_rcvd_flg#,
ror_flg = #ror_flg#,
rlsd_flg = #rlsd_flg#,
rlsd_usrid = #rlsd_usrid#,
te_dt_tm = #te_dt_tm#,
ams_no = #ams_no#,
isf_no = #isf_no#,
carr_trdp_cd1 = #carr_trdp_cd1#,
cy_trdp_cd = #cy_trdp_cd#,
cfs_trdp_cd = #cfs_trdp_cd#,
rt_trdp_cd = #rt_trdp_cd#,
imp_ref_no = #imp_ref_no#,
cust_ref_no = #cust_ref_no#,
att_mk_txt = #att_mk_txt#,
att_desc_txt = #att_desc_txt#,
cntr_info = #cntr_info#,
desc_txt1 = #desc_txt1#,
reserve_field01 = #reserve_field01#,
reserve_field02 = #reserve_field02#,
reserve_field03 = #reserve_field03#,
reserve_field04 = #reserve_field04#,
reserve_field05 = #reserve_field05#,
reserve_field06 = #reserve_field06#,
reserve_field11 = #reserve_field11#,
rail_cut_off_dt = #rail_cut_off_dt#,
pu_trdp_cd      = #pu_trdp_cd#,
etd_por_tm		= #etd_por_tm#,
doc_cut_off_dt = #doc_cut_off_dt#
,ccn_no = #ccn_no#
,ccn_dt = #ccn_dt#
,pre_ccn_no = #pre_ccn_no#
,mnf_fr_loc = #mnf_fr_loc#
,mnf_to_loc = #mnf_to_loc#
,po_no = #po_no#
,act_shp_info = #act_shp_info#
,nomi_flg = #nomi_flg#
,pre_vsl_cd = #pre_vsl_cd#
,pre_vsl_nm = #pre_vsl_nm#
,pre_voy = #pre_voy#
,wgt_disp_cd = #wgt_disp_cd#
,prnr_ref_no=#prnr_ref_no#
<!-- OFVFOUR-8115 [BNX] Adding Berth Date Field in OIM and OIH Entry -->
,berth_dt = #berth_dt#
         WHERE  intg_bl_seq    = cast(#intg_bl_seq# as varchar)
    </update>
    
    <!-- //#3873 Transshipped정보 HB/L 동기화 -->
    <update id="updateHBL_INTG_INFO_TS" parameterClass="HashMap">
    	 UPDATE  tb_intg_bl
            SET  pre_vsl_cd = #pre_vsl_cd#
				,pre_vsl_nm = #pre_vsl_nm#
				,pre_voy    = #pre_voy# 
    	  WHERE intg_bl_seq IN (SELECT intg_bl_seq FROM tb_intg_bl_rlt WHERE rlt_intg_bl_seq = cast(#intg_bl_seq# as varchar))
    </update>
    <!-- //#3873 Transshipped정보 HB/L 동기화 -->
    <update id="updateHBL_ADD_INFO_BND_TS" parameterClass="HashMap">
    	 UPDATE  tb_add_info_bnd
            SET  ts1_port_cd = #ts1_port_cd#
				,ts1_port_nm = #ts1_port_nm#
				,ts1_etd_dt_tm = #ts1_etd_dt_tm#
				,ts1_eta_dt_tm = #ts1_eta_dt_tm#
    	  WHERE intg_bl_seq IN (SELECT intg_bl_seq FROM tb_intg_bl_rlt WHERE rlt_intg_bl_seq = cast(#intg_bl_seq# as varchar))
    </update>
    
        
    <update id="updateBLREF_NO" parameterClass="HashMap">
    	 UPDATE  tb_intg_bl
            SET  ref_no     = #ref_no#  
    	  WHERE  intg_bl_seq = cast(#intg_bl_seq# as varchar) 
    	    OR   intg_bl_seq IN (SELECT intg_bl_seq FROM tb_intg_bl_rlt WHERE rlt_intg_bl_seq = cast(#intg_bl_seq# as varchar))
    </update>
    
    <update id="updateJNREF_NO" parameterClass="HashMap">
    	 UPDATE  tb_jnr_dtl
            SET  ref_no     = #ref_no#  
    	  WHERE  ref_no     = #sel_ref_no# 
    </update>
    
    <!--BL정보를 업데이트함  -->
    <update id="updateHBL_MBL_DT" parameterClass="SeeMasterBLVO">
    	/* updateHBL_MBL_DT */
        UPDATE  tb_intg_bl
           SET  etd_dt_tm  = #etd_dt_tm#
               ,obrd_dt_tm = #obrd_dt_tm#
               <!-- 30284 [BINEX]OEH On-Board Date 동기화 -->
               ,obrd_dt_tm1 = #etd_dt_tm#
               <isNotEmpty property="clean_on_board">
	           ,clean_on_board = #clean_on_board#
				</isNotEmpty>
           	   ,post_dt	   = #post_dt#
           	   ,ref_ofc_cd	   = #ref_ofc_cd#
         WHERE  intg_bl_seq IN (SELECT intg_bl_seq FROM tb_intg_bl_rlt WHERE rlt_intg_bl_seq = cast(#intg_bl_seq# as varchar))
           AND  biz_clss_cd = 'H'
    </update>
    
    <update id="updateHBL_MBL_DT_IMP" parameterClass="SeeMasterBLVO">
    	/* updateHBL_MBL_DT_IMP */
        UPDATE  tb_intg_bl
           SET  eta_dt_tm  = #eta_dt_tm#
           	   ,post_dt	   = #post_dt#
           	   ,ref_ofc_cd	   = #ref_ofc_cd#
         WHERE  intg_bl_seq IN (SELECT intg_bl_seq FROM tb_intg_bl_rlt WHERE rlt_intg_bl_seq = cast(#intg_bl_seq# as varchar))
           AND  biz_clss_cd = 'H'
    </update>

    <!-- #4956 [JTC] expoet the customer sync request -->
    <update id="updateHBL_MBL_CUSTOMER" parameterClass="SeeMasterBLVO">
        /* bl.cmm.updateHBL_MBL_CUSTOMER */
        UPDATE A
           SET TRDP_CD = B.TRDP_CD
             , TRDP_NM = B.TRDP_NM
          FROM TB_BL_PRNR A
          JOIN (
                SELECT BL.INTG_BL_SEQ
                     , BL.SHP_MOD_CD
                     , PRNR.BL_TRDP_TP_CD
                     , PRNR.TRDP_CD
                     , PRNR.TRDP_NM
                  FROM TB_INTG_BL BL
                  JOIN TB_BL_PRNR PRNR
                    ON BL.INTG_BL_SEQ = PRNR.INTG_BL_SEQ
                   AND PRNR.BL_TRDP_TP_CD = 'S02'
                 WHERE BL.DELT_FLG        = 'N'
                   AND BL.INTG_BL_SEQ     = cast(#intg_bl_seq# as varchar)
               ) B
            ON A.INTG_BL_SEQ IN (SELECT INTG_BL_SEQ FROM TB_INTG_BL_RLT WHERE RLT_INTG_BL_SEQ = cast(#intg_bl_seq# as varchar))
           AND A.BL_TRDP_TP_CD = B.BL_TRDP_TP_CD
           AND B.SHP_MOD_CD = 'FCL'
    </update>

    <update id="updateMBL_FRT_INV_POST_DT" parameterClass="SeeMasterBLVO">
        /* bl.cmm.updateMBL_FRT_INV_POST_DT */
        UPDATE  TB_FRT 
           SET  INV_POST_DT = #post_dt#
         WHERE  <![CDATA[INV_SEQ <> '']]>
           AND  FRT_SEQ IN (
                            SELECT FRT.FRT_SEQ
                              FROM TB_FRT FRT
                              LEFT OUTER JOIN TB_INV_DTL IDTL ON FRT.INV_SEQ = IDTL.INV_SEQ
                              <!-- #6877 [AIF] MB/L ETD CHANGE MAKING CHANGES TO TRUCKER'S INVOICE DATE -->
                              LEFT OUTER JOIN TB_TRDP TRDP ON FRT.TRDP_CD = TRDP.TRDP_CD
                              LEFT OUTER JOIN (SELECT INV_SEQ AS INV_SEQ1
                                                    , INV_NO AS INV_NO1
                                                    , CLT_CMPL_FLG AS CLT_CMPL_FLG1
                                                 FROM TB_INV_DTL_BLCK
                                               ) BLCK
                                ON IDTL.INV_SEQ = BLCK.INV_SEQ1
                               AND IDTL.INV_NO = BLCK.INV_NO1 
                             WHERE FRT.INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
                               AND ISNULL(ISNULL(BLCK.CLT_CMPL_FLG1, IDTL.CLT_CMPL_FLG), 'N') = 'N'
                               AND ISNULL(IDTL.PAY_AMT, 0) = 0
                               AND (CASE WHEN (SELECT opt_val  FROM TB_SYS_OPT WHERE OPT_KEY = 'BL_SYNC_INV_POST_DT') = 'N' THEN 0
										 WHEN (SELECT opt_val  FROM TB_SYS_OPT WHERE OPT_KEY = 'BL_SYNC_INV_POST_DT') = 'Y' THEN 1
				 						 WHEN (SELECT opt_val  FROM TB_SYS_OPT WHERE OPT_KEY = 'BL_SYNC_INV_POST_DT') = 'P' AND  TRDP.TRDP_TP_CD IN ('AC','LN') THEN 1
									END) = 1)
    </update>
    
    <update id="updateHBL_FRT_INV_POST_DT" parameterClass="SeeMasterBLVO">
    	UPDATE  TB_FRT 
		   SET  INV_POST_DT = #post_dt#
		 WHERE  <![CDATA[INV_SEQ <> '']]>
		   AND  FRT_SEQ IN (
				SELECT  FRT.FRT_SEQ
				  FROM  TB_FRT FRT
	   LEFT OUTER JOIN  TB_INV_DTL IDTL ON FRT.INV_SEQ = IDTL.INV_SEQ
	   <!-- #6877 [AIF] MB/L ETD CHANGE MAKING CHANGES TO TRUCKER'S INVOICE DATE -->
	   LEFT OUTER JOIN  TB_TRDP TRDP ON FRT.TRDP_CD = TRDP.TRDP_CD
	   LEFT OUTER JOIN (SELECT INV_SEQ AS INV_SEQ1, INV_NO AS INV_NO1, CLT_CMPL_FLG AS CLT_CMPL_FLG1 FROM TB_INV_DTL_BLCK) BLCK ON IDTL.INV_SEQ = BLCK.INV_SEQ1 AND IDTL.INV_NO = BLCK.INV_NO1 
				 WHERE  FRT.INTG_BL_SEQ IN (
						SELECT  INTG_BL_SEQ
						  FROM  TB_INTG_BL_RLT RLT
						 WHERE  RLT.RLT_INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
						 <isNotEmpty property="hbl_intg_bl_seq">
						   AND  RLT.INTG_BL_SEQ = #hbl_intg_bl_seq#
			   			 </isNotEmpty>
						)
				   AND  ISNULL(ISNULL(BLCK.CLT_CMPL_FLG1, IDTL.CLT_CMPL_FLG), 'N') = 'N'
				   AND  ISNULL(IDTL.PAY_AMT, 0) = 0
				   AND (CASE WHEN (SELECT opt_val  FROM TB_SYS_OPT WHERE OPT_KEY = 'BL_SYNC_INV_POST_DT') = 'N' THEN 0
										 WHEN (SELECT opt_val  FROM TB_SYS_OPT WHERE OPT_KEY = 'BL_SYNC_INV_POST_DT') = 'Y' THEN 1
				 						 WHEN (SELECT opt_val  FROM TB_SYS_OPT WHERE OPT_KEY = 'BL_SYNC_INV_POST_DT') = 'P' AND TRDP.TRDP_TP_CD IN ('AC','LN') THEN 1
									END) = 1
				  )
    </update>
    
    <update id="updateMBL_INV_DTL_INV_POST_DT" parameterClass="SeeMasterBLVO">
		<!--
		UPDATE  TB_INV_DTL
		   SET  INV_POST_DT = #post_dt#
			    ,modi_tms			= getdate()
		 WHERE  INV_SEQ IN (
				SELECT  IDTL.INV_SEQ
				  FROM  TB_FRT FRT
	   LEFT OUTER JOIN  TB_INV_DTL IDTL ON FRT.INV_SEQ = IDTL.INV_SEQ
				 WHERE  FRT.INTG_BL_SEQ = #intg_bl_seq#
				   AND  ISNULL(IDTL.CLT_CMPL_FLG, 'N') = 'N'
				   AND  ISNULL(IDTL.PAY_AMT, 0) = 0
			  GROUP BY  IDTL.INV_SEQ
		   		)
		-->
		
		UPDATE  tb_inv_dtl
		   SET  inv_post_dt = #post_dt#
			   ,inv_dt = CASE WHEN y.post_dt_inv = 'POST' 
		                      THEN #post_dt#
		                      ELSE inv_dt
		                 END     
		 	   ,inv_due_dt = CASE WHEN y.post_dt_inv = 'POST' 
		                      	  THEN y.due_dt
		                          ELSE inv_due_dt
		                     END
		       ,modi_usrid 	= #proc_usrid#
		       ,modi_ofc_cd	= #proc_ofccd#              
			   ,modi_tms	= GETUTCDATE()
		  FROM  tb_inv_dtl dtl
		      , (SELECT inv.inv_seq,
		                (select post_dt_inv from tb_ofc where ofc_cd = inv.ofc_cd) AS post_dt_inv,
						CONVERT(VARCHAR
		                       ,case when trdp.cr_term_cd = 'A' 
								     then dateadd(d, convert(int, trdp.cr_term_dt), #post_dt#)
								     when trdp.cr_term_cd = 'B' 
								     then dateadd(month,1,#post_dt#)-(day(#post_dt#))
								     when trdp.cr_term_cd = 'C' 
								     then dateadd(month,2,#post_dt#)-(day(#post_dt#))
								     when trdp.cr_term_cd = 'D' 
								     then dateadd(d, convert(int, trdp.cr_term_dt), dateadd(month,1,#post_dt#)-(day(#post_dt#)))
								end
							   ,112) AS due_dt
					FROM tb_inv inv
						 JOIN tb_inv_dtl dtl ON inv.inv_seq = dtl.inv_seq
						 LEFT OUTER JOIN tb_trdp trdp ON inv.trdp_cd = trdp.trdp_cd 
						 LEFT OUTER JOIN (SELECT INV_SEQ AS INV_SEQ1, INV_NO AS INV_NO1, CLT_CMPL_FLG AS CLT_CMPL_FLG1 FROM TB_INV_DTL_BLCK) BLCK ON DTL.INV_SEQ = BLCK.INV_SEQ1 AND DTL.INV_NO = BLCK.INV_NO1 
				   WHERE inv.inv_seq IN (
										SELECT  frt.inv_seq
										  FROM  tb_frt frt
										  <!-- #6877 [AIF] MB/L ETD CHANGE MAKING CHANGES TO TRUCKER'S INVOICE DATE -->
										  LEFT OUTER JOIN TB_TRDP TRDP ON FRT.TRDP_CD = TRDP.TRDP_CD
										 WHERE  ISNULL(frt.inv_seq, '') != ''
										   AND  frt.intg_bl_seq = cast(#intg_bl_seq# as varchar)
										   AND (CASE WHEN (SELECT opt_val FROM TB_SYS_OPT WHERE OPT_KEY = 'BL_SYNC_INV_POST_DT') = 'N' THEN 0
				 									 WHEN (SELECT opt_val  FROM TB_SYS_OPT WHERE OPT_KEY = 'BL_SYNC_INV_POST_DT') = 'Y' THEN 1
													 WHEN (SELECT opt_val  FROM TB_SYS_OPT WHERE OPT_KEY = 'BL_SYNC_INV_POST_DT') = 'P' AND TRDP.TRDP_TP_CD IN ('AC','LN') THEN 1
												END) = 1
									 	 GROUP BY  frt.inv_seq
										) 
				     AND ISNULL(ISNULL(BLCK.CLT_CMPL_FLG1, DTL.CLT_CMPL_FLG), 'N') = 'N'
			         AND ISNULL(dtl.pay_amt, 0) = 0 							
				) y						
			WHERE dtl.inv_seq = y.inv_seq
			  
    </update>
    
    <update id="updateMBL_INV_DTL_INV_DT" parameterClass="SeeMasterBLVO">
		UPDATE  TB_INV_DTL
		   SET  INV_DT = #post_dt#
		 	  , INV_DUE_DT = Y.DUE_DT
			    ,modi_tms			= GETUTCDATE()
		  FROM  TB_INV_DTL DTL
		  LEFT OUTER JOIN (SELECT INV_SEQ AS INV_SEQ1, INV_NO AS INV_NO1, CLT_CMPL_FLG AS CLT_CMPL_FLG1 FROM TB_INV_DTL_BLCK) BLCK ON DTL.INV_SEQ = BLCK.INV_SEQ1 AND DTL.INV_NO = BLCK.INV_NO1 
		      , (
					SELECT INV.INV_SEQ, 
					case when trdp.cr_term_cd = 'A' then CONVERT(varchar, DATEADD(DD, CONVERT(numeric, trdp.cr_term_dt), CONVERT(datetime, #post_dt#)), 112) else
					      case when trdp.cr_term_cd = 'B' then CONVERT(varchar, DATEADD(DD, -datepart(DD, DATEADD(M, 1, CONVERT(datetime, #post_dt#))), DATEADD(M, 1, CONVERT(datetime, #post_dt#))), 112) else 
					      case when trdp.cr_term_cd = 'C' then CONVERT(varchar, DATEADD(DD, -datepart(DD, DATEADD(M, 2, CONVERT(datetime, #post_dt#))), DATEADD(M, 2, CONVERT(datetime, #post_dt#))), 112) else 
					      case when trdp.cr_term_cd = 'D' then CONVERT(varchar, DATEADD(DD, CONVERT(numeric, trdp.cr_term_dt), DATEADD(DD, -datepart(DD, DATEADD(M, 1, CONVERT(datetime, #post_dt#))), DATEADD(M, 1, CONVERT(datetime, #post_dt#)))), 112) else ''
					      end end end end AS DUE_DT
					FROM TB_INV INV
					JOIN TB_INV_DTL DTL ON INV.INV_SEQ = DTL.INV_SEQ
					LEFT OUTER JOIN TB_TRDP TRDP ON INV.TRDP_CD = TRDP.TRDP_CD
					JOIN (
							SELECT  FRT.INV_SEQ
							  FROM  TB_FRT FRT
							 WHERE  <![CDATA[FRT.INV_SEQ <> '']]>
							   AND  FRT.INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
							   AND  FRT.SELL_BUY_TP_CD != 'B'
						  GROUP BY  FRT.INV_SEQ
							
						) X ON DTL.INV_SEQ = X.INV_SEQ
						) Y
						
						WHERE DTL.INV_SEQ = Y.INV_SEQ
						  AND ISNULL(ISNULL(BLCK.CLT_CMPL_FLG1, DTL.CLT_CMPL_FLG), 'N') = 'N'
						  AND ISNULL(DTL.PAY_AMT, 0) = 0
    </update>
    
    <update id="updateHBL_INV_DTL_INV_POST_DT" parameterClass="SeeMasterBLVO">
		<!--		
		UPDATE  TB_INV_DTL
		   SET  INV_POST_DT = #post_dt#
			    ,modi_tms			= getdate()
		 WHERE  INV_SEQ IN (
				SELECT  IDTL.INV_SEQ
				  FROM  TB_FRT FRT
	   LEFT OUTER JOIN  TB_INV_DTL IDTL ON FRT.INV_SEQ = IDTL.INV_SEQ
				 WHERE  FRT.INTG_BL_SEQ IN (
						SELECT  INTG_BL_SEQ
						  FROM  TB_INTG_BL_RLT RLT
						 WHERE  RLT.RLT_INTG_BL_SEQ = #intg_bl_seq#
						)
				   AND  ISNULL(IDTL.CLT_CMPL_FLG, 'N') = 'N'
				   AND  ISNULL(IDTL.PAY_AMT, 0) = 0
			  GROUP BY  IDTL.INV_SEQ
		   		)
		-->   		
		UPDATE  tb_inv_dtl
		   SET  inv_post_dt = #post_dt#
			   ,inv_dt = CASE WHEN y.post_dt_inv = 'POST' 
		                      THEN #post_dt#
		                      ELSE inv_dt
		                 END     
		 	   ,inv_due_dt = CASE WHEN y.post_dt_inv = 'POST' 
		                      	  THEN y.due_dt
		                          ELSE inv_due_dt
		                     END
		       ,modi_usrid 	= #proc_usrid#
		       ,modi_ofc_cd	= #proc_ofccd#           
			   ,modi_tms	= GETUTCDATE()
		  FROM  tb_inv_dtl dtl
		      , (SELECT inv.inv_seq,
		                (select post_dt_inv from tb_ofc where ofc_cd = inv.ofc_cd) AS post_dt_inv,
						CONVERT(VARCHAR
		                       ,case when trdp.cr_term_cd = 'A' 
								     then dateadd(d, convert(int, trdp.cr_term_dt), #post_dt#)
								     when trdp.cr_term_cd = 'B' 
								     then dateadd(month,1,#post_dt#)-(day(#post_dt#))
								     when trdp.cr_term_cd = 'C' 
								     then dateadd(month,2,#post_dt#)-(day(#post_dt#))
								     when trdp.cr_term_cd = 'D' 
								     then dateadd(d, convert(int, trdp.cr_term_dt), dateadd(month,1,#post_dt#)-(day(#post_dt#)))
								end
							   ,112) AS due_dt
					FROM tb_inv inv
						 JOIN tb_inv_dtl dtl ON inv.inv_seq = dtl.inv_seq
						 LEFT OUTER JOIN tb_trdp trdp ON inv.trdp_cd = trdp.trdp_cd 
						 LEFT OUTER JOIN (SELECT INV_SEQ AS INV_SEQ1, INV_NO AS INV_NO1, CLT_CMPL_FLG AS CLT_CMPL_FLG1 FROM TB_INV_DTL_BLCK) BLCK ON DTL.INV_SEQ = BLCK.INV_SEQ1 AND DTL.INV_NO = BLCK.INV_NO1 
				   WHERE inv.inv_seq IN (
										SELECT  frt.inv_seq
										  FROM  tb_frt frt
										  <!-- #6877 [AIF] MB/L ETD CHANGE MAKING CHANGES TO TRUCKER'S INVOICE DATE -->
										  LEFT OUTER JOIN TB_TRDP TRDP ON FRT.TRDP_CD = TRDP.TRDP_CD, 
										  tb_intg_bl_rlt rlt
										 WHERE  ISNULL(frt.inv_seq, '') != ''
										   AND  rlt.rlt_intg_bl_seq = cast(#intg_bl_seq# as varchar)
										 <!-- 4018 JAPT HBL 의 FILE 변경 시 Invoice Post Date 변경 건 -->
										 <isNotEmpty property="hbl_intg_bl_seq">
										   AND  RLT.INTG_BL_SEQ = #hbl_intg_bl_seq#
							   			 </isNotEmpty>										   
										   AND  frt.intg_bl_seq = rlt.intg_bl_seq
										   AND (CASE WHEN (SELECT opt_val FROM TB_SYS_OPT WHERE OPT_KEY = 'BL_SYNC_INV_POST_DT') = 'N' THEN 0
				 									 WHEN (SELECT opt_val  FROM TB_SYS_OPT WHERE OPT_KEY = 'BL_SYNC_INV_POST_DT') = 'Y' THEN 1
													 WHEN (SELECT opt_val  FROM TB_SYS_OPT WHERE OPT_KEY = 'BL_SYNC_INV_POST_DT') = 'P' AND  TRDP.TRDP_TP_CD IN ('AC','LN') THEN 1
												END) = 1
									 	 GROUP BY  frt.inv_seq
										) 
				     AND ISNULL(ISNULL(BLCK.CLT_CMPL_FLG1, DTL.CLT_CMPL_FLG), 'N') = 'N'
			         AND ISNULL(dtl.pay_amt, 0) = 0   								
				) y						
			WHERE dtl.inv_seq = y.inv_seq
				   		
    </update>
    
    <update id="updateHBL_INV_DTL_INV_DT" parameterClass="SeeMasterBLVO">
		UPDATE  TB_INV_DTL
		   SET  INV_DT = #post_dt#
		      , INV_DUE_DT = Y.DUE_DT
			    ,modi_tms			= GETUTCDATE()
		  FROM  TB_INV_DTL DTL
		  LEFT OUTER JOIN (SELECT INV_SEQ AS INV_SEQ1, INV_NO AS INV_NO1, CLT_CMPL_FLG AS CLT_CMPL_FLG1 FROM TB_INV_DTL_BLCK) BLCK ON DTL.INV_SEQ = BLCK.INV_SEQ1 AND DTL.INV_NO = BLCK.INV_NO1 
		      , (
					SELECT INV.INV_SEQ, 
					case when trdp.cr_term_cd = 'A' then CONVERT(varchar, DATEADD(DD, CONVERT(numeric, trdp.cr_term_dt), CONVERT(datetime, #post_dt#)), 112) else
					      case when trdp.cr_term_cd = 'B' then CONVERT(varchar, DATEADD(DD, -datepart(DD, DATEADD(M, 1, CONVERT(datetime, #post_dt#))), DATEADD(M, 1, CONVERT(datetime, #post_dt#))), 112) else 
					      case when trdp.cr_term_cd = 'C' then CONVERT(varchar, DATEADD(DD, -datepart(DD, DATEADD(M, 2, CONVERT(datetime, #post_dt#))), DATEADD(M, 2, CONVERT(datetime, #post_dt#))), 112) else 
					      case when trdp.cr_term_cd = 'D' then CONVERT(varchar, DATEADD(DD, CONVERT(numeric, trdp.cr_term_dt), DATEADD(DD, -datepart(DD, DATEADD(M, 1, CONVERT(datetime, #post_dt#))), DATEADD(M, 1, CONVERT(datetime, #post_dt#)))), 112) else ''
					      end end end end AS DUE_DT
					FROM TB_INV INV
					JOIN TB_INV_DTL DTL ON INV.INV_SEQ = DTL.INV_SEQ
					LEFT OUTER JOIN TB_TRDP TRDP ON INV.TRDP_CD = TRDP.TRDP_CD 
					JOIN (
							SELECT  FRT.INV_SEQ
							  FROM  TB_FRT FRT
							 WHERE  <![CDATA[FRT.INV_SEQ <> '']]>
							   AND  FRT.INTG_BL_SEQ IN (SELECT  BL.INTG_BL_SEQ
														  FROM  TB_INTG_BL BL
														 WHERE  BL.INTG_BL_SEQ IN ( SELECT  RLT.INTG_BL_SEQ 
 																					  FROM  TB_INTG_BL_RLT RLT
 																					 WHERE  RLT.RLT_INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
																					 <isNotEmpty property="hbl_intg_bl_seq">
																					   AND  RLT.INTG_BL_SEQ = #hbl_intg_bl_seq#
																		   			 </isNotEmpty>																					
																				   )
														   AND  BL.DELT_FLG = 'N'
														)
							   AND  FRT.SELL_BUY_TP_CD != 'B'
						  GROUP BY  FRT.INV_SEQ
							
						) X ON DTL.INV_SEQ = X.INV_SEQ
						) Y
						
						WHERE DTL.INV_SEQ = Y.INV_SEQ
						  AND ISNULL(ISNULL(BLCK.CLT_CMPL_FLG1, DTL.CLT_CMPL_FLG), 'N') = 'N'
						  AND ISNULL(DTL.PAY_AMT, 0) = 0
    </update>
    
    <update id="updateFRT_SLS_OFC_CD" parameterClass="SeeMasterBLVO">
    	/* BlCmmSQL.xml -> updateFRT_SLS_OFC_CD */
		UPDATE  TB_FRT
		   SET  SLS_OFC_CD = '$ref_ofc_cd$'
			   ,modi_tms   = GETUTCDATE()
	     WHERE  1=1
		   AND  FRT_SEQ IN (
							SELECT  FRT.FRT_SEQ
							  FROM  TB_FRT FRT WITH (NOLOCK)
							 WHERE  1=1
							   AND  (FRT.INTG_BL_SEQ = '$intg_bl_seq$'
							         OR
							         FRT.INTG_BL_SEQ IN (SELECT  BL.INTG_BL_SEQ
														   FROM  TB_INTG_BL BL WITH (NOLOCK)
														  WHERE  BL.INTG_BL_SEQ IN (SELECT  RLT.INTG_BL_SEQ 
																					 FROM  TB_INTG_BL_RLT RLT WITH (NOLOCK)
																					WHERE  RLT.RLT_INTG_BL_SEQ = '$intg_bl_seq$'
																				   )
														   AND  BL.DELT_FLG = 'N'
														)
									)					
						   )
		   AND SLS_OFC_CD != '$ref_ofc_cd$'				   
    </update>
    
    <update id="updateINV_OFC_CD" parameterClass="SeeMasterBLVO">
    	/* BlCmmSQL.xml -> updateINV_OFC_CD */
		UPDATE  TB_INV
		   SET  OFC_CD = '$ref_ofc_cd$'
			   ,modi_tms   = GETUTCDATE()
	     WHERE  1=1
		   AND  INV_SEQ IN (
							SELECT  IDTL.INV_SEQ
							  FROM  TB_FRT FRT WITH (NOLOCK)
				                    JOIN  TB_INV_DTL IDTL WITH(INDEX(xif1tb_inv_dtl), nolock) 
				                    ON FRT.INV_SEQ = IDTL.INV_SEQ
							 WHERE  1=1
							   AND  (FRT.INTG_BL_SEQ = '$intg_bl_seq$'
							         OR
							         FRT.INTG_BL_SEQ IN (SELECT  BL.INTG_BL_SEQ
														   FROM  TB_INTG_BL BL WITH (NOLOCK)
														  WHERE  BL.INTG_BL_SEQ IN (SELECT  RLT.INTG_BL_SEQ 
																					 FROM  TB_INTG_BL_RLT RLT WITH (NOLOCK)
																					WHERE  RLT.RLT_INTG_BL_SEQ = '$intg_bl_seq$'
																				   )
														   AND  BL.DELT_FLG = 'N'
														)
									)		
							)
		   AND  OFC_CD != '$ref_ofc_cd$'					
    </update>
    
    <update id="updateJNR_DTL_OFC_CD" parameterClass="SeeMasterBLVO">
		UPDATE  TB_JNR_DTL
		   SET  OFC_CD   = #ref_ofc_cd#
		       ,P_OFC_CD = #ref_ofc_cd#
			   ,modi_tms   = GETUTCDATE()
	     WHERE  1=1
		   AND  INV_SEQ IN (
							SELECT  IDTL.INV_SEQ
							  FROM  TB_FRT FRT WITH (NOLOCK)
				                    JOIN  TB_INV_DTL IDTL WITH(INDEX(xif1tb_inv_dtl), nolock) 
				                    ON FRT.INV_SEQ  = IDTL.INV_SEQ
							 WHERE  1=1
							   AND  (FRT.INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
							         OR
							         FRT.INTG_BL_SEQ IN (SELECT  BL.INTG_BL_SEQ
														   FROM  TB_INTG_BL BL WITH (NOLOCK)
														  WHERE  BL.INTG_BL_SEQ IN (SELECT  RLT.INTG_BL_SEQ 
																					 FROM  TB_INTG_BL_RLT RLT WITH (NOLOCK)
																					WHERE  RLT.RLT_INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
																				   )
														   AND  BL.DELT_FLG = 'N'
														)
									)		
						   )
		   AND  OFC_CD != #ref_ofc_cd#					   
    </update>
    
    <!-- House B/L Info select  Chungrue 2011.11.02  -->
    <select id="selectHBL_CustomerInfo" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
        SELECT  bl.intg_bl_seq,     				bl.bl_no,
        		shp.trdp_nm AS shpr_trdp_nm,		shp.trdp_addr AS shpr_trdp_addr,
        		ntf.trdp_nm AS ntf_trdp_nm,			ntf.trdp_addr AS ntf_trdp_addr
          FROM  tb_intg_bl bl
				LEFT OUTER JOIN tb_bl_prnr shp
            ON  bl.intg_bl_seq = shp.intg_bl_seq  AND shp.bl_trdp_tp_cd = 'S01' AND shp.delt_flg = 'N'
				LEFT OUTER JOIN tb_bl_prnr ntf
            ON  bl.intg_bl_seq = ntf.intg_bl_seq  AND ntf.bl_trdp_tp_cd = 'N01' AND ntf.delt_flg = 'N'
         WHERE  bl.bl_no = #txt_hbl_no#
    </select>
    
    <!-- selectIntg_Bl_Info select  -->
    <select id="selectIntg_Bl_Info" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
        SELECT  bl.intg_bl_seq,     				bl.bl_no,
        		bl.cust_ref_no
          FROM  tb_intg_bl bl
         WHERE  bl.intg_bl_seq = cast(#intg_bl_seq# as varchar)
    </select>
    
    <select id="selectChkRlt" parameterClass="HashMap" resultClass="String">
    	SELECT RLT_INTG_BL_SEQ
		  FROM TB_INTG_BL_RLT
		 WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
    </select>
    
    <select id="selectChkRltIntgBl" parameterClass="HashMap" resultClass="String">
    	SELECT RLT_INTG_BL_SEQ
		  FROM TB_INTG_BL_RLT
		 WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
		    AND RLT_INTG_BL_SEQ = #rlt_intg_bl_seq#
    </select>
    
     <update id="deleteRltIntgBl" parameterClass="HashMap">
		/* BlCmmSQL.xml >  deleteRltIntgBl  */
        DELETE  tb_intg_bl_rlt
         WHERE  intg_bl_seq= cast(#intg_bl_seq# as varchar)
             AND RLT_INTG_BL_SEQ = #rlt_intg_bl_seq#
    </update>
    
    <insert id="insertEXP_INTG_BL_RLT" parameterClass="HashMap">
    	INSERT INTO  tb_intg_bl_rlt(
                 intg_bl_seq,     rlt_intg_bl_seq,   intg_bl_rlt_cd,
                 rgst_usrid,      rgst_ofc_cd,       rgst_tms,         
                 modi_usrid,      modi_ofc_cd,       modi_tms,     delt_flg
        )VALUES(
                #intg_bl_seq#,    #rlt_intg_bl_seq#, #intg_bl_rlt_cd#,
                #proc_usrid#,     #proc_ofccd#,      getdate(),
                #proc_usrid#,     #proc_ofccd#,      GETUTCDATE(),        'N'
        )
    </insert>
    
    <update id="updateRefInfo" parameterClass="HashMap">
    	UPDATE tb_intg_bl
    	   SET ref_no = #ref_no#
    	     , ref_ofc_cd = #ref_ofc_cd#
    	 WHERE intg_bl_seq = cast(#intg_bl_seq# as varchar)
    </update>
    
    
    
    <update id="updatePost_dt" parameterClass="HashMap">
    	UPDATE tb_intg_bl
    	   SET post_dt = ( select post_dt  from tb_intg_bl where intg_bl_seq = #rlt_intg_bl_seq# )    	    
    	 WHERE intg_bl_seq = cast(#intg_bl_seq# as varchar)
    </update>
    
    <select id="selectRefNo" parameterClass="HashMap" resultClass="String">
    /*  BlCmmSQL.xml > selectRefNo */
    	 DECLARE @max  varchar(max)  = '' 
		 SELECT TOP 1 @max + ISNULL(bl.air_sea_clss_cd, '')       <!-- 0 -->
		 	+ '^^' + ISNULL(bl.ref_ofc_cd, '')             <!-- 1 -->
			+ '^^' + CONVERT(varchar, bl.intg_bl_seq)      <!-- 2 -->
			+ '^^' + ISNULL(bl.bl_no, '')                  <!-- 3 -->
			+ '^^' + ISNULL(bl.trnk_vsl_nm, '')            <!-- 4 -->
			+ '^^' + ISNULL(bl.trnk_voy, '')               <!-- 5 -->
			+ '^^' + ISNULL(lnr.trdp_cd, '')               <!-- 6 -->
			+ '^^' + ISNULL(lnr.trdp_nm, '')               <!-- 7 -->
			+ '^^' + ISNULL(bl.pod_cd, '')                 <!-- 8 -->
			+ '^^' + ISNULL(bl.pod_nm, '')                 <!-- 9 -->
			+ '^^' + ISNULL(bl.pol_cd, '')                 <!-- 10 -->
			+ '^^' + ISNULL(bl.pol_nm, '')                 <!-- 11 -->
			+ '^^' + ISNULL(bl.etd_dt_tm, '')              <!-- 12 -->
			+ '^^' + ISNULL(bl.eta_dt_tm, '')              <!-- 13 -->
			+ '^^' + ISNULL(bl.flt_no, '')                 <!-- 14 -->
			+ '^^' + ISNULL(bl.pod_nod_cd, '')             <!-- 15 -->
			+ '^^' + ISNULL(bl.pol_nod_cd, '')             <!-- 16  -->
			+ '^^' + ISNULL(bl.lnr_bkg_no, '')             <!-- 17 -->
			
			+ '^^' + ISNULL(bl.por_cd, '')                 <!-- 18 -->
			+ '^^' + ISNULL(bl.por_nm, '')                 <!-- 19 -->
			+ '^^' + ISNULL(bl.del_cd, '')                 <!-- 20 -->
			+ '^^' + ISNULL(bl.del_nm, '')                 <!-- 21 -->
			+ '^^' + ISNULL(bl.shp_mod_cd, '')             <!-- 22 -->
			
			+ '^^' + ISNULL(cnee.trdp_cd, '')              <!-- 23 -->
			+ '^^' + ISNULL(cnee.trdp_nm, '')              <!-- 24 -->
			
			+ '^^' + ISNULL(prnr2.trdp_cd, '')             <!-- 25 -->
			+ '^^' + ISNULL(prnr2.trdp_nm, '')             <!-- 26 -->
			
			+ '^^' + ISNULL(bl.it_no, '')                  <!-- 27 -->
			+ '^^' + ISNULL(bl.te_dt_tm, '')               <!-- 28 -->
			+ '^^' + ISNULL(bl.it_loc, '')                 <!-- 29 -->
			+ '^^' + ISNULL(bl.cfs_trdp_cd, '')            <!-- 30 -->
			+ '^^' + ISNULL((SELECT x.eng_nm FROM tb_trdp x WHERE x.trdp_cd = bl.cfs_trdp_cd), '')                 <!-- 31 -->
			+ '^^' + ISNULL(bl.fm_svc_term_cd, '')         <!-- 32 -->
			+ '^^' + ISNULL(bl.to_svc_term_cd, '')         <!-- 33 -->
			
			+ '^^' + ISNULL(shpr.trdp_cd, '')              <!-- 34 -->
			+ '^^' + ISNULL(shpr.trdp_nm, '')              <!-- 35 -->
			+ '^^' + ISNULL(shpr.trdp_addr, '')            <!-- 36 -->
			
			+ '^^' + ISNULL(cnee.trdp_addr, '')            <!-- 37 -->
			+ '^^' + ISNULL(prnr2.trdp_addr, '')           <!-- 38 -->
			+ '^^' + ISNULL(bl.sub_bl_no, '')              <!-- 39 -->
			
			+ '^^' + ISNULL(bl.cy_trdp_cd, '')             <!-- 40 -->
			+ '^^' + ISNULL((SELECT x.eng_nm FROM tb_trdp x WHERE x.trdp_cd = bl.cy_trdp_cd), '')                 <!-- 41 -->
			
			+ '^^' + ISNULL(bl.ts1_port_cd, '')            <!-- 42 -->
			+ '^^' + ISNULL(bl.ts1_flt_no, '')             <!-- 43 -->
			+ '^^' + ISNULL(bl.ts2_port_cd, '')            <!-- 44 -->
			+ '^^' + ISNULL(bl.ts2_flt_no, '')             <!-- 45 -->
			+ '^^' + ISNULL(bl.ts3_port_cd, '')            <!-- 46 -->
			+ '^^' + ISNULL(bl.ts3_flt_no, '')             <!-- 47 -->
			
			+ '^^' + ISNULL(bl.frt_loc_cd, '')             <!-- 48 -->
			+ '^^' + ISNULL((SELECT x.eng_nm FROM tb_trdp x WHERE x.trdp_cd = bl.frt_loc_cd), '')                 <!-- 49 -->
			
			+ '^^' + ISNULL(bl.f_eta_dt_tm, '')            <!-- 50 -->
			+ '^^' + ISNULL(bl.post_dt, '')                <!-- 51 -->
			
			+ '^^' + ISNULL(bl.frt_loc_cd, '')             <!-- 52 -->
			+ '^^' + ISNULL((SELECT x.eng_nm FROM tb_trdp x WHERE x.trdp_cd = bl.frt_loc_cd), '')                 <!-- 53 -->
			+ '^^' + ISNULL(bl.f_eta_dt_tm, '')            <!-- 54 -->
			+ '^^' + ISNULL(bl.post_dt, '')                <!-- 55 -->
			
			<!-- jsjang 2013.7.10 요구사항 #16112 (DIRECT B/L 인 경우 HBL 에 MBL 정보 COPY)  자동연계요건 Start -->
			+ '^^' + ISNULL(bl.hbl_tp_cd, '')              <!-- 56 -->
			+ '^^' + ISNULL(bnd.mrn_no, '')                <!-- 57 -->
			+ '^^' + ISNULL(ntfy.trdp_cd, '')              <!-- 58 -->
			+ '^^' + ISNULL(ntfy.trdp_nm, '')              <!-- 59 -->
			+ '^^' + ISNULL(ntfy.trdp_addr, '')            <!-- 60 -->
			
			+ '^^' + ISNULL(bl.fnl_dest_loc_cd, '')        <!-- 61 -->
			+ '^^' + ISNULL(bl.fnl_dest_loc_nm, '')        <!-- 62 -->
			+ '^^' + ISNULL(bl.profit_share, '')           <!-- 63 -->
			
			+ '^^' + ISNULL(convert(varchar,bl.pck_qty), '')   <!-- 64 -->
			+ '^^' + ISNULL(convert(varchar,bl.pck_ut_cd), '') <!-- 65 -->
			+ '^^' + ISNULL(convert(varchar,bl.grs_wgt), '')   <!-- 66 -->
			+ '^^' + ISNULL(convert(varchar,bl.grs_wgt1), '')  <!-- 67 -->
			+ '^^' + ISNULL(convert(varchar,bl.meas), '')      <!-- 68 -->
			+ '^^' + ISNULL(convert(varchar,bl.meas1), '')     <!-- 69 -->
			+ '^^' + ISNULL(CONVERT(varchar(10),convert(DATETIME, bl.bl_iss_dt), 110), '')                 <!-- 70 -->
			+ '^^' + ISNULL(prnr.trdp_cd, '')                  <!-- 71 -->
			+ '^^' + ISNULL(prnr.trdp_nm, '')                  <!-- 72 -->
			+ '^^' + ISNULL(prnr.trdp_addr, '')                <!-- 73 -->
			
			+ '^^' + ISNULL(bl.FRT_TERM_CD, '')                <!-- 74 -->
			+ '^^' + ISNULL(bl.shp_mod_cd, '')                 <!-- 75 -->
			+ '^^' + ISNULL(bl.obl_tp_cd, '')                  <!-- 76 --> <!-- #1619 [CLT] Original B/L Type- 항목 정리 -->
			+ '^^' + ISNULL(bl.rlsd_flg, '')                   <!-- 77 -->
			+ '^^' + ISNULL(CONVERT(varchar(10),convert(DATETIME, bl.rlsd_dt_tm), 110), '')                 <!-- 78 -->
			
			+ '^^' + ISNULL(CONVERT(varchar(10),convert(DATETIME, bl.bl_dt_tm), 110), '')                 <!-- 79 -->
			+ '^^' + ISNULL(bl.disp_ntfy_flg, '')              <!-- 80 -->
			+ '^^' + ISNULL(bl.cargo_tp_cd, '')                <!-- 81 -->
			
			+ '^^' + ISNULL(bl.rep_cmdt_cd, '')                <!-- 82 -->
			+ '^^' + ISNULL(bl.rep_cmdt_nm, '')                <!-- 83 -->
			
			+ '^^' + ISNULL(convert(varchar,bl.chg_wgt), '')   <!-- 84 -->
			+ '^^' + ISNULL(convert(varchar,bl.chg_wgt1), '')  <!-- 85 -->
			
			+ '^^' + ISNULL(convert(varchar,bl.vol_wgt), '')   <!-- 86 -->
			+ '^^' + ISNULL(convert(varchar,bl.vol_meas), '')  <!-- 87 -->
			
			+ '^^' + ISNULL(bl.size_ut_cd, '')                 <!-- 88 -->
			+ '^^' + ISNULL(bl.decl_cstms_val, '')             <!-- 89 -->
			+ '^^' + ISNULL(bl.rt_clss_cd, '')                 <!-- 90 -->
			
			+ '^^' + ISNULL(bl.imp_ref_no, '')                 <!-- 91 -->
			+ '^^' + ISNULL(bl.curr_cd, '')                    <!-- 92 -->
			+ '^^' + ISNULL(bl.cntr_info, '')                  <!-- 93 -->
				<!-- jsjang 2013.8.5 요구사항 #19207 Booking Confirmation - Container Summary -->
			<!-- jsjang 2013.7.10 요구사항 #16112 (DIRECT B/L 인 경우 HBL 에 MBL 정보 COPY)  자동연계요건 End -->
			
			<!-- #20553 : ETD of Place of Receipt 추가, jsjang 2013.9.30 -->
			+ '^^' + ISNULL(CONVERT(varchar(10),convert(DATETIME, case when bl.etd_por_tm = '' then null else bl.etd_por_tm end  ), 110), '')	<!-- 94 -->
			
			<!-- #23821 : [BINEX] Issuing Carrier, MAWB -> HAWB, jsjang 2013.11.25 -->
			+ '^^' + ISNULL(iss.trdp_cd, '')                 <!-- 95 -->
			+ '^^' + ISNULL(iss.trdp_nm, '')                 <!-- 96 -->
			+ '^^' + ISNULL(iss.trdp_addr, '')												<!-- 97 -->
			+ '^^' + ISNULL(bl.ccn_no, '')													<!-- 98 -->
			+ '^^' + ISNULL(bl.mnf_fr_loc, '')												<!-- 99 -->
			+ '^^' + ISNULL(bl.mnf_to_loc, '')												<!-- 100 -->
			+ '^^' + ISNULL(bnd.fst_to_cd, '')	                                            <!-- 101 -->
			+ '^^' + ISNULL(bnd.fst_to_nm, '')	                                            <!-- 102 -->
			+ '^^' + ISNULL(bnd.hbl_ser_pfx, '')	                                        <!-- 103 -->
			+ '^^' + ISNULL(bnd.hbl_ser_no, '')	                                            <!-- 104 --> 
			
			+ '^^' + ISNULL(case when bl.sto_start_dt = '' then '' else ISNULL(CONVERT(varchar(10),convert(DATETIME,bl.sto_start_dt),110),'') end, '')   <!-- 105 -->
			
			+ '^^' + ISNULL(bnd.ctrb_dept_cd, '')	                                            <!-- 106 -->
			+ '^^' + ISNULL(convert(varchar,bnd.ctrb_mgn), '')	                                <!-- 107 -->
			+ '^^' + ISNULL(bnd.ctrb_ofc_cd, '')	                                            <!-- 108 -->
			+ '^^' + ISNULL(bnd.ctrb_ratio_yn, '')	                                            <!-- 109 -->
			+ '^^' + ISNULL(bl.mk_txt, '')	                                                    <!-- 110 -->
			+ '^^' + ISNULL(bl.desc_txt, '')	                                                <!-- 111 -->
			+ '^^' + ISNULL(case when bl.eta_fpoe_tm = '' then '' else ISNULL(CONVERT(varchar(10),convert(DATETIME,substring(bl.eta_fpoe_tm, 0, 9)),110),'') end, '')<!-- 112 -->
			+ '^^' + ISNULL(case when bl.eta_fpoe_tm = '' then '' else substring(bl.eta_fpoe_tm, 9, 2) + ':' + substring(bl.eta_fpoe_tm, 11, 2) end, '')<!-- 113 -->
			
			+ '^^' + ISNULL(bl.first_port_cd, '')	                                            <!-- 114 -->
			+ '^^' + ISNULL((SELECT loc_nm FROM tb_loc X WHERE X.loc_cd = bl.first_port_cd), '') <!-- 115 -->
			+ '^^' + ISNULL(bl.hndl_info_txt, '')	                                            <!-- 116 -->
			+ '^^' + ISNULL(bl.acctg_info_txt, '')	                                            <!-- 117 -->
			+ '^^' + ISNULL(agent.trdp_cd, '')              <!-- 118 -->
			+ '^^' + ISNULL(agent.trdp_nm, '')              <!-- 119 -->
			+ '^^' + ISNULL(agent.trdp_addr, '')            <!-- 120 -->
			<!-- #1101 [Oceanland, Impex] V440 OE MBL Logic 변경 ? Mark and Description -->
			+ '^^' + ISNULL(bl.rmk, '')                     <!-- 121 -->
			+ '^^' + ISNULL(bl.desc_txt1, '')               <!-- 122 -->
			+ '^^' + ISNULL(bnd.cfs_rmk, '')                <!-- 123 -->
			+ '^^' + ISNULL(act.trdp_cd, '')                <!-- 124 -->
			+ '^^' + ISNULL(act.trdp_nm, '')                <!-- 125 -->
			+ '^^' + ISNULL(bl.act_shp_info, '')            <!-- 126 -->
			+ '^^' + ISNULL(bl.nomi_flg, '')                <!-- 127 -->
			<!-- 프로그램 수정요청 - RE: Testing Summary for Patent_02May -->
			+ '^^' + ISNULL(bl.pre_vsl_cd, '')              <!-- 128 -->
			+ '^^' + ISNULL(bl.pre_vsl_nm, '')              <!-- 129 -->
			+ '^^' + ISNULL(bl.pre_voy, '')                	<!-- 130 -->
			+ '^^' + ISNULL(bnd.ts1_port_cd, '')            <!-- 131 -->
			+ '^^' + ISNULL(bnd.ts1_port_nm, '')            <!-- 132 -->
        	+ '^^' + case when isnull(bnd.ts1_etd_dt_tm,'') != '' then SUBSTRING(bnd.ts1_etd_dt_tm,5,2) +'-' +SUBSTRING(bnd.ts1_etd_dt_tm,7,2) + '-' +SUBSTRING(bnd.ts1_etd_dt_tm,1,4) else '' end			
      		+ '^^' + case when isnull(bnd.ts1_eta_dt_tm,'') != '' then SUBSTRING(bnd.ts1_eta_dt_tm,5,2) +'-' +SUBSTRING(bnd.ts1_eta_dt_tm,7,2) + '-' +SUBSTRING(bnd.ts1_eta_dt_tm,1,4) else '' end  
<!-- 			+ '^^' + ISNULL(bnd.ts1_etd_dt_tm, '')          133
			+ '^^' + ISNULL(bnd.ts1_eta_dt_tm, '')          134
 -->		 
 			+ '^^' + ISNULL(bl.prnr_ref_no,'') <!-- 135 -->
 			+ '^^' + ISNULL((SELECT CITY_NM FROM TB_TRDP WHERE TRDP_CD = bl.ref_ofc_cd + 'MAINCMP'),'') <!-- 136 -->  
 			<!-- #3608 [JTC]OEH Entry 에 DOC Cut-Off Date 추가 -->
			+ '^^' + case when isnull(bl.doc_cut_off_dt,'') != '' then SUBSTRING(bl.doc_cut_off_dt,5,2) +'-' +SUBSTRING(bl.doc_cut_off_dt,7,2) + '-' +SUBSTRING(bl.doc_cut_off_dt,1,4) else '' end
			+ '^^' + ISNULL(case when bl.doc_cut_off_dt = '' then '' else substring(bl.doc_cut_off_dt, 9, 2) + ':' + substring(bl.doc_cut_off_dt, 11, 2) end, '')<!-- 138 -->
			
			<!-- #3811 [JAPT] POR,DEL,F.DEST & Sales PIC sync. -->
			+ '^^' + ISNULL(bnd.sls_ofc_cd, '')     <!-- 139 -->
			+ '^^' + ISNULL(bnd.sls_dept_cd, '')    <!-- 140 -->
			+ '^^' + ISNULL(bnd.sls_usrid, '')      <!-- 141 -->
			+ '^^' + ISNULL(bnd.sls_usr_nm, '')     <!-- 142 -->			
			+ '^^' + ISNULL(ofc.VSL_SHOW_FLG, '') 			<!-- 143 -->
 			+ '^^' + ISNULL(ofc.LOAD_PORT_SHOW_FLG, '')		<!-- 144 -->
 			<!-- OFVFOUR-7976: [MATRIX] ADDING CS PIC ON ALL B/L ENTRY AND TRADE PARTNER ENTRY SCREEN -->
            + '^^' + ISNULL(bnd.cs_usrid, '')      <!-- 145 -->
            + '^^' + ISNULL(bnd.cs_usr_nm, '')     <!-- 146 -->
 			<!-- OFVFOUR-8115 [BNX] Adding Berth Date Field in OIM and OIH Entry -->
 			+ '^^' + ISNULL(bl.berth_dt, '')                <!-- 147 -->
 			FROM tb_intg_bl bl
		   JOIN tb_add_info_bnd bnd
		     ON bl.intg_bl_seq = bnd.intg_bl_seq AND bnd.delt_flg = 'N'
LEFT OUTER JOIN tb_bl_prnr lnr 
			 ON bl.intg_bl_seq = lnr.intg_bl_seq AND lnr.bl_trdp_tp_cd = 'L01' AND lnr.delt_flg = 'N'
LEFT OUTER JOIN tb_bl_prnr shpr 
			 ON bl.intg_bl_seq = shpr.intg_bl_seq AND shpr.bl_trdp_tp_cd = 'S01' AND shpr.delt_flg = 'N'
LEFT OUTER JOIN tb_bl_prnr cnee 
			 ON bl.intg_bl_seq = cnee.intg_bl_seq AND cnee.bl_trdp_tp_cd = 'C01' AND cnee.delt_flg = 'N'
			 
			 <!-- jsjang 2013.7.10 요구사항 #16112 (DIRECT B/L 인 경우 HBL 에 MBL 정보 COPY)  자동연계요건 Start -->
LEFT OUTER JOIN tb_bl_prnr ntfy 
			ON bl.intg_bl_seq = ntfy.intg_bl_seq AND ntfy.bl_trdp_tp_cd = 'N01' AND ntfy.delt_flg = 'N'	
LEFT OUTER JOIN tb_bl_prnr prnr 
			ON bl.intg_bl_seq = prnr.intg_bl_seq AND prnr.bl_trdp_tp_cd = 'P01' AND prnr.delt_flg = 'N'			
			 <!-- jsjang 2013.7.10 요구사항 #16112 (DIRECT B/L 인 경우 HBL 에 MBL 정보 COPY)  자동연계요건 End -->
			 		 
LEFT OUTER JOIN tb_bl_prnr prnr2 
			ON bl.intg_bl_seq = prnr2.intg_bl_seq AND prnr2.bl_trdp_tp_cd = 'P03' AND prnr2.delt_flg = 'N'
			 
			<!-- #23821 : [BINEX] Issuing Carrier, MAWB -> HAWB, jsjang 2013.11.25 -->
LEFT OUTER JOIN tb_bl_prnr iss
            ON   bl.intg_bl_seq = iss.intg_bl_seq  AND iss.bl_trdp_tp_cd = 'I01' AND iss.delt_flg = 'N' 			 
LEFT OUTER JOIN tb_bl_prnr agent
            ON bl.intg_bl_seq = agent.intg_bl_seq  AND agent.bl_trdp_tp_cd = 'A01' AND agent.delt_flg = 'N'
LEFT OUTER JOIN tb_bl_prnr act
    		ON bl.intg_bl_seq = act.intg_bl_seq  AND act.bl_trdp_tp_cd = 'S02' AND act.delt_flg = 'N'
   LEFT OUTER JOIN tb_ofc ofc ON bl.REF_OFC_CD = ofc.OFC_CD  AND ofc.DELT_FLG = 'N'    
		  WHERE ref_no = #ref_no#
		    AND biz_clss_cd = 'M'
		    AND bl.delt_flg = 'N'
		    AND bl.air_sea_clss_cd = #air_sea_clss_cd#
		    AND bnd.bnd_clss_cd = #bnd_clss_cd#
    </select>
    
    <select id="selectAesSeaHouseBLInfo1" parameterClass="String" resultClass="com.clt.apps.fis.see.bmd.housebl.dto.AesBlInfoVO">
    	/* selectAesSeaHouseBLInfo1 */
		SELECT	hbl.bl_no AS hbl_no,		hbl.lnr_bkg_no,			hbl.cnt_cd,
				(SELECT cnt_eng_nm FROM tb_cnt x WHERE x.cnt_cd = hbl.cnt_cd) AS cnt_nm,
				hbl.state_cd,
				(SELECT state_eng_nm FROM tb_state x WHERE x.state_cd = hbl.state_cd AND x.cnt_cd = 'US') AS state_nm,
				ofc.aes_rspn_email AS rsps_eml,
				(SELECT x.ams_loc_val FROM tb_loc x WHERE x.loc_cd = hbl.pol_cd) AS pol_cd,
				(SELECT x.loc_nm FROM tb_loc x WHERE x.loc_cd = hbl.pol_cd) AS pol_nm,
				hbl.etd_dt_tm,
				(SELECT x.ams_loc_val FROM tb_loc x WHERE x.loc_cd = hbl.pod_cd) AS pod_cd,
				(SELECT x.loc_nm FROM tb_loc x WHERE x.loc_cd = hbl.pod_cd) AS pod_nm,
				(SELECT scac_cd FROM tb_trdp x WHERE x.trdp_cd = lnr.trdp_cd) AS carr_trdp_cd1,
				lnr.trdp_nm  AS carr_trdp_nm1,
				hbl.trnk_vsl_cd,			hbl.trnk_vsl_nm, hbl.trnk_voy,
				(SELECT cnt_cd FROM tb_vsl x WHERE x.vsl_cd = hbl.trnk_vsl_cd) AS vsl_flg,
				hbl.rep_cmdt_cd,			hbl.rep_cmdt_nm,
				cmdt.cmdt_ut1,				cmdt.cmdt_ut2,
				hbl.pck_qty,				FLOOR(hbl.grs_wgt) AS wgt,
				'N' AS rt_flg,				'N' AS haz_flg,			'N' AS cntr_flg,
				'N' AS rcc_flg,				hbl.intg_bl_seq,
				shp.trdp_nm AS shp_nm,		shp.trdp_pic AS shp_pic_f,
				REPLACE(REPLACE(REPLACE(shp.trdp_phn,'-',''),'(',''),')','') AS shp_phn,			
				
				(select LGL_ADDR from tb_trdp where TRDP_CD = shp.trdp_cd) AS shp_addr,
				shptrdp.city_nm AS shp_city_nm,						shptrdp.state_cd AS shp_state_cd,
				REPLACE(shptrdp.rep_zip,'-','') AS shp_zip,			shptrdp.cnt_cd AS shp_cnt,
				shptrdp.tax_type AS shp_tax_type,					shptrdp.biz_no AS shp_id,
				
				cnee.trdp_nm AS ult_cnee_nm,		cnee.trdp_pic AS ult_cnee_pic,
				REPLACE(REPLACE(REPLACE(cnee.trdp_phn,'-',''),'(',''),')','')  AS ult_cnee_phn,		
				
				(select LGL_ADDR from tb_trdp where TRDP_CD = cnee.trdp_cd) AS ult_cnee_addr,
				cneetrdp.city_nm AS ult_cnee_city_nm,					cneetrdp.state_cd AS ult_cnee_state_cd,
				REPLACE(cneetrdp.rep_zip,'-','') AS ult_cnee_zip,		cneetrdp.cnt_cd AS ult_cnee_cnt,

				ofc.ofc_eng_nm AS fwd_nm,	ofc.aes_cntc_nm AS fwd_pic,
				REPLACE(REPLACE(REPLACE(ofc.ofc_phn,'-',''),'(',''),')','') AS fwd_phn,							

				isnull((select case when  CHARINDEX(CHAR(13),ofc.aes_addr) > 0 then 
				substring(ofc.aes_addr,0,(CHARINDEX(CHAR(13),ofc.aes_addr))) 
				else ofc.aes_addr end from tb_sys_opt where opt_key = 'AES_ADDR' and isnull(opt_val,'N') = 'Y'),ofc.aes_addr) AS fwd_addr,
				
				ofc.aes_city AS fwd_city_nm,						ofc.aes_state_cd AS fwd_state_cd,
				
				REPLACE(ofc.aes_zip,'-','') AS fwd_zip,				ofc.aes_cnt_cd AS fwd_cnt,
				ofc.tax_type AS fwd_tax_type, ofc.tax_no AS fwd_id,
				'N' AS ddtc_prty_certi_flg,	'N' AS ddtc_eq_flg,
				CASE WHEN
				(SELECT COUNT('X') FROM tb_cntr_list cntr
				  WHERE cntr.intg_bl_seq = hbl.intg_bl_seq ) > 0
				THEN 'Y' ELSE 'N' END AS cntr_add_flg
		  FROM	tb_intg_bl hbl

LEFT OUTER JOIN	tb_intg_bl_rlt rlt
			 ON rlt.intg_bl_seq = hbl.intg_bl_seq AND rlt.delt_flg = 'N'

LEFT OUTER JOIN tb_intg_bl mbl
			 ON mbl.intg_bl_seq = rlt.rlt_intg_bl_seq AND mbl.delt_flg = 'N'

LEFT OUTER JOIN tb_bl_prnr shp
			 ON shp.intg_bl_seq = hbl.intg_bl_seq AND shp.bl_trdp_tp_cd = 'S01' AND shp.delt_flg = 'N'
			
LEFT OUTER JOIN tb_trdp shptrdp
			 ON shptrdp.trdp_cd = shp.trdp_cd AND shptrdp.delt_flg = 'N'
			 
LEFT OUTER JOIN tb_bl_prnr cnee
			 ON cnee.intg_bl_seq = hbl.intg_bl_seq AND cnee.bl_trdp_tp_cd = 'C01' AND cnee.delt_flg = 'N'
			
LEFT OUTER JOIN tb_trdp cneetrdp
			 ON cneetrdp.trdp_cd = cnee.trdp_cd AND cneetrdp.delt_flg = 'N'
			 
LEFT OUTER JOIN tb_bl_prnr lnr
			 ON lnr.intg_bl_seq = hbl.intg_bl_seq AND lnr.bl_trdp_tp_cd = 'L01' AND shp.delt_flg = 'N'			 
			 
LEFT OUTER JOIN tb_cmdt_cd cmdt
			 ON cmdt.cmdt_cd = hbl.rep_cmdt_cd AND cmdt.delt_flg = 'N' AND cmdt.hs_grp_cd = 'SB'
			
LEFT OUTER JOIN tb_ofc ofc
			 ON ofc.ofc_cd = hbl.ref_ofc_cd AND ofc.delt_flg = 'N'

<!--#6754 [GENESIS] MBL의 Filling No. 메뉴얼 입력시 중복 생성 가능 이슈 [ #6570 관련 ]-->			 
LEFT OUTER JOIN TB_ADD_INFO_BND BND ON hbl.INTG_BL_SEQ = BND.INTG_BL_SEQ AND BND.delt_flg = 'N'
			 
		 WHERE	hbl.bl_no = #bl_no#
		   AND	hbl.delt_flg = 'N'
		   AND	hbl.biz_clss_cd = 'H'
		   AND	hbl.air_sea_clss_cd = 'S'
		   <!--#6754 [GENESIS] MBL의 Filling No. 메뉴얼 입력시 중복 생성 가능 이슈 [ #6570 관련 ]-->
		   AND bnd.BND_CLSS_CD = 'O'
    </select>
    
    <select id="selectAesAirHouseBLInfo1" parameterClass="String" resultClass="com.clt.apps.fis.see.bmd.housebl.dto.AesBlInfoVO">
    	/* selectAesAirHouseBLInfo1 */
		SELECT	hbl.bl_no AS hbl_no,		hbl.lnr_bkg_no,			'' AS cnt_cd,
				'' AS cnt_nm,
				hbl.state_cd,
				(SELECT state_eng_nm FROM tb_state x WHERE x.state_cd = hbl.state_cd AND x.cnt_cd = 'US') AS state_nm,
				ofc.aes_rspn_email AS rsps_eml,
				/* 20121131 OJG (SELECT x.ams_loc_val FROM tb_loc x WHERE x.loc_cd = hbl.pol_cd) AS pol_cd,*/
				(SELECT x.ams_loc_val FROM tb_loc x WHERE x.loc_cd = hbl.pol_cd) AS pol_cd,
				(SELECT x.loc_nm FROM tb_loc x WHERE x.loc_cd = hbl.pol_cd) AS pol_nm,
				SUBSTRING(ISNULL(hbl.etd_dt_tm,''),1,8) AS etd_dt_tm,
				(SELECT x.ams_loc_val FROM tb_loc x WHERE x.loc_cd = hbl.pod_cd) AS pod_cd,
				(SELECT x.loc_nm FROM tb_loc x WHERE x.loc_cd = hbl.pod_cd) AS pod_nm,
				(SELECT x.iata_cd FROM tb_bl_prnr lnr JOIN tb_trdp x ON x.trdp_cd = lnr.trdp_cd
				WHERE lnr.intg_bl_seq = hbl.intg_bl_seq AND lnr.bl_trdp_tp_cd = 'L01' AND lnr.delt_flg = 'N') AS carr_trdp_cd1,
				(SELECT lnr.trdp_nm FROM tb_bl_prnr lnr WHERE lnr.intg_bl_seq = hbl.intg_bl_seq
				AND lnr.bl_trdp_tp_cd = 'L01' AND lnr.delt_flg = 'N') AS carr_trdp_nm1,
				hbl.trnk_vsl_cd,			hbl.flt_no AS trnk_vsl_nm,
				(SELECT cnt_cd FROM tb_vsl x WHERE x.vsl_cd = hbl.trnk_vsl_cd) AS vsl_flg,
				hbl.rep_cmdt_cd,			hbl.rep_cmdt_nm,
				cmdt.cmdt_ut1,				cmdt.cmdt_ut2,
				hbl.pck_qty,				FLOOR(hbl.grs_wgt) AS wgt,
				'N' AS rt_flg,				'N' AS haz_flg,			'N' AS cntr_flg,
				'N' AS rcc_flg,				hbl.intg_bl_seq,
				shp.trdp_nm AS shp_nm,		shp.trdp_pic AS shp_pic_f,
				REPLACE(REPLACE(REPLACE(shp.trdp_phn,'-',''),'(',''),')','') AS shp_phn,
				(select LGL_ADDR from tb_trdp where TRDP_CD = shp.trdp_cd) AS shp_addr,
				shptrdp.city_nm AS shp_city_nm,						shptrdp.state_cd AS shp_state_cd,
				shptrdp.rep_zip AS shp_zip,							shptrdp.cnt_cd AS shp_cnt,
				shptrdp.tax_type AS shp_tax_type,					shptrdp.biz_no AS shp_id,
				
				cnee.trdp_nm AS ult_cnee_nm, cnee.trdp_pic AS ult_cnee_pic,
				REPLACE(REPLACE(REPLACE(cnee.trdp_phn,'-',''),'(',''),')','')  AS ult_cnee_phn,
				(select LGL_ADDR from tb_trdp where TRDP_CD = cnee.trdp_cd) AS ult_cnee_addr,
				cneetrdp.city_nm AS ult_cnee_city_nm,					cneetrdp.state_cd AS ult_cnee_state_cd,
				cneetrdp.rep_zip AS ult_cnee_zip,						cneetrdp.cnt_cd AS ult_cnee_cnt,
				
				ofc.ofc_eng_nm AS fwd_nm,	ofc.aes_cntc_nm AS fwd_pic,
				REPLACE(REPLACE(REPLACE(ofc.ofc_phn,'-',''),'(',''),')','') AS fwd_phn,			
				
				isnull((select case when  CHARINDEX(CHAR(13),ofc.aes_addr) > 0 then 
				substring(ofc.aes_addr,0,(CHARINDEX(CHAR(13),ofc.aes_addr))) 
				else ofc.aes_addr end from tb_sys_opt where opt_key = 'AES_ADDR' and isnull(opt_val,'N') = 'Y'),ofc.aes_addr) AS fwd_addr,
					
				ofc.aes_city AS fwd_city_nm,						ofc.aes_state_cd AS fwd_state_cd,
				ofc.aes_zip AS fwd_zip,		ofc.aes_cnt_cd AS fwd_cnt,
				ofc.tax_type AS fwd_tax_type, ofc.tax_no AS fwd_id,
				'N' AS ddtc_prty_certi_flg,	'N' AS ddtc_eq_flg,		hbl.decl_cstms_val,
				CASE WHEN
				(SELECT COUNT('X') FROM tb_cntr_list cntr
				  WHERE cntr.intg_bl_seq = hbl.intg_bl_seq ) > 0
				THEN 'Y' ELSE 'N' END AS cntr_add_flg
		  FROM	tb_intg_bl hbl

LEFT OUTER JOIN	tb_intg_bl_rlt rlt
			 ON rlt.intg_bl_seq = hbl.intg_bl_seq AND rlt.delt_flg = 'N'

LEFT OUTER JOIN tb_intg_bl mbl
			 ON mbl.intg_bl_seq = rlt.rlt_intg_bl_seq AND mbl.delt_flg = 'N'

LEFT OUTER JOIN tb_bl_prnr shp
			 ON shp.intg_bl_seq = hbl.intg_bl_seq AND shp.bl_trdp_tp_cd = 'S01' AND shp.delt_flg = 'N'
			
LEFT OUTER JOIN tb_trdp shptrdp
			 ON shptrdp.trdp_cd = shp.trdp_cd AND shptrdp.delt_flg = 'N'
			 
LEFT OUTER JOIN tb_bl_prnr cnee
			 ON cnee.intg_bl_seq = hbl.intg_bl_seq AND cnee.bl_trdp_tp_cd = 'C01' AND cnee.delt_flg = 'N'
			
LEFT OUTER JOIN tb_trdp cneetrdp
			 ON cneetrdp.trdp_cd = cnee.trdp_cd AND cneetrdp.delt_flg = 'N'
			 
LEFT OUTER JOIN tb_cmdt_cd cmdt
			 ON cmdt.cmdt_cd = hbl.rep_cmdt_cd AND cmdt.delt_flg = 'N' AND cmdt.HS_GRP_CD = 'SB'
			
LEFT OUTER JOIN tb_ofc ofc
			 ON ofc.ofc_cd = hbl.ref_ofc_cd AND ofc.delt_flg = 'N'
			 
<!--#6754 [GENESIS] MBL의 Filling No. 메뉴얼 입력시 중복 생성 가능 이슈 [ #6570 관련 ]-->			 
LEFT OUTER JOIN TB_ADD_INFO_BND BND ON hbl.INTG_BL_SEQ = BND.INTG_BL_SEQ AND BND.delt_flg = 'N'			
			 
		 WHERE	hbl.bl_no = #bl_no#
		   AND	hbl.delt_flg = 'N'
		   AND	hbl.biz_clss_cd = 'H'
		   AND	hbl.air_sea_clss_cd = 'A'
		   <!--#6754 [GENESIS] MBL의 Filling No. 메뉴얼 입력시 중복 생성 가능 이슈 [ #6570 관련 ]-->
		   AND bnd.BND_CLSS_CD = 'O'
    </select>
    
    <select id="selectAesSeaHouseBLInfo2" parameterClass="String" resultClass="com.clt.apps.fis.see.bmd.housebl.dto.AesBlInfoVO">
    	/*	selectAesSeaHouseBLInfo2 */
		SELECT	hbl.bl_no AS hbl_no,		mbl.lnr_bkg_no,			hbl.cnt_cd,
				(SELECT cnt_eng_nm FROM tb_cnt x WHERE x.cnt_cd = hbl.cnt_cd) AS cnt_nm,
				hbl.state_cd,
				(SELECT state_eng_nm FROM tb_state x WHERE x.state_cd = hbl.state_cd AND x.cnt_cd = 'US') AS state_nm,
				aes.pol_cd,					aes.pol_nm,				hbl.etd_dt_tm,
				aes.pod_cd,					aes.pod_nm,
				aes.carr_cd AS carr_trdp_cd1,						aes.carr_nm AS carr_trdp_nm1, hbl.trnk_voy ,
				hbl.trnk_vsl_cd,			hbl.trnk_vsl_nm,
				(SELECT cnt_cd FROM tb_vsl x WHERE x.vsl_cd = hbl.trnk_vsl_cd) AS vsl_flg,
				hbl.rep_cmdt_cd,			hbl.rep_cmdt_nm,
				cmdt.cmdt_ut1,				cmdt.cmdt_ut2,
				hbl.pck_qty,				FLOOR(hbl.grs_wgt) AS wgt,
				aes.trs_cd,					aes.ibd_tp,				aes.imp_en_no,
				aes.ftz_cd,					aes.exp_cd,				aes.rsps_eml,
				aes.rt_flg,					aes.haz_flg,			aes.cntr_flg,
				aes.rcc_flg,				aes.aes_sts,			aes.it_no,
				hbl.intg_bl_seq,
				aes.shp_nm,					aes.shp_pic_f,			aes.shp_pic_l,
				REPLACE(REPLACE(REPLACE(aes.shp_phn,'-',''),'(',''),')','') AS shp_phn,
				aes.shp_addr,				aes.shp_city_nm,		aes.shp_state_cd,
				aes.shp_zip,				aes.shp_cnt,			aes.shp_tax_type,
				aes.shp_id,					aes.fwd_nm,				aes.fwd_pic,
				REPLACE(REPLACE(REPLACE(aes.fwd_phn,'-',''),'(',''),')','') AS fwd_phn,				aes.fwd_addr,
				aes.fwd_city_nm,
				aes.fwd_state_cd,			aes.fwd_zip,			aes.fwd_cnt,
				aes.fwd_tax_type,			aes.fwd_id,
				aes.ult_cnee_nm,			aes.ult_cnee_pic,		REPLACE(REPLACE(REPLACE(aes.ult_cnee_phn,'-',''),'(',''),')','') AS ult_cnee_phn,
				aes.ult_cnee_addr,			aes.ult_cnee_city_nm,	aes.ult_cnee_state_cd,
				aes.ult_cnee_zip,			aes.ult_cnee_cnt,		aes.ult_cnee_tp,
				aes.inter_cnee_nm,
				aes.inter_cnee_pic,			REPLACE(REPLACE(REPLACE(aes.inter_cnee_phn,'-',''),'(',''),')','') AS inter_cnee_phn,
				aes.inter_cnee_addr,
				aes.inter_cnee_city_nm,		aes.inter_cnee_state_cd,
				aes.inter_cnee_zip,			aes.inter_cnee_cnt,
				aes.licen_tp,				aes.licen_no,			aes.ddtc_itar_no,
				aes.eccn_no,				aes.ddtc_usml_cd,		aes.ddtc_regi_no,
				aes.ddtc_pck_qty,			aes.ddtc_pck_ut_cd,		aes.ddtc_prty_certi_flg,
				aes.ddtc_eq_flg,			aes.file_tp,
				CASE WHEN
				(SELECT COUNT('X') FROM tb_cntr_list cntr
				  WHERE cntr.intg_bl_seq = hbl.intg_bl_seq ) > 0
				THEN 'Y' ELSE 'N' END AS cntr_add_flg
		  FROM	tb_intg_bl hbl

		  JOIN	tb_aes aes
			ON	aes.intg_bl_seq = hbl.intg_bl_seq

LEFT OUTER JOIN tb_intg_bl_rlt rlt
			 ON rlt.intg_bl_seq = hbl.intg_bl_seq AND rlt.delt_flg = 'N'

LEFT OUTER JOIN tb_intg_bl mbl
			 ON mbl.intg_bl_seq = rlt.rlt_intg_bl_seq AND mbl.delt_flg = 'N'
			 
LEFT OUTER JOIN tb_cmdt_cd cmdt
			 ON cmdt.cmdt_cd = hbl.rep_cmdt_cd AND cmdt.delt_flg = 'N' AND cmdt.hs_grp_cd = 'SB'
			 
<!--#6754 [GENESIS] MBL의 Filling No. 메뉴얼 입력시 중복 생성 가능 이슈 [ #6570 관련 ]-->			 
LEFT OUTER JOIN TB_ADD_INFO_BND BND ON hbl.INTG_BL_SEQ = BND.INTG_BL_SEQ AND BND.delt_flg = 'N'

		 WHERE	hbl.BL_NO = #bl_no#
		   AND	hbl.delt_flg = 'N'
		   AND	hbl.biz_clss_cd = 'H'
		   AND	hbl.air_sea_clss_cd = 'S'
		   <!--#6754 [GENESIS] MBL의 Filling No. 메뉴얼 입력시 중복 생성 가능 이슈 [ #6570 관련 ]-->
		   AND bnd.BND_CLSS_CD = 'O'
    </select>
    
    <select id="selectAesAirHouseBLInfo2" parameterClass="String" resultClass="com.clt.apps.fis.see.bmd.housebl.dto.AesBlInfoVO">
    	/* selectAesAirHouseBLInfo2 */
		SELECT	hbl.bl_no AS hbl_no,		mbl.lnr_bkg_no,			aes.cnt_cd,
				(SELECT cnt_eng_nm FROM tb_cnt x WHERE x.cnt_cd = aes.cnt_cd) AS cnt_nm,
				aes.state_cd,
				(SELECT state_eng_nm FROM tb_state x WHERE x.state_cd = aes.state_cd AND x.cnt_cd = 'US') AS state_nm,
				aes.pol_cd,					aes.pol_nm,				SUBSTRING(ISNULL(hbl.etd_dt_tm,''),1,8) AS etd_dt_tm,
				aes.pod_cd,					aes.pod_nm,					
				aes.carr_cd AS carr_trdp_cd1,						aes.carr_nm AS carr_trdp_nm1,
				hbl.trnk_vsl_cd,			hbl.flt_no AS trnk_vsl_nm,
				(SELECT cnt_cd FROM tb_vsl x WHERE x.vsl_cd = hbl.trnk_vsl_cd) AS vsl_flg,
				hbl.rep_cmdt_cd,			hbl.rep_cmdt_nm,
				cmdt.cmdt_ut1,				cmdt.cmdt_ut2,
				hbl.pck_qty,				FLOOR(hbl.grs_wgt) AS wgt,
				aes.trs_cd,					aes.ibd_tp,				aes.imp_en_no,
				aes.ftz_cd,					aes.exp_cd,				aes.rsps_eml,
				aes.rt_flg,					aes.haz_flg,			aes.cntr_flg,
				aes.rcc_flg,				aes.aes_sts,			aes.it_no,
				hbl.intg_bl_seq,
				aes.shp_nm,					aes.shp_pic_f,			aes.shp_pic_l,
				REPLACE(REPLACE(REPLACE(aes.shp_phn,'-',''),'(',''),')','') AS shp_phn,
				aes.shp_addr,				aes.shp_city_nm,		aes.shp_state_cd,
				aes.shp_zip,				aes.shp_cnt,			aes.shp_tax_type,
				aes.shp_id,					aes.fwd_nm,				aes.fwd_pic,
				REPLACE(REPLACE(REPLACE(aes.fwd_phn,'-',''),'(',''),')','') AS fwd_phn,				aes.fwd_addr,
				aes.fwd_city_nm,
				aes.fwd_state_cd,			aes.fwd_zip,			aes.fwd_cnt,
				aes.fwd_tax_type,			aes.fwd_id,
				aes.ult_cnee_nm,			aes.ult_cnee_pic,		REPLACE(REPLACE(REPLACE(aes.ult_cnee_phn,'-',''),'(',''),')','') AS ult_cnee_phn,
				aes.ult_cnee_addr,			aes.ult_cnee_city_nm,	aes.ult_cnee_state_cd,
				aes.ult_cnee_zip,			aes.ult_cnee_cnt,		aes.ult_cnee_tp ,
				aes.inter_cnee_nm,
				aes.inter_cnee_pic,			REPLACE(REPLACE(REPLACE(aes.inter_cnee_phn,'-',''),'(',''),')','') AS inter_cnee_phn,
				aes.inter_cnee_addr,
				aes.inter_cnee_city_nm,		aes.inter_cnee_state_cd,
				aes.inter_cnee_zip,			aes.inter_cnee_cnt,
				aes.licen_tp,				aes.licen_no,			aes.ddtc_itar_no,
				aes.eccn_no,				aes.ddtc_usml_cd,		aes.ddtc_regi_no,
				aes.ddtc_pck_qty,			aes.ddtc_pck_ut_cd,		aes.ddtc_prty_certi_flg,
				aes.ddtc_eq_flg,			hbl.decl_cstms_val,	    aes.file_tp,
				CASE WHEN
				(SELECT COUNT('X') FROM tb_cntr_list cntr
				  WHERE cntr.intg_bl_seq = hbl.intg_bl_seq ) > 0
				THEN 'Y' ELSE 'N' END AS cntr_add_flg
		  FROM	tb_intg_bl hbl

		  JOIN	tb_aes aes
			ON	aes.intg_bl_seq = hbl.intg_bl_seq

LEFT OUTER JOIN tb_intg_bl_rlt rlt
			 ON rlt.intg_bl_seq = hbl.intg_bl_seq AND rlt.delt_flg = 'N'

LEFT OUTER JOIN tb_intg_bl mbl
			 ON mbl.intg_bl_seq = rlt.rlt_intg_bl_seq AND mbl.delt_flg = 'N'

LEFT OUTER JOIN tb_cmdt_cd cmdt
			 ON cmdt.cmdt_cd = hbl.rep_cmdt_cd AND cmdt.delt_flg = 'N' AND cmdt.HS_GRP_CD = 'SB'
			 
<!--#6754 [GENESIS] MBL의 Filling No. 메뉴얼 입력시 중복 생성 가능 이슈 [ #6570 관련 ]-->			 
LEFT OUTER JOIN TB_ADD_INFO_BND BND ON hbl.INTG_BL_SEQ = BND.INTG_BL_SEQ AND BND.delt_flg = 'N'			 

		 WHERE	hbl.BL_NO = #bl_no#
		   AND	hbl.delt_flg = 'N'
		   AND	hbl.biz_clss_cd = 'H'
		   AND	hbl.air_sea_clss_cd = 'A'
		   <!--#6754 [GENESIS] MBL의 Filling No. 메뉴얼 입력시 중복 생성 가능 이슈 [ #6570 관련 ]-->
		   AND bnd.BND_CLSS_CD = 'O'
    </select>
    
    <select id="searchAesCmdtList" parameterClass="String" resultClass="com.clt.apps.fis.see.bmd.housebl.dto.AesCmdtVO">
		SELECT	intg_bl_seq,				aes_cmdt_seq,			org_tp,
				cmdt_cd,					cmdt_desc,				pck_qty,
				pck_ut_cd,					pck_qty1,				pck_ut_cd1,
				usd_val,					grs_wgt,				eccn_no,				pga_lic_flg  
		  FROM	tb_aes_cmdt
		 WHERE	intg_bl_seq = cast(#intg_bl_seq# as varchar)
		ORDER BY aes_cmdt_seq
    </select>
    
    <select id="searchAesVhcList" parameterClass="String" resultClass="com.clt.apps.fis.see.bmd.housebl.dto.AesVhcVO">
		SELECT	intg_bl_seq,				aes_vhc_seq,			vhc_id_tp,
				vhc_id,						vhc_ttl,				vhc_ttl_state
		  FROM	tb_aes_vhc
		 WHERE	intg_bl_seq = cast(#intg_bl_seq# as varchar)
		ORDER BY aes_vhc_seq
    </select>
    
    <insert id="insertAesInfo" parameterClass="HashMap">
    	INSERT INTO tb_aes(
			intg_bl_seq,				trs_cd,						ibd_tp,
			cnt_cd,						state_cd,
			imp_en_no,					ftz_cd,						exp_cd,
			rsps_eml,					pol_cd,						pol_nm,
			pod_cd,						pod_nm,						rt_flg,
			haz_flg,					cntr_flg,					rcc_flg,
			carr_cd,					carr_nm,
			aes_sts,					it_no,						shp_cd,
			file_tp,
			shp_nm,						shp_pic_f,					shp_pic_l,
			shp_phn,
			shp_addr,					shp_city_nm,				shp_state_cd,
			shp_zip,					shp_cnt,					shp_tax_type,
			shp_id,						fwd_cd,						fwd_nm,
			fwd_pic,					fwd_phn,					fwd_addr,
			fwd_city_nm,				fwd_state_cd,				fwd_zip,
			fwd_cnt,					fwd_tax_type,				fwd_id,
			ult_cnee_cd,				ult_cnee_nm,				ult_cnee_pic,
			ult_cnee_phn,				ult_cnee_addr,				ult_cnee_city_nm,
			ult_cnee_state_cd,			ult_cnee_zip,				ult_cnee_cnt,
			ult_cnee_tp , 				
			inter_cnee_cd,				inter_cnee_nm,				inter_cnee_pic,
			inter_cnee_phn,				inter_cnee_addr,			inter_cnee_city_nm,
			inter_cnee_state_cd,		inter_cnee_zip,				inter_cnee_cnt,
			licen_tp,					licen_no,					ddtc_itar_no,
			eccn_no,					ddtc_usml_cd,				ddtc_regi_no,
			ddtc_pck_qty,				ddtc_pck_ut_cd,				ddtc_prty_certi_flg,
			ddtc_eq_flg,				rgst_usrid,					rgst_ofc_cd,
			rgst_tms,					modi_usrid,					modi_ofc_cd,
			modi_tms
    	)VALUES(
    		#intg_bl_seq#,				#trs_cd#,					#ibd_tp#,
    		#cnt_cd#,					#state_cd#,
			#imp_en_no#,				#ftz_cd#,					#exp_cd#,
			#rsps_eml#,					#pol_cd#,					#pol_nm#,
			#pod_cd#,					#pod_nm#,					#rt_flg#,
			#haz_flg#,					#cntr_flg#,					#rcc_flg#,
			#carr_trdp_cd1#,			#carr_trdp_nm1#,
			#aes_sts#,					#it_no#,					#shp_cd#,
			#file_tp#,
			#shp_nm#,					#shp_pic_f#,				#shp_pic_l#,
			#shp_phn#,
			#shp_addr#,					#shp_city_nm#,				#shp_state_cd#,
			#shp_zip#,					#shp_cnt#,					#shp_tax_type#,
			#shp_id#,					#fwd_cd#,					#fwd_nm#,
			#fwd_pic#,					#fwd_phn#,					#fwd_addr#,
			#fwd_city_nm#,				#fwd_state_cd#,				#fwd_zip#,
			#fwd_cnt#,					#fwd_tax_type#,				#fwd_id#,
			#ult_cnee_cd#,				#ult_cnee_nm#,				#ult_cnee_pic#,
			#ult_cnee_phn#,				#ult_cnee_addr#,			#ult_cnee_city_nm#,
			#ult_cnee_state_cd#,		#ult_cnee_zip#,				#ult_cnee_cnt#,
			#ult_cnee_tp#,				
			#inter_cnee_cd#,			#inter_cnee_nm#,			#inter_cnee_pic#,
			#inter_cnee_phn#,			#inter_cnee_addr#,			#inter_cnee_city_nm#,
			#inter_cnee_state_cd#,		#inter_cnee_zip#,			#inter_cnee_cnt#,
			#licen_tp#,					#licen_no#,					#ddtc_itar_no#,
			#eccn_no#,					#ddtc_usml_cd#,				#ddtc_regi_no#,
			#ddtc_pck_qty#,				#ddtc_pck_ut_cd#,			#ddtc_prty_certi_flg#,
			#ddtc_eq_flg#,				#rgst_usrid#,				#rgst_ofc_cd#,
			GETDATE(),					#modi_usrid#,				#modi_ofc_cd#,
			GETUTCDATE()
    	)
    </insert>
    
    <update id="updateAesInfo" parameterClass="HashMap">
    	UPDATE	tb_aes
    	   SET	trs_cd = #trs_cd#,				ibd_tp = #ibd_tp#,				imp_en_no = #imp_en_no#,
    	   		cnt_cd = #cnt_cd#,				state_cd = #state_cd#,
    	   		ftz_cd = #ftz_cd#,				exp_cd = #exp_cd#,				rsps_eml = #rsps_eml#,
				pol_cd = #pol_cd#,				pol_nm = #pol_nm#,				pod_cd = #pod_cd#,
				pod_nm = #pod_nm#,				rt_flg = #rt_flg#,				haz_flg = #haz_flg#,
				cntr_flg = #cntr_flg#,			rcc_flg = #rcc_flg#,			aes_sts = #aes_sts#,
				carr_cd = #carr_trdp_cd1#,		carr_nm = #carr_trdp_nm1#,
				it_no = #it_no#,				shp_cd = #shp_cd#,				shp_nm = #shp_nm#,
				file_tp = #file_tp#, 
				shp_pic_f = #shp_pic_f#,		shp_pic_l = #shp_pic_l#,		shp_phn = #shp_phn#,
				shp_addr = #shp_addr#,
				shp_city_nm = #shp_city_nm#,	shp_state_cd = #shp_state_cd#,	shp_zip = #shp_zip#,
				shp_cnt = #shp_cnt#,			shp_tax_type = #shp_tax_type#,	shp_id = #shp_id#,
				fwd_cd = #fwd_cd#,				fwd_nm = #fwd_nm#,				fwd_pic = #fwd_pic#,
				fwd_phn = #fwd_phn#,			fwd_addr = #fwd_addr#,			fwd_city_nm = #fwd_city_nm#,
				fwd_state_cd = #fwd_state_cd#,	fwd_zip = #fwd_zip#,			fwd_cnt = #fwd_cnt#,
				fwd_tax_type = #fwd_tax_type#,	fwd_id = #fwd_id#,				ult_cnee_cd = #ult_cnee_cd#,
				ult_cnee_nm = #ult_cnee_nm#,	ult_cnee_pic = #ult_cnee_pic#,	ult_cnee_phn = #ult_cnee_phn#,
				ult_cnee_addr = #ult_cnee_addr#,								ult_cnee_city_nm = #ult_cnee_city_nm#,
				ult_cnee_state_cd = #ult_cnee_state_cd#,						ult_cnee_zip = #ult_cnee_zip#,
				ult_cnee_cnt = #ult_cnee_cnt#,	ult_cnee_tp = #ult_cnee_tp#,	
				inter_cnee_cd = #inter_cnee_cd#,inter_cnee_nm = #inter_cnee_nm#,
				inter_cnee_pic = #inter_cnee_pic#,								inter_cnee_phn = #inter_cnee_phn#,
				inter_cnee_addr = #inter_cnee_addr#,							inter_cnee_city_nm = #inter_cnee_city_nm#,
				inter_cnee_state_cd = #inter_cnee_state_cd#,					inter_cnee_zip = #inter_cnee_zip#,
				inter_cnee_cnt = #inter_cnee_cnt#,								licen_tp = #licen_tp#,
				licen_no = #licen_no#,			ddtc_itar_no = #ddtc_itar_no#,	eccn_no = #eccn_no#,
				ddtc_usml_cd = #ddtc_usml_cd#,	ddtc_regi_no = #ddtc_regi_no#,	ddtc_pck_qty = #ddtc_pck_qty#,
				ddtc_pck_ut_cd = #ddtc_pck_ut_cd#,								ddtc_prty_certi_flg = #ddtc_prty_certi_flg#,
				ddtc_eq_flg = #ddtc_eq_flg#,	modi_usrid = #modi_usrid#,		modi_ofc_cd = #modi_ofc_cd#,
				modi_tms = GETUTCDATE()
		 WHERE	intg_bl_seq = cast(#intg_bl_seq# as varchar)
    </update>
    
    <insert id="insertAesCmdt" parameterClass="com.clt.apps.fis.see.bmd.housebl.dto.AesCmdtVO">
    	<!-- MSSQL 2008 Ver
    	INSERT INTO tb_aes_cmdt(
    		intg_bl_seq,
    		aes_cmdt_seq,
    		org_tp,						cmdt_cd,					cmdt_desc,
    		pck_qty,					pck_ut_cd,					pck_qty1,
    		pck_ut_cd1,					usd_val,					grs_wgt,
    		rgst_usrid,					rgst_ofc_cd,				rgst_tms,
    		modi_usrid,					modi_ofc_cd,				modi_tms
    	)VALUES(
    		#intg_bl_seq#,
    		(SELECT ISNULL(MAX(aes_cmdt_seq),0)+1 FROM tb_aes_cmdt WHERE intg_bl_seq = #intg_bl_seq#),
    		#org_tp#,					#cmdt_cd#,					#cmdt_desc#,
    		#pck_qty#,					#pck_ut_cd#,				#pck_qty1#,
    		#pck_ut_cd1#,				#usd_val#,					#grs_wgt#,
    		#rgst_usrid#,				#rgst_ofc_cd#,				GETDATE(),
    		#modi_usrid#,				#modi_ofc_cd#,				GETDATE()
    	)
    	-->    	
    	<!-- 2013.06.05 LHK, MSSQL 2005 version 으로 Query 수정 (Insert into () values()구문에 하위 쿼리 사용할 수 없슴) -->
    	INSERT INTO tb_aes_cmdt(
    		intg_bl_seq,
    		aes_cmdt_seq,
    		org_tp,						cmdt_cd,					cmdt_desc,
    		pck_qty,					pck_ut_cd,					pck_qty1,
    		pck_ut_cd1,					usd_val,					grs_wgt,	
    		eccn_no,					pga_lic_flg,	
    		rgst_usrid,					rgst_ofc_cd,				rgst_tms,
    		modi_usrid,					modi_ofc_cd,				modi_tms
		) SELECT
    		#intg_bl_seq#,
    		(SELECT ISNULL(MAX(aes_cmdt_seq),0)+1 FROM tb_aes_cmdt WHERE intg_bl_seq = #intg_bl_seq#),
    		#org_tp#,					#cmdt_cd#,					#cmdt_desc#,
    		#pck_qty#,					#pck_ut_cd#,				#pck_qty1#,
    		#pck_ut_cd1#,				#usd_val#,					#grs_wgt#,				
    		#eccn_no#,					#pga_lic_flg#, 
    		#rgst_usrid#,				#rgst_ofc_cd#,				GETDATE(),
    		#modi_usrid#,				#modi_ofc_cd#,				GETUTCDATE()
    	
    </insert>
    
    <update id="updateAesCmdt" parameterClass="com.clt.apps.fis.see.bmd.housebl.dto.AesCmdtVO">
    	UPDATE	tb_aes_cmdt
    	   SET	org_tp = #org_tp#,				cmdt_cd = #cmdt_cd#,			cmdt_desc = #cmdt_desc#,
				pck_qty = #pck_qty#,			pck_ut_cd = #pck_ut_cd#,		pck_qty1 = #pck_qty1#,
    			pck_ut_cd1 = #pck_ut_cd1#,		usd_val = #usd_val#,			grs_wgt = #grs_wgt#,
    			eccn_no = #eccn_no#, 			pga_lic_flg = #pga_lic_flg#, 
    			modi_usrid = #modi_usrid#,		modi_ofc_cd = #modi_ofc_cd#,	modi_tms = GETUTCDATE()
    	 WHERE	intg_bl_seq = cast(#intg_bl_seq# as varchar)
    	   AND	aes_cmdt_seq = #aes_cmdt_seq#
    </update>
    
    <delete id="deleteAesCmdt" parameterClass="com.clt.apps.fis.see.bmd.housebl.dto.AesCmdtVO">
    	DELETE	tb_aes_cmdt
    	 WHERE	intg_bl_seq = cast(#intg_bl_seq# as varchar)
    	   AND	aes_cmdt_seq = #aes_cmdt_seq#
    </delete>
    
    <insert id="insertAesVhc" parameterClass="com.clt.apps.fis.see.bmd.housebl.dto.AesVhcVO">
    	<!-- MSSQL 2008 Ver
    	INSERT INTO tb_aes_vhc(
    		intg_bl_seq,
    		aes_vhc_seq,
    		vhc_id_tp,					vhc_id,						vhc_ttl,
    		vhc_ttl_state,
    		rgst_usrid,					rgst_ofc_cd,				rgst_tms,
    		modi_usrid,					modi_ofc_cd,				modi_tms
    	)VALUES(
    		#intg_bl_seq#,
    		(SELECT ISNULL(MAX(aes_vhc_seq),0)+1 FROM tb_aes_vhc WHERE intg_bl_seq = #intg_bl_seq#),
    		#vhc_id_tp#,				#vhc_id#,					#vhc_ttl#,
    		#vhc_ttl_state#,
    		#rgst_usrid#,				#rgst_ofc_cd#,				GETDATE(),
    		#modi_usrid#,				#modi_ofc_cd#,				GETDATE()
    	)
    	-->    	
    	<!-- 2013.06.05 LHK, MSSQL 2005 version 으로 Query 수정 (Insert into () values()구문에 하위 쿼리 사용할 수 없슴) -->
    	INSERT INTO tb_aes_vhc(
    		intg_bl_seq,
    		aes_vhc_seq,
    		vhc_id_tp,					vhc_id,						vhc_ttl,
    		vhc_ttl_state,
    		rgst_usrid,					rgst_ofc_cd,				rgst_tms,
    		modi_usrid,					modi_ofc_cd,				modi_tms
    	) SELECT
    		#intg_bl_seq#,
    		(SELECT ISNULL(MAX(aes_vhc_seq),0)+1 FROM tb_aes_vhc WHERE intg_bl_seq = #intg_bl_seq#),
    		#vhc_id_tp#,				#vhc_id#,					#vhc_ttl#,
    		#vhc_ttl_state#,
    		#rgst_usrid#,				#rgst_ofc_cd#,				GETDATE(),
    		#modi_usrid#,				#modi_ofc_cd#,				GETUTCDATE()
    	
    </insert>
    
    <update id="updateAesVhc" parameterClass="com.clt.apps.fis.see.bmd.housebl.dto.AesVhcVO">
    	UPDATE	tb_aes_vhc
    	   SET	vhc_id_tp = #vhc_id_tp#,		vhc_id = #vhc_id#,				vhc_ttl = #vhc_ttl#,
				vhc_ttl_state = #vhc_ttl_state#,
    			modi_usrid = #modi_usrid#,		modi_ofc_cd = #modi_ofc_cd#,	modi_tms = GETUTCDATE()
    	 WHERE	intg_bl_seq = cast(#intg_bl_seq# as varchar)
    	   AND	aes_vhc_seq = #aes_vhc_seq#
    </update>
    
    <delete id="deleteAesVhc" parameterClass="com.clt.apps.fis.see.bmd.housebl.dto.AesVhcVO">
    	DELETE	tb_aes_vhc
    	 WHERE	intg_bl_seq = cast(#intg_bl_seq# as varchar)
    	   AND	aes_vhc_seq = #aes_vhc_seq#
    </delete>
    
    <select id="searchAesCmdtCnt" parameterClass="String" resultClass="Integer">
		SELECT	COUNT('X')
		  FROM	tb_aes_cmdt
		 WHERE	intg_bl_seq = cast(#intg_bl_seq# as varchar)
	</select>
    
    <select id="searchAesVhcCnt" parameterClass="String" resultClass="Integer">
		SELECT	COUNT('X')
		  FROM	tb_aes_vhc
		 WHERE	intg_bl_seq = cast(#intg_bl_seq# as varchar)
    </select>
    
    <!--Master Container 목록 조회  -->
    <!--#20419 [BINEX] MLB/IPI 건들 2nd Arrival Notice (Final DSTN) jsjang 2013.9.11 - dg, remark, pickup, lfd, cntr_go_date hbl 자동연계  -->
    <select id="selectMasterCNTR_LIST" parameterClass="HashMap" resultClass="CntrLstVO">
    	/* selectMasterCNTR_LIST */
         SELECT lst.intg_bl_seq,        lst.cntr_list_seq,       lst.rgst_cntr_yn,
                lst.cntr_no,            lst.cntr_tpsz_cd,
                lst.cgo_pck_qty,        lst.cgo_pck_ut,          lst.cgo_wgt,           lst.cgo_meas,         lst.vol_meas,
                lst.soc_flg,            lst.dg_gds_flg,          lst.cntr_rmk,		    lst.cgo_wgt1, 		  lst.cgo_meas1,
                lst.seal_no1,           lst.seal_no2,            lst.seal_no3, 
                lst.cntr_sprl_trdp_cd,  prn.eng_nm AS cntr_sprl_trdp_nm, 
                bl.shp_mod_cd
                ,lst.dg_gds_flg, lst.cntr_rmk, lst.pickup_number, CONVERT(VARCHAR, ISNULL(lst.lfd, ''), 120) AS lfd
                ,CONVERT(VARCHAR, ISNULL(lst.cntr_go_date, ''), 120) AS cntr_go_date
                ,lst.temp_cd, lst.vent_cd ,lst.temp_val
                ,lst.emty_rt_dt
                ,lst.cntr_ref_no
                ,lst.prt_cgo_flg
                ,lst.rc_flg                
                ,lst.mgset_flg               
                ,lst.ca_flg             
                ,lst.air_flow             
                ,lst.air_flow_unit             
                ,lst.humid
                <!-- OFVFOUR-7518 [FULLTRANS USA] Adding more display columns on the OIH B/L Entry - Container Tab -->     
                ,CONVERT(VARCHAR, ISNULL(lst.fnl_dest_eta_dt, ''), 120) AS fnl_dest_eta_dt 
				,CONVERT(VARCHAR, ISNULL(lst.apnt_dt, ''), 120) AS apnt_dt 
				,CONVERT(VARCHAR, ISNULL(lst.de_dt, ''), 120) AS de_dt 
				,CONVERT(VARCHAR, ISNULL(lst.free_det_dt, ''), 120) AS free_det_dt
				,CONVERT(VARCHAR, ISNULL(lst.org_pkup_dt, ''), 120) AS org_pkup_dt
				<!-- OFVFOUR-7949 [SENKO USA] Show CCN# for Multiple Containers on AN -->
				,lst.cntr_ccn_no
		   FROM TB_INTG_BL BL
		   LEFT OUTER JOIN TB_ADD_INFO_BND BND ON BL.INTG_BL_SEQ = BND.INTG_BL_SEQ
		   JOIN TB_CNTR_LIST LST ON BL.INTG_BL_SEQ = LST.INTG_BL_SEQ AND LST.DELT_FLG = 'N'
LEFT OUTER JOIN tb_trdp prn
             ON LST.cntr_sprl_trdp_cd = prn.trdp_cd  AND prn.delt_flg = 'N'
 		  WHERE 1=1
 		    AND bl.biz_clss_cd = 'M'
 		    <!-- #5160 [Genesis] HBL container error - DELT_FLG 체크되지 않아 과거 삭제 CNTR LOAD 현상 발생 -->
 		    AND BL.DELT_FLG = 'N' 		    
 		  <isNotEmpty property="f_rlt_intg_bl_seq">
   			AND BL.intg_bl_seq = #f_rlt_intg_bl_seq#
 		  </isNotEmpty>
 		  <isNotEmpty property="f_cntr_no">
   			AND LST.CNTR_NO LIKE  #f_cntr_no# + '%'
 		  </isNotEmpty>
 		  <isNotEmpty property="f_cntr_tpsz_cd">
   			AND LST.CNTR_TPSZ_CD = #f_cntr_tpsz_cd#
 		  </isNotEmpty>
 		  <!-- #3338 [C&L] House container value is not equal with Master container -->
 		  <isNotEmpty property="bnd_clss_cd">
   			AND BND_CLSS_CD = #bnd_clss_cd#
 		  </isNotEmpty>
       ORDER BY lst.cntr_list_seq ASC
    </select>
    
    <select id="selectMasterCNTR_LIST_CNT" parameterClass="HashMap" resultClass="Integer">
         SELECT COUNT(*)
		   FROM TB_INTG_BL BL
		   JOIN TB_CNTR_LIST LST ON BL.INTG_BL_SEQ = LST.INTG_BL_SEQ AND LST.DELT_FLG = 'N'
LEFT OUTER JOIN tb_trdp prn
             ON LST.cntr_sprl_trdp_cd = prn.trdp_cd  AND prn.delt_flg = 'N'
 		  WHERE 1=1
 		    AND bl.biz_clss_cd = 'M'
 		    <!-- #5160 [Genesis] HBL container error - DELT_FLG 체크되지 않아 과거 삭제 CNTR LOAD 현상 발생 -->
 		    AND BL.DELT_FLG = 'N' 		    
 		  <isNotEmpty property="f_ref_no">
   			AND BL.REF_NO = #f_ref_no#
 		  </isNotEmpty>
 		  <isNotEmpty property="f_cntr_no">
   			AND LST.CNTR_NO LIKE  #f_cntr_no# + '%'
 		  </isNotEmpty>
 		  <isNotEmpty property="f_cntr_tpsz_cd">
   			AND LST.CNTR_TPSZ_CD = #f_cntr_tpsz_cd#
 		  </isNotEmpty>
    </select>
    
    <select id="selectRefCNTR_LIST" parameterClass="HashMap" resultClass="CntrLstVO">
    	/* selectRefCNTR_LIST */
         SELECT lst.intg_bl_seq,        lst.cntr_list_seq,       lst.rgst_cntr_yn,
                lst.cntr_no,            lst.cntr_tpsz_cd,
                lst.cgo_pck_qty,        lst.cgo_pck_ut,          lst.cgo_wgt,           lst.cgo_meas,         lst.vol_meas,
                lst.soc_flg,            lst.dg_gds_flg,          lst.cntr_rmk,		    lst.cgo_wgt1, 		  lst.cgo_meas1,
                lst.seal_no1,           lst.seal_no2,            lst.seal_no3, 
                lst.cntr_sprl_trdp_cd,  prn.eng_nm AS cntr_sprl_trdp_nm, 
                bl.shp_mod_cd
                ,lst.dg_gds_flg, lst.cntr_rmk, lst.pickup_number, CONVERT(VARCHAR, ISNULL(lst.lfd, ''), 120) AS lfd
                ,CONVERT(VARCHAR, ISNULL(lst.cntr_go_date, ''), 120) AS cntr_go_date
                ,lst.temp_cd, lst.vent_cd ,lst.temp_val
                
          		,lst.rc_flg 
          		,lst.mgset_flg 
          		,lst.ca_flg
          		,lst.air_flow
          		,lst.air_flow_unit
          		,lst.humid
                
                , lst.emty_rt_dt
                , lst.cntr_ref_no
                , lst.prt_cgo_flg
                <!-- OFVFOUR-7518 [FULLTRANS USA] Adding more display columns on the OIH B/L Entry - Container Tab -->     
                ,CONVERT(VARCHAR, ISNULL(lst.fnl_dest_eta_dt, ''), 120) AS fnl_dest_eta_dt 
				,CONVERT(VARCHAR, ISNULL(lst.apnt_dt, ''), 120) AS apnt_dt 
				,CONVERT(VARCHAR, ISNULL(lst.de_dt, ''), 120) AS de_dt 
				,CONVERT(VARCHAR, ISNULL(lst.free_det_dt, ''), 120) AS free_det_dt
				,CONVERT(VARCHAR, ISNULL(lst.org_pkup_dt, ''), 120) AS org_pkup_dt
				<!-- OFVFOUR-7949 [SENKO USA] Show CCN# for Multiple Containers on AN -->
				, lst.cntr_ccn_no
		   FROM TB_INTG_BL BL
		   LEFT OUTER JOIN TB_ADD_INFO_BND BND ON BL.INTG_BL_SEQ = BND.INTG_BL_SEQ
		   JOIN TB_CNTR_LIST LST ON BL.INTG_BL_SEQ = LST.INTG_BL_SEQ AND LST.DELT_FLG = 'N'
LEFT OUTER JOIN tb_trdp prn
             ON LST.cntr_sprl_trdp_cd = prn.trdp_cd  AND prn.delt_flg = 'N'
 		  WHERE 1=1
 		    AND bl.biz_clss_cd = 'M'
   			AND BL.ref_no = #f_ref_no#
   			<!-- #5160 [Genesis] HBL container error - DELT_FLG 체크되지 않아 과거 삭제 CNTR LOAD 현상 발생 -->
 		    AND BL.DELT_FLG = 'N'
 		  <!-- #3338 [C&L] House container value is not equal with Master container -->
 		  <isNotEmpty property="bnd_clss_cd">
   			AND BND.BND_CLSS_CD = #bnd_clss_cd#
 		  </isNotEmpty>
       ORDER BY lst.cntr_list_seq ASC
    </select>
    
    <select id="selectRefSHP_CMDT_LIST" parameterClass="HashMap" resultClass="ItmLstVO">
    	/* selectRefSHP_CMDT_LIST */
    	SELECT  cdt.intg_bl_seq,       cdt.cntr_list_seq AS item_cntr_list_seq,   cdt.shp_cmdt_seq AS item_shp_cmdt_seq,       
	                cdt.wgt AS item_wgt,   cdt.meas AS item_meas,    cdt.rmk          AS item_rmk,       
	                cdt.pck_qty     AS item_pck_qty,                 cdt.pck_ut_cd    AS item_pck_ut_cd,
			        cdt.dg_cd_tp    AS item_dg_cd_tp,                cdt.dg_cd  AS item_dg_cd, cdt.dg_cntc_nm  AS item_dg_cntc_nm,
	                cdt.shp_cmdt_cd AS item_shp_cmdt_cd,			 cdt.shp_cmdt_nm AS item_shp_cmdt_nm, 
	                ctl.cntr_no     AS item_cntr_no,
	                cdt.hs_grp_cd		AS item_hs_grp_cd,
	                cdt.cmdt_cd     	AS item_cmdt_cd,
                     CASE WHEN ISNULL(ritm.ITEM_NM,'') = '' THEN  
                              ISNULL((SELECT TOP 1 ITEM_NM FROM TL_CTRT_CUST_ITEM ITEM 
                              JOIN TL_CTRT CTRT ON CTRT.CTRT_NO = ITEM.CTRT_NO 
                              JOIN TB_BL_PRNR PRNR ON PRNR.BL_TRDP_TP_CD ='C01' AND PRNR.TRDP_CD = CTRT.CTRT_CUST_CD AND PRNR.INTG_BL_SEQ =  CDT.INTG_BL_SEQ  
                              WHERE ITEM.ITEM_CD = CDT.CMDT_CD),'') 
                         ELSE ritm.ITEM_NM END AS  ITEM_CMDT_NM , 
	                cdt.po_cmdt_seq     AS item_po_cmdt_seq,
					cdt.po_sys_no     	AS item_po_sys_no,
					po.cust_po_no		AS item_cust_po_no,
					cdt.pck_inr_qty     AS item_pck_inr_qty,
					cdt.ea_cnt     		AS item_ea_cnt,					
					cdt.ttl_qty     	AS item_ttl_qty,					
					cdt.lbs_wgt     	AS item_lbs_wgt,					
					cdt.cft_meas     	AS item_cft_meas
			  FROM  tb_intg_bl bl
	          JOIN  tb_shp_cmdt cdt ON bl.intg_bl_seq = cdt.intg_bl_seq ANd cdt.delt_flg = 'N'
	          LEFT OUTER JOIN tb_cntr_list ctl ON cdt.cntr_list_seq = ctl.cntr_list_seq AND cdt.INTG_BL_SEQ = ctl.INTG_BL_SEQ
	          LEFT OUTER JOIN tb_po po ON cdt.po_sys_no = po.po_sys_no AND po.delt_flg = 'N'
	          LEFT OUTER JOIN tb_po_cmdt po_cmdt ON po.po_sys_no = po_cmdt.po_sys_no AND cdt.po_cmdt_seq = po_cmdt.po_cmdt_seq AND po_cmdt.delt_flg = 'N'
	          LEFT OUTER JOIN tl_ctrt_cust_item itm ON po_cmdt.ctrt_no = itm.ctrt_no AND po_cmdt.item_sys_no = itm.item_sys_no AND po_cmdt.cust_itm_id = itm.item_cd AND itm.item_use_flg = 'Y'
	          LEFT OUTER JOIN tl_ctrt_cust_item ritm ON cdt.item_sys_no = ritm.item_sys_no and ritm.item_use_flg = 'Y' 
	         WHERE  1 = 1
	           AND  bl.biz_clss_cd = 'M'
	           AND  bl.ref_no = #f_ref_no#               
	           AND  not exists (SELECT 1 
	                              FROM tb_intg_bl_rlt rlt
								  LEFT OUTER JOIN tb_intg_bl hbl ON hbl.intg_bl_seq = rlt.intg_bl_seq AND hbl.delt_flg = 'N'
								  LEFT OUTER JOIN tb_shp_cmdt hbl_cdt ON hbl.intg_bl_seq = hbl_cdt.intg_bl_seq ANd hbl_cdt.delt_flg = 'N'
								 WHERE 1 = 1
								   AND rlt.rlt_intg_bl_seq = bl.intg_bl_seq            
					               AND isnull(hbl_cdt.po_sys_no,'') = isnull(po_cmdt.po_sys_no,'') 
					               AND isnull(hbl_cdt.po_cmdt_seq,0) = isnull(po_cmdt.po_cmdt_seq,0)    
								   AND hbl_cdt.cmdt_cd = cdt.cmdt_cd  
								)
	      ORDER BY  cdt.shp_cmdt_seq  ASC
    </select>
    
    <!-- Local Invoice    -->
    <select id="selectLocalInvSeq" parameterClass="String" resultClass="String">
		SELECT  dtl.inv_seq
		  FROM	tb_frt frt
		  
		  JOIN	tb_inv_dtl dtl
			ON	dtl.inv_seq = frt.inv_seq
			
		 WHERE	frt.intg_bl_seq = cast(#intg_bl_seq# as varchar)
		   AND	frt.sell_buy_tp_cd = 'S'
		GROUP BY dtl.inv_seq
    </select>
    
    <!-- dc Invoice    -->
    <select id="selectDCInvSeq" parameterClass="String" resultClass="String">
		SELECT  dtl.inv_seq
		  FROM	tb_frt frt
		  
		  JOIN	tb_inv_dtl dtl
			ON	dtl.inv_seq = frt.inv_seq
			
		 WHERE	frt.intg_bl_seq = cast(#intg_bl_seq# as varchar)
		   AND	frt.sell_buy_tp_cd IN ('C','D')  
		   AND frt.INV_SEQ IS NOT NULL
		   AND FRT.DELT_FLG='N'
		GROUP BY dtl.inv_seq
    </select>
    
    <!-- Credit/Debit Note    -->
    <select id="selectCrDbInvSeq" parameterClass="String" resultClass="com.clt.apps.fis.see.bmd.housebl.dto.DocumentPackageVO">
		SELECT	data_tp,	data_seq,	data_trdp_cd,	trdp_nm,
				bl_no,		sort_no
		  FROM	(
				SELECT 'MCRDB' AS data_tp, dtl.inv_seq AS data_seq, agt.trdp_cd AS data_trdp_cd,
						ISNULL(agt.trdp_nm,'ZZZZZZZ') AS trdp_nm,		mbl.bl_no,
						9 AS sort_no
				FROM tb_intg_bl mbl
				JOIN tb_frt frt ON frt.intg_bl_seq = mbl.intg_bl_seq
				AND frt.sell_buy_tp_cd IN ('C','D') AND frt.delt_flg = 'N'
				JOIN tb_inv_dtl dtl ON dtl.inv_seq = frt.inv_seq AND dtl.delt_flg = 'N'
				LEFT OUTER JOIN tb_bl_prnr agt
				ON agt.intg_bl_seq = mbl.intg_bl_seq AND agt.bl_trdp_tp_cd = 'C01' AND agt.delt_flg = 'N'
				WHERE mbl.intg_bl_seq = cast(#intg_bl_seq# as varchar) AND mbl.delt_flg = 'N'
				
				UNION
				
				SELECT 'HCRDB' AS data_tp, dtl.inv_seq AS data_seq, agt.trdp_cd AS data_trdp_cd,
						ISNULL(agt.trdp_nm,'ZZZZZZZ') AS trdp_nm,		hbl.bl_no,
						2 AS sort_no
				FROM tb_intg_bl_rlt rlt
				JOIN tb_intg_bl hbl ON hbl.intg_bl_seq = rlt.intg_bl_seq
				AND hbl.delt_flg = 'N'
				JOIN tb_frt frt ON frt.intg_bl_seq = hbl.intg_bl_seq
				AND frt.sell_buy_tp_cd IN ('C','D') AND frt.delt_flg = 'N'
				JOIN tb_inv_dtl dtl ON dtl.inv_seq = frt.inv_seq AND dtl.delt_flg = 'N'
				LEFT OUTER JOIN tb_bl_prnr agt
				ON agt.intg_bl_seq = hbl.intg_bl_seq AND agt.bl_trdp_tp_cd = 'P01' AND agt.delt_flg = 'N'
				WHERE rlt.rlt_intg_bl_seq = cast(#intg_bl_seq# as varchar) AND rlt.delt_flg = 'N'
				)inval	
		GROUP BY data_tp, data_seq, data_trdp_cd, trdp_nm, bl_no, sort_no
    </select>
    
	<!-- House B/L    -->
    <select id="selectHblSeq" parameterClass="String" resultClass="com.clt.apps.fis.see.bmd.housebl.dto.DocumentPackageVO">
		SELECT	'HBL' AS data_tp,		hbl.intg_bl_seq AS data_seq,		agt.trdp_cd AS data_trdp_cd,
				ISNULL(agt.trdp_nm,'ZZZZZZZ') AS trdp_nm,					hbl.bl_no,
				1 AS sort_no,			hbl.hbl_tp_cd,						hbl.flt_no,
				shp.trdp_nm AS shpr_trdp_nm,								lnr.trdp_nm AS lnr_trdp_nm,
				thr.trdp_nm AS thr_trdp_nm, 
				CASE 
					WHEN (SELECT OPT_VAL 
							FROM TB_SYS_OPT
							WHERE OPT_KEY = 'OEH_BL_PRT_FRT_ARR_FLG') = 'Y'
					THEN 
						CASE 
							WHEN isnull(sub_mbl_flg,
							'') = 'Y' THEN 'N' 
							ELSE 'Y' 
							END
					ELSE 'N'
		        END AS frt_flg,
				opt.sign_ship   <!-- #1247 [CLT] HB/L Company Name - Print 시 저장 요청 및 Document Package 시 표시	 -->
		  FROM	tb_intg_bl_rlt rlt

		  JOIN	tb_intg_bl hbl
			ON	hbl.intg_bl_seq = rlt.intg_bl_seq AND hbl.delt_flg = 'N'
			
LEFT OUTER JOIN tb_bl_prnr agt
			ON	agt.intg_bl_seq = hbl.intg_bl_seq AND agt.bl_trdp_tp_cd = 'P01' AND agt.delt_flg = 'N'
			
LEFT OUTER JOIN tb_bl_prnr shp
			ON	shp.intg_bl_seq = hbl.intg_bl_seq AND shp.bl_trdp_tp_cd = 'S01' AND shp.delt_flg = 'N'
			
LEFT OUTER JOIN tb_bl_prnr lnr
			ON	lnr.intg_bl_seq = hbl.intg_bl_seq AND lnr.bl_trdp_tp_cd = 'L01' AND lnr.delt_flg = 'N'
			
LEFT OUTER JOIN tb_bl_prnr thr
			ON	thr.intg_bl_seq = hbl.intg_bl_seq AND thr.bl_trdp_tp_cd = 'T01' AND thr.delt_flg = 'N'
			
LEFT OUTER JOIN TB_BLPRN_OPTINFO opt
            ON  opt.INTG_BL_SEQ = rlt.INTG_BL_SEQ			

		 WHERE	rlt.rlt_intg_bl_seq = cast(#intg_bl_seq# as varchar)
		   AND	rlt.delt_flg = 'N'
    </select>
    
	<!-- Commercial Invoice    -->
    <select id="selectCmcInvSeq" parameterClass="String" resultClass="com.clt.apps.fis.see.bmd.housebl.dto.DocumentPackageVO">
		SELECT	'CMC' AS data_tp,		oth.intg_bl_seq AS data_seq,		agt.trdp_cd AS data_trdp_cd,
				ISNULL(agt.trdp_nm,'ZZZZZZZ') AS trdp_nm,					hbl.bl_no,
				3 AS sort_no
		  FROM	tb_intg_bl_rlt rlt

		  JOIN	tb_intg_bl hbl
			ON	hbl.intg_bl_seq = rlt.intg_bl_seq AND hbl.delt_flg = 'N'
			
LEFT OUTER JOIN tb_bl_prnr agt
			ON	agt.intg_bl_seq = hbl.intg_bl_seq AND agt.bl_trdp_tp_cd = 'P01' AND agt.delt_flg = 'N'
			
		  JOIN	tb_bl_oth oth
			ON	oth.intg_bl_seq = hbl.intg_bl_seq AND oth.wrk_tp = 'CI'

		 WHERE	rlt.rlt_intg_bl_seq = cast(#intg_bl_seq# as varchar)
		   AND	rlt.delt_flg = 'N'
    </select>
    
    <!-- Packing List    -->
    <select id="selectPckInvSeq" parameterClass="String" resultClass="com.clt.apps.fis.see.bmd.housebl.dto.DocumentPackageVO">
		SELECT	'PCK' AS data_tp,		oth.intg_bl_seq AS data_seq,		agt.trdp_cd AS data_trdp_cd,
				ISNULL(agt.trdp_nm,'ZZZZZZZ') AS trdp_nm,					hbl.bl_no,
				4 AS sort_no
		  FROM	tb_intg_bl_rlt rlt
		  
		  JOIN	tb_intg_bl hbl
			ON	hbl.intg_bl_seq = rlt.intg_bl_seq AND hbl.delt_flg = 'N'
			
LEFT OUTER JOIN tb_bl_prnr agt
			ON	agt.intg_bl_seq = hbl.intg_bl_seq AND agt.bl_trdp_tp_cd = 'P01' AND agt.delt_flg = 'N'

		  JOIN	tb_bl_oth oth
			ON	oth.intg_bl_seq = hbl.intg_bl_seq AND oth.wrk_tp = 'PL'

		 WHERE	rlt.rlt_intg_bl_seq = cast(#intg_bl_seq# as varchar)
		   AND	rlt.delt_flg = 'N'
    </select>
    
    <!-- COMMERCIAL INVOICE BL_NO로 INTG_BL_SEQ 조회  -->
    <select id="selectINTG_BL_SEQ" parameterClass="HashMap" resultClass="String">
	    /* BlCmmSQL.xml > selectINTG_BL_SEQ */
    	SELECT BL.intg_bl_seq
    	  FROM TB_INTG_BL BL
		  	JOIN  TB_ADD_INFO_BND BND
		    ON  BL.INTG_BL_SEQ = BND.INTG_BL_SEQ AND BND.DELT_FLG = 'N'
    	 WHERE BL.bl_no = #bl_no#
		<isNotEmpty property="air_sea_clss_cd">
		    AND BL.air_sea_clss_cd = #air_sea_clss_cd#
		</isNotEmpty>
		<!-- #33414 [BINEX] Certificate of Origin 이 출력 오류 -->
		<isNotEmpty property="biz_clss_cd">
		 	AND  BL.biz_clss_cd  = #biz_clss_cd#
		</isNotEmpty>
		<!-- #2309 [Split - 1] [UFF] CERTIFICATE OF ORIGIN ERROR (Ocean Export) -->
		<isNotEmpty property="bnd_clss_cd">
			AND  BND.BND_CLSS_CD = #bnd_clss_cd#
		</isNotEmpty>
    </select>
    
    <!-- COMMERCIAL INVOICE BL_NO로 INTG_BL_SEQ 조회 Commercial Invoice/ Packing List화면에서 사용  -->
    <select id="selectINTG_BL_SEQ_CI_PL" parameterClass="HashMap" resultClass="String">
	    /* BlCmmSQL.xml > selectINTG_BL_SEQ_CI_PL */
    	SELECT BL.intg_bl_seq
    	  FROM TB_INTG_BL BL
		  	JOIN  TB_ADD_INFO_BND BND
		    ON  BL.INTG_BL_SEQ = BND.INTG_BL_SEQ AND BND.DELT_FLG = 'N'
    	 WHERE BL.bl_no = #bl_no#
		<isNotEmpty property="air_sea_clss_cd">
		    AND BL.air_sea_clss_cd = #air_sea_clss_cd#
		</isNotEmpty>
		<!-- #33414 [BINEX] Certificate of Origin 이 출력 오류 -->
		<isNotEmpty property="biz_clss_cd">
		 	AND  BL.biz_clss_cd  = #biz_clss_cd#
		</isNotEmpty>
		<!-- #2309 [Split - 1] [UFF] CERTIFICATE OF ORIGIN ERROR (Ocean Export) -->
		<isNotEmpty property="bnd_clss_cd">
			AND  BND.BND_CLSS_CD = #bnd_clss_cd#
		</isNotEmpty>
    </select>
    
        <!-- COMMERCIAL INVOICE BL_NO로 INTG_BL_SEQ 조회 Commercial Invoice/ Packing List화면에서 사용  -->
    <select id="selectINTG_BL_SEQ_DOOR_RECEIPT" parameterClass="HashMap" resultClass="String">
	    /* BlCmmSQL.xml > selectINTG_BL_SEQ_DOOR_RECEIPT */
    	SELECT intg_bl_seq
    	  FROM TB_INTG_BL
    	 WHERE biz_clss_cd = #biz_clss_cd#
    	   AND delt_flg = 'N'
    	 <isNotEmpty property="f_ref_no">
   		   AND REF_NO = #f_ref_no#
 		  </isNotEmpty>
 		  <isNotEmpty property="f_bl_no">
    	   AND BL_NO = #f_bl_no#
    	  </isNotEmpty>  
    </select>
    
    <!-- COMMERCIAL INVOICE TB_BL_OTH   -->
    <select id="selectBLINFO_OTH" parameterClass="HashMap" resultClass="PLCIBLInfoVO">
   		/* BlCmmSQL.xml > selectBLINFO_OTH */
		SELECT seller_addr
			  ,seller_addr shpr_addr
			  ,(SELECT a.TRDP_CD FROM tb_bl_prnr a INNER JOIN tb_trdp b ON a.TRDP_CD =b.TRDP_CD  where intg_bl_seq = cast(#intg_bl_seq# as varchar) and BL_TRDP_TP_CD = 'S01') AS shpr_cd
		      ,cnee_addr
		      ,vndr_trdp_cd vndr_cd
		      ,vndr_trdp_nm vndr_nm
		      ,vndr_trdp_addr vndr_addr
		      ,notify_addr
		      ,vsl_flt
		      ,pol_nm
		      ,pod_nm
		      ,inv_no
		      ,inv_dt
		      ,lc_no
		      ,lc_dt
		      ,lc_issue_bank
		      ,por_nm
		      ,carr_trdp_cd
		      ,carr_trdp_nm
		      ,svc_term
		      ,CONVERT(varchar(8), etd_dttm, 120)   AS etd_dttm
		      ,mk_txt
		      ,qty + char(13)+char(10) AS qty
		      ,desc_txt
		      ,price + char(13)+char(10) AS price
		      ,amount + char(13)+char(10) AS amount
		      ,grs_wgt
		      ,chg_wgt
		      ,meas
		      ,intg_bl_seq
		      ,wrk_tp
		      ,cnt_origin cnt_cd
		      ,(SELECT
					cnt_eng_nm 
				FROM
					tb_cnt X 
				WHERE
					X.cnt_cd = cnt_origin) AS cnt_nm
			  ,bl_no
			  ,inco_cd
			  ,pol_cd
			  ,pod_cd
			  ,eta_dt_tm AS eta_dttm
			  ,net_wgt_txt
		  FROM TB_BL_OTH
		 WHERE 
		 		intg_bl_seq = cast(#intg_bl_seq# as varchar)
		<isNotEmpty property="wrk_tp">
			AND 
				WRK_TP = #wrk_tp#
		</isNotEmpty>
		<isEmpty property="wrk_tp">
			AND 
				WRK_TP = 'CI'
		</isEmpty>
		
	</select>
	
	
	
	<!-- PACKING LIST TB_BL_OTH   -->
    <select id="selectBLINFO_OTH_PL" parameterClass="HashMap" resultClass="PLCIBLInfoVO">
      /* BlCmmSQL.xml > selectBLINFO_OTH_PL */
		SELECT seller_addr
		      ,cnee_addr
		      ,notify_addr
		      ,vsl_flt
		      ,pol_nm
		      ,pod_nm
		      ,inv_no
		      ,inv_dt
		      ,lc_no
		      ,lc_dt
		      ,lc_issue_bank
		      ,carr_trdp_cd
		      ,carr_trdp_nm
		      ,por_nm
		      ,svc_term
		      ,CONVERT(varchar(8), etd_dttm, 120)   AS etd_dttm
		      ,mk_txt
		      ,qty + char(13)+char(10) AS qty
		      ,desc_txt
		      ,price
		      ,amount
		      ,grs_wgt + char(13)+char(10) AS grs_wgt
		      ,chg_wgt + char(13)+char(10) AS chg_wgt
		      ,meas + char(13)+char(10) AS meas
		      ,intg_bl_seq
		      ,wrk_tp
		  FROM TB_BL_OTH
		 WHERE intg_bl_seq = cast(#intg_bl_seq# as varchar)
		   AND WRK_TP = 'PL'
	</select>
	
	
	<!-- CERTIFICATE OF ORIGIN TB_BL_OTH   -->
    <select id="selectBLINFO_OTH_CO" parameterClass="HashMap" resultClass="PLCIBLInfoVO">
   		/* BlCmmSQL.xml > selectBLINFO_OTH_CO */
		SELECT seller_addr	AS shpr_addr
		      ,cnee_addr
		      ,notify_addr
		      ,agent_addr
		      ,bl_no
		      ,bl_no as doc_recpt_no	/* 20130406 OJG*/
		      ,bl_dt
		      ,cnt_origin
		      ,exp_ref_no
		      ,cnt_origin
		      ,point_entry             /* 20161206 CJS */
		      ,exp_carrier
		      ,vsl_flt
		      ,pol_nm
		      ,pod_nm
		      ,inv_no
		      ,inv_dt
		      ,por_nm
		      ,chamber
		      ,state_nm
		      ,svc_term
		      ,CONVERT(varchar(8), etd_dttm, 120)   AS etd_dttm
		      ,mk_txt
		      ,qty + char(13)+char(10) AS qty
		      ,desc_txt
		      ,price
		      ,amount
		      ,grs_wgt + char(13)+char(10) AS grs_wgt
		      ,chg_wgt + char(13)+char(10) AS chg_wgt
		      ,meas + char(13)+char(10) AS meas
		      ,intg_bl_seq
		      ,wrk_tp
		  FROM TB_BL_OTH
		 WHERE intg_bl_seq = cast(#intg_bl_seq# as varchar)
		   AND WRK_TP = 'CO'
	</select>
	
	
	<!-- COMMERCIAL INVOICE TB_INTG_BL   -->
    <select id="selectBLINFO_INTG_BL" parameterClass="HashMap" resultClass="PLCIBLInfoVO">
        /* BlCmmSQL.xml > selectBLINFO_INTG_BL */
		SELECT   bl.BL_NO
		        ,bl.DOC_RECPT_NO 		/* 20130405 OJG */
				
		<!--	#936 [Cargozone] Shipper information is missing in OEH Commercial Invoice
				,bl.ACT_SHP_INFO    				AS SELLER_ADDR    -->
				,shpr.TRDP_ADDR                     AS SELLER_ADDR
				,shpr.TRDP_ADDR						AS SHPR_ADDR
				,shpr.TRDP_CD						AS SHPR_CD
				,(SELECT ENG_ADDR FROM tb_bl_prnr a INNER JOIN tb_trdp b ON a.TRDP_CD =b.TRDP_CD  where intg_bl_seq = cast(#intg_bl_seq# as varchar) and BL_TRDP_TP_CD = 'V01') AS VNDR_ADDR
				,(SELECT ENG_NM FROM tb_bl_prnr a INNER JOIN tb_trdp b ON a.TRDP_CD =b.TRDP_CD  where intg_bl_seq = cast(#intg_bl_seq# as varchar) and BL_TRDP_TP_CD = 'V01') AS VNDR_NM
				,(SELECT a.TRDP_CD FROM tb_bl_prnr a INNER JOIN tb_trdp b ON a.TRDP_CD =b.TRDP_CD  where intg_bl_seq = cast(#intg_bl_seq# as varchar) and BL_TRDP_TP_CD = 'V01') AS VNDR_CD
				,cnee.TRDP_ADDR						AS CNEE_ADDR
				,nty.TRDP_ADDR						AS NOTIFY_ADDR
				,agent.TRDP_ADDR					AS AGENT_ADDR
				,bl.bl_dt_tm						AS BL_DT
				/*,(select x.cnt_eng_nm from TB_CNT x where x.CNT_CD = bl.cnt_cd and x.delt_flg = 'N') AS cnt_origin 	20130403 OJG*/
				,CASE AIR_SEA_CLSS_CD WHEN 'S' THEN ( select STATE_ENG_NM from TB_STATE x, TB_CNT y where x.STATE_CD = bl.STATE_CD and x.CNT_CD = y.CNT_CD and x.USE_FLG = 'Y' and x.CNT_CD = bnd.state_cnt_cd) 
				                      ELSE ''
				 END AS state_nm  
				,CASE AIR_SEA_CLSS_CD WHEN 'S' THEN ( select MAX(y.CNT_ENG_NM) from TB_STATE x,  TB_CNT y where x.STATE_CD = bl.STATE_CD  	and x.CNT_CD = y.CNT_CD and x.USE_FLG = 'Y') 
				                                  WHEN 'A' THEN (select x.cnt_eng_nm from TB_CNT x where x.CNT_CD = bl.cnt_cd and x.delt_flg = 'N') END AS cnt_origin 	/* 20130405 OJG*/
				,bl.exp_ref_no						AS EXP_REF_NO
				,CASE WHEN bl.air_sea_clss_cd = 'S' THEN  bl.TRNK_VSL_NM + ' / ' + lnr.TRDP_NM  /*(SELECT x.ENG_NM FROM TB_TRDP x WHERE x.TRDP_CD = bl.CARR_TRDP_CD1)	20130403 OJG */
				      ELSE bl.flt_no + ' / ' + lnr.TRDP_NM
				 END AS EXP_CARRIER
				,CASE WHEN bl.air_sea_clss_cd = 'A' THEN bl.flt_no
   				      WHEN bl.air_sea_clss_cd = 'S' AND ISNULL(bl.TRNK_VSL_NM,'') = '' AND ISNULL(TRNK_VOY,'') = '' THEN '' 
				      ELSE bl.TRNK_VSL_NM+ '/' + TRNK_VOY 
				 END AS VSL_FLT
				,bl.POL_CD
				,bl.POL_NM
				,bl.POD_CD
				,bl.POD_NM
				,bl.POR_NM
				,CASE WHEN bl.AIR_SEA_CLSS_CD = 'A' 
						THEN CASE WHEN bl.FRT_TERM_CD = 'PP' THEN 'FREIGHT PREPAID'
							      WHEN bl.FRT_TERM_CD = 'CC' THEN 'FREIGHT COLLECT'  
							 END
				      WHEN bl.AIR_SEA_CLSS_CD = 'S' 
						THEN CASE WHEN bl.FRT_TERM_C_CD = 'PP' THEN 'FREIGHT PREPAID'
							      WHEN bl.FRT_TERM_C_CD = 'CC' THEN 'FREIGHT COLLECT'
							 END
				 END								AS SVC_TERM
				,bl.FRT_TERM_CD
				,CONVERT(varchar(8), bl.ETD_DT_TM,120) AS etd_dttm
				<!-- #3468 [BINEX]C/I & P/L 추가 수정
				     AEM 의 경우 ETA_DT_TM 의 시간정보도 필요하므로 분기처리
				 -->
				,CASE WHEN bl.AIR_SEA_CLSS_CD = 'A'
				      THEN CONVERT(varchar(12), bl.ETA_DT_TM, 120)
				      WHEN bl.AIR_SEA_CLSS_CD = 'S'
				      THEN CONVERT(varchar(8), bl.ETA_DT_TM, 120)
				 END AS eta_dttm
				,bl.MK_TXT
				,CONVERT(VARCHAR, bl.PCK_QTY) + ' ' + pcd.PCK_NM	AS QTY
				,bl.DESC_TXT
				,CONVERT(VARCHAR,bl.MK_GRS_WGT) + ' KGS' + char(13)+char(10) + CONVERT(VARCHAR,bl.MK_GRS_WGT1)+ ' LBS' + char(13)+char(10)	AS GRS_WGT
				,CONVERT(VARCHAR,bl.CHG_WGT) + ' KGS' + char(13)+char(10) + CONVERT(VARCHAR,bl.CHG_WGT1)+ ' LBS' + char(13)+char(10)	AS CHG_WGT
				,CASE WHEN bl.AIR_SEA_CLSS_CD = 'A' THEN  CONVERT(VARCHAR,bl.VOL_MEAS) + ' CBM'
				      ELSE CONVERT(VARCHAR,bl.MK_MEAS) + ' CBM' + char(13)+char(10) + CONVERT(VARCHAR,bl.MK_MEAS1)+ ' CFT'	+ char(13)+char(10)		
				 END AS MEAS
				,'' AS WRK_TP 
				,bl.lc_no AS LC_NO
				,bl.inv_no AS INV_NO
				,'' AS LC_DT
				,'' AS LC_ISSUE_BANK
				,LNR.TRDP_CD AS CARR_TRDP_CD
			    ,LNR.TRDP_NM AS CARR_TRDP_NM
			    ,bl.cnt_cd
			    ,(SELECT
		            cnt_eng_nm 
		        FROM
		            tb_cnt X 
		        WHERE
		            X.cnt_cd = bl.cnt_cd) AS cnt_nm
		        ,inco_cd
		        ,bl.intg_bl_seq
		        <!-- 4.6.1 BInex_문의_수정사항_ -->
		        ,bl.cust_ref_no
		        ,'US' as def_cnt_cd
			    ,(SELECT
		            cnt_eng_nm 
		        FROM
		            tb_cnt X 
		        WHERE
		            X.cnt_cd = 'US') AS def_cnt_nm		        
		  FROM TB_INTG_BL bl
			 LEFT OUTER JOIN tb_bl_prnr shpr
			      ON bl.intg_bl_seq = shpr.intg_bl_seq  
			      AND shpr.bl_trdp_tp_cd = 'S01' 
			      AND shpr.delt_flg = 'N'  
			 LEFT OUTER JOIN tb_bl_prnr cnee
			      ON bl.intg_bl_seq = cnee.intg_bl_seq  
			      AND cnee.bl_trdp_tp_cd = 'C01' 
			      AND cnee.delt_flg = 'N' 
			 LEFT OUTER JOIN tb_bl_prnr nty
			      ON  bl.intg_bl_seq = nty.intg_bl_seq  
			      AND nty.bl_trdp_tp_cd = 'N01' 
			      AND nty.delt_flg = 'N'
			 LEFT OUTER JOIN tb_pck_ut_cd pcd        
	              ON bl.pck_ut_cd = pcd.pck_ut_cd 
	              AND pcd.use_flg = 'Y'
	         LEFT OUTER JOIN tb_bl_prnr lnr
		 	      ON bl.intg_bl_seq = lnr.intg_bl_seq
  			      AND lnr.bl_trdp_tp_cd = 'L01'
		          AND lnr.delt_flg = 'N'
		     LEFT OUTER JOIN tb_bl_prnr agent
		          /* MB/L의 forwarding Agent를 불러옴  */
		          <!-- #2400 [UFF] AWB Cert of Orig Error -->
		 	      ON (SELECT hbl.INTG_BL_SEQ
		 	      FROM TB_INTG_BL hbl
		 	      <!--#6754 [GENESIS] MBL의 Filling No. 메뉴얼 입력시 중복 생성 가능 이슈 [ #6570 관련 ]-->
		 	      LEFT OUTER JOIN TB_ADD_INFO_BND BND ON hbl.INTG_BL_SEQ = BND.INTG_BL_SEQ AND BND.delt_flg = 'N'
		 	      WHERE hbl.REF_NO = BL.REF_NO AND hbl.BIZ_CLSS_CD = 'M' AND hbl.DELT_FLG = 'N'
				  AND hbl.air_sea_clss_cd = #air_sea_clss_cd#
				  AND bnd.bnd_clss_cd = #bnd_clss_cd#
		 	      ) = agent.intg_bl_seq
  			      AND agent.bl_trdp_tp_cd = 'A01'
		          AND agent.delt_flg = 'N'       
		     JOIN TB_ADD_INFO_BND bnd
				  ON bl.intg_bl_seq = bnd.INTG_BL_SEQ                              
			 WHERE bl.intg_bl_seq = cast(#intg_bl_seq# as varchar)
	</select>
	
	
	
	
	<!--COMMERCIAL INVOICE 등록   -->
    <insert id="insertCI_BLINFO" parameterClass="HashMap">
    	/* BlCmmSQL.xml > insertCI_BLINFO */
    	INSERT INTO TB_BL_OTH
    		(intg_bl_seq
			,wrk_tp
			,seller_addr
			,cnee_addr
			,vsl_flt
			,etd_dttm
			,bl_no
			,inv_no
			,inv_dt
			,cnt_origin
			,lc_no
			,lc_dt
			,lc_issue_bank
			,carr_trdp_cd
			,carr_trdp_nm
			,por_nm
			,pol_nm
			,pod_nm
			,notify_addr
			,svc_term
			,mk_txt
			,desc_txt
			,qty
			,price
			,amount
			,rgst_usrid
			,rgst_ofc_cd
			,rgst_tms
			,modi_usrid
			,modi_ofc_cd
			,modi_tms
		)VALUES(
			#intg_bl_seq#
			,CASE WHEN #wrk_tp# is null THEN 'CI' ELSE #wrk_tp# END
			,#f_seller#
			,#f_consignee#
			,#f_vslflt#
			,#f_dept_dt#
			,#txt_hbl_no#
			,#f_inv_no#
			,#f_inv_dt#
			,#f_cnt_origin#
			,#f_lc_no#
			,#f_lc_dt#
			,#f_lc_issue_bank#
			,#f_carr_trdp_cd#
			,#f_carr_trdp_nm#
			,#f_por#
			,#f_dept#
			,#f_dest#
			,#f_notify#
			,#f_termpay#
			,#f_mark_num#
			,#f_desc_good#
			,#f_qty#
			,#f_unit#
			,#f_amt#
			,#proc_usrid#
			,#proc_ofccd#
			,getdate()
			,#proc_usrid#
			,#proc_ofccd#
			,GETUTCDATE()
    	)
    
    </insert>
    
    <!--COMMERCIAL INVOICE 수정   -->
    <update id="updateCI_BLINFO" parameterClass="HashMap">
    	/* BlCmmSQL.xml > updateCI_BLINFO */
    	UPDATE TB_BL_OTH
    	   SET seller_addr		= #f_seller#
	           ,cnee_addr		= #f_consignee#
	           ,notify_addr		= #f_notify#
	           ,vsl_flt			= #f_vslflt#
	           ,etd_dttm		= #f_dept_dt#
	           ,inv_no			= #f_inv_no#
	           ,inv_dt			= #f_inv_dt#
	           ,cnt_origin		= #f_cnt_origin#
	           ,lc_no			= #f_lc_no#
	           ,lc_dt			= #f_lc_dt#
	           ,lc_issue_bank 	= #f_lc_issue_bank#
	           ,carr_trdp_cd 	= #f_carr_trdp_cd#
	           ,carr_trdp_nm 	= #f_carr_trdp_nm#
	           ,por_nm			= #f_por#
	           ,pol_nm			= #f_dept#
	           ,pod_nm			= #f_dest#
	           ,svc_term		= #f_termpay#
	           ,mk_txt			= #f_mark_num#
	           ,desc_txt		= #f_desc_good#
	           ,qty				= #f_qty#
	           ,price			= #f_unit#
	           ,amount			= #f_amt#
	           ,modi_usrid		= #proc_usrid#
	           ,modi_ofc_cd		= #proc_ofccd#
	           ,modi_tms		= GETUTCDATE()
	     WHERE intg_bl_seq  	= cast(#intg_bl_seq# as varchar)
	       AND wrk_tp 			= CASE WHEN #wrk_tp# is null THEN 'CI' ELSE #wrk_tp# END
    </update>
    
    
    
    
    <!--PACKING LIST 등록   -->
    <insert id="insertPL_BLINFO" parameterClass="HashMap">
    	/* BlCmmSQL.xml > insertPL_BLINFO */
    	INSERT INTO TB_BL_OTH(  intg_bl_seq
					           ,wrk_tp
					           ,seller_addr
					           ,cnee_addr
					           ,notify_addr
					           ,vsl_flt
					           ,etd_dttm
					           ,bl_no
					           ,inv_no
					           ,inv_dt
					           
					           ,lc_no
					           ,lc_dt
					           ,lc_issue_bank
					           ,carr_trdp_cd
					           ,carr_trdp_nm
					           
					           ,por_nm
					           ,pol_nm
					           ,pod_nm
					           ,svc_term
					           ,mk_txt
					           ,desc_txt
					           ,qty
					
					           ,grs_wgt
					           ,chg_wgt
					           ,meas
					           ,rgst_usrid
					           ,rgst_ofc_cd
					           ,rgst_tms
					           ,modi_usrid
					           ,modi_ofc_cd
					           ,modi_tms
					    	)VALUES(
					    		#intg_bl_seq#
					           ,'PL'
					           ,#f_seller#
					           ,#f_consignee#
					           ,#f_notify#
					           ,#f_vslflt#
					           ,#f_dept_dt#
					           ,#txt_hbl_no#
					
					           ,#f_inv_no#
					           ,#f_inv_dt#
					           
					           ,#f_lc_no#
					           ,#f_lc_dt#
					           ,#f_lc_issue_bank#
					           ,#f_carr_trdp_cd#
					           ,#f_carr_trdp_nm#
					           
					           ,#f_por#
					           ,#f_dept#
					           ,#f_dest#
					
					           ,#f_termpay#
					           ,#f_mark_num#
					           ,#f_desc_good#
					           ,#f_qty#
					
					           ,#f_grs_wgt#
					           ,#f_chg_wgt#
					           ,#f_meas#
					           ,#proc_usrid#
					           ,#proc_ofccd#
					           ,getdate()
					           ,#proc_usrid#
					           ,#proc_ofccd#
					           ,getutcdate()
    		)
    
    </insert>
    
    
    
    <!--PACKING LIST 수정   -->
    <update id="updatePL_BLINFO" parameterClass="HashMap">
    	/* BlCmmSQL.xml > updatePL_BLINFO */
    	UPDATE TB_BL_OTH
    	   SET seller_addr		= #f_seller#
	           ,cnee_addr		= #f_consignee#
	           ,notify_addr		= #f_notify#	           
	           ,vsl_flt			= #f_vslflt#
	           ,etd_dttm		= #f_dept_dt#
	           ,inv_no			= #f_inv_no#
	           ,inv_dt			= #f_inv_dt#
	           ,lc_no			= #f_lc_no#
	           ,lc_dt			= #f_lc_dt#
	           ,lc_issue_bank 	= #f_lc_issue_bank#
	           ,carr_trdp_cd	= #f_carr_trdp_cd#
	           ,carr_trdp_nm	= #f_carr_trdp_nm#
	           ,por_nm			= #f_por#
	           ,pol_nm			= #f_dept#
	           ,pod_nm			= #f_dest#
	           ,svc_term		= #f_termpay#
	           ,mk_txt			= #f_mark_num#
	           ,desc_txt		= #f_desc_good#
	           ,qty				= #f_qty#
	           ,grs_wgt			= #f_grs_wgt#
	           ,chg_wgt			= #f_chg_wgt#
	           ,meas			= #f_meas#
	           ,modi_usrid		= #proc_usrid#
	           ,modi_ofc_cd		= #proc_ofccd#
	           ,modi_tms		= GETUTCDATE()     WHERE intg_bl_seq  	= cast(#intg_bl_seq# as varchar)
	       AND wrk_tp 			= 'PL'  
    </update>
    
    
    
    <!-- CERTIFICATE OF ORIGIN 등록   -->
    <insert id="insertCO_BLINFO" parameterClass="HashMap">
    	/* BlCmmSQL.xml > insertCO_BLINFO */
    	INSERT INTO TB_BL_OTH(
    		intg_bl_seq
           ,wrk_tp
           ,seller_addr
           ,cnee_addr
           ,bl_no
		   ,bl_dt	
		   ,exp_ref_no
		   ,cnt_origin
		   ,point_entry
		   ,exp_carrier
		   ,chamber
		   ,state_nm
           ,pol_nm
           ,pod_nm
           ,notify_addr
           ,agent_addr
           ,mk_txt
           ,desc_txt
           ,qty
           ,grs_wgt
           ,chg_wgt
           ,meas
           ,rgst_usrid
           ,rgst_ofc_cd
           ,rgst_tms
           ,modi_usrid
           ,modi_ofc_cd
           ,modi_tms
    	)VALUES(
    		#intg_bl_seq#
           ,'CO'
           ,#f_seller#
           ,#f_consignee#
           ,#f_bl_no#
		   ,#f_bl_dt#	
		   ,#f_exp_ref#
		   ,#f_cnt_origin#
		   ,#f_point_entry#
		   ,#f_exp_carrier#
		   ,#f_chamber#
		   ,#f_state_nm#
           ,#f_pol_nm#
           ,#f_pod_nm#
           ,#f_notify#
           ,#f_agent#
           ,#f_mark_num#
           ,#f_desc_good#
           ,#f_qty#
           ,#f_grs_wgt#
           ,#f_chg_wgt#
           ,#f_meas#
           ,#proc_usrid#
           ,#proc_ofccd#
           ,getdate()
           ,#proc_usrid#
           ,#proc_ofccd#
           ,GETUTCDATE()
    	)
    </insert>
    
    
    <!--CERTIFICATE OF ORIGIN 수정   -->
    <update id="updateCO_BLINFO" parameterClass="HashMap">
    	/* BlCmmSQL.xml > updateCO_BLINFO */
    	UPDATE TB_BL_OTH
    	   SET  seller_addr	= #f_seller#
	           ,cnee_addr	= #f_consignee#
	           ,bl_no		= #f_bl_no#
			   ,bl_dt		= #f_bl_dt#
			   ,exp_ref_no	= #f_exp_ref#
			   ,cnt_origin	= #f_cnt_origin#
			   ,point_entry	= #f_point_entry#
			   ,exp_carrier	= #f_exp_carrier#
			   ,chamber		= #f_chamber#
			   ,state_nm	= #f_state_nm#
	           ,pol_nm		= #f_pol_nm#
	           ,pod_nm		= #f_pod_nm#
	           ,notify_addr	= #f_notify#
	           ,agent_addr	= #f_agent#
	           ,mk_txt		= #f_mark_num#
	           ,desc_txt	= #f_desc_good#
	           ,qty			= #f_qty#
	           ,grs_wgt		= #f_grs_wgt#
	           ,chg_wgt		= #f_chg_wgt#
	           ,meas		= #f_meas#
	           ,modi_usrid	= #proc_usrid#
	           ,modi_ofc_cd	= #proc_ofccd#
	           ,modi_tms	= GETUTCDATE()
	     WHERE intg_bl_seq  = cast(#intg_bl_seq# as varchar)
	       AND wrk_tp 		= 'CO'  
    </update>
    
    
    
    <!-- Ocean Export > Master BL > Package Label   -->
    <select id="selectSEE_BMD_0061_MBL" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	/* BlCmmSQL > selectSEE_BMD_0061_MBL */    
		SELECT	a1.intg_bl_seq
				,ISNULL(a1.pck_qty, 0) AS mbl_pck_qty
				
		  		,(SELECT ISNULL(SUM(hbl.pck_qty), 0) FROM tb_intg_bl hbl, tb_intg_bl_rlt rlt
					WHERE rlt.rlt_intg_bl_seq = a1.intg_bl_seq AND hbl.intg_bl_seq = rlt.intg_bl_seq
					AND rlt.delt_flg = 'N' AND hbl.delt_flg = 'N') AS pck_qty
				, '1/' + CONVERT(VARCHAR, (SELECT ISNULL(SUM(hbl.pck_qty), 0) FROM tb_intg_bl hbl, tb_intg_bl_rlt rlt
					WHERE rlt.rlt_intg_bl_seq = a1.intg_bl_seq AND hbl.intg_bl_seq = rlt.intg_bl_seq
					AND rlt.delt_flg = 'N' AND hbl.delt_flg = 'N')) pack_qty_no1
				, CONVERT(VARCHAR, (SELECT ISNULL(SUM(hbl.pck_qty), 0) FROM tb_intg_bl hbl, tb_intg_bl_rlt rlt
					WHERE rlt.rlt_intg_bl_seq = a1.intg_bl_seq AND hbl.intg_bl_seq = rlt.intg_bl_seq
					AND rlt.delt_flg = 'N' AND hbl.delt_flg = 'N')) + '/' + CONVERT(VARCHAR, (SELECT ISNULL(SUM(hbl.pck_qty), 0) FROM tb_intg_bl hbl, tb_intg_bl_rlt rlt
					WHERE rlt.rlt_intg_bl_seq = a1.intg_bl_seq AND hbl.intg_bl_seq = rlt.intg_bl_seq
					AND rlt.delt_flg = 'N' AND hbl.delt_flg = 'N')) pack_qty_no2
			    ,a1.bl_no as mbl_no
				,'' as hbl_no
				,a1.pod_nm
				,a3.trdp_cd
				,a3.trdp_nm
				,a3.trdp_addr
				,a3.trdp_phn
				,a3.trdp_fax
				,(select lgl_addr from tb_trdp where trdp_cd = a3.trdp_cd) as lgl_addr 
				,a4.eng_nm
				,a4.lgl_addr
				,a5.pic_nm
				,a5.pic_eml
				,a5.pic_phn
				,a5.pic_fax
				,(SELECT count(*) FROM tb_intg_bl_rlt rlt WHERE rlt.rlt_intg_bl_seq = a1.intg_bl_seq  AND rlt.delt_flg = 'N' ) AS hbl_cnt 
	 FROM tb_intg_bl a1 
		LEFT OUTER JOIN tb_bl_prnr a3 ON a3.intg_bl_seq = a1.intg_bl_seq
	                                 AND a3.bl_trdp_tp_cd = 'P01'
	    LEFT OUTER JOIN tb_trdp a4 ON a4.trdp_cd =  a3.trdp_cd AND a4.DELT_FLG = 'N' 
	    LEFT OUTER JOIN tb_trdp_cntc_pson a5 ON a5.trdp_cd =  a4.trdp_cd  AND rep_flg = 'Y' AND a5.DELT_FLG = 'N'    
	 WHERE a1.intg_bl_seq = #s_intg_bl_seq#
    </select>    
    
    <!-- Ocean Export > House BL > Package Label   -->
    <select id="selectSEE_BMD_0061_HBL" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	/* BlCmmSQL > selectSEE_BMD_0061_HBL */    
	SELECT a1.intg_bl_seq
	      ,a1.pck_qty
	      , '1/' + CONVERT(VARCHAR, a1.pck_qty) pack_qty_no1
	      , CONVERT(VARCHAR, a1.pck_qty) + '/' + CONVERT(VARCHAR, a1.pck_qty) pack_qty_no2
	      ,(SELECT y1.bl_no
	          FROM tb_intg_bl y1
	         WHERE y1.intg_bl_seq = (SELECT x1.rlt_intg_bl_seq
	                                   FROM tb_intg_bl_rlt x1
	                                  WHERE x1.intg_bl_seq = a1.intg_bl_seq)) mbl_no
	      ,a1.bl_no hbl_no
	      ,isnull(NULLIF(a1.fnl_dest_loc_nm, ''), a1.pod_nm) as pod_nm
	      ,isnull(a3.trdp_cd, '') as trdp_cd
	      ,isnull(a3.trdp_nm, '') as trdp_nm
	      ,isnull(a3.trdp_addr, '') as trdp_addr
	      ,isnull(a3.trdp_phn, '') as trdp_phn
	      ,isnull(a3.trdp_fax, '') as trdp_fax
	      ,(select isnull(lgl_addr, '') from tb_trdp where trdp_cd = a3.trdp_cd) as lgl_addr 
	      ,isnull(a4.eng_nm, '') as eng_nm
	      ,isnull(a4.lgl_addr, '') as lgl_addr
	      ,isnull(a5.pic_nm, '') as pic_nm
	      ,isnull(a5.pic_eml, '') as pic_eml
	      ,isnull(a5.pic_phn, '') as pic_phn
	      ,isnull(a5.pic_fax, '') as pic_fax
	 FROM tb_intg_bl a1 
		LEFT OUTER JOIN tb_bl_prnr a3 ON a3.intg_bl_seq = a1.intg_bl_seq
	                                 AND a3.bl_trdp_tp_cd = 'P01'
	    LEFT OUTER JOIN tb_trdp a4 ON a4.trdp_cd =  a3.trdp_cd AND a4.DELT_FLG = 'N' 
	    LEFT OUTER JOIN tb_trdp_cntc_pson a5 ON a5.trdp_cd =  a4.trdp_cd  AND rep_flg = 'Y' AND a5.DELT_FLG = 'N'    
	 WHERE a1.intg_bl_seq = #s_intg_bl_seq#
    </select>    
    
    
    
    <!-- Air Export > Master BL > Air Label   -->
    <select id="selectAIE_BMD_0061_MBL" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT	mbl.intg_bl_seq,			mbl.bl_no AS mbl_no,
				ISNULL(mbl.pck_qty, 0) AS mbl_pck_qty,
				'' AS hbl_no,
				(SELECT ISNULL(SUM(hbl.pck_qty), 0) FROM tb_intg_bl hbl, tb_intg_bl_rlt rlt
				  WHERE rlt.rlt_intg_bl_seq = mbl.intg_bl_seq AND hbl.intg_bl_seq = rlt.intg_bl_seq
				    AND rlt.delt_flg = 'N' AND hbl.delt_flg = 'N') AS pck_qty
				,(SELECT count(*) FROM tb_intg_bl_rlt rlt WHERE rlt.rlt_intg_bl_seq = mbl.intg_bl_seq  AND rlt.delt_flg = 'N' ) AS hbl_cnt 
		  FROM	tb_intg_bl mbl
		 WHERE	mbl.intg_bl_seq = cast(#intg_bl_seq# as varchar)
		   AND	mbl.delt_flg = 'N'
    </select>    



    <!-- Air Export > House BL > Air Label   -->
    <select id="selectAIE_BMD_0061_HBL" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT	hbl.intg_bl_seq,			mbl.bl_no AS mbl_no,
				ISNULL(mbl.pck_qty, 0) AS mbl_pck_qty,
				hbl.bl_no AS hbl_no,		hbl.pck_qty
				,1 as hbl_cnt
		  FROM	tb_intg_bl hbl
  
LEFT OUTER JOIN	tb_intg_bl_rlt rlt
			 ON	rlt.intg_bl_seq = hbl.intg_bl_seq AND rlt.delt_flg = 'N'

LEFT OUTER JOIN tb_intg_bl mbl
			 ON	mbl.intg_bl_seq = rlt.rlt_intg_bl_seq AND mbl.delt_flg = 'N'

		 WHERE	hbl.intg_bl_seq = cast(#intg_bl_seq# as varchar)
		   AND	hbl.delt_flg = 'N'
    </select>    



    <!-- Ocean Import > House BL > P.O.D.(Proof Of Delivery)   -->
    <select id="selectSEE_BMD_0062" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	/* BlCmmSQL > selectSEE_BMD_0062 */    
	SELECT a1.intg_bl_seq
	      ,a1.bl_no hbl_no
	      ,cne.trdp_cd AS trdp_cd
	      ,cne.trdp_nm AS trdp_nm
	      ,isnull(trdp.lgl_addr,'') + 
				 (case when isnull(trdp.city_nm,'') != '' and isnull(trdp.state_cd,'') != '' and isnull(trdp.rep_zip,'') != '' then char(13) + trdp.city_nm + ', ' + trdp.state_cd + ' ' + trdp.rep_zip
				  	   when isnull(trdp.city_nm,'') != '' and isnull(trdp.state_cd,'') != '' and isnull(trdp.rep_zip,'') = '' then char(13) + trdp.city_nm + ' ' + trdp.state_cd
					   when isnull(trdp.city_nm,'') != '' and isnull(trdp.state_cd,'') = '' and isnull(trdp.rep_zip,'') = '' then char(13) + trdp.city_nm
					   when isnull(trdp.city_nm,'') != '' and isnull(trdp.state_cd,'') = '' and isnull(trdp.rep_zip,'') != '' then char(13) + trdp.city_nm + ', ' + trdp.rep_zip
					   else '' end) as trdp_addr 
	      ,cne.trdp_pic as trdp_pic_nm
	      ,cne.trdp_phn AS trdp_phn
	      ,cne.trdp_fax AS trdp_fax                       
	  FROM tb_intg_bl a1 
	   LEFT OUTER JOIN tb_bl_prnr cne
	   		   ON a1.intg_bl_seq = cne.intg_bl_seq  
	          AND cne.bl_trdp_tp_cd = 'C01'
	          AND cne.delt_flg = 'N'
	   LEFT OUTER JOIN tb_trdp trdp
			    ON cne.trdp_cd = trdp.trdp_cd
	  WHERE a1.intg_bl_seq = #s_intg_bl_seq#
    </select>   
    
    
    
    
    <!-- Air Import > House BL > P.O.D.(Proof Of Delivery)   -->
    <select id="selectSEE_BMD_0063" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
/* BlCmmSQL > selectSEE_BMD_0063 */    
	SELECT a1.intg_bl_seq
	      ,a1.bl_no hbl_no
	      ,cne.trdp_cd AS trdp_cd
	      ,cne.trdp_nm AS trdp_nm
	      ,isnull(trdp.lgl_addr,'') + 
				 (case when isnull(trdp.city_nm,'') != '' and isnull(trdp.state_cd,'') != '' and isnull(trdp.rep_zip,'') != '' then char(13) + trdp.city_nm + ', ' + trdp.state_cd + ' ' + trdp.rep_zip
				  	   when isnull(trdp.city_nm,'') != '' and isnull(trdp.state_cd,'') != '' and isnull(trdp.rep_zip,'') = '' then char(13) + trdp.city_nm + ' ' + trdp.state_cd
					   when isnull(trdp.city_nm,'') != '' and isnull(trdp.state_cd,'') = '' and isnull(trdp.rep_zip,'') = '' then char(13) + trdp.city_nm
					   when isnull(trdp.city_nm,'') != '' and isnull(trdp.state_cd,'') = '' and isnull(trdp.rep_zip,'') != '' then char(13) + trdp.city_nm + ', ' + trdp.rep_zip
					   else '' end) as trdp_addr 
	      ,cne.trdp_pic as trdp_pic_nm
	      ,cne.trdp_phn AS trdp_phn
	      ,cne.trdp_fax AS trdp_fax                       
	  FROM tb_intg_bl a1 
	   LEFT OUTER JOIN tb_bl_prnr cne
	   		   ON a1.intg_bl_seq = cne.intg_bl_seq  
	          AND cne.bl_trdp_tp_cd = 'C01'
	          AND cne.delt_flg = 'N'
	   LEFT OUTER JOIN tb_trdp trdp
			    ON cne.trdp_cd = trdp.trdp_cd
	  WHERE a1.intg_bl_seq = #s_intg_bl_seq#
    </select>   
    
    
    
    <!-- Ocean Import > House BL > USDA Hold Notice   -->
    <select id="selectSEE_BMD_0064" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
    <![CDATA[
		/* BlCmmSQL > selectSEE_BMD_0064 */    
		SELECT a1.intg_bl_seq
		      ,a1.bl_no hbl_no
		      ,(
				select max(cntr_txt1) + max(cntr_txt2) + max(cntr_txt3) + max(cntr_txt4) + max(cntr_txt5) +
					   max(cntr_txt6) + max(cntr_txt7) + max(cntr_txt8) + max(cntr_txt9) + max(cntr_txt10) +
					   max(cntr_txt11) + max(cntr_txt12) + max(cntr_txt13) + max(cntr_txt14) + max(cntr_txt15) +
					   max(cntr_txt16) + max(cntr_txt17) + max(cntr_txt18) + max(cntr_txt19) + max(cntr_txt20) as cntr_info
				from (
					SELECT
						CASE WHEN A.RNUM = 1 THEN A.cntr_list+CHAR(13) ELSE '' END cntr_txt1,
						CASE WHEN A.RNUM = 2 THEN A.cntr_list+CHAR(13) ELSE '' END cntr_txt2,
						CASE WHEN A.RNUM = 3 THEN A.cntr_list+CHAR(13) ELSE '' END cntr_txt3,
						CASE WHEN A.RNUM = 4 THEN A.cntr_list+CHAR(13) ELSE '' END cntr_txt4,
						CASE WHEN A.RNUM = 5 THEN A.cntr_list+CHAR(13) ELSE '' END cntr_txt5,
						CASE WHEN A.RNUM = 6 THEN A.cntr_list+CHAR(13) ELSE '' END cntr_txt6,
						CASE WHEN A.RNUM = 7 THEN A.cntr_list+CHAR(13) ELSE '' END cntr_txt7,
						CASE WHEN A.RNUM = 8 THEN A.cntr_list+CHAR(13) ELSE '' END cntr_txt8,
						CASE WHEN A.RNUM = 9 THEN A.cntr_list+CHAR(13) ELSE '' END cntr_txt9,
						CASE WHEN A.RNUM = 10 THEN A.cntr_list+CHAR(13) ELSE '' END cntr_txt10,
						CASE WHEN A.RNUM = 11 THEN A.cntr_list+CHAR(13) ELSE '' END cntr_txt11,
						CASE WHEN A.RNUM = 12 THEN A.cntr_list+CHAR(13) ELSE '' END cntr_txt12,
						CASE WHEN A.RNUM = 13 THEN A.cntr_list+CHAR(13) ELSE '' END cntr_txt13,
						CASE WHEN A.RNUM = 14 THEN A.cntr_list+CHAR(13) ELSE '' END cntr_txt14,
						CASE WHEN A.RNUM = 15 THEN A.cntr_list+CHAR(13) ELSE '' END cntr_txt15,
						CASE WHEN A.RNUM = 16 THEN A.cntr_list+CHAR(13) ELSE '' END cntr_txt16,
						CASE WHEN A.RNUM = 17 THEN A.cntr_list+CHAR(13) ELSE '' END cntr_txt17,
						CASE WHEN A.RNUM = 18 THEN A.cntr_list+CHAR(13) ELSE '' END cntr_txt18,
						CASE WHEN A.RNUM = 19 THEN A.cntr_list+CHAR(13) ELSE '' END cntr_txt19,
						CASE WHEN A.RNUM = 20 THEN A.cntr_list+CHAR(13) ELSE '' END cntr_txt20
					FROM
					(
						SELECT ROW_NUMBER() over(order by CNTR_LIST_SEQ) as rnum,
						CNTR_NO + ' / ' + CNTR_TPSZ_CD + ' / ' + SEAL_NO1 as cntr_list
						FROM tb_cntr_list 
						WHERE intg_bl_seq = #s_intg_bl_seq# AND delt_flg = 'N'
					) A WHERE A.rnum > 0 AND A.rnum < 21
					) inval
				) as cntr_info
		  FROM tb_intg_bl a1 
		 WHERE a1.intg_bl_seq = #s_intg_bl_seq#
 	]]>
    </select>   
    
    <!-- Ocean Import > Master BL > USDA Hold Notice   -->
    <select id="selectSEE_BMD_0065" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
/* BlCmmSQL > selectSEE_BMD_0065 */    
SELECT a1.intg_bl_seq
      ,a1.bl_no mbl_no
      ,a1.ref_no
  FROM tb_intg_bl a1 
 WHERE a1.intg_bl_seq = #s_rlt_intg_bl_seq#
    </select>   
    
    
    <!-- Ocean Import > Master BL > USDA Hold Notice   -->
    <select id="selectSEE_BMD_0065_List" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
/* BlCmmSQL > selectSEE_BMD_0065_List */   
WITH bl_info AS (
				SELECT
		            hbl.intg_bl_seq,
		            hbl.bl_no,
		            hbl.cust_ref_no,
					cust.trdp_cd AS cust_cd,
		            cust.trdp_nm AS cust_nm,
					brk.trdp_cd AS brk_cd,
		            brk.trdp_nm AS brk_nm
		        FROM
		            tb_intg_bl_rlt rlt        
		        JOIN
		            tb_intg_bl hbl      
		                ON hbl.intg_bl_seq = rlt.intg_bl_seq      
		        LEFT OUTER JOIN
					tb_bl_prnr cust      
						ON hbl.intg_bl_seq = cust.intg_bl_seq 
						AND cust.bl_trdp_tp_cd = 'C01' 
						AND cust.delt_flg = 'N' 
				LEFT OUTER JOIN
		            tb_bl_prnr brk      
		                ON brk.intg_bl_seq = hbl.intg_bl_seq 
		                AND brk.bl_trdp_tp_cd = 'N01' 
		                AND brk.delt_flg = 'N'   
		        WHERE
		            rlt.rlt_intg_bl_seq =  #s_rlt_intg_bl_seq#
		)
		
		SELECT bl.intg_bl_seq, MAX(bl.bl_no) AS bl_no, MAX(bl.cust_ref_no) AS cust_ref_no, 
		       MAX(bl.cust_cd) AS cust_cd, MAX(bl.cust_nm) AS cust_nm,
			   CASE WHEN MAX(cust_pic_eml) != '' THEN 'Y' ELSE 'N' END AS cust_eml_flg,
			   CASE WHEN MAX(cust_pic_eml) != '' THEN MAX(cust_pic_eml) ELSE '' END AS cust_eml,
			   CASE WHEN MAX(cust_pic_fax) != '' THEN 'Y' ELSE 'N' END AS cust_fax_flg,
			   CASE WHEN MAX(cust_pic_fax) != '' THEN MAX(cust_pic_fax) ELSE '' END AS cust_fax,
			   MAX(bl.brk_cd) AS brk_cd, MAX(bl.brk_nm) AS brk_nm, 
			   CASE WHEN MAX(brk_pic_eml) != '' THEN 'Y' ELSE 'N' END AS brk_eml_flg,
			   CASE WHEN MAX(brk_pic_eml) != '' THEN MAX(brk_pic_eml) ELSE '' END AS brk_eml,
			   CASE WHEN MAX(brk_pic_fax) != '' THEN 'Y' ELSE 'N' END AS brk_fax_flg,
			   CASE WHEN MAX(brk_pic_fax) != '' THEN MAX(brk_pic_fax) ELSE '' END AS brk_fax
		FROM
		(
		SELECT bl.intg_bl_seq,
			   cust_eml.pic_eml AS cust_pic_eml,
			   '' AS cust_pic_fax,
			   '' AS brk_pic_eml,
			   '' AS brk_pic_fax,
			   row_number() over(partition by intg_bl_seq order by intg_bl_seq, cust_eml.pic_eml) row_no
		FROM bl_info bl 
		LEFT OUTER JOIN
		    tb_trdp_cntc_pson cust_eml   
		        ON cust_eml.trdp_cd = bl.cust_cd
				AND cust_eml.delt_flg = 'N'
				AND cust_eml.pic_eml_flg = 'Y'
				AND isnull(cust_eml.pic_eml, '') != ''
				AND (
		            isnull(cust_eml.trd_div_cd, '') = ''               
		            or cust_eml.trd_div_cd = substring(#s_rpt_biz_tp#, 1, 2)               
		            or cust_eml.trd_div_cd = substring(#s_rpt_biz_tp#, 1, 1)              
		            or cust_eml.trd_div_cd = substring(#s_rpt_biz_tp#, 2, 1)                    
		        )  
		GROUP BY intg_bl_seq, cust_eml.pic_eml   
		
		UNION ALL
		
		SELECT bl.intg_bl_seq,
			   '' AS cust_pic_eml,
			   cust_fax.pic_fax AS cust_pic_fax,
			   '' AS brk_pic_eml,
			   '' AS brk_pic_fax,
			   row_number() over(partition by intg_bl_seq order by intg_bl_seq, cust_fax.pic_fax) row_no     
		FROM bl_info bl    
		LEFT OUTER JOIN
		    tb_trdp_cntc_pson cust_fax      
		        ON cust_fax.trdp_cd = bl.cust_cd
				AND cust_fax.delt_flg = 'N'
				AND isnull(cust_fax.pic_fax, '') != ''
				AND (
		            isnull(cust_fax.trd_div_cd, '') = ''               
		            or cust_fax.trd_div_cd = substring(#s_rpt_biz_tp#, 1, 2)               
		            or cust_fax.trd_div_cd = substring(#s_rpt_biz_tp#, 1, 1)              
		            or cust_fax.trd_div_cd = substring(#s_rpt_biz_tp#, 2, 1)                    
		        )  
		GROUP BY intg_bl_seq, cust_fax.pic_fax
		
		UNION ALL
		
		SELECT bl.intg_bl_seq,   
			   '' AS cust_pic_eml,
			   '' AS cust_pic_fax,
			   brk_eml.pic_eml AS brk_pic_eml,
			   '' AS brk_pic_fax,
			   row_number() over(partition by intg_bl_seq order by intg_bl_seq, brk_eml.pic_eml) row_no
		FROM bl_info bl 
		LEFT OUTER JOIN
		    tb_trdp_cntc_pson brk_eml   
		        ON brk_eml.trdp_cd = bl.brk_cd
				AND brk_eml.delt_flg = 'N'
				AND brk_eml.pic_eml_flg = 'Y'
				AND isnull(brk_eml.pic_eml, '') != ''
				AND (
		            isnull(brk_eml.trd_div_cd, '') = ''               
		            or brk_eml.trd_div_cd = substring(#s_rpt_biz_tp#, 1, 2)               
		            or brk_eml.trd_div_cd = substring(#s_rpt_biz_tp#, 1, 1)              
		            or brk_eml.trd_div_cd = substring(#s_rpt_biz_tp#, 2, 1)                    
		        )    
		GROUP BY intg_bl_seq, brk_eml.pic_eml
		
		UNION ALL
		
		SELECT bl.intg_bl_seq,     
			   '' AS cust_pic_eml,
			   '' AS cust_pic_fax,
			   '' AS brk_pic_eml,
			   brk_fax.pic_fax AS brk_pic_fax,
			   row_number() over(partition by intg_bl_seq order by intg_bl_seq, brk_fax.pic_fax) row_no     
		FROM bl_info bl    
		LEFT OUTER JOIN
		    tb_trdp_cntc_pson brk_fax      
		        ON brk_fax.trdp_cd = bl.brk_cd
				AND brk_fax.delt_flg = 'N'
				AND isnull(brk_fax.pic_fax, '') != ''
				AND (
		            isnull(brk_fax.trd_div_cd, '') = ''               
		            or brk_fax.trd_div_cd = substring(#s_rpt_biz_tp#, 1, 2)               
		            or brk_fax.trd_div_cd = substring(#s_rpt_biz_tp#, 1, 1)              
		            or brk_fax.trd_div_cd = substring(#s_rpt_biz_tp#, 2, 1)                    
		        )   
		GROUP BY intg_bl_seq, brk_fax.pic_fax 
		) inval
		JOIN bl_info bl ON inval.intg_bl_seq = bl.intg_bl_seq
		GROUP BY bl.intg_bl_seq, row_no
		ORDER BY bl.intg_bl_seq, row_no
    </select>   



	
	
	<!-- LOAD PLAN MBL INFO   -->
    <select id="selectLP_MBL_INFO" parameterClass="HashMap" resultClass="LPBLVO">
    	SELECT 
    	      TOP 1
    		  bl.LNR_BKG_NO	AS bkg_no
		      ,bl.REF_NO
		      ,agent.TRDP_NM	AS agent_nm
		      ,bl.TRNK_VSL_NM
		      ,bl.TRNK_VOY
		      ,bl.POL_NM
		      ,CONVERT(varchar(8), bl.etd_dt_tm, 120)   AS etd_dt_tm
		      ,CONVERT(varchar(8), bl.eta_dt_tm, 120)   AS eta_dt_tm
		      ,bl.POD_NM
		      ,bl.FNL_DEST_LOC_NM
		      ,bl.BL_NO			AS mbl_no
		      ,bl.INTG_BL_SEQ
		      <!-- #3259 [CLC] Container Load Plan 에도 적용 [#2422] Add editabel warehouse in the OEM B/L Entry and displayed on the OEM CLP -->
		      ,(SELECT TRDP_NM FROM tb_bl_prnr lnr WHERE bl.intg_bl_seq = lnr.intg_bl_seq  AND lnr.bl_trdp_tp_cd = 'L01' AND lnr.delt_flg = 'N') AS carr_nm
		      ,agent.TRDP_ADDR  AS agent_addr
        	  ,isNull(wh.locl_nm, '')       AS rcv_wh_nm    <!-- #3259 -->   
              ,isNull(wh.lgl_addr,'')       AS rcv_wh_addr  <!-- #3259 -->
              ,isNull(wh.CITY_NM, '')       AS rcv_city_nm  <!-- #3259 --> 
        	  ,isNull((select STATE_eng_nm from  TB_STATE a where a.STATE_CD=wh.STATE_CD and a.USE_FLG ='Y'), '') as rcv_state_nm <!-- #3259 -->
        	  	         		      
		  FROM TB_INTG_BL bl
		LEFT OUTER JOIN TB_BL_PRNR agent
			ON bl.intg_bl_seq = agent.intg_bl_seq  AND agent.bl_trdp_tp_cd = 'C01' AND agent.delt_flg = 'N'
	    LEFT OUTER JOIN tb_trdp wh
  			ON wh.trdp_cd   = bl.rcv_wh_cd
		 WHERE bl.DELT_FLG = 'N'
		   AND bl.BIZ_CLSS_CD = 'M'
		 <isNotNull property="s_ref_no">
		 	AND bl.REF_NO = #s_ref_no#
		 </isNotNull>
		 <isNotNull property="s_mbl_no">
		 	AND bl.BL_NO = #s_mbl_no#
		 </isNotNull>  
		   
    </select>
    
    
    <!-- LOAD PLAN HBL LIST   -->
    <select id="searchLPHblList" parameterClass="HashMap" resultClass="LPBLVO">
    	SELECT hbl.BL_NO
			  ,hbl.PCK_QTY
			  ,hbl.DOC_RECPT_NO
			  ,hbl.GRS_WGT
			  ,hbl.GRS_WGT1
			  ,hbl.MEAS
			  ,hbl.MEAS1
			  ,hbl.FNL_DEST_LOC_NM
			  ,shp.TRDP_NM			AS shpr_nm
			  ,hbl.intg_bl_seq
		  FROM TB_INTG_BL mbl
		LEFT OUTER JOIN tb_intg_bl_rlt rlt
			ON mbl.intg_bl_seq = rlt.rlt_intg_bl_seq AND rlt.delt_flg = 'N'
		LEFT OUTER JOIN tb_intg_bl hbl
			ON rlt.intg_bl_seq = hbl.intg_bl_seq AND hbl.biz_clss_cd = 'H' AND hbl.delt_flg = 'N'      
		LEFT OUTER JOIN tb_bl_prnr shp
			ON hbl.intg_bl_seq = shp.intg_bl_seq  AND shp.bl_trdp_tp_cd = 'S01' AND shp.delt_flg = 'N'	    
		 WHERE mbl.DELT_FLG = 'N'    
		   AND mbl.BIZ_CLSS_CD = 'M'   
		 <isNotNull property="s_ref_no">
		 	AND mbl.REF_NO = #s_ref_no#
		 </isNotNull>
		 <isNotNull property="s_mbl_no">
		 	AND mbl.BL_NO = #s_mbl_no#
		 </isNotNull>
    </select>
    
    
    
    <!-- LOAD PLAN CONTAINER LIST   -->
    <select id="searchLPCntrList" parameterClass="HashMap" resultClass="HashMap">
    	SELECT cntr_no
		      ,seal_no1
		      ,cntr_tpsz_cd
		      ,cntr_list_seq	
		      ,intg_bl_seq		AS cntr_intg_bl_seq
		  FROM TB_CNTR_LIST
		 WHERE INTG_BL_SEQ = #f_intg_bl_seq#
		   AND DELT_FLG = 'N'
    </select>


     <!-- Devanning/Segregation MBL INFO   -->
     <select id="selectDS_MBL_INFO" parameterClass="HashMap" resultClass="LPBLVO">
          /* BlCmmSQL.xml > selectDS_MBL_INFO */
          SELECT BL.REF_NO,
                 BL.TRNK_VSL_NM,
                 BL.TRNK_VOY,
                 BL.BL_NO AS MBL_NO,
                 BL.INTG_BL_SEQ,
                 BL.CFS_LOC_CD,
                 BL.CFS_LOC_NM,
                 BL.CFS_TRDP_CD,
                 BL.PCK_QTY,
                 BND.RMK_DEV,
                 BL.IT_NO AS MBL_IT_NO,
                 CFS.ENG_NM AS CFS_TRDP_NM,
		         CFS.IATA_CD AS CFS_FIRM_CD,
		         CFS.CITY_NM AS CFS_CITY_NM,
		         CFS.REP_ZIP AS CFS_ZIP_CD,
		         CFS.STATE_CD AS CFS_STATE_CD,
		         CFS.LGL_ADDR AS CFS_LGL_ADDR,
                 BL.CY_TRDP_CD,
                 (SELECT ENG_NM
                    FROM TB_TRDP
                   WHERE TRDP_CD = BL.CY_TRDP_CD) AS CY_TRDP_NM,
		<![CDATA[(SELECT PIC_NM + '<' + PIC_EML + '>'
                    FROM TB_TRDP_CNTC_PSON
                   WHERE TRDP_CD = BL.CFS_TRDP_CD AND REP_FLG = 'Y') AS PIC_EML]]>
            FROM TB_INTG_BL BL
            JOIN TB_ADD_INFO_BND BND
              ON BL.INTG_BL_SEQ = BND.INTG_BL_SEQ
             AND BND.BND_CLSS_CD =  #bnd_clss_cd# /**P*/
             AND BND.DELT_FLG = 'N'
        LEFT OUTER JOIN  TB_TRDP CFS   
           ON   BL.CFS_TRDP_CD = CFS.TRDP_CD  AND CFS.DELT_FLG = 'N'  
           WHERE BL.DELT_FLG = 'N'
             AND BL.BIZ_CLSS_CD = 'M'
             AND BL.AIR_SEA_CLSS_CD = #air_sea_clss_cd#
		<isNotNull property="s_ref_no">
             AND BL.REF_NO = #s_ref_no#
		</isNotNull>
		<isNotNull property="s_mbl_no">
             AND BL.BL_NO = #s_mbl_no#
		</isNotNull>
		<isNotNull property="s_intg_bl_seq">
             AND BL.INTG_BL_SEQ = #s_intg_bl_seq#
		</isNotNull>
     </select>


    <!-- Devanning/Segregation HBL LIST   -->
    <select id="searchDSHblList" parameterClass="HashMap" resultClass="LPBLVO">
    	/* searchDSHblList */
    	select   	  MIN(hbl.bl_no) AS bl_no
    	 			 ,MIN(hbl.rep_cmdt_nm) AS rep_cmdt_nm
					  ,CASE WHEN COUNT(cntr.cntr_no) > 1 THEN SUM(cntr.cgo_pck_qty) ELSE MIN(hbl.pck_qty) END  AS pck_qty 
					  ,CASE WHEN COUNT(cntr.cntr_no) > 1 THEN SUM(cntr.cgo_wgt) ELSE MIN(hbl.grs_wgt) END  AS grs_wgt 
					  ,CASE WHEN COUNT(cntr.cntr_no) > 1 THEN SUM(cntr.cgo_wgt1) ELSE MIN(hbl.grs_wgt1) END  AS grs_wgt1 
					  ,CASE WHEN COUNT(cntr.cntr_no) > 1 THEN SUM(cntr.cgo_meas) ELSE MIN(hbl.meas) END  AS meas 
					  ,CASE WHEN COUNT(cntr.cntr_no) > 1 THEN SUM(cntr.cgo_meas1) ELSE MIN(hbl.meas1) END  AS meas1 
					  ,MIN(hbl.fnl_dest_loc_nm) AS fnl_dest_loc_nm
					  ,MIN(hbl.intg_bl_seq) AS intg_bl_seq
					  ,MIN(hbl.it_no) AS it_no
					  ,MIN(hbl.pol_cd) AS pol_cd
					  ,MIN(pol.ams_loc_val) AS pol_ams_cd
					  ,MIN(pol.iata_loc_cd) AS pol_iata_cd
					  ,MIN(hbl.pol_nm) AS  pol_nm
					  ,MIN(hbl.pol_cd) AS  pod_cd   
					  ,MIN(hbl.pod_nm) AS  pod_nm
					  ,MIN(pod.ams_loc_val) AS pod_ams_cd
					  ,MIN(pod.iata_loc_cd) AS pod_iata_cd
					  ,MIN(lnr.trdp_cd) AS lnr_trdp_cd
					  ,MIN(lnr.trdp_nm) AS lnr_trdp_nm
					  ,MIN(lnr.trdp_cd) AS lnr_scac_cd
					  ,MIN(cne.trdp_cd) AS cnee_trdp_cd
					  ,MIN(cne.trdp_nm) AS cnee_trdp_nm
					  ,MIN(cne.trdp_addr) AS cnee_trdp_addr
					  ,MIN(hbl.ref_no) AS ref_no
					  ,MIN(hbl.trnk_vsl_cd) AS trnk_vsl_cd
					  ,MIN(hbl.trnk_vsl_nm) AS trnk_vsl_nm
					  ,MIN(hbl.trnk_voy) AS  trnk_voy
					  ,MIN(hbl.eta_dt_tm) AS eta_dt_tm
					  ,MIN(hbl.etd_dt_tm) AS etd_dt_tm
					  ,MIN(del.loc_cd) AS fnl_dest_loc_cd   
					  ,MIN(del.loc_nm) AS fnl_dest_loc_nm
					  ,MIN(del.ams_loc_val) AS fdest_ams_loc_cd
					  ,MIN(del.un_loc_cd) AS fdest_un_loc_cd
					  ,MIN(cntr.cntr_no) AS cntr_no
					  ,MIN(cntr.cntr_tpsz_cd) AS cntr_tpsz_cd
					  ,MIN(cntr.seal_no1) AS seal_no1
					  ,MIN(hbl.ams_no) AS ams_no
					  ,MIN(hbl.pck_ut_cd) AS pck_ut_cd
					  ,MIN(hbl.pck_qty) AS pck_qty
					  ,MIN(pcd.pck_nm) AS pck_nm
					  ,MIN(brk.trdp_nm) AS cust_trdp_nm
					  ,MIN(hbl.it_no) AS it_no
					  ,MIN(hbl.te_dt_tm) AS te_dt_tm
					  ,MIN(hbl.it_loc) AS it_loc
					  ,MIN(hbl.mk_txt) AS mk_txt 
					  ,MIN(hbl.desc_txt) AS desc_txt
					  ,MIN(hbl.por_nm) AS por_nm
					  ,MIN(hbl.del_nm) AS del_nm
					  ,MIN(cneX.lgl_addr) AS cnee_lgl_addr
					  ,MIN(cneX.city_nm) AS cnee_city_nm
				      ,MIN(cneX.REP_ZIP ) AS cnee_zip_cd
				      ,MIN(cneX.STATE_CD ) AS cnee_state_cd 
				      ,MIN(shr.trdp_nm) AS shpr_trdp_nm
				      ,MIN(shrX.lgl_addr) AS shpr_lgl_addr
				      ,MIN(shrX.city_nm ) AS shpr_city_nm
				      ,MIN(shrX.REP_ZIP ) AS shpr_zip_cd
				      ,MIN(shrX.STATE_CD ) AS shpr_state_cd
				      ,MIN(ntfy.trdp_nm ) AS ntfy_trdp_nm
				      ,MIN(ntfyX.lgl_addr) AS ntfy_lgl_addr
				      ,MIN(ntfyX.city_nm ) AS ntfy_city_nm 
				      ,MIN(ntfyX.REP_ZIP ) AS ntfy_zip_cd
				      ,MIN(ntfyX.STATE_CD ) AS ntfy_state_cd
				      ,(SELECT TOP 1 CFS.IATA_CD FROM TB_TRDP CFS WHERE CFS.TRDP_CD = HBL.CFS_TRDP_CD   AND CFS.DELT_FLG != 'Y') AS cfs_firm_cd
		  FROM tb_intg_bl_rlt rlt 
		        JOIN tb_intg_bl hbl on hbl.intg_bl_seq = rlt.intg_bl_seq
                LEFT OUTER JOIN tb_loc pol 
		   ON pol.loc_cd = hbl.pol_cd
		    	LEFT OUTER JOIN tb_loc pod 
		   ON pod.loc_cd = hbl.pod_cd
		        LEFT OUTER JOIN tb_loc del 
		   ON del.loc_cd = hbl.fnl_dest_loc_cd	
				LEFT OUTER JOIN tb_bl_prnr lnr
           ON   hbl.intg_bl_seq = lnr.intg_bl_seq  AND lnr.bl_trdp_tp_cd = 'L01' AND lnr.delt_flg = 'N'
				LEFT OUTER JOIN tb_bl_prnr cne
           ON   hbl.intg_bl_seq = cne.intg_bl_seq  AND cne.bl_trdp_tp_cd = 'C01' AND cne.delt_flg = 'N'
          		LEFT OUTER JOIN  tb_trdp cneX   
           ON   cne.trdp_cd = cneX.trdp_cd  
           		LEFT OUTER JOIN  tb_bl_prnr shr            
           ON   hbl.intg_bl_seq = shr.intg_bl_seq  AND shr.bl_trdp_tp_cd = 'S01' AND shr.delt_flg = 'N'     
     			LEFT OUTER JOIN tb_trdp shrX            
           ON   shr.trdp_cd = shrX.trdp_cd  
    			LEFT OUTER JOIN tb_bl_prnr ntfy            
           ON   hbl.intg_bl_seq = ntfy.intg_bl_seq  AND ntfy.bl_trdp_tp_cd = 'N01' AND ntfy.delt_flg = 'N'     
    			LEFT OUTER JOIN tb_trdp ntfyX            
           ON   ntfy.trdp_cd = ntfyX.trdp_cd 
           		LEFT OUTER JOIN tb_bl_prnr brk
           ON   hbl.intg_bl_seq = brk.intg_bl_seq  AND brk.bl_trdp_tp_cd = 'C03' AND brk.delt_flg = 'N'
		        LEFT OUTER JOIN  tb_cntr_list cntr
           ON   hbl.intg_bl_seq = cntr.intg_bl_seq and cntr.DELT_FLG = 'N'
           		LEFT OUTER JOIN tb_pck_ut_cd pcd        
           ON   hbl.pck_ut_cd   = pcd.pck_ut_cd    AND pcd.delt_flg = 'N'
       WHERE  rlt.RLT_INTG_BL_SEQ = (SELECT INTG_BL_SEQ from TB_INTG_BL where intg_bl_seq = #s_intg_bl_seq#)
           AND hbl.delt_flg = 'N'    
		   AND hbl.biz_clss_cd = 'H' 
		<isNotNull property="s_cntr_no">
		   AND cntr.CNTR_NO = #s_cntr_no#
		</isNotNull>
		 GROUP BY 	  hbl.bl_no
    	      				  ,hbl.rep_cmdt_nm
							  ,hbl.pck_qty
							  ,hbl.grs_wgt
							  ,hbl.grs_wgt1
							  ,hbl.meas
							  ,hbl.meas1
							  ,hbl.fnl_dest_loc_nm
							  ,hbl.intg_bl_seq
							  ,hbl.it_no
							  ,hbl.pol_cd
							  ,pol.ams_loc_val 
							  ,pol.iata_loc_cd 
							  ,hbl.pol_nm 
							  ,hbl.pol_cd   
							  ,hbl.pod_nm 
							  ,pod.ams_loc_val 
							  ,pod.iata_loc_cd 
							  ,lnr.trdp_cd 
							  ,lnr.trdp_nm 
							  ,lnr.trdp_cd 
							  ,cne.trdp_cd 
							  ,cne.trdp_nm 
							  ,cne.trdp_addr
							  ,hbl.ref_no
							  ,hbl.trnk_vsl_cd
							  ,hbl.trnk_vsl_nm
							  ,hbl.trnk_voy 
							  ,hbl.eta_dt_tm
							  ,del.loc_cd
							  ,del.loc_nm
							  ,del.ams_loc_val
							  ,hbl.ams_no
							  ,hbl.pck_ut_cd
							  ,hbl.pck_qty
							  ,pcd.pck_nm
							  ,brk.trdp_nm
							  ,hbl.it_no
							  ,hbl.te_dt_tm
							  ,hbl.it_loc
							  ,hbl.mk_txt
							  ,hbl.desc_txt
							  ,hbl.por_nm
							  ,hbl.del_nm
							  ,hbl.cfs_trdp_cd
    </select>

	<!-- #2354 [PATENT] House Bill Based - Processing Logic Enhancement -->
	<select id="sumHblValueSeaExp" parameterClass="HashMap" resultClass="String">
	/*sumHblValueSeaExp*/
	
		SELECT CONVERT(VARCHAR, SUM(K.GRS_WGT)) 
	  + '^^' + CONVERT(VARCHAR, SUM(K.MEAS))
	  + '^^' + CONVERT(VARCHAR, SUM(K.PCK))
	  + '^^' + CONVERT(VARCHAR, SUM(K.GRS_WGT1))
	  + '^^' + CONVERT(VARCHAR, SUM(K.MEAS1))
	  
	  <!-- #314 [IMPEX] OEM & OEH GROSS WEIGHT DB TO MANAGE DECIMAL UP TO 3 PLACES -->
	  + '^^' + CONVERT(VARCHAR, SUM(K.MK_GRS_WGT))
	  + '^^' + CONVERT(VARCHAR, SUM(K.MK_GRS_WGT1))
	  + '^^' + CONVERT(VARCHAR, SUM(K.MK_MEAS))
	  + '^^' + CONVERT(VARCHAR, SUM(K.MK_MEAS1))
	  
	  + '^^' + CONVERT(VARCHAR, CASE WHEN 1 <![CDATA[ < ]]> (
		  SELECT COUNT(DISTINCT PCK_UT_CD)
		  FROM TB_INTG_BL BL
				 WHERE BL.INTG_BL_SEQ IN (
						SELECT RLT.INTG_BL_SEQ 
						  FROM TB_INTG_BL_RLT RLT
						  JOIN TB_INTG_BL BL ON RLT.INTG_BL_SEQ = BL.INTG_BL_SEQ AND BL.DELT_FLG = 'N'
						 WHERE RLT_INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
						   AND ISNULL(SUB_MBL_FLG,'')  != 'Y'
					 )
		  ) 
		THEN 'GT'
		ELSE  (
			  SELECT DISTINCT PCK_UT_CD
			  FROM TB_INTG_BL BL
					 WHERE BL.INTG_BL_SEQ IN (
							SELECT RLT.INTG_BL_SEQ 
							  FROM TB_INTG_BL_RLT RLT
							  JOIN TB_INTG_BL BL ON RLT.INTG_BL_SEQ = BL.INTG_BL_SEQ AND BL.DELT_FLG = 'N'
							 WHERE RLT_INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
							   AND ISNULL(SUB_MBL_FLG,'')  != 'Y'
						 )
				) END
		  )
	  
		  FROM (
<!--			SELECT SUM(BL.GRS_WGT) AS GRS_WGT, SUM(BL.MEAS) AS MEAS, SUM(BL.PCK_QTY) AS PCK -->
             SELECT SUM(CONVERT(NUMERIC(15,3),replace(BL.MK_GRS_WGT,',',''))) AS MK_GRS_WGT,
                    <!--  SUM(isnull(BL.MK_MEAS,0)) AS MEAS,
                          SUM(isnull(BL.PCK_QTY,0)) AS PCK
                      -->
                    SUM(CONVERT(NUMERIC(16,6),replace(BL.MK_MEAS,',','')))    AS MK_MEAS,
                    SUM(isnull(BL.PCK_QTY,0)) AS PCK,
                    SUM(CONVERT(NUMERIC(15,3),replace(BL.MK_GRS_WGT1,',',''))) AS MK_GRS_WGT1,
                    SUM(CONVERT(NUMERIC(16,6),replace(BL.MK_MEAS1,',','')))    AS MK_MEAS1,
                    
                    <!-- #314 [IMPEX] OEM & OEH GROSS WEIGHT DB TO MANAGE DECIMAL UP TO 3 PLACES -->
                    SUM(CONVERT(NUMERIC(15,3),replace(BL.GRS_WGT,',',''))) AS GRS_WGT,
                    SUM(CONVERT(NUMERIC(15,3),replace(BL.GRS_WGT1,',',''))) AS GRS_WGT1,
                    SUM(CONVERT(NUMERIC(16,6),replace(BL.MEAS,',','')))    AS MEAS,
                    SUM(CONVERT(NUMERIC(16,6),replace(BL.MEAS1,',','')))    AS MEAS1
			  FROM TB_INTG_BL BL
			 WHERE BL.INTG_BL_SEQ IN (
					SELECT RLT.INTG_BL_SEQ 
					  FROM TB_INTG_BL_RLT RLT
					  JOIN TB_INTG_BL BL ON RLT.INTG_BL_SEQ = BL.INTG_BL_SEQ AND BL.DELT_FLG = 'N'
					 WHERE RLT_INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
					   AND ISNULL(SUB_MBL_FLG,'')  != 'Y'
				 )
			   AND BL.DELT_FLG = 'N'
		) K
	</select>
	
	<select id="sumHblValueSeaImp" parameterClass="HashMap" resultClass="String">
	/*sumHblValueSeaImp*/
		SELECT CONVERT(VARCHAR, SUM(K.GRS_WGT)) 
	  + '^^' + CONVERT(VARCHAR, SUM(K.MEAS))
	  + '^^' + CONVERT(VARCHAR, SUM(K.PCK))
	  + '^^' + CONVERT(VARCHAR, SUM(K.GRS_WGT1))
	  + '^^' + CONVERT(VARCHAR, SUM(K.MEAS1))
		 
		  FROM (
			SELECT SUM(isnull(BL.GRS_WGT,0)) AS GRS_WGT, SUM(isnull(BL.MEAS,0)) AS MEAS, SUM(isnull(BL.PCK_QTY,0)) AS PCK, SUM(isnull(BL.GRS_WGT1,0)) AS GRS_WGT1, SUM(isnull(BL.MEAS1,0)) AS MEAS1
			  FROM TB_INTG_BL BL
			 WHERE BL.INTG_BL_SEQ IN (
					SELECT RLT.INTG_BL_SEQ 
					  FROM TB_INTG_BL_RLT RLT
					  JOIN TB_INTG_BL BL ON RLT.INTG_BL_SEQ = BL.INTG_BL_SEQ AND BL.DELT_FLG = 'N'
					 WHERE RLT_INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
					   AND ISNULL(SUB_MBL_FLG,'')  != 'Y'
				 )
			   AND BL.DELT_FLG = 'N'
		) K
	</select>
	
	<select id="selectANLISTPK" resultClass="Integer">
		SELECT ISNULL(MAX(AN_SEQ), 0)+1
          FROM TB_AN_LIST 
         WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
	</select>
	
	<insert id="insertANLIST" parameterClass="com.clt.apps.fis.see.bmd.housebl.dto.AnListVO">
		INSERT INTO TB_AN_LIST
		(
			an_seq, intg_bl_seq, frt_cd, frt_cd_nm,
			descr, frt_term_cd, amt,
			rgst_usrid, rgst_ofc_cd, rgst_tms,
			modi_usrid, modi_ofc_cd, modi_tms,
			delt_flg
		) VALUES
		(
			#an_seq#, #intg_bl_seq#, #frt_cd#, #frt_cd_nm#,
			#descr#, #an_frt_term_cd#, #amt#,
			#rgst_usrid#, #rgst_ofc_cd#, GETDATE(),
			#modi_usrid#, #modi_ofc_cd#, GETUTCDATE(),
			#delt_flg#
		)
	</insert>
	
	<update id="updateANLIST" parameterClass="com.clt.apps.fis.see.bmd.housebl.dto.AnListVO">
		UPDATE TB_AN_LIST
		   SET  
			<isNotNull property="frt_cd">
			   frt_cd = #frt_cd#,
			</isNotNull>
			<isNotNull property="frt_cd_nm">
			   frt_cd_nm = #frt_cd_nm#,
			</isNotNull>
			<isNotNull property="descr">
			   descr = #descr#,
			</isNotNull>
			<isNotNull property="an_frt_term_cd">
			   frt_term_cd = #an_frt_term_cd#,
			</isNotNull>
			<isNotNull property="amt">
			   amt = #amt#,
			</isNotNull>
			<isNotNull property="modi_usrid">
			   modi_usrid = #modi_usrid#,
			</isNotNull>
			<isNotNull property="modi_ofc_cd">
			   modi_ofc_cd = #modi_ofc_cd#,
			</isNotNull>		   
			<isNotNull property="delt_flg">
			   delt_flg = #delt_flg#,
			</isNotNull>
			   modi_tms = GETUTCDATE()		   
		 WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
		   AND AN_SEQ = #an_seq#
	</update>
	
	<delete id="deleteANLIST" parameterClass="com.clt.apps.fis.see.bmd.housebl.dto.AnListVO">
		DELETE FROM TB_AN_LIST
		 WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
		   AND AN_SEQ = #an_seq#
	</delete>
	
	<select id="selectANLIST" parameterClass="HashMap" resultClass="com.clt.apps.fis.see.bmd.housebl.dto.AnListVO">
		SELECT an_seq, intg_bl_seq, frt_cd, frt_cd_nm, descr,
			   frt_term_cd AS an_frt_term_cd, amt, delt_flg
		  FROM TB_AN_LIST
		 WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
	</select>
	
	<select id="searchOfcCntCd" parameterClass="HashMap" resultClass="String">
		SELECT cnt_cd
		  FROM tb_ofc
		 WHERE ofc_cd = #f_ref_ofc_cd#
	</select>
	
	<select id="searchINTG_BL_RLT" parameterClass="HashMap" resultClass="com.clt.apps.fis.see.bmd.housebl.dto.BlCommonVO">
		SELECT INTG_BL_SEQ
		  FROM TB_INTG_BL
		 WHERE INTG_BL_SEQ IN (
					SELECT INTG_BL_SEQ
		  			  FROM TB_INTG_BL_RLT
		 			 WHERE RLT_INTG_BL_SEQ = #rlt_intg_bl_seq#)
	  ORDER BY BL_NO
	</select>
	
	<update id="updateBL_SER_NO" parameterClass="HashMap">
		UPDATE TB_INTG_BL
		   SET BL_SER_NO = #bl_ser_no#
		 WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
	</update>
	
	<select id="selectHblDesc_CNT" parameterClass="HashMap" resultClass="Integer">
		SELECT  COUNT(*)
		  FROM  TB_INTG_BL_RLT RLT
		 WHERE  RLT.RLT_INTG_BL_SEQ = (
					SELECT  BL.INTG_BL_SEQ
					  FROM  TB_INTG_BL BL
					  JOIN  TB_ADD_INFO_BND BND
					    ON  BL.INTG_BL_SEQ = BND.INTG_BL_SEQ AND BND.DELT_FLG = 'N'
					 WHERE  1=1
					   AND  BL.REF_NO = #f_ref_no#
					   AND  BL.BIZ_CLSS_CD = #f_biz_clss_cd#
					   AND  BL.AIR_SEA_CLSS_CD = #f_air_sea_clss_cd#
					   AND  BND.BND_CLSS_CD = #f_bnd_clss_cd#
					)
	</select>
	
	<!-- #2666 [PATENT] Bugs were reported when doing internal testing for House Bill Split (Synchronization) -->
	<select id="selectHblDesc" parameterClass="HashMap" resultClass="java.util.HashMap">
		SELECT  DESC_TXT1 + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10) + DESC_TXT AS DESC_TXT,
		        MK_TXT
		  FROM  TB_INTG_BL BL
		 WHERE  BL.INTG_BL_SEQ IN ( (
				SELECT  RLT.INTG_BL_SEQ
				  FROM  TB_INTG_BL_RLT RLT
				 WHERE  RLT.RLT_INTG_BL_SEQ = (
						SELECT  BL.INTG_BL_SEQ
						  FROM  TB_INTG_BL BL
						  JOIN  TB_ADD_INFO_BND BND
						    ON  BL.INTG_BL_SEQ = BND.INTG_BL_SEQ AND BND.DELT_FLG = 'N'
						 WHERE  1=1
						   AND  BL.REF_NO = #f_ref_no#
						   AND  BL.BIZ_CLSS_CD = #f_biz_clss_cd#
						   AND  BL.AIR_SEA_CLSS_CD = #f_air_sea_clss_cd#
						   AND  BND.BND_CLSS_CD = #f_bnd_clss_cd#
						)
					)
				)
		AND BL.DELT_FLG = 'N'
	</select>
	
	
	<select id="selectHblDescList" parameterClass="HashMap" resultClass="java.util.HashMap">
		SELECT  
			  ROW_NUMBER() OVER(ORDER BY HBL.INTG_BL_SEQ ASC) AS HBL_SEQ
			, ISNULL(OFC.LCL_CGO_DESC, '') AS LCL_DESC
			, CASE WHEN (HBL.DESC_TXT1 IS NOT NULL OR HBL.DESC_TXT IS NOT NULL) AND (RTRIM(LTRIM(HBL.DESC_TXT1)) != '' OR RTRIM(LTRIM(HBL.DESC_TXT)) != '') THEN
			  	  	HBL.DESC_TXT1 + CASE WHEN HBL.DESC_TXT1 IS NOT NULL  AND RTRIM(LTRIM(HBL.DESC_TXT1)) != '' THEN CHAR(13) + CHAR(10) ELSE '' END + HBL.DESC_TXT
			  	  ELSE 
			  	  	''
			  END AS DESC_TXT
			, ISNULL(HBL.MK_TXT, '') AS MK_TXT
		FROM TB_INTG_BL_RLT RLT
		JOIN TB_INTG_BL MBL
			ON RLT.RLT_INTG_BL_SEQ = MBL.INTG_BL_SEQ
		JOIN TB_ADD_INFO_BND BND
			ON  MBL.INTG_BL_SEQ = BND.INTG_BL_SEQ 
			AND BND.DELT_FLG = 'N'	
		JOIN TB_INTG_BL HBL
			ON RLT.INTG_BL_SEQ = HBL.INTG_BL_SEQ
			AND HBL.DELT_FLG = 'N'
		LEFT OUTER JOIN TB_OFC OFC
			ON OFC.OFC_CD = BND.RGST_OFC_CD
		WHERE MBL.REF_NO 			= #f_ref_no#
		  AND MBL.BIZ_CLSS_CD 		= #f_biz_clss_cd#
		  AND MBL.AIR_SEA_CLSS_CD 	= #f_air_sea_clss_cd#
		  AND BND.BND_CLSS_CD 		= #f_bnd_clss_cd#
		ORDER BY HBL.INTG_BL_SEQ ASC
	</select>
	
	<update id="updateClose_MBL_EXP_INFO" parameterClass="com.clt.apps.fis.see.bmd.masterbl.dto.SeeMasterBLVO">
	/*updateClose_MBL_EXP_INFO*/
		UPDATE  TB_INTG_BL
		   SET  MK_TXT = #mk_txt#, 
				DESC_TXT = #desc_txt#,
				SAD_TXT = #sad_txt#,
				RMK = #rmk#,
				TRNK_VSL_CD = #trnk_vsl_cd#,
				<!-- #5756 [Webtran] system not allowing to edit vessel name in MBL entry screen -->
				TRNK_VSL_NM = #trnk_vsl_nm#,
				TRNK_VOY = #trnk_voy#
				,modi_tms  = GETUTCDATE()
		 WHERE  INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
	</update>
	
	<update id="updateClose_MBL_IMP_INFO" parameterClass="com.clt.apps.fis.see.bmd.masterbl.dto.SeeMasterBLVO">
	/*updateClose_MBL_IMP_INFO*/
		UPDATE  TB_INTG_BL
		   SET  POD_CD = #pod_cd#,
		   		POD_NM = #pod_nm#,
		   		ETA_DT_TM = #eta_dt_tm#,
				CY_TRDP_CD = #cy_trdp_cd#,
				CFS_TRDP_CD = #cfs_trdp_cd#,
				IT_NO = #it_no#,
				TE_DT_TM = #te_dt_tm#,
				IT_LOC = #it_loc#
				,modi_tms  = GETUTCDATE()
		 WHERE  INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
	</update>
	
	<update id="updateClose_HBL_EXP_INFO" parameterClass="com.clt.apps.fis.see.bmd.housebl.dto.SeeHouseBLVO">
	/*updateClose_HBL_EXP_INFO*/
		UPDATE  TB_INTG_BL
		   SET  POL_CD = #pol_cd#,
		   		POL_NM = #pol_nm#,
		   		POD_CD = #pod_cd#,
		   		POD_NM = #pod_nm#,
		   		DEL_CD = #del_cd#,
		   		DEL_NM = #del_nm#,
		   		SAD_TXT = #sad_txt#,
				MK_GRS_WGT = #mk_grs_wgt#,
				MK_GRS_WGT1 = #mk_grs_wgt1#,
				MK_MEAS = #mk_meas#,
				MK_MEAS1 = #mk_meas1#,
				MK_TXT = #mk_txt#,
				DESC_TXT1 = #desc_txt1#,
				DESC_TXT = #desc_txt#,
				CLEAN_ON_BOARD = #clean_on_board#,
				ATT_MK_TXT = #att_mk_txt#,
				ATT_DESC_TXT = #att_desc_txt#,
				SAY_TXT = #say_txt#,
				RMK = #rmk#
				,modi_tms  = GETUTCDATE()
		 WHERE  INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
	</update>
	
	<update id="updateClose_HBL_IMP_INFO" parameterClass="com.clt.apps.fis.see.bmd.housebl.dto.SeeHouseBLVO">
	/*updateClose_HBL_IMP_INFO*/
		UPDATE  TB_INTG_BL
		   SET  FM_SVC_TERM_CD = #fm_svc_term_cd#,
				TO_SVC_TERM_CD = #to_svc_term_cd#,
				CFS_NOD_CD = #cfs_nod_cd#,
				GO_DT_TM = #go_dt_tm#,
				LFD_DT_TM = #lfd_dt_tm#,
				AVAIL_DT_TM = #avail_dt_tm#,
				F_ETA_DT_TM = #f_eta_dt_tm#,
				D_ETA_DT_TM = #d_eta_dt_tm#,
				CFS_TRDP_CD = #cfs_trdp_cd#,
				DOOR_LOC_CD = #door_loc_cd#,
				FNL_DEST_LOC_CD = #fnl_dest_loc_cd#,
				TE_DT_TM = #te_dt_tm#,
				IT_NO = #it_no#,
				IT_LOC = #it_loc#,
		   		SAD_TXT = #sad_txt#,
				MK_TXT = #mk_txt#,
				DESC_TXT = #desc_txt#,
				RMK = #rmk#,
				SAY_TXT = #say_txt#,
				DESC_TXT1 = #desc_txt1#,
				ORG_BL_RCVD_FLG = #org_bl_rcvd_flg#,
				RCVD_DT_TM = #rcvd_dt_tm#,
				RLSD_FLG = #rlsd_flg#,
				RLSD_DT_TM = #rlsd_dt_tm#
				,modi_tms  = GETUTCDATE()
		 WHERE  INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
	</update>
	
	<select id="selectClose_TRDP_CD_LIST" parameterClass="HashMap" resultClass="BlCmmVO">
        SELECT  shp.trdp_cd AS shpr_trdp_cd,
                cne.trdp_cd AS cnee_trdp_cd,
                ntf.trdp_cd AS ntfy_trdp_cd
        
         FROM   tb_intg_bl bl
        
         JOIN   tb_add_info_bnd bnd
           ON   bl.intg_bl_seq = bnd.intg_bl_seq AND bnd.bnd_clss_cd = #bnd_clss_cd#   AND bnd.delt_flg = 'N'
        
LEFT OUTER JOIN tb_bl_prnr shp
           ON   bl.intg_bl_seq = shp.intg_bl_seq  AND shp.bl_trdp_tp_cd = 'S01' AND shp.delt_flg = 'N'
         
LEFT OUTER JOIN tb_bl_prnr cne
           ON   bl.intg_bl_seq = cne.intg_bl_seq  AND cne.bl_trdp_tp_cd = 'C01' AND cne.delt_flg = 'N'

LEFT OUTER JOIN tb_bl_prnr ntf
           ON   bl.intg_bl_seq = ntf.intg_bl_seq  AND ntf.bl_trdp_tp_cd = 'N01' AND ntf.delt_flg = 'N'


        WHERE bl.delt_flg = 'N' AND bl.intg_bl_seq = cast(#intg_bl_seq# as varchar)
    </select>
    
    <update id="updateMBL_STS_CD" parameterClass="com.clt.apps.fis.see.bmd.masterbl.dto.SeeMasterBLVO">
		UPDATE  TB_INTG_BL
		   SET  BL_STS_CD = #bl_sts_cd#
		 WHERE  INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
	</update>
	
	<update id="updateHBL_STS_CD" parameterClass="HashMap">
		UPDATE  TB_INTG_BL
		   SET  BL_STS_CD = #bl_sts_cd#
		 WHERE  INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
	</update>
	
	<select id="selectMBL_INV_SLIP_DT" parameterClass="com.clt.apps.fis.see.bmd.masterbl.dto.SeeMasterBLVO" resultClass="String">
		SELECT  MAX(ISNULL(MST.ACCT_DT, '19990101')) AS slip_date
		  FROM (
				SELECT  FRT.INTG_BL_SEQ, FRT.INV_SEQ
				  FROM  TB_FRT FRT
				 WHERE  FRT.INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
				   AND  FRT.INV_SEQ <![CDATA[<>]]> ''
			  GROUP BY  FRT.INTG_BL_SEQ, FRT.INV_SEQ
				) FRT LEFT OUTER JOIN TB_SLIP_MST MST ON FRT.INV_SEQ = MST.REF_NO
	  GROUP BY  FRT.INTG_BL_SEQ
	</select>
	
	<select id="selectHBL_INV_SLIP_DT" parameterClass="com.clt.apps.fis.see.bmd.masterbl.dto.SeeMasterBLVO" resultClass="HashMap">
		SELECT  FRT.INTG_BL_SEQ AS intg_bl_seq, MAX(ISNULL(MST.ACCT_DT, '19990101')) AS slip_date
		  FROM  (
				SELECT  FRT.INTG_BL_SEQ, FRT.INV_SEQ
				  FROM  TB_FRT FRT
				  JOIN  (
						SELECT  RLT.INTG_BL_SEQ
						  FROM  TB_INTG_BL_RLT RLT 
						  JOIN  TB_INTG_BL BL ON RLT.INTG_BL_SEQ = BL.INTG_BL_SEQ
						 WHERE  RLT.RLT_INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
						) BL ON FRT.INTG_BL_SEQ = BL.INTG_BL_SEQ
				 WHERE  FRT.INV_SEQ <![CDATA[<>]]> ''
			  GROUP BY  FRT.INTG_BL_SEQ, FRT.INV_SEQ
				) FRT LEFT OUTER JOIN TB_SLIP_MST MST ON FRT.INV_SEQ = MST.REF_NO
	  GROUP BY  FRT.INTG_BL_SEQ
	</select>
	
	<!-- Job Templete 저장   -->
	<insert id="insertJobTmplt" parameterClass="com.clt.apps.fis.see.bmd.housebl.dto.WrkFlowVO">
		INSERT INTO tb_jb_tmplt_list(
			 JB_TMPLT_SEQ
			,BL_STS_CD
			,DUR_TM_QTY
			,SRT_SEQ
			,RGST_USRID
			,RGST_OFC_CD
			,RGST_TMS
			,MODI_USRID
			,MODI_OFC_CD
			,MODI_TMS
			,DELT_FLG
			,BL_STS_LBL
		)VALUES(
			 #jb_tmplt_seq#
			,#bl_sts_cd#
			,#dur_tm_qty#
			,#srt_seq#
			,#proc_usrid#
			,#proc_ofccd#
			,getdate()
			,#proc_usrid#
			,#proc_ofccd#
			,getutcdate()
			,'N'
			,(SELECT top 1 CD_NM FROM tb_com_cd_dtl WHERE com_cd = #com_cd# AND cd_val = #bl_sts_cd#)
		)
	</insert>
	
	
	<!-- Job Templete 저장   -->
	<update id="updateJobTmplt" parameterClass="com.clt.apps.fis.see.bmd.housebl.dto.WrkFlowVO">
		UPDATE tb_jb_tmplt_list
		   SET DELT_FLG = 'N'
		 WHERE JB_TMPLT_SEQ = #jb_tmplt_seq#
		   AND BL_STS_CD    = #bl_sts_cd#
	</update>
	
	<!-- WorkFlow 저장   -->
	<insert id="insertWrkFlow" parameterClass="com.clt.apps.fis.see.bmd.housebl.dto.WrkFlowVO">
		<!-- MSSQL 2008 Ver
		INSERT INTO tb_wrk_flow(
			 INTG_BL_SEQ
			,JB_STS_CD
			<isNotEmpty property="jb_pln_dt_tm">
				,JB_PLN_DT_TM
			</isNotEmpty>
			<isNotEmpty property="jb_act_dt_tm">
				,JB_ACT_DT_TM
			</isNotEmpty>
			,SRT_SEQ
			,RGST_USRID
			,RGST_OFC_CD
			,RGST_TMS
			,MODI_USRID
			,MODI_OFC_CD
			,MODI_TMS
			,DELT_FLG
		)VALUES(
			 #intg_bl_seq#
			,#jb_sts_nm#
			<isNotEmpty property="jb_pln_dt_tm">
				,CONVERT(DATETIME, #jb_pln_dt_tm#, 120)
			</isNotEmpty>
			<isNotEmpty property="jb_act_dt_tm">
				,CONVERT(DATETIME, #jb_act_dt_tm#, 120)
			</isNotEmpty>
			
			,(SELECT ISNULL(MAX(SRT_SEQ),0) + 1 FROM tb_wrk_flow WHERE INTG_BL_SEQ = #intg_bl_seq# AND DELT_FLG = 'N')
			,#proc_usrid#
			,#proc_ofccd#
			,getdate()
			,#proc_usrid#
			,#proc_ofccd#
			,getdate()
			,'N'
		)
		-->    	
    	<!-- 2013.06.05 LHK, MSSQL 2005 version 으로 Query 수정 (Insert into () values()구문에 하위 쿼리 사용할 수 없슴) -->
		INSERT INTO tb_wrk_flow(
			 INTG_BL_SEQ
			,JB_STS_CD
			<isNotEmpty property="jb_pln_dt_tm">
				,JB_PLN_DT_TM
			</isNotEmpty>
			<isNotEmpty property="jb_act_dt_tm">
				,JB_ACT_DT_TM
			</isNotEmpty>
			,SRT_SEQ
			,RGST_USRID
			,RGST_OFC_CD
			,RGST_TMS
			,MODI_USRID
			,MODI_OFC_CD
			,MODI_TMS
			,DELT_FLG
		) SELECT
			 #intg_bl_seq#
			,#jb_sts_nm#
			<isNotEmpty property="jb_pln_dt_tm">
				,CONVERT(DATETIME, #jb_pln_dt_tm#, 120)
			</isNotEmpty>
			<isNotEmpty property="jb_act_dt_tm">
				,CONVERT(DATETIME, #jb_act_dt_tm#, 120)
			</isNotEmpty>
			
			,(SELECT ISNULL(MAX(SRT_SEQ),0) + 1 FROM tb_wrk_flow WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar) AND DELT_FLG = 'N')
			,#proc_usrid#
			,#proc_ofccd#
			,getdate()
			,#proc_usrid#
			,#proc_ofccd#
			,getutcdate()
			,'N'
		
	</insert>
	
	<update id="updateWrkFlow" parameterClass="com.clt.apps.fis.see.bmd.housebl.dto.WrkFlowVO">
		UPDATE tb_wrk_flow
		   SET   MODI_USRID	  = #proc_usrid#
				,MODI_OFC_CD  = #proc_ofccd#
				,MODI_TMS	  = GETUTCDATE()
		   	   <isNotEmpty property="jb_pln_dt_tm">
				,JB_PLN_DT_TM = CONVERT(DATETIME, #jb_pln_dt_tm#, 120)
			   </isNotEmpty>
			   <isEmpty property="jb_pln_dt_tm">
			    ,JB_PLN_DT_TM = NULL
			   </isEmpty>
			   <isNotEmpty property="jb_act_dt_tm">
				,JB_ACT_DT_TM = CONVERT(DATETIME, #jb_act_dt_tm#, 120)
			   </isNotEmpty>
			   <isEmpty property="jb_act_dt_tm">
			    ,JB_ACT_DT_TM = NULL
			   </isEmpty>
	     WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
	       AND JB_STS_CD   = #jb_sts_nm#
	</update>
	
	<update id="updateItNextNumber" parameterClass="HashMap">
        UPDATE  TB_OFC
           SET  IT_NEXT_NO = #it_next_no#
         WHERE  OFC_CD = #ofc_cd#
    </update>
	
	<select id="selectItNextNumber" parameterClass="HashMap" resultClass="String">
	     SELECT 
		     IT_NEXT_NO
		 FROM TB_OFC
	     WHERE OFC_CD = #ofc_cd#
	</select>
	
	<select id="selectItEndNumber" parameterClass="HashMap" resultClass="String">
	     SELECT 
		    IT_END
		 FROM TB_OFC
	     WHERE OFC_CD = #ofc_cd#
	</select>

	<update id="updateSeaCCN" parameterClass="HashMap">
        UPDATE  TB_OFC
           SET  OI_CCN_SEQNO = #ccn_no#
         WHERE  OFC_CD = #ofc_cd#
    </update>
	
	<select id="selectSeaCCN" parameterClass="HashMap" resultClass="HashMap">
	     SELECT 
		     OI_CCN_SEQNO AS CCN_NO
		     ,CCN_PRFX
		 FROM TB_OFC
	     WHERE OFC_CD = #ofc_cd#
	</select>
		
	<update id="updateAirCCN" parameterClass="HashMap">
        UPDATE  TB_OFC
           SET  AI_CCN_SEQNO = #ccn_no#
         WHERE  OFC_CD = #ofc_cd#
    </update>
	
	<select id="selectAirCCN" parameterClass="HashMap" resultClass="HashMap">
	     SELECT 
		     AI_CCN_SEQNO AS CCN_NO
		     ,CCN_PRFX
		 FROM TB_OFC
	     WHERE OFC_CD = #ofc_cd#
	</select>
	
	<select id="checkDuplCcn" parameterClass="HashMap" resultClass="Integer">
	/* BlCmmSQL.xml > checkDuplCcn */
		SELECT count(CCN_NO)
		FROM  tb_intg_bl
		WHERE intg_bl_seq != #bl_seq#               
		AND  CCN_NO = #ccn_no#   
		AND  BIZ_CLSS_CD = 'H'
		AND  DELT_FLG != 'Y'
	</select>
		
	<update id="updateHouseCCN" parameterClass="HashMap" >
	/* BlCmmSQL.xml > updateHouseCCN */
		UPDATE tb_intg_bl SET  ccn_no = #pre_ccn_no#
		WHERE intg_bl_seq in (SELECT intg_bl_seq 
		  FROM tb_intg_bl_rlt 
		 WHERE rlt_intg_bl_seq = cast(#intg_bl_seq# as varchar))
		 AND  BIZ_CLSS_CD = 'H'
		 AND CCN_NO = PRE_CCN_NO
		 AND  DELT_FLG != 'Y'
	</update>
	
	<update id="updateHousePreCCN" parameterClass="HashMap" >
	/* BlCmmSQL.xml > updateHousePreCCN */
		UPDATE tb_intg_bl SET  pre_ccn_no = #pre_ccn_no#
		WHERE intg_bl_seq in (SELECT intg_bl_seq 
		  FROM tb_intg_bl_rlt 
		 WHERE rlt_intg_bl_seq = cast(#intg_bl_seq# as varchar))
		 AND  BIZ_CLSS_CD = 'H'
		 AND  DELT_FLG != 'Y'
	</update>
	
	<select id="searchHouseBlSeq" parameterClass="HashMap" resultClass="HashMap">
		SELECT bl.intg_bl_seq as HBL_SEQ
		FROM  tb_intg_bl_rlt rlt            
		JOIN  tb_intg_bl bl ON  rlt.intg_bl_seq = bl.intg_bl_seq 
		WHERE  rlt.rlt_intg_bl_seq = #mbl_seq#               
		AND  rlt.delt_flg = 'N'     
	</select>
	
    <!-- BL Dock Receipt search   -->
    <select id="selectBlDockReceipt" parameterClass="HashMap" resultClass="PLCIBLInfoVO">
   		/* BlCmmSQL.xml > selectBlDockReceipt */
		SELECT BL.INTG_BL_SEQ
		      ,BL.REF_NO
		      ,BL.BL_NO  BL_NO
		      ,BL.LNR_BKG_NO BKG_NO
		      ,'' WRK_TP
		      ,'' CNT_ORIGIN
			  ,SHPR.TRDP_ADDR   AS SELLER_ADDR     
			  ,CNEE.TRDP_ADDR   AS CNEE_ADDR     
			  ,NTY.TRDP_ADDR    AS NOTIFY_ADDR     
			  ,(SELECT X.CNT_ENG_NM 
		         FROM TB_CNT X 
		        WHERE X.CNT_CD = BL.CNT_CD 
		          AND X.DELT_FLG = 'N') AS CNT_ORIGIN     
		      ,BL.EXP_REF_NO      AS EXP_REF_NO     
		      ,CASE WHEN BL.AIR_SEA_CLSS_CD = 'A' THEN BL.FLT_NO              
		            WHEN BL.AIR_SEA_CLSS_CD = 'S' AND ISNULL(BL.TRNK_VSL_NM,'') = '' AND ISNULL(BL.TRNK_VOY,'') = '' THEN ''            
		            ELSE BL.TRNK_VSL_NM+ '/' + BL.TRNK_VOY       
		        END AS VSL_FLT     
		      ,BL.POL_NM     
		      ,BL.POD_NM     
		      ,BL.POR_NM     
			  ,BL.MK_TXT     
			  ,CONVERT(VARCHAR,BL.PCK_QTY) + ' ' + PCD.PCK_NM AS QTY     
			  ,(CASE WHEN  ISNULL( BL.DESC_TXT1 , '' ) = ''  THEN BL.DESC_TXT ELSE  BL.DESC_TXT1 + CHAR(13)+CHAR(10)+CHAR(13)+CHAR(10) + BL.DESC_TXT END) DESC_TXT  
			  ,CONVERT(VARCHAR,BL.GRS_WGT) + ' KGS' + CHAR(13)+CHAR(10) + CONVERT(VARCHAR,BL.GRS_WGT1)+ ' LBS' + CHAR(13)+CHAR(10) AS GRS_WGT     
			  ,CONVERT(VARCHAR,BL.CHG_WGT) + ' KGS' + CHAR(13)+CHAR(10) + CONVERT(VARCHAR,BL.CHG_WGT1)+ ' LBS' + CHAR(13)+CHAR(10) AS CHG_WGT     
			  ,CASE WHEN BL.AIR_SEA_CLSS_CD = 'A' THEN  CONVERT(VARCHAR,BL.VOL_MEAS) + ' CBM'
		            ELSE CONVERT(VARCHAR, BL.MEAS) + ' CBM' + CHAR(13)+CHAR(10) + CONVERT(VARCHAR,BL.MEAS1)+ ' CFT' + CHAR(13)+CHAR(10)        
		        END AS MEAS     
		      ,LNR.TRDP_CD AS CARR_TRDP_CD        
		      ,LNR.TRDP_NM AS CARR_TRDP_NM     
		      ,'' AS INLAND_TRDP_NM
		      ,BL.DEL_NM 
		 
			  ,SUBSTRING(MBL.CUT_OFF_DT,1,8) AS CUT_OFF_DT
		      ,SUBSTRING(MBL.RAIL_CUT_OFF_DT,1,8) AS RAIL_CUT_OFF_DT 
		      ,SUBSTRING(MBL.DOC_CUT_OFF_DT,1,8) AS DOC_CUT_OFF_DT  
		      ,SUBSTRING(BL.WH_CUT_OFF_DT,1,8) AS WH_CUT_OFF_DT  
		      ,SUBSTRING(MBL.CUT_OFF_DT,9,12) AS CUT_OFF_TM
		      ,SUBSTRING(MBL.RAIL_CUT_OFF_DT,9,12) AS RAIL_CUT_OFF_TM 
		      ,SUBSTRING(MBL.DOC_CUT_OFF_DT,9,12) AS DOC_CUT_OFF_TM
		      ,SUBSTRING(BL.WH_CUT_OFF_DT,9,12) AS WH_CUT_OFF_TM
		      
		  FROM TB_INTG_BL BL     
		  
		  LEFT OUTER JOIN TB_INTG_BL_RLT RLT ON RLT.INTG_BL_SEQ = BL.INTG_BL_SEQ
		  LEFT OUTER JOIN TB_INTG_BL MBL ON  MBL.INTG_BL_SEQ = RLT.RLT_INTG_BL_SEQ

		  LEFT OUTER JOIN TB_BL_PRNR SHPR          
		    ON BL.INTG_BL_SEQ = SHPR.INTG_BL_SEQ            
		   AND SHPR.BL_TRDP_TP_CD = 'S01'           
		   AND SHPR.DELT_FLG = 'N'       
		  LEFT OUTER JOIN TB_BL_PRNR CNEE          
		    ON BL.INTG_BL_SEQ = CNEE.INTG_BL_SEQ            
		   AND CNEE.BL_TRDP_TP_CD = 'C01'           
		   AND CNEE.DELT_FLG = 'N'      
		  LEFT OUTER JOIN TB_BL_PRNR NTY          
		    ON  BL.INTG_BL_SEQ = NTY.INTG_BL_SEQ            
		   AND NTY.BL_TRDP_TP_CD = 'N01'           
		   AND NTY.DELT_FLG = 'N'
		  LEFT OUTER JOIN TB_PCK_UT_CD PCD                        
		    ON BL.PCK_UT_CD = PCD.PCK_UT_CD                 
		   AND PCD.USE_FLG = 'Y'           
		  LEFT OUTER JOIN TB_BL_PRNR LNR           
		    ON BL.INTG_BL_SEQ = LNR.INTG_BL_SEQ            
		   AND LNR.BL_TRDP_TP_CD = 'L01'             
		   AND LNR.DELT_FLG = 'N'
		 WHERE 1=1
		   AND BL.DELT_FLG = 'N'
		   AND BL.INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
	</select>
	    <!-- BL Dock Receipt search   -->
    <select id="selectDockReceipt" parameterClass="HashMap" resultClass="PLCIBLInfoVO">
   		/* BlCmmSQL.xml > selectDockReceipt */
		  SELECT INTG_BL_SEQ
				,WRK_TP
				,SELLER_ADDR
				,CNEE_ADDR
				,NOTIFY_ADDR
				,VSL_FLT
				,CNT_ORIGIN
				,BL_NO AS BKG_NO
				,CARR_TRDP_NM
				,POR_NM
				,POL_NM
				,POD_NM
				,DEL_NM
				,INLAND_TRDP_CD
				,INLAND_TRDP_NM
				,INLAND_PIC_NM
				,INLAND_PIC_PHN
				,INLAND_PIC_FAX
				,MK_TXT
				,DESC_TXT
				,QTY
				,GRS_WGT
				,MEAS
				
			  ,SUBSTRING(CUT_OFF_DT,1,8) AS CUT_OFF_DT
		      ,SUBSTRING(RAIL_CUT_OFF_DT,1,8) AS RAIL_CUT_OFF_DT 
		      ,SUBSTRING(DOC_CUT_OFF_DT,1,8) AS DOC_CUT_OFF_DT  
		      ,SUBSTRING(WH_CUT_OFF_DT,1,8) AS WH_CUT_OFF_DT  
		      ,SUBSTRING(CUT_OFF_DT,9,12) AS CUT_OFF_TM
		      ,SUBSTRING(RAIL_CUT_OFF_DT,9,12) AS RAIL_CUT_OFF_TM 
		      ,SUBSTRING(DOC_CUT_OFF_DT,9,12) AS DOC_CUT_OFF_TM
		      ,SUBSTRING(WH_CUT_OFF_DT,9,12) AS WH_CUT_OFF_TM
		      				
		   FROM TB_BL_OTH OTH
		  WHERE OTH.WRK_TP = 'DR'
		    AND OTH.INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
 	</select>
 	
	    <!--DOCK RECEIPT 등록   -->
    <insert id="insertDockReceipt" parameterClass="HashMap">
    	/* BlCmmSQL.xml > insertDockReceipt */
    	INSERT INTO TB_BL_OTH(  INTG_BL_SEQ
					           ,WRK_TP
					           ,SELLER_ADDR
					           ,CNEE_ADDR
					           ,NOTIFY_ADDR
					           ,VSL_FLT
					           ,CNT_ORIGIN
					           ,POINT_ENTRY
					           ,BL_NO
					           ,CARR_TRDP_NM
					           ,POR_NM
					           ,POL_NM
					           ,POD_NM
					           ,INLAND_TRDP_CD
							   ,INLAND_TRDP_NM
							   ,INLAND_PIC_NM
							   ,INLAND_PIC_PHN
							   ,INLAND_PIC_FAX
					           ,MK_TXT
					           ,DESC_TXT
					           ,QTY
					           ,GRS_WGT
					           ,MEAS
					           ,RGST_USRID
					           ,RGST_OFC_CD
					           ,RGST_TMS
					           ,MODI_USRID
					           ,MODI_OFC_CD
					           ,MODI_TMS
					           
					           ,CUT_OFF_DT
						      ,RAIL_CUT_OFF_DT 
						      ,DOC_CUT_OFF_DT   
						      ,WH_CUT_OFF_DT   
						      ,DEL_NM   
					    	)VALUES(
					    		#f_intg_bl_seq#
					           ,'DR'
					           ,#f_seller#
					           ,#f_consignee#
					           ,#f_notify#
					           ,#f_vslflt#
					           ,#f_cnt_origin#
					           ,#f_point_entry#
					           ,#f_bkg_no#
					           ,#f_carr_trdp_nm#
					           ,#f_por_nm#
					           ,#f_pol_nm#
					           ,#f_pod_nm#
					           ,#f_inland_trdp_cd#	
							   ,#f_inland_trdp_nm# 	
							   ,#f_inland_pic_nm# 		
							   ,#f_inland_pic_phn#		
							   ,#f_inland_pic_fax#
					           ,#f_mark_num#
					           ,#f_desc_good#
					           ,#f_qty#
					           ,#f_grs_wgt#
					           ,#f_meas#
					           ,#proc_usrid#
					           ,#proc_ofccd#
					           ,getdate()
					           ,#proc_usrid#
					           ,#proc_ofccd#
					           ,GETUTCDATE()
					           
					           ,#cut_off_dt#
						      ,#rail_cut_off_dt# 
						      ,#doc_cut_off_dt#   
						      ,#wh_cut_off_dt#   
						      ,#f_del_nm#   
    		)
    </insert>
    
    <!--DOCK RECEIPT 수정   -->
    <update id="updateDockReceipt" parameterClass="HashMap">
    	/* BlCmmSQL.xml > updateDockReceipt */
    	UPDATE TB_BL_OTH
    	   SET SELLER_ADDR		= #f_seller#
			  ,CNEE_ADDR      	= #f_consignee#
			  ,NOTIFY_ADDR    	= #f_notify#
			  ,VSL_FLT        	= #f_vslflt#
			  ,CNT_ORIGIN       = #f_cnt_origin#
			  ,BL_NO          	= #f_bkg_no#
			  ,CARR_TRDP_NM   	= #f_carr_trdp_nm#
			  ,POR_NM         	= #f_por_nm#
			  ,POL_NM         	= #f_pol_nm#
			  ,POD_NM         	= #f_pod_nm#
			  ,INLAND_TRDP_CD 	= #f_inland_trdp_cd#
			  ,INLAND_TRDP_NM   = #f_inland_trdp_nm#
			  ,INLAND_PIC_NM    = #f_inland_pic_nm#
			  ,INLAND_PIC_PHN   = #f_inland_pic_phn#
			  ,INLAND_PIC_FAX   = #f_inland_pic_fax#
			  ,MK_TXT         	= #f_mark_num#
			  ,DESC_TXT       	= #f_desc_good#
			  ,QTY            	= #f_qty#
			  ,GRS_WGT        	= #f_grs_wgt#
			  ,MEAS           	= #f_meas#
			  ,MODI_USRID     	= #proc_usrid#
			  ,MODI_OFC_CD    	= #proc_ofccd#
			  ,MODI_TMS       	= GETUTCDATE()
			  
			  ,CUT_OFF_DT          = #cut_off_dt#
		      ,RAIL_CUT_OFF_DT     = #rail_cut_off_dt# 
		      ,DOC_CUT_OFF_DT      = #doc_cut_off_dt#   
		      ,WH_CUT_OFF_DT      = #wh_cut_off_dt#   
		      ,DEL_NM      = #f_del_nm#   
			  
	     WHERE INTG_BL_SEQ  	= #f_intg_bl_seq#
	       AND WRK_TP 		    = 'DR'
    </update>
    
    <!-- 20130330 OJG   -->
    <select id="selectMblItNo" parameterClass="HashMap" resultClass="HashMap">
		SELECT IT_NO ,TE_DT_TM,IT_LOC
		FROM TB_INTG_BL WHERE REF_NO = #ref_no# AND BIZ_CLSS_CD = 'M'
	</select>
	<!-- 20130330 OJG   -->
	
	<!-- MBL 의 Carrier Bkg. No.를 HBL 에 UPDATE 해준다. -->
    <update id="updateHblListLnrBkgNo" parameterClass="HashMap">
		UPDATE TB_INTG_BL
		SET    LNR_BKG_NO = #lnr_bkg_no#
		WHERE  INTG_BL_SEQ IN (SELECT INTG_BL_SEQ FROM TB_INTG_BL_RLT WHERE RLT_INTG_BL_SEQ = cast(#intg_bl_seq# as varchar))
	</update>
	
	<!-- HBL Sync 업데이트  -->
	<select id="selectHBL_SEQ_LIST" parameterClass="String" resultClass="HashMap">
        SELECT  intg_bl_seq
               ,pol_cd
               ,pol_nm  
               ,pod_cd
               ,pod_nm                                                  
          FROM  tb_intg_bl
         WHERE  intg_bl_seq in (SELECT intg_bl_seq 
	                              FROM tb_intg_bl_rlt 
	                             WHERE rlt_intg_bl_seq = cast(#intg_bl_seq# as varchar))
    </select>

    <select id="selectHBL_CNTR_SUM" parameterClass="String" resultClass="HBLInfoVO">
        /** BlCmmSQL.xml > selectHBL_CNTR_SUM **/
        select * 
        from (
			select CASE WHEN COUNT(pck_ut_cd) = 1 THEN  pck_ut_cd
						ELSE 'GT' 
				   END AS pck_ut_cd
				, SUM(pck_qty) pck_qty, SUM(grs_wgt) grs_wgt, SUM(meas) meas
				, SUM(grs_wgt1) grs_wgt1, SUM(meas1) meas1
			from (
			SELECT
					CASE 
						WHEN (COUNT(cgo_pck_ut) OVER (PARTITION BY 'A')) = 1 THEN CGO_PCK_UT      
						ELSE 'GT'      
					END AS pck_ut_cd,
					sum(cgo_pck_qty) pck_qty,
					sum(cgo_wgt) grs_wgt,
					CONVERT(NUMERIC(12, 3), ROUND(sum(cgo_meas), 3)) meas,
					sum(cgo_wgt1) grs_wgt1,
					sum(cgo_meas1) meas1   
				FROM
					tb_cntr_list   
				WHERE
					intg_bl_seq =  cast(#intg_bl_seq# as varchar) 
					AND delt_flg = 'N'           
				GROUP BY  cgo_pck_ut
			) T
			GROUP BY pck_ut_cd
		) A
		<!-- #6199 [IMPEX-DFW] Package/Gross Weight/Measurement Sync Logic Enhancement (Zen#1785) -->
		WHERE pck_qty != 0 AND grs_wgt != 0 AND meas != 0
    </select>
    
    <update id="updateHBL_Shipment" parameterClass="HBLInfoVO">
        /** BlCmmSQL.xml > updateHBL_Shipment **/
        UPDATE  tb_intg_bl
           SET  pck_ut_cd      = #pck_ut_cd#,
                pck_qty        = #pck_qty#,
                grs_wgt        = #grs_wgt#, 
                grs_wgt1       = convert(numeric(12,3),ROUND(convert(numeric(12,3),#grs_wgt#)*2.20462262185,3)),
                meas           = #meas#,
                meas1          = convert(numeric(12,3),ROUND(convert(numeric(12,3),#meas#)*35.3165,3)),
                mk_grs_wgt     = #grs_wgt#,     
                mk_grs_wgt1    = convert(numeric(12,3),ROUNd(convert(numeric(12,3),#grs_wgt#)*2.20462262185,3)),
                mk_meas        = #meas#,
                mk_meas1       = convert(numeric(12,3),ROUNd(convert(numeric(12,3),#meas#)*35.3165,3)),                
                modi_usrid     = #modi_usrid#,          
                modi_ofc_cd    = #modi_ofc_cd#,  
                modi_tms       = GETUTCDATE()
         WHERE  intg_bl_seq    = cast(#intg_bl_seq# as varchar)
    </update>    
    	
	<insert id="insertMBL_PRNR_COPY" parameterClass="HashMap">
        INSERT INTO tb_bl_prnr(                                                      
              intg_bl_seq,          bl_trdp_tp_cd,    
              trdp_cd,              trdp_addr,          trdp_nm,
              
              trdp_pic_usr_id,      trdp_pic,           trdp_phn,      trdp_fax,     trdp_eml,
              
              rgst_usrid,           rgst_ofc_cd,        rgst_tms,        
              modi_usrid,           modi_ofc_cd,        modi_tms,      delt_flg
                                                               
        )SELECT   #intg_bl_seq#,    bl_trdp_tp_cd,
                  trdp_cd,          trdp_addr,          trdp_nm,
                  trdp_pic_usr_id,  trdp_pic,           trdp_phn,      trdp_fax,     trdp_eml,
                  #proc_usrid#,     #proc_ofccd#,       getdate(),
                  #proc_usrid#,     #proc_ofccd#,       GETUTCDATE(),     delt_flg

           FROM  tb_bl_prnr
          WHERE  intg_bl_seq = #org_intg_bl_seq# 
            AND  bl_trdp_tp_cd = #bl_trdp_tp_cd# 
            AND  delt_flg = 'N'
    </insert>
    
    <insert id="insertMBL_PRNR_CHANGE_COPY" parameterClass="HashMap">
        INSERT INTO tb_bl_prnr(                                                      
              intg_bl_seq,          bl_trdp_tp_cd,    
              trdp_cd,              trdp_addr,          trdp_nm,
              
              trdp_pic_usr_id,      trdp_pic,           trdp_phn,      trdp_fax,     trdp_eml,
              
              rgst_usrid,           rgst_ofc_cd,        rgst_tms,        
              modi_usrid,           modi_ofc_cd,        modi_tms,      delt_flg
                                                               
        )SELECT   #intg_bl_seq#,    #bl_trdp_tp_cd#,
                  trdp_cd,          trdp_addr,          trdp_nm,
                  trdp_pic_usr_id,  trdp_pic,           trdp_phn,      trdp_fax,     trdp_eml,
                  #proc_usrid#,     #proc_ofccd#,       getdate(),
                  #proc_usrid#,     #proc_ofccd#,       GETUTCDATE(),     delt_flg

           FROM  tb_bl_prnr
          WHERE  intg_bl_seq = #mbl_intg_bl_seq# 
            AND  bl_trdp_tp_cd = #mbl_bl_trdp_tp_cd# 
            AND  delt_flg = 'N'
    </insert>
	
	
	<!-- #3951 [JAPT] HBL Doc cut off date sync -->
	<update id="updateHBL_ADD_INFO_HBLCUTOFFDT" parameterClass="HBLInfoVO">
	   UPDATE TB_ADD_INFO_BND   
	      SET HBL_CUT_OFF_DT =  #doc_cut_off_dt#
	    WHERE 1=1   
	      AND intg_bl_seq in (
	            SELECT INTG_BL_SEQ     
	              FROM TB_INTG_BL     
	             WHERE 1=1     
	               AND ref_no= (select   ref_no    from   TB_INTG_BL    where     INTG_BL_SEQ= cast(#intg_bl_seq# as varchar) )
	               AND BIZ_CLSS_CD='H'
	               AND DELT_FLG='N'   
	        )   		
	</update>
	
    <update id="updateHBL_OE_SYNC" parameterClass="HBLInfoVO">
    	/* updateHBL_OE_SYNC */
        UPDATE  tb_intg_bl
           SET  trnk_vsl_cd = #trnk_vsl_cd#,   			trnk_vsl_nm = #trnk_vsl_nm#,  			trnk_voy 	= #trnk_voy#,
		        etd_dt_tm  	= #etd_dt_tm#,     			eta_dt_tm   = #eta_dt_tm#,	    		
		        <isEqual property="shp_mod_sync_flg" compareValue="Y">
				   shp_mod_cd = #shp_mod_cd#,
				</isEqual>
				
				<!-- #141 #49037 - [IMPEX] OIH COPY후 OIM FILING# 입력 후 | {CO} MB/L and HB/L, MAWB and HAWB items copy rule opti -->
					<isEqual property="svc_term_sync_flg" compareValue="Y">
					   fm_svc_term_cd = #fm_svc_term_cd#,
					   to_svc_term_cd = #to_svc_term_cd#,
					</isEqual>
				
				<isEqual property="hbl_tp_cd" compareValue="DR">
				   curr_cd        = #curr_cd#,
				   agent_curr_cd  = #curr_cd#,
				   cust_curr_cd   = #curr_cd#,
				   del_cd         = #del_cd#,
				   del_nm         = #del_nm#,
				   etd_por_tm     = #etd_por_tm#,
				   fnl_dest_loc_cd= #fnl_dest_loc_cd#,
				   fnl_dest_loc_nm= #fnl_dest_loc_nm#,
				   por_cd         = #por_cd#,
				   por_nm         = #por_nm#,
				   pck_qty        = #pck_qty#,
				   pck_ut_cd      = #pck_ut_cd#,
				   grs_wgt        = #grs_wgt#,
				   grs_wgt_ut_cd  = #grs_wgt_ut_cd#,
				   meas           = #meas#,
				   meas_ut_cd     = #meas_ut_cd#,
				   grs_wgt1       = #grs_wgt1#,
				   meas1          = #meas1#,
				   sad_txt        = #sad_txt#,
				   desc_txt       = #desc_txt#,
				   mk_grs_wgt     = #mk_grs_wgt#,
				   mk_grs_wgt1    = #mk_grs_wgt1#,
				   mk_meas        = #mk_meas#,
				   mk_meas1       = #mk_meas1#,
				   mk_txt         = #mk_txt#,
				   <!-- #1101 [Oceanland, Impex] V440 OE MBL Logic 변경 ? Mark and Description -->
				   rmk            = #rmk#,
				   <!-- #1279 [UFF] Add Commodity field to OEM BL Entry -->
				   rep_cmdt_cd	  = #rep_cmdt_cd#,
				   rep_cmdt_nm	  = #rep_cmdt_nm#,
				</isEqual>
				
				<isNotEqual property="hbl_tp_cd" compareValue="DR">
					<isEqual property="shp_mod_cd" compareValue="FCL">
					<!-- #813 [Binex] AMS House BL's Consignee, Notify and Package Qty -->
					   <!-- pck_qty        = #pck_qty#,
					   pck_ut_cd      = #pck_ut_cd#,
					   grs_wgt        = #grs_wgt#,
					   grs_wgt_ut_cd  = #grs_wgt_ut_cd#,
					   meas           = #meas#,
					   meas_ut_cd     = #meas_ut_cd#,
					   grs_wgt1       = #grs_wgt1#,
					   meas1          = #meas1#, -->
					</isEqual>
				</isNotEqual>
				<isNotEmpty property="hbl_tp_cd">
				   hbl_tp_cd = #hbl_tp_cd#,
				</isNotEmpty>
				
				<isNotEmpty property="post_dt">
				   post_dt = #post_dt#,
				</isNotEmpty>

				
				doc_recpt_no = CASE WHEN ISNULL(doc_recpt_no,'') = '' AND ISNULL((SELECT OPT_VAL FROM TB_SYS_OPT WHERE OPT_KEY = 'HBL_DOCNO_SYNC'),'F') = 'M' THEN #mbl_no# ELSE doc_recpt_no END,
				modi_tms  = GETUTCDATE()		
         WHERE  intg_bl_seq in (SELECT intg_bl_seq 
	                              FROM tb_intg_bl_rlt 
	                             WHERE rlt_intg_bl_seq = cast(#intg_bl_seq# as varchar))
    </update>
    
    <update id="updateHBL_OI_SYNC" parameterClass="HBLInfoVO">
    	/* updateHBL_OI_SYNC */
        UPDATE  tb_intg_bl
           SET  trnk_vsl_cd = #trnk_vsl_cd#,   		trnk_vsl_nm = #trnk_vsl_nm#,  			trnk_voy 	= #trnk_voy#,
		        etd_dt_tm  	= #etd_dt_tm#,     		eta_dt_tm   = #eta_dt_tm#,	  			d_eta_dt_tm = #d_eta_dt_tm#,	
		        <!-- #3528 [BNX US] OCEAN IMPORT FINAL DEST ETA SYNC LOGIC	 -->
		        <isEqual property="oih_oim_sync_f_eta_flg" compareValue="Y">
		        	<!-- f_eta_dt_tm = (case when cfs_trdp_cd = #cfs_trdp_cd# then #d_eta_dt_tm# else f_eta_dt_tm end), -->
		        	<!-- #6909 [BNX-ALL] HB/L F.DEST ETA SYNC WHEN MB/L DEL ETA IS CHANGED -->
		        	<!-- OFVFOUR-6958 [BNX] Updated f.destination in HBL is reversed -->
		        	f_eta_dt_tm = (case when d_eta_dt_tm = #d_eta_dt_tm#
		        							then f_eta_dt_tm 
		        							else #d_eta_dt_tm#
		        				    end),
				</isEqual>
		        <isEqual property="shp_mod_sync_flg" compareValue="Y">
				   shp_mod_cd = #shp_mod_cd#,
				</isEqual>
				<isEqual property="svc_term_sync_flg" compareValue="Y">
					   fm_svc_term_cd = #fm_svc_term_cd#,
					   to_svc_term_cd = #to_svc_term_cd#,
				</isEqual>
				<isEqual property="cfs_trdp_sync_flg" compareValue="Y">
					cfs_trdp_cd = (case when (#shp_mod_cd# = 'FAK' and isnull(cfs_trdp_cd,'') != '') or ISNULL((SELECT OPT_VAL FROM TB_SYS_OPT WHERE OPT_KEY = 'CFS_SYNC'),'Y') = 'N' then cfs_trdp_cd else #cfs_trdp_cd# end),
				</isEqual>
				
				<!-- //#141 #49037 - [IMPEX] OIH COPY후 OIM FILING# 입력 후 | {CO} MB/L and HB/L, MAWB and HAWB items copy rule opti -->
				<isEqual property="hbl_tp_cd" compareValue="DR">
					express_tp_cd = #express_tp_cd#,
					it_no         = #it_no#,
					it_loc        = #it_loc#,
					te_dt_tm      = #te_dt_tm#,
					bl_ser_no     = #bl_ser_no#,
					curr_cd       = #curr_cd#,
					del_cd        = #del_cd#,
					del_nm        = #del_nm#,
					por_cd        = #por_cd#,
					por_nm        = #por_nm#,
					ccn_no        = #ccn_no#,
					mnf_fr_loc    = #mnf_fr_loc#,
					mnf_to_loc    = #mnf_to_loc#,
					mk_txt        = #mk_txt#,
					desc_txt      = #desc_txt#,
					
					pck_qty        = #pck_qty#,
					pck_ut_cd      = #pck_ut_cd#,
					grs_wgt        = #grs_wgt#,
					grs_wgt_ut_cd  = #grs_wgt_ut_cd#,
					meas           = #meas#,
					meas_ut_cd     = #meas_ut_cd#,
					grs_wgt1       = #grs_wgt1#,
					meas1          = #meas1#,
					
					<!-- #1101 [Oceanland, Impex] V440 OE MBL Logic 변경 ? Mark and Description -->
					desc_txt1     = #desc_txt1#,
				</isEqual>
				
				<isNotEqual property="hbl_tp_cd" compareValue="DR">
					<isEqual property="shp_mod_cd" compareValue="FCL">
					   <!-- #771: [BINEX] AMS DOWNLOAD, PACKAGE AND WEIGHT INFO MISSING
					   pck_qty        = #pck_qty#,
					   pck_ut_cd      = #pck_ut_cd#,
					   grs_wgt        = #grs_wgt#,
					   grs_wgt_ut_cd  = #grs_wgt_ut_cd#,
					   meas           = #meas#,
					   meas_ut_cd     = #meas_ut_cd#,
					   grs_wgt1       = #grs_wgt1#,
					   meas1          = #meas1#,  -->
					</isEqual>
				</isNotEqual>
				
				hbl_tp_cd = #hbl_tp_cd#,
				post_dt   = #post_dt#,
				
			   	modi_tms  = GETUTCDATE(),
				<!-- OFVFOUR-8115 [BNX] Adding Berth Date Field in OIM and OIH Entry -->
			   	berth_dt = #berth_dt#
         WHERE  intg_bl_seq in (SELECT intg_bl_seq 
	                              FROM tb_intg_bl_rlt 
	                             WHERE rlt_intg_bl_seq = cast(#intg_bl_seq# as varchar))
    </update>
    
    <!-- #1101 [Oceanland, Impex] V440 OE MBL Logic 변경 ? Mark and Description -->
    <update id="updateHBLADD_INFO_BND_OI_SYNC" parameterClass="HBLInfoVO">
    	/* updateHBLADD_INFO_BND_OI_SYNC */
        UPDATE  TB_ADD_INFO_BND
           SET  modi_tms  = GETUTCDATE()
				<!-- #1101 [Oceanland, Impex] V440 OE MBL Logic 변경 ? Mark and Description -->
				<isEqual property="hbl_tp_cd" compareValue="DR">
					, cfs_rmk  =  #cfs_rmk#
				</isEqual>
         WHERE  intg_bl_seq in (SELECT intg_bl_seq 
	                              FROM tb_intg_bl_rlt 
	                             WHERE rlt_intg_bl_seq = cast(#intg_bl_seq# as varchar))
    </update>
    
    <update id="updateHBL_AE_SYNC" parameterClass="AirHBLInfoVO">
    	/*	updateHBL_AE_SYNC */
        UPDATE  tb_intg_bl
           SET  flt_no = #flt_no#,   
		        etd_dt_tm  	= #etd_dt_tm#,     	eta_dt_tm   = #eta_dt_tm#,	  
		        pol_cd      = #pol_cd#,
				pol_nm      = (case when pol_cd = #pol_cd# then pol_nm else #pol_nm# end),
		        pod_cd 		= #pod_cd#,
		        pod_nm      = (case when pod_cd = #pod_cd# then pod_nm else #pod_nm# end),
		        
		        <!-- #142 #49023 - [IMPEX] AIM와 AIH에 기재되는 FLIGHT INFO및 ROUTE 관련 | {CO} MB/L and HB/L, MAWB and HAWB items copy -->
		        <!-- hbl_tp_cd   = #hbl_tp_cd#, -->
		        lnr_bkg_no  = #lnr_bkg_no#,
		        rt_clss_cd  = #rt_clss_cd#,
		        iata_cd     = #iata_cd#,
		        eta_fpoe_tm = #eta_fpoe_tm#,
		        first_port_cd = #first_port_cd#,
		        
		        <isEqual property="hbl_tp_cd" compareValue="DR">
		        	spot_no          = #spot_no#,
		        	curr_cd          = #curr_cd#,
		        	ts1_port_cd      = #ts1_port_cd#,
		        	ts1_flt_no       = #ts1_flt_no#,
		        	ts2_port_cd      = #ts2_port_cd#,
		        	ts2_flt_no       = #ts2_flt_no#,
		        	ts3_port_cd      = #ts3_port_cd#,
		        	ts3_flt_no       = #ts3_flt_no#,
		        	chg_wgt          = #chg_wgt#,
		        	chg_wgt1         = #chg_wgt1#,
		        	grs_wgt          = #grs_wgt#,
		        	grs_wgt1         = #grs_wgt1#,
		        	vol_meas         = #vol_meas#,
		        	bl_chg_wgt       = #bl_chg_wgt#,
		        	bl_chg_wgt1      = #bl_chg_wgt1#,
		        	rep_cmdt_cd      = #rep_cmdt_cd#,
		        	rep_cmdt_nm      = #rep_cmdt_nm#,
		        	decl_crr_val     = #decl_crr_val#,
		        	decl_cstms_val   = #decl_cstms_val#,
		        	bl_grs_wgt       = #bl_grs_wgt#,
		        	bl_grs_wgt1      = #bl_grs_wgt1#,
		        	amt_insur_val    = #amt_insur_val#,
		        	pck_qty          = #pck_qty#,
		        	pck_ut_cd        = #pck_ut_cd#,
		        	vol_wgt          = #vol_wgt#,
		        	acctg_info_txt   = #acctg_info_txt#,
		        	hndl_info_txt    = #hndl_info_txt#,
		        	mk_txt           = #mk_txt#,
		        	desc_txt         = #desc_txt#,
		        </isEqual>
		        
		        cargo_tp_cd = #cargo_tp_cd#
         WHERE  intg_bl_seq in (SELECT intg_bl_seq 
	                              FROM tb_intg_bl_rlt 
	                             WHERE rlt_intg_bl_seq = cast(#intg_bl_seq# as varchar))
    </update>
    
    <!-- #2896 [Extrans] Cannot save HAWB entry -->
    <delete id="deleteHBL_AE_SYNC_ISSUING" parameterClass="HashMap">
    	/*	deleteHBL_AE_SYNC_ISSUING */
         DELETE TB_BL_PRNR
         WHERE  intg_bl_seq = cast(#intg_bl_seq# as varchar)
	     AND bl_trdp_tp_cd = 'I01' 
	     <isNotEmpty property="iss_trdp_cd">
	     	AND trdp_cd = #trdp_cd#
	     </isNotEmpty>
    </delete>

    <delete id="deleteHBL_AE_SYNC_LNR" parameterClass="HashMap">
    	/*	deleteHBL_AE_SYNC_ISSUING */
         DELETE TB_BL_PRNR
         WHERE  intg_bl_seq = cast(#intg_bl_seq# as varchar)
	     AND bl_trdp_tp_cd = 'L01' 
	     <isNotEmpty property="lnr_trdp_cd">
	     	AND trdp_cd = #trdp_cd#
	     </isNotEmpty>
    </delete>
    
    <insert id="insertBL_PRNR_AE_SYNC" parameterClass="HashMap">
    /*	insertBL_PRNR_AE_SYNC */
        INSERT INTO tb_bl_prnr(                                                      
              intg_bl_seq,          bl_trdp_tp_cd,    
              trdp_cd,              trdp_addr,          trdp_nm,
              
              trdp_pic_usr_id,      trdp_pic,           trdp_phn,      trdp_fax,     trdp_eml,
              
              rgst_usrid,           rgst_ofc_cd,        rgst_tms,        
              modi_usrid,           modi_ofc_cd,        modi_tms,      delt_flg                                                       
        ) SELECT  #intg_bl_seq#,    #bl_trdp_tp_cd#, 
                  #trdp_cd#,        a.ENG_ADDR,  #trdp_nm#,
                  b.cntc_pson_seq,  b.pic_nm,            b.pic_phn,    b.pic_fax,    b.pic_eml,
                  #proc_usrid#,     #proc_ofccd#,        getdate(),
                  #proc_usrid#,     #proc_ofccd#,        GETUTCDATE(),    'N'
            FROM  tb_trdp a 
 LEFT OUTER JOIN  tb_trdp_cntc_pson b
              ON  a.trdp_cd=b.trdp_cd 
             AND  b.cntc_pson_seq = ( SELECT MIN(cntc_pson_seq)  
                                        FROM tb_trdp_cntc_pson 
                                       WHERE delt_flg = 'N' AND trdp_cd = a.trdp_cd )
             AND  a.delt_flg = 'N'
           WHERE  a.trdp_cd = #trdp_cd# 
           /* AND a.delt_flg = 'N' */
    </insert>
    
    <!-- #2896 [Extrans] Cannot save HAWB entry -->
    <!-- #142 #49023 - [IMPEX] AIM와 AIH에 기재되는 FLIGHT INFO및 ROUTE 관련 | {CO} MB/L and HB/L, MAWB and HAWB items copy
    <update id="updateHBL_AE_SYNC_ISSUING" parameterClass="AirHBLInfoVO">
    	/*	updateHBL_AE_SYNC_ISSUING */
        UPDATE  tb_bl_prnr
           SET  trdp_cd = #iss_trdp_cd#
              , trdp_nm = #iss_trdp_nm#
         WHERE  intg_bl_seq in (SELECT intg_bl_seq 
	                              FROM tb_intg_bl_rlt 
	                             WHERE rlt_intg_bl_seq = #intg_bl_seq#)
	     AND bl_trdp_tp_cd = 'I01' 
	     AND delt_flg = 'N'
    </update>
     -->

    <!-- #142 #49023 - [IMPEX] AIM와 AIH에 기재되는 FLIGHT INFO및 ROUTE 관련 | {CO} MB/L and HB/L, MAWB and HAWB items copy
    <update id="updateHBL_AE_SYNC_LNR" parameterClass="AirHBLInfoVO">
    	/*	updateHBL_AE_SYNC */
        UPDATE  tb_bl_prnr
           SET  trdp_cd = #lnr_trdp_cd#
              , trdp_nm = #lnr_trdp_nm#
         WHERE  intg_bl_seq in (SELECT intg_bl_seq 
	                              FROM tb_intg_bl_rlt 
	                             WHERE rlt_intg_bl_seq = #intg_bl_seq#)
	     AND bl_trdp_tp_cd = 'L01' 
	     AND delt_flg = 'N'
    </update>
     -->
    
     <update id="updateHBL_AE_ADDINFO_SYNC" parameterClass="AirHBLInfoVO">
    	/*	updateHBL_AE_ADDINFO_SYNC */
        UPDATE  tb_add_info_bnd
           SET  fst_to_cd 	= #fst_to_cd#,   
		        fst_to_nm 	= #fst_to_nm#
         WHERE  intg_bl_seq in (SELECT intg_bl_seq 
	                              FROM tb_intg_bl_rlt 
	                             WHERE rlt_intg_bl_seq = cast(#intg_bl_seq# as varchar))
    </update>
    
    <update id="updateHBL_AI_SYNC" parameterClass="AirHBLInfoVO">
    	/*	updateHBL_AI_SYNC */
        UPDATE  tb_intg_bl
           SET  flt_no = #flt_no#,   
		        etd_dt_tm  	= #etd_dt_tm#,
		        eta_dt_tm   = #eta_dt_tm#,	  
		        pol_cd      = #pol_cd#,
				pol_nm      = (case when pol_cd = #pol_cd# then pol_nm else #pol_nm# end),
		        pod_cd 		= #pod_cd#,
		        pod_nm      = (case when pod_cd = #pod_cd# then pod_nm else #pod_nm# end),
		        ts1_port_cd = #ts1_port_cd#, 	ts1_flt_no = #ts1_flt_no#,
		        ts2_port_cd = #ts2_port_cd#, 	ts2_flt_no = #ts2_flt_no#,
		        ts3_port_cd = #ts3_port_cd#, 	ts3_flt_no = #ts3_flt_no#,
		        
		        <!-- #142 #49023 - [IMPEX] AIM와 AIH에 기재되는 FLIGHT INFO및 ROUTE 관련 | {CO} MB/L and HB/L, MAWB and HAWB items copy -->
		        sto_start_dt    = #sto_start_dt#,
		        f_eta_dt_tm     = #f_eta_dt_tm#,
		        eta_fpoe_tm     = #eta_fpoe_tm#,
		        first_port_cd   = #first_port_cd#,
		        last_port_cd    = #last_port_cd#,
		        
		        <isEqual property="hbl_tp_cd" compareValue="DR">
		        	curr_cd         = #curr_cd#,
		        	manifest_to     = #manifest_to#,
		        	chg_wgt         = #chg_wgt#,
		        	chg_wgt1        = #chg_wgt1#,
		        	grs_wgt         = #grs_wgt#,
		        	grs_wgt1        = #grs_wgt1#,
		        	rep_cmdt_cd     = #rep_cmdt_cd#,
		        	pck_ut_cd       = #pck_ut_cd#,
		        	pck_qty         = #pck_qty#,
		        	vol_meas        = #vol_meas#,
		        	vol_wgt         = #vol_wgt#,
		        	ccn_no          = #ccn_no#,
		        	mnf_fr_loc      = #mnf_fr_loc#,
		        	mnf_to_loc      = #mnf_to_loc#,
		        	desc_txt        = #desc_txt#,
		        	hndl_info_txt   = #hndl_info_txt#,
		        	mk_txt          = #mk_txt#,
                	bl_ser_no       = #bl_ser_no#,
		        </isEqual>
		        cfs_trdp_cd = #cfs_trdp_cd#
		        
         WHERE  intg_bl_seq in (SELECT intg_bl_seq 
	                              FROM tb_intg_bl_rlt 
	                             WHERE rlt_intg_bl_seq = cast(#intg_bl_seq# as varchar))
    </update>
    
    <!-- #18782 OBL RCV and Release update jsjang, 2013.9.14  -->
    <update id="updateListInfo" parameterClass="HBLInfoVO">
        UPDATE  tb_intg_bl
           SET  
           		rlsd_usrid = #rlsd_usrid#,
           		rlsd_flg      = #rlsd_flg#,        
           		rlsd_dt_tm  = #rlsd_dt_tm#,
           		<!-- #4724	[Best Ocean] Ocean Import OBL Received and Received Date column and entry add -->
           		org_bl_rcvd_flg = #org_bl_rcvd_flg#,
           		rcvd_dt_tm  = #rcvd_dt_tm#,           		
                modi_tms    = GETUTCDATE()
         WHERE  intg_bl_seq= cast(#intg_bl_seq# as varchar)
    </update>	
    
    <!-- #18782 OBL RCV and Release update jsjang, 2013.9.14  -->
    <update id="updateListInfo_house" parameterClass="HBLInfoVO">
        UPDATE  tb_intg_bl
           SET  
           		rlsd_usrid = #rlsd_usrid#,
           		rlsd_flg      = #rlsd_flg#,        
           		rlsd_dt_tm  = #rlsd_dt_tm#, 
           		org_bl_rcvd_flg = #org_bl_rcvd_flg#,
           		rcvd_dt_tm = #rcvd_dt_tm#,
                modi_tms    = GETUTCDATE()
         WHERE  intg_bl_seq= cast(#intg_bl_seq# as varchar)
    </update>	    
    
    <!-- #18782 OBL RCV and Release update jsjang, 2013.9.14  -->
    <update id="updateListInfo_seeHouse" parameterClass="HBLInfoVO">
        UPDATE  tb_intg_bl
           SET  
           		rlsd_usrid = #rlsd_usrid#,
           		rlsd_flg      = #rlsd_flg#,        
           		rlsd_dt_tm  = #rlsd_dt_tm#, 
                modi_tms    = GETUTCDATE()
         WHERE  intg_bl_seq= cast(#intg_bl_seq# as varchar)
    </update>
    
    <update id="updateListInfo_seeMaster" parameterClass="SeeMasterBLVO">
        UPDATE  tb_intg_bl
           SET  
           		rlsd_usrid = #rlsd_usrid#,
           		rlsd_flg      = #rlsd_flg#,        
           		rlsd_dt_tm  = #rlsd_dt_tm#, 
                modi_tms    = GETUTCDATE()
         WHERE  intg_bl_seq= cast(#intg_bl_seq# as varchar)
    </update>
    
    <!-- #52109 office별 block_date 확인, 2016.04.18  -->
    <select id="getMaxBlockOrJnrNextDt" parameterClass="HashMap" resultClass="String">
		SELECT (CASE WHEN (DATEDIFF(DAY, MAX(BLOCK_DT), MAX(JNR_DT)) <![CDATA[ < ]]> 0)
		             THEN CASE WHEN MAX(BLOCK_DT)!= '' THEN CONVERT(NVARCHAR(8),DATEADD(DD, 1,MAX(BLOCK_DT)),112) ELSE '' END
		             ELSE CASE WHEN MAX(JNR_DT)!= '' THEN CONVERT(NVARCHAR(8),DATEADD(DD, 1,MAX(JNR_DT)),112) ELSE '' END
		         END) AS nextBlkJnrDt 
		  FROM (
		         SELECT MAX(ISNULL(BLK.BLOCK_DT,'')) AS BLOCK_DT, MAX(ISNULL(DTL.JNR_DT,'')) AS JNR_DT
		    	   FROM TB_INV_DTL DTL
					LEFT JOIN 
			            TB_INV I             
			                ON I.INV_SEQ = DTL.INV_SEQ
    	   			LEFT OUTER JOIN TB_INV_DTL_BLCK BLK
    	   			ON DTL.INV_SEQ = BLK.INV_SEQ
		    	  WHERE DTL.DELT_FLG !='Y'
		    	  <isNotEmpty property="ofc_cd">
                	AND I.OFC_CD = '$ofc_cd$'
            	  </isNotEmpty>
		    	  
		    	 UNION ALL
		    	 
		    	 SELECT MAX(ISNULL(BLK.BLOCK_DT,'')) AS BLOCK_DT, MAX(ISNULL(MST.JNR_DT,'')) AS JNR_DT
		    	   FROM TB_JNR_MST MST 
		    	   LEFT OUTER JOIN TB_JNR_MST_BLCK BLK
		    	   ON MST.JNR_NO =BLK.JNR_NO 
		    	  WHERE MST.DELT_FLG !='Y'
		    	  <isNotEmpty property="ofc_cd">
                	AND MST.P_OFC_CD = '$ofc_cd$'
            	  </isNotEmpty>
		    	 ) A 
	</select>  
	
    <!-- Office post_dt_imp 조회   -->
    <select id="selectImpPostRefCheck" parameterClass="HashMap" resultClass="String">
        SELECT  post_dt_imp
          FROM  tb_ofc ofc 
          WHERE  ofc.ofc_cd = #f_ofc_cd# 
           AND  ofc.delt_flg = 'N'
    </select>	
    
    <!-- Office post_dt_exp 조회   -->
    <select id="selectExpPostRefCheck" parameterClass="HashMap" resultClass="String">
        SELECT  post_dt_exp
          FROM  tb_ofc ofc 
          WHERE  ofc.ofc_cd = #f_ofc_cd# 
           AND  ofc.delt_flg = 'N'
    </select>	

    <select id="selectBlBlockStatus" parameterClass="HashMap" resultClass="String">
			select ISNULL(BLCK.BL_STS_CD1, BL.BL_STS_CD) AS BL_STS_CD
			from tb_intg_bl bl
			LEFT OUTER JOIN(SELECT INTG_BL_SEQ AS INTG_BL_SEQ1, BL_STS_CD AS BL_STS_CD1 FROM TB_INTG_BL_BLCK) BLCK ON BL.INTG_BL_SEQ = BLCK.INTG_BL_SEQ1
			WHERE bl.INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
	</select>  



    <select id="searchDuplicateLinerBkgNo" parameterClass="HashMap" resultClass="java.util.HashMap">
			select LNR_BKG_NO from tb_intg_bl with(nolock)
			where   1=1  
			AND LNR_BKG_NO = #lnr_bkg_no#
			AND AIR_SEA_CLSS_CD = #air_sea_clss_cd#
			AND DELT_FLG ='N' 
	</select>  
	
		
	<select id="selectTs1Info" parameterClass="HashMap" resultClass="HBLInfoVO">
		/*	selectTs1Info */
		SELECT  PRE_VSL_CD, PRE_VSL_NM, PRE_VOY
		            , bnd.TS1_PORT_CD
		            , bnd.TS1_PORT_NM
				    , SUBSTRING(TS1_ETD_DT_TM, 1, 8) AS TS1_ETD_DT_TM
				    , SUBSTRING(TS1_ETA_DT_TM, 1, 8) AS TS1_ETA_DT_TM
		  FROM  tb_intg_bl bl
		  JOIN  tb_add_info_bnd bnd
			ON  bl.intg_bl_seq = bnd.intg_bl_seq
		  LEFT OUTER JOIN   tb_loc loc
           ON   bl.ts1_port_cd = loc.loc_cd 
		 WHERE  bl.intg_bl_seq = cast(#intg_bl_seq# as varchar) 
    </select> 
    
    <insert id="insertBlUdf" parameterClass="com.clt.apps.fis.see.bmd.housebl.dto.BlUdfVO">
	    INSERT INTO TB_BL_UDF
	           (INTG_BL_SEQ
	           ,UDF_CD
	           ,UDF_VAL
	           ,RGST_USRID
	           ,RGST_OFC_CD
	           ,RGST_TMS
	           ,MODI_USRID
	           ,MODI_OFC_CD
	           ,MODI_TMS)
	     VALUES
	           (#intg_bl_seq#
	           ,#udf_cd#
	           ,#udf_val#
	           ,#rgst_usrid#
	           ,#rgst_ofc_cd#
	           ,GETDATE()
	           ,#modi_usrid#
	           ,#modi_ofc_cd#
	           ,GETUTCDATE())
	</insert>       
	
	<update id="updateBlUdf" parameterClass="com.clt.apps.fis.see.bmd.housebl.dto.BlUdfVO">
		UPDATE TB_BL_UDF
		       SET UDF_VAL = #udf_val#
		     		 ,MODI_USRID = #modi_usrid#
		     		 ,MODI_OFC_CD = #modi_ofc_cd#
		      		 ,MODI_TMS = GETUTCDATE()
		 WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
		     AND UDF_CD = #udf_cd#    
   </update>
   
   <delete id="deleteBlUdf" parameterClass="com.clt.apps.fis.see.bmd.housebl.dto.BlUdfVO">
		DELETE TB_BL_UDF
		WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
		    AND UDF_VAL = #udf_val#    
   </delete>
   
   <select id="selectBlUdfList" parameterClass="HashMap"  resultClass="com.clt.apps.fis.see.bmd.housebl.dto.BlUdfVO">
	   SELECT INTG_BL_SEQ, UDF_CD, UDF_VAL 
		FROM TB_BL_UDF A
		  JOIN TB_COM_CD_DTL B ON A.UDF_CD = B.CD_VAL AND B.COM_CD = 'T002' 
	   WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
	   ORDER BY B.SRT_SEQ
	</select>
	
	<insert id="insertHwiFrt" parameterClass="com.clt.apps.fis.see.bmd.housebl.dto.HwiFrtVO">
		/*	insertHwiFrt */
		INSERT INTO TB_HWI_FRT
           (INTG_BL_SEQ
           ,FRT_NM
           ,RU
           ,GRS_WGT1
           ,MEAS1
           ,COD_AMT
           ,ADV_AMT
           ,INV_AMT
           ,DELT_FLG
           ,RGST_USRID
           ,RGST_OFC_CD
           ,RGST_TMS
           ,MODI_USRID
           ,MODI_OFC_CD
           ,MODI_TMS)
     VALUES
           (#intg_bl_seq#
           ,#frt_nm#
           ,#ru#
           ,#grs_wgt1#
           ,#meas1#
           ,#cod_amt#
           ,#adv_amt#
           ,#inv_amt#
           ,'N'
           ,#proc_usrid#
           ,#proc_ofccd#
           ,GETDATE()
           ,#proc_usrid#
           ,#proc_ofccd#
           ,GETUTCDATE())
	</insert>       
	
	<update id="updateHwiFrt" parameterClass="com.clt.apps.fis.see.bmd.housebl.dto.HwiFrtVO">
		/*	updateHwiFrt */
		UPDATE TB_HWI_FRT
		   SET FRT_NM = #frt_nm#
		      ,RU = #ru#
		      ,GRS_WGT1 = #grs_wgt1#
		      ,MEAS1 = #meas1#
		      ,COD_AMT = #cod_amt#
		      ,ADV_AMT = #adv_amt#
		      ,INV_AMT = #inv_amt#
		      ,MODI_USRID = #proc_usrid#
		      ,MODI_OFC_CD = #proc_ofccd#
		      ,MODI_TMS = GETUTCDATE()
		 WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
		   AND FRT_SEQ = #frt_seq#    
   	</update>
   
	<delete id="deleteHwiFrt" parameterClass="com.clt.apps.fis.see.bmd.housebl.dto.HwiFrtVO">
   		/*	deleteHwiFrt */
		UPDATE TB_HWI_FRT
		   SET DELT_FLG = 'Y'
		      ,MODI_USRID = #proc_usrid#
		      ,MODI_OFC_CD = #proc_ofccd#
		      ,MODI_TMS = GETUTCDATE()
		 WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
		   AND FRT_SEQ = #frt_seq#    
   	</delete>
   
	<select id="selectHwiFrtList" parameterClass="HashMap"  resultClass="com.clt.apps.fis.see.bmd.housebl.dto.HwiFrtVO">
		/*	selectHwiFrtList */
   		SELECT FRT_SEQ
		      ,INTG_BL_SEQ
		      ,FRT_NM
		      ,RU
		      ,GRS_WGT1
		      ,MEAS1
		      ,COD_AMT
		      ,ADV_AMT
		      ,INV_AMT
		      ,DELT_FLG
		      ,RGST_USRID
		      ,RGST_OFC_CD
		      ,RGST_TMS
		      ,MODI_USRID
		      ,MODI_OFC_CD
		      ,MODI_TMS
		 FROM TB_HWI_FRT
		WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
		  AND DELT_FLG = 'N'
		ORDER BY FRT_SEQ
	</select>
	
	<!-- #27398 -->
    <update id="updateRmkDevSeg" parameterClass="HashMap">
         UPDATE  tb_add_info_bnd
           SET  RMK_DEV 	= #rmk_dev#
         WHERE  intg_bl_seq  = cast(#intg_bl_seq# as varchar)
    </update>	 
	
	<select id="selectHBL_PRINT_LIST" parameterClass="HashMap" resultClass="HashMap">
		/* BlCmmSQL.xml > selectHBL_PRINT_LIST */
		SELECT  BL.BL_NO, BL.INTG_BL_SEQ, BL.FLT_NO, BL.HBL_TP_CD
			  , ISNULL(LNR.TRDP_NM,'') AS LNR_TRDP_NM
			  , ISNULL(THIRD.TRDP_NM,'') AS THIRD_TRDP_NM
			  , ISNULL(PRNR.TRDP_CD,'') AS PRNR_TRDP_CD
			  , ISNULL(PRNR.TRDP_NM,'') AS PRNR_TRDP_NM
			  , ISNULL(SHPR.TRDP_CD,'') AS SHPR_TRDP_CD
			  , ISNULL(SHPR.TRDP_NM,'') AS SHPR_TRDP_NM
			  , (SELECT x.ofc_eng_nm FROM tb_ofc x WHERE x.ofc_cd = BL.ref_ofc_cd AND x.delt_flg = 'N') AS REF_OFC_ENG_NM
			  ,	ISNULL(iss.trdp_nm,'') AS iss_trdp_nm
			  , (select TRDP_NM from tb_bl_prnr m_shpr where mbl.intg_bl_seq = m_shpr.intg_bl_seq  AND m_shpr.bl_trdp_tp_cd = 'S01' AND m_shpr.delt_flg = 'N') m_shpr_trdp_nm
			  , (select max(cnt_cd) from tb_ofc where ofc_cd = bl.ref_ofc_cd) cnt_cd
			  , BL.ORG_BL_QTY
			  <!-- , RMK.RMK_CD -->
			  ,(select top 1 rmk.rmk_cd from tb_bl_rmk rmk where rmk.ofc_cd = mbl.ref_ofc_cd and rmk.use_flg = 'Y' order by rmk.dft_flg desc, rmk.rmk_cd) AS RMK_CD
			  , opt.SIGN_SHIP  <!-- #1247 [CLT] HB/L Company Name - Print 시 저장 요청 및 Document Package 시 표시	 -->
			  ,BL.SHP_MOD_CD <!-- #5947 [JTC] print all HBL together -->
		  FROM  TB_INTG_BL BL
		  JOIN  TB_INTG_BL_RLT RLT ON  BL.INTG_BL_SEQ = RLT.INTG_BL_SEQ
		  LEFT  OUTER JOIN TB_BL_PRNR LNR ON BL.INTG_BL_SEQ = LNR.INTG_BL_SEQ AND LNR.BL_TRDP_TP_CD = 'L01'
		  LEFT  OUTER JOIN TB_BL_PRNR THIRD ON BL.INTG_BL_SEQ = THIRD.INTG_BL_SEQ AND THIRD.BL_TRDP_TP_CD = 'T01'
		  LEFT  OUTER JOIN TB_BL_PRNR PRNR ON BL.INTG_BL_SEQ = PRNR.INTG_BL_SEQ AND PRNR.BL_TRDP_TP_CD = 'P01'
		  LEFT  OUTER JOIN TB_BL_PRNR SHPR ON BL.INTG_BL_SEQ = SHPR.INTG_BL_SEQ AND SHPR.BL_TRDP_TP_CD = 'S01'
		  LEFT  OUTER JOIN tb_bl_prnr iss  ON   BL.intg_bl_seq = iss.intg_bl_seq  AND iss.bl_trdp_tp_cd = 'I01' AND iss.delt_flg = 'N'
		  LEFT  OUTER JOIN tb_intg_bl mbl ON  rlt.rlt_intg_bl_seq = mbl.intg_bl_seq AND mbl.biz_clss_cd = 'M' AND mbl.delt_flg = 'N'
		  <!-- LEFT  OUTER JOIN (select top1 rmk.rmk_cd from tb_bl_rmk rmk where rmk.ofc_cd = mbl.ref_ofc_cd and rmk.use_flg = 'Y' order by rmk.dft_flg desc, rmk.rmk_cd) rmk  -->
          LEFT  OUTER JOIN TB_BLPRN_OPTINFO opt  ON  opt.INTG_BL_SEQ = bl.INTG_BL_SEQ		  
		 WHERE  RLT.RLT_INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
		   AND  BL.DELT_FLG = 'N'
	</select>
	
	<select id="selectRefNoValidCheck" parameterClass="HashMap" resultClass="Integer">
        SELECT  count(bl.bl_no)
          FROM  tb_intg_bl bl 
          JOIN  tb_add_info_bnd bnd 
            ON  bl.INTG_BL_SEQ = bnd.INTG_BL_SEQ AND bnd.delt_flg = 'N'
         WHERE  bl.biz_clss_cd = 'M' 
           AND  bl.air_sea_clss_cd = #f_air_sea_clss_cd#
           AND  bnd.bnd_clss_cd = #f_bnd_clss_cd#
           AND  bl.ref_no = #f_ref_no# 
           AND  bl.intg_bl_seq = #f_rlt_intg_bl_seq# 
           AND  bl.delt_flg = 'N'
    </select>
    
    <!--Booking 정보 조회  -->
    <select id="selectBKG_INFO" parameterClass="HashMap" resultClass="HBLInfoVO">
    	/* BlCmmSQL.xml > selectBKG_INFO */
        SELECT TOP 1
               BKG.BKG_NO 
		      ,BKG.BKG_SEQ 
		      <!--,BKG.INTG_BL_SEQ-->
		      ,BL.INTG_BL_SEQ
		      ,BL.BL_NO 
		      ,BKG.BKG_DT_TM 
		      ,BKG.PO_NO 
		      ,BKG.LC_NO 
		      ,BKG.PRNR_TRDP_CD 
		      ,BKG.PRNR_TRDP_NM 
		      ,BKG.ACT_SHPR_TRDP_CD 
		      ,BKG.ACT_SHPR_TRDP_NM 
		      ,BKG.SHPR_TRDP_CD 
		      ,BKG.SHPR_TRDP_NM 
		      ,BKG.SHPR_TRDP_ADDR 
		      ,BKG.CNEE_TRDP_CD 
		      ,BKG.CNEE_TRDP_NM 
		      ,BKG.CNEE_TRDP_ADDR 
		      ,BKG.NTFY_TRDP_CD 
		      ,BKG.NTFY_TRDP_NM 
		      ,BKG.NTFY_TRDP_ADDR 
		      ,BKG.EXP_REF_NO 
		      ,BKG.PU_TRDP_CD 
		      ,BKG.PU_TRDP_NM 
		      ,BKG.CGO_PU_TRDP_CD 
		      ,BKG.CGO_PU_TRDP_NM 
		      ,BKG.CGO_PU_TRDP_ADDR 
		      ,BKG.RCV_WH_CD 
		      ,BKG.RCV_WH_NM 
		      ,BKG.TRK_TRDP_CD 
		      ,BKG.TRK_TRDP_NM 
		      ,BKG.CUST_REF_NO 
		      ,BKG.CNTR_INFO 
		      ,BKG.TRNK_VSL_CD 
		      ,BKG.TRNK_VSL_NM 
		      ,BKG.TRNK_VOY 
		      ,BKG.POR_CD 
		      ,BKG.POR_NOD_CD 
		      ,BKG.POR_NM 
		      ,BKG.POL_CD 
		      ,BKG.POL_NOD_CD 
		      ,BKG.POL_NM 
		      ,BKG.POD_CD 
		      ,BKG.POD_NOD_CD 
		      ,BKG.POD_NM 
		      ,BKG.DEL_CD 
		      ,BKG.DEL_NOD_CD 
		      ,BKG.DEL_NM 
		      ,BKG.FNL_DEST_LOC_CD 
		      ,BKG.FNL_DEST_NOD_CD 
		      ,BKG.FNL_DEST_LOC_NM 
		      ,BKG.LNR_TRDP_CD 
		      ,BKG.LNR_TRDP_NM 
		      ,BKG.LNR_BKG_NO 
		      ,BKG.ETD_DT_TM 
		      ,BKG.ETA_DT_TM 
		      ,BKG.ETD_POR_TM 
		      ,BKG.SHP_MOD_CD 
		      ,BKG.REP_CMDT_CD 
		      ,BKG.REP_CMDT_NM 
		      ,BKG.PCK_QTY 
		      ,BKG.PCK_UT_CD 
		      ,BKG.GRS_WGT_UT_CD 
		      ,BKG.GRS_WGT 
		      ,BKG.GRS_WGT1 
		      ,BKG.MEAS_UT_CD 
		      ,BKG.MEAS 
		      ,BKG.MEAS1 
		      ,BKG.FM_SVC_TERM_CD 
		      ,BKG.TO_SVC_TERM_CD 
		      ,BKG.CARGO_TP_CD 
		      ,BKG.CUT_OFF_DT 
		      ,BKG.RAIL_CUT_OFF_DT 
		      ,BKG.WH_CUT_OFF_DT 
		      ,BKG.DOC_CUT_OFF_DT 
		      ,BKG.SLS_OFC_CD 
		      ,BKG.SLS_DEPT_CD 
		      ,BKG.SLS_USRID 
		      ,BKG.SLS_USR_NM 
		      ,BKG.RMK 
		      ,BKG.DEPT_CD 
		      ,BKG.DELT_FLG 
		      ,BKG.LNR_CTRT_NO
        	  ,BKG.FRT_TERM_CD
        	  ,BKG.PORT_OPEN_DT
        	  ,BKG.VGM_CUT_OFF_DT
        	  ,BKG.BKG_STS_CD
        	  <!-- ,(SELECT RSN_TXT 
			      FROM (SELECT RSN_TXT, ROW_NUMBER() OVER (ORDER BY RGST_TMS DESC) ROWNO 
						  FROM TB_BKG_STS_HIS HIS 
						 WHERE HIS.BKG_SEQ = BKG.BKG_SEQ) INVAL 
				 WHERE BKG_STS_CD IN ('RJ','CN')
				   AND ROWNO = 1) AS RSN_TXT -->
			  ,BKG.PORT_OPEN_DT
        	  ,BKG.VGM_CUT_OFF_DT
		      ,BKG.RGST_USRID
		      ,BKG.RGST_OFC_CD
		      <!--  #1024 [PATENT] Booking Entry 개선 및 Quotation Audit 기능 개발   -->
		      <!-- ,CONVERT(VARCHAR,  BKG.RGST_TMS,  112) AS RGST_TMS -->
		      <!-- ,CONVERT(VARCHAR,    DATEADD(MINUTE,   60*CONVERT( float, isnull (ccd.RMK ,   '0')),  BKG.RGST_TMS ),    112) AS RGST_TMS -->
		      ,CONVERT(VARCHAR(10),DATEADD(MINUTE,60*CONVERT( float,isnull (ccd.RMK ,'0')),BKG.RGST_TMS ),112) + REPLACE(CONVERT(VARCHAR(8),DATEADD(MINUTE,60*CONVERT( float,isnull (ccd.RMK ,'0')),BKG.RGST_TMS ),108),':','')  AS RGST_TMS      
		      ,BKG.MODI_USRID
		      ,BKG.MODI_OFC_CD
		      <!-- ,CONVERT(VARCHAR,    DATEADD(MINUTE,   60*CONVERT( float, isnull (ccd.RMK ,   '0')),  BKG.MODI_TMS ),    112) AS MODI_TMS -->
		      ,CONVERT(VARCHAR(10),DATEADD(MINUTE,60*CONVERT( float,isnull (ccd.RMK ,'0')),BKG.MODI_TMS ),112) + REPLACE(CONVERT(VARCHAR(8),DATEADD(MINUTE,60*CONVERT( float,isnull (ccd.RMK ,'0')),BKG.MODI_TMS ),108),':','')  AS MODI_TMS     
	          ,BKG.HBL_TP_CD
	          ,BKG.NOMI_FLG   		
	          <!-- #1423 [PATENT] 0215_04 Customer Booking Entry - Additional Items  -->
	          ,BKG.ISS_USRID
	          ,BKG.ASGN_USRID 
	          ,BKG.INTER_RMK_TXT
	          ,BKG.CSTMS_SVC_FLG 
			  ,BKG.TRKG_SVC_FLG 
		      , (
				SELECT
					TOP 1 CARI.BKG_NO
				  FROM TB_BKG CUS
				  JOIN TB_BKG_RLT RLT
				   ON(CUS.BKG_SEQ = RLT.BKG_SEQ  )
				  JOIN TB_BKG CARI 
				   ON(CARI.BKG_SEQ = RLT.RLT_BKG_SEQ   )
				  JOIN TB_ADD_INFO_BND BND 
		            ON CARI.BKG_SEQ = BND.INTG_BKG_SEQ  AND BND.DELT_FLG = 'N'   
		          JOIN TB_INTG_BL BL 
		            ON BND.INTG_BL_SEQ = BL.INTG_BL_SEQ 
		            AND BL.DELT_FLG = 'N'              
				 WHERE CUS.BKG_SEQ = BKG.BKG_SEQ
				   AND CUS.BKG_NO  = BKG.BKG_NO
				  
				   )   AS REF_NO   	       
        		,CARI.BKG_SEQ AS CARRIER_BKG_SEQ
        		,CARI.BKG_NO  AS CARRIER_BKG_NO
        		,BKG.VNDR_TRDP_CD
        		,BKG.VNDR_TRDP_NM
        		,BKG.VNDR_TRDP_ADDR
        		,BKG.OBL_TP_CD  <!-- #1619 [CLT] Original B/L Type- 항목 정리 -->
		        ,ISNULL(CLP.CLP_NO, '') AS CLP_NO
		        ,BKG.cust_trdp_cd
				,BKG.cust_trdp_nm 
				,BKG.PRE_VSL_CD
				,BKG.PRE_VSL_NM
				,BKG.PRE_VOY
				,BKG.TS1_PORT_CD
				,BKG.TS1_PORT_NM
				,BKG.TS1_ETA_DT_TM
				,BKG.TS1_ETD_DT_TM
				,BKG.GRS_WGT AS mk_grs_wgt
				,BKG.GRS_WGT1 AS mk_grs_wgt1
				,BKG.MEAS AS mk_meas
				,BKG.MEAS1 AS mk_meas1
				,BKG.bkg_agn_trdp_cd AS carr_trdp_cd   
				,BKG.bkg_agn_trdp_nm AS carr_trdp_nm   
				<!-- #1928 HSK -->
				,BKG.CSTMS_TP_CD
				,(SELECT TOP 1 CD_VAL FROM TB_COM_CD_DTL WHERE COM_CD = 'C097' ORDER BY SRT_SEQ) AS WGT_DISP_CD			
				<!-- #2070 [PATENT] Customer Booking Entry 화면 Lane 항목 추가 및 Carrier Booking 연동 -->
	            ,BKG.SVC_LANE_NM	
	            ,BKG.port_open_dt    
				,BKG.cstms_cut_off_dt
				,BKG.vgm_cut_off_dt 
				,BKG.RCV_WH_CD AS WH_TRDP_CD
		        ,BKG.RCV_WH_NM AS WH_TRDP_NM
		        <!-- #2461 [PATENT] Customer Booking 화면에서 House B/L Copy Form 인쇄 -->
		        ,BKG.MK_TXT
		        ,BKG.DESC_TXT
		  FROM TB_BKG BKG
		  LEFT OUTER JOIN TB_ADD_INFO_BND BND
		   ON  BND.INTG_BKG_SEQ = BKG.BKG_SEQ AND BND.DELT_FLG = 'N'
		  LEFT OUTER JOIN TB_INTG_BL BL
		   ON  BL.INTG_BL_SEQ = BND.INTG_BL_SEQ AND BL.AIR_SEA_CLSS_CD = 'S' AND BL.BIZ_CLSS_CD = 'H' AND BL.DELT_FLG = 'N'
		  LEFT OUTER JOIN TB_BKG_RLT RLT
		   ON  RLT.BKG_SEQ = BKG.BKG_SEQ
		   AND RLT.RLT_BKG_SEQ is not null  AND RLT.RLT_BKG_SEQ != '' AND RLT.DELT_FLG ='N'
		  LEFT OUTER JOIN TB_BKG CARI 
		   ON  RLT.RLT_BKG_SEQ = CARI.BKG_SEQ	
		  LEFT OUTER JOIN TB_CLP CLP      	
			ON  CLP.BKG_SEQ = CARI.BKG_SEQ   	  	   
		  LEFT OUTER JOIN
			   TB_OFC TOF 
		   ON BKG.RGST_OFC_CD = TOF.OFC_CD           
		  LEFT OUTER JOIN
			   TB_COM_CD_DTL CCD 
		   ON CCD.COM_CD = 'TIMEZN'  AND TOF.TIME_ZONE = CCD.CD_VAL  		   
		 WHERE 1 = 1
		   AND BKG.DELT_FLG = 'N'
		   AND BKG.BIZ_CLSS_CD = #biz_clss_cd#
        <dynamic>
        	<isNotEmpty property="f_bkg_no">
                AND BKG.BKG_NO = #f_bkg_no#
            </isNotEmpty>
            <isNotEmpty property="f_bkg_seq">
                AND BKG.BKG_SEQ = #f_bkg_seq#
            </isNotEmpty> 
        </dynamic>
    </select>
    
    <!-- PO를 조회함  -->
    <!-- #2606 [PATENT] Booking 기능 오류 항목 -->
    <select id="selectBKG_PO_INFO" parameterClass="HashMap" resultClass="BkgPoItemInfoVO">
    /* BlCmmSQL.xml > selectBKG_PO_INFO */
		SELECT  bkg.bkg_seq,
				bkg.po_sys_no,
				po.cust_po_no,
				bkg.po_cmdt_seq,
				bkg.cust_itm_id,
				custitm.item_nm 	as cust_itm_nm,
				bkg.cmdt_cd 		as item_shp_cmdt_cd,
				bkg.cmdt_desc 		as item_shp_cmdt_nm,
				bkg.pck_ut_cd 		as cmdt_pck_ut_cd,
				unit.pck_nm 		as cmdt_pck_ut_nm, 
				bkg.pck_inr_qty 	as cmdt_pck_inr_qty,
		        bkg.pck_qty 		as cmdt_pck_qty,
		        bkg.ea_cnt 			as cmdt_ea_cnt,
		        bkg.ttl_qty 		as cmdt_ttl_qty,
		        bkg.cmdt_kgs_wgt,
		        bkg.cmdt_lbs_wgt,		        
		        bkg.cmdt_cbm_meas,
		        bkg.cmdt_cft_meas
		  FROM  tb_bkg_po bkg
		  LEFT  OUTER JOIN tb_po po ON bkg.po_sys_no = po.po_sys_no AND po.delt_flg = 'N'
		  LEFT  OUTER JOIN tb_po_cmdt po_cmdt ON bkg.po_sys_no = po_cmdt.po_sys_no AND bkg.po_cmdt_seq = po_cmdt.po_cmdt_seq AND po_cmdt.delt_flg = 'N'
	      LEFT  OUTER JOIN tl_ctrt_cust_item custitm ON po_cmdt.ctrt_no = custitm.ctrt_no AND po_cmdt.item_sys_no = custitm.item_sys_no AND po_cmdt.cust_itm_id = custitm.item_cd AND custitm.item_use_flg = 'Y'
		  LEFT  OUTER JOIN tb_pck_ut_cd unit ON bkg.pck_ut_cd = unit.pck_ut_cd AND unit.use_flg = 'Y'
		 WHERE  bkg.bkg_seq = #f_bkg_seq# 
		   AND  bkg.delt_flg = 'N'
	  ORDER BY  bkg.po_sys_no, bkg.po_cmdt_seq ASC
    </select>
    
    <!-- Booking No. 중복 체크   -->
    <select id="selectBkgNoDuplCheck" parameterClass="HashMap" resultClass="Integer">
        SELECT  count(bkg_no)
          FROM  tb_bkg
         WHERE  bkg_no = #f_bkg_no# 
           AND  biz_clss_cd = #f_biz_clss_cd#
           AND  delt_flg = 'N'
    </select>
    
    <!-- Carrier Booking No. 중복 체크   -->
    <select id="selectLnrBkgNoDuplCheck" parameterClass="HashMap" resultClass="Integer">
        SELECT  count(bkg_no)
          FROM  tb_bkg
         WHERE  lnr_bkg_no = #f_lnr_bkg_no# 
           AND  biz_clss_cd = #f_biz_clss_cd#
           AND  delt_flg = 'N'
    </select>
    
    <!-- Booking Entry에서 HBL 생성 여부 체크   -->
    <select id="searchHBLCreateChk" parameterClass="HashMap" resultClass="String">
    	SELECT  CASE WHEN COUNT(*) > 0 THEN 'N' ELSE 'Y' END AS CHKFLG
           FROM  TB_BKG BKG 
           JOIN  TB_ADD_INFO_BND BND
             ON  BKG.BKG_SEQ = BND.INTG_BKG_SEQ AND BND.DELT_FLG = 'N'
           JOIN  TB_INTG_BL BL
             ON  BND.INTG_BL_SEQ = BL.INTG_BL_SEQ AND BL.AIR_SEA_CLSS_CD = 'S' AND BL.BIZ_CLSS_CD = 'H' AND BL.DELT_FLG = 'N'
          WHERE  1=1            
            AND  BKG.BKG_NO = #bkg_no#
            AND  BKG.BIZ_CLSS_CD = 'H'
            AND  BKG.DELT_FLG = 'N'
    </select>
    
    <!-- Booking Entry에서 MBL 생성 여부 체크   -->
    <select id="searchMBLCreateChk" parameterClass="HashMap" resultClass="String">
    	SELECT  CASE WHEN COUNT(*) > 0 THEN 'N' ELSE 'Y' END AS CHKFLG
           FROM  TB_BKG BKG 
           JOIN  TB_ADD_INFO_BND BND
             ON  BKG.BKG_SEQ = BND.INTG_BKG_SEQ AND BND.DELT_FLG = 'N'
           JOIN  TB_INTG_BL BL
             ON  BND.INTG_BL_SEQ = BL.INTG_BL_SEQ AND BL.AIR_SEA_CLSS_CD = 'S' AND BL.BIZ_CLSS_CD = 'M' AND BL.DELT_FLG = 'N'
          WHERE  1=1            
            AND  BKG.BKG_SEQ = #bkg_seq#
            AND  BKG.BIZ_CLSS_CD = 'M'
            AND  BKG.DELT_FLG = 'N'
    </select>
    
    <!-- Carrier Booking Entry / Booking Entry에서 BL 생성 여부 체크   -->
    <select id="searchBLCreateChk" parameterClass="HashMap" resultClass="String">
    	SELECT  CASE WHEN COUNT(*) > 0 THEN 'Y' ELSE 'N' END AS CHKFLG
           FROM  TB_BKG BKG 
           JOIN  TB_ADD_INFO_BND BND
             ON  BKG.BKG_SEQ = BND.INTG_BKG_SEQ AND BND.DELT_FLG = 'N'
           JOIN  TB_INTG_BL BL
             ON  BND.INTG_BL_SEQ = BL.INTG_BL_SEQ AND BL.AIR_SEA_CLSS_CD = 'S' AND BL.BIZ_CLSS_CD = #biz_clss_cd# AND BL.DELT_FLG = 'N'
          WHERE  1=1            
            AND  BKG.BKG_SEQ = #bkg_seq#
            AND  BKG.BIZ_CLSS_CD = #biz_clss_cd#
            <isNotNull property="intg_bl_seq">
            AND  ISNULL(BL.INTG_BL_SEQ,'') != cast(#intg_bl_seq# as varchar)
            </isNotNull>
            AND  BKG.DELT_FLG = 'N'
    </select>
    
    <!--Booking 테이블 등록   -->
    <insert id="insertBKG_INFO" parameterClass="HBLInfoVO">
	    /** BlCmmSQL.xml > insertBKG_INFO **/
	    INSERT INTO tb_bkg
           (bkg_no 
           ,bkg_seq 
           ,bkg_dt_tm 
           ,po_no 
           ,lc_no 
           ,prnr_trdp_cd 
           ,prnr_trdp_nm 
           ,act_shpr_trdp_cd 
           ,act_shpr_trdp_nm 
           ,shpr_trdp_cd 
           ,shpr_trdp_nm 
           ,shpr_trdp_addr 
           ,cnee_trdp_cd 
           ,cnee_trdp_nm 
           ,cnee_trdp_addr 
           ,ntfy_trdp_cd 
           ,ntfy_trdp_nm 
           ,ntfy_trdp_addr 
           ,exp_ref_no 
           ,pu_trdp_cd 
           ,pu_trdp_nm 
           ,cgo_pu_trdp_cd 
           ,cgo_pu_trdp_nm 
           ,cgo_pu_trdp_addr 
           ,rcv_wh_cd 
           ,rcv_wh_nm 
           ,trk_trdp_cd 
           ,trk_trdp_nm 
           ,cust_ref_no 
           ,cntr_info 
           ,trnk_vsl_cd 
           ,trnk_vsl_nm 
           ,trnk_voy 
           ,por_cd 
           ,por_nod_cd 
           ,por_nm 
           ,pol_cd 
           ,pol_nod_cd 
           ,pol_nm 
           ,pod_cd 
           ,pod_nod_cd 
           ,pod_nm 
           ,del_cd 
           ,del_nod_cd 
           ,del_nm 
           ,fnl_dest_loc_cd 
           ,fnl_dest_nod_cd 
           ,fnl_dest_loc_nm 
           ,lnr_trdp_cd 
           ,lnr_trdp_nm 
           ,lnr_bkg_no 
           ,etd_dt_tm 
           ,eta_dt_tm 
           ,etd_por_tm 
           ,shp_mod_cd 
           ,rep_cmdt_cd 
           ,rep_cmdt_nm 
           ,pck_qty 
           ,pck_ut_cd 
           ,grs_wgt_ut_cd 
           ,grs_wgt 
           ,grs_wgt1 
           ,meas_ut_cd 
           ,meas 
           ,meas1 
           ,fm_svc_term_cd 
           ,to_svc_term_cd 
           ,cargo_tp_cd 
           ,cut_off_dt 
           ,rail_cut_off_dt 
           ,wh_cut_off_dt 
           ,doc_cut_off_dt 
           ,sls_ofc_cd 
           ,sls_dept_cd 
           ,sls_usrid 
           ,sls_usr_nm 
           ,rmk 
           ,dept_cd 
           ,rgst_usrid 
           ,rgst_ofc_cd 
           ,rgst_tms 
           ,modi_usrid 
           ,modi_ofc_cd 
           ,modi_tms 
           ,delt_flg
           ,lnr_ctrt_no
           ,frt_term_cd 
           ,biz_clss_cd
           ,port_open_dt
           ,vgm_cut_off_dt
           ,hbl_tp_cd
           ,nomi_flg      
           ,vndr_trdp_cd
		   ,vndr_trdp_nm
           ,vndr_trdp_addr     
           ,iss_usrid
           ,asgn_usrid
           ,INTER_RMK_TXT
           ,CSTMS_SVC_FLG 
		   ,TRKG_SVC_FLG 
		   ,obl_tp_cd  <!-- #1619 [CLT] Original B/L Type- 항목 정리 -->
		   ,cust_trdp_cd
		   ,cust_trdp_nm  
			,pre_vsl_cd
			,pre_vsl_nm
			,pre_voy
			,ts1_port_cd
			,ts1_port_nm
			,ts1_eta_dt_tm
			,ts1_etd_dt_tm
			,bkg_agn_trdp_cd
			,bkg_agn_trdp_nm
			<!-- #1928 HSK -->
			,cstms_tp_cd
			<!-- #2070 [PATENT] Customer Booking Entry 화면 Lane 항목 추가 및 Carrier Booking 연동 -->
			,svc_lane_nm
			,cstms_cut_off_dt
			<!-- #2461 [PATENT] Customer Booking 화면에서 House B/L Copy Form 인쇄 -->
			,mk_txt
			,desc_txt
           )
     VALUES
           (#bkg_no# 
           ,#bkg_seq#
           ,#bkg_dt_tm#
           ,#po_no# 
           ,#lc_no# 
           ,#prnr_trdp_cd# 
           ,#prnr_trdp_nm# 
           ,#act_shpr_trdp_cd# 
           ,#act_shpr_trdp_nm# 
           ,#shpr_trdp_cd# 
           ,#shpr_trdp_nm# 
           ,#shpr_trdp_addr# 
           ,#cnee_trdp_cd# 
           ,#cnee_trdp_nm# 
           ,#cnee_trdp_addr# 
           ,#ntfy_trdp_cd# 
           ,#ntfy_trdp_nm# 
           ,#ntfy_trdp_addr# 
           ,#exp_ref_no# 
           ,#pu_trdp_cd# 
           ,#pu_trdp_nm# 
           ,#cgo_pu_trdp_cd# 
           ,#cgo_pu_trdp_nm# 
           ,#cgo_pu_trdp_addr# 
           ,#rcv_wh_cd# 
           ,#rcv_wh_nm# 
           ,#trk_trdp_cd# 
           ,#trk_trdp_nm# 
           ,#cust_ref_no# 
           ,#cntr_info# 
           ,#trnk_vsl_cd# 
           ,#trnk_vsl_nm# 
           ,#trnk_voy# 
           ,#por_cd# 
           ,#por_nod_cd# 
           ,#por_nm# 
           ,#pol_cd# 
           ,#pol_nod_cd# 
           ,#pol_nm# 
           ,#pod_cd# 
           ,#pod_nod_cd# 
           ,#pod_nm# 
           ,#del_cd# 
           ,#del_nod_cd# 
           ,#del_nm# 
           ,#fnl_dest_loc_cd# 
           ,#fnl_dest_nod_cd# 
           ,#fnl_dest_loc_nm# 
           ,#lnr_trdp_cd# 
           ,#lnr_trdp_nm# 
           ,#lnr_bkg_no# 
           ,#etd_dt_tm# 
           ,#eta_dt_tm# 
           ,#etd_por_tm# 
           ,#shp_mod_cd# 
           ,#rep_cmdt_cd# 
           ,#rep_cmdt_nm# 
           ,#pck_qty# 
           ,#pck_ut_cd# 
           ,#grs_wgt_ut_cd# 
           ,#grs_wgt# 
           ,#grs_wgt1# 
           ,#meas_ut_cd# 
           ,#meas# 
           ,#meas1# 
           ,#fm_svc_term_cd# 
           ,#to_svc_term_cd# 
           ,#cargo_tp_cd# 
           ,#cut_off_dt# 
           ,#rail_cut_off_dt# 
           ,#wh_cut_off_dt# 
           ,#doc_cut_off_dt# 
           ,#sls_ofc_cd# 
           ,#sls_dept_cd# 
           ,#sls_usrid# 
           ,#sls_usr_nm# 
           ,#rmk# 
           ,#proc_dept_cd# 
           ,#proc_usrid# 
           ,#proc_ofccd# 
           ,getdate() 
           ,#proc_usrid# 
           ,#proc_ofccd# 
           ,getdate() 
           ,'N'
           ,#lnr_ctrt_no#
           ,#frt_term_cd#
           ,#biz_clss_cd#
           ,#port_open_dt#
           ,#vgm_cut_off_dt#      
           ,#hbl_tp_cd#
           ,#nomi_flg#
           ,#vndr_trdp_cd#
		   ,#vndr_trdp_nm#
           ,#vndr_trdp_addr#
           ,#iss_usrid#
           ,#asgn_usrid#
           ,#inter_rmk_txt#
           ,#trkg_svc_flg#
           ,#cstms_svc_flg#
           ,#obl_tp_cd#
		   ,#cust_trdp_cd#
		   ,#cust_trdp_nm#  
			,#pre_vsl_cd#
			,#pre_vsl_nm#
			,#pre_voy#
			,#ts1_port_cd#
			,#ts1_port_nm#
			,#ts1_eta_dt_tm#
			,#ts1_etd_dt_tm#
			,#carr_trdp_cd#
			,#carr_trdp_nm#
			<!-- #1928 HSK -->
			,#cstms_tp_cd#
			<!-- #2070 [PATENT] Customer Booking Entry 화면 Lane 항목 추가 및 Carrier Booking 연동 -->
			,#svc_lane_nm#
			,#cstms_cut_off_dt#
			<!-- #2461 [PATENT] Customer Booking 화면에서 House B/L Copy Form 인쇄 -->
			,#mk_txt#
			,#desc_txt#
           )
    </insert>
    
    <!-- Booking 내용 수정   -->
   <update id="updateBKG_INFO" parameterClass="HBLInfoVO">
   		/** BlCmmSQL.xml > updateBKG_INFO **/
   		UPDATE tb_bkg
		   SET bkg_no = #bkg_no#
		      ,bkg_dt_tm = #bkg_dt_tm#
		      ,po_no = #po_no#
		      ,lc_no = #lc_no#
		      ,prnr_trdp_cd = #prnr_trdp_cd#
		      ,prnr_trdp_nm = #prnr_trdp_nm#
		      ,act_shpr_trdp_cd = #act_shpr_trdp_cd#
		      ,act_shpr_trdp_nm = #act_shpr_trdp_nm#
		      ,shpr_trdp_cd = #shpr_trdp_cd#
		      ,shpr_trdp_nm = #shpr_trdp_nm#
		      ,shpr_trdp_addr = #shpr_trdp_addr#
		      ,cnee_trdp_cd = #cnee_trdp_cd#
		      ,cnee_trdp_nm = #cnee_trdp_nm#
		      ,cnee_trdp_addr = #cnee_trdp_addr#
		      ,ntfy_trdp_cd = #ntfy_trdp_cd#
		      ,ntfy_trdp_nm = #ntfy_trdp_nm#
		      ,ntfy_trdp_addr = #ntfy_trdp_addr#
		      ,exp_ref_no = #exp_ref_no#
		      ,pu_trdp_cd = #pu_trdp_cd#
		      ,pu_trdp_nm = #pu_trdp_nm#
		      ,cgo_pu_trdp_cd = #cgo_pu_trdp_cd#
		      ,cgo_pu_trdp_nm = #cgo_pu_trdp_nm#
		      ,cgo_pu_trdp_addr = #cgo_pu_trdp_addr#
		      ,rcv_wh_cd = #rcv_wh_cd#
		      ,rcv_wh_nm = #rcv_wh_nm#
		      ,trk_trdp_cd = #trk_trdp_cd#
		      ,trk_trdp_nm = #trk_trdp_nm#
		      ,cust_ref_no = #cust_ref_no#
		      ,cntr_info = #cntr_info#
		      ,trnk_vsl_cd = #trnk_vsl_cd#
		      ,trnk_vsl_nm = #trnk_vsl_nm#
		      ,trnk_voy = #trnk_voy#
		      ,por_cd = #por_cd#
		      ,por_nod_cd = #por_nod_cd#
		      ,por_nm = #por_nm#
		      ,pol_cd = #pol_cd#
		      ,pol_nod_cd = #pol_nod_cd#
		      ,pol_nm = #pol_nm#
		      ,pod_cd = #pod_cd#
		      ,pod_nod_cd = #pod_nod_cd#
		      ,pod_nm = #pod_nm#
		      ,del_cd = #del_cd#
		      ,del_nod_cd = #del_nod_cd#
		      ,del_nm = #del_nm#
		      ,fnl_dest_loc_cd = #fnl_dest_loc_cd#
		      ,fnl_dest_nod_cd = #fnl_dest_nod_cd#
		      ,fnl_dest_loc_nm = #fnl_dest_loc_nm#
		      ,lnr_trdp_cd = #lnr_trdp_cd#
		      ,lnr_trdp_nm = #lnr_trdp_nm#
		      ,lnr_bkg_no = #lnr_bkg_no#
		      ,etd_dt_tm = #etd_dt_tm#
		      ,eta_dt_tm = #eta_dt_tm#
		      ,etd_por_tm = #etd_por_tm#
		      ,shp_mod_cd = #shp_mod_cd#
		      ,rep_cmdt_cd = #rep_cmdt_cd#
		      ,rep_cmdt_nm = #rep_cmdt_nm#
		      ,pck_qty = #pck_qty#
		      ,pck_ut_cd = #pck_ut_cd#
		      ,grs_wgt_ut_cd = #grs_wgt_ut_cd#
		      ,grs_wgt = #grs_wgt#
		      ,grs_wgt1 = #grs_wgt1#
		      ,meas_ut_cd = #meas_ut_cd#
		      ,meas = #meas#
		      ,meas1 = #meas1#
		      ,fm_svc_term_cd = #fm_svc_term_cd#
		      ,to_svc_term_cd = #to_svc_term_cd#
		      ,cargo_tp_cd = #cargo_tp_cd#
		      ,cut_off_dt = #cut_off_dt#
		      ,rail_cut_off_dt = #rail_cut_off_dt#
		      ,wh_cut_off_dt = #wh_cut_off_dt#
		      ,doc_cut_off_dt = #doc_cut_off_dt#
		      ,sls_ofc_cd = #sls_ofc_cd#
		      ,sls_dept_cd = #sls_dept_cd#
		      ,sls_usrid = #sls_usrid#
		      ,sls_usr_nm = #sls_usr_nm#
		      ,rmk = #rmk#
		      ,dept_cd = #proc_dept_cd#
		      ,modi_usrid = #proc_usrid#
		      ,modi_ofc_cd = #proc_ofccd#
		      ,modi_tms = getdate()
		      ,delt_flg = 'N'
		      ,frt_term_cd = #frt_term_cd#
        	  ,lnr_ctrt_no = #lnr_ctrt_no#
        	  ,port_open_dt = #port_open_dt#
        	  ,vgm_cut_off_dt = #vgm_cut_off_dt#
        	  ,hbl_tp_cd = #hbl_tp_cd#
        	  ,nomi_flg = #nomi_flg# 
        	  ,vndr_trdp_cd = #vndr_trdp_cd# 
			  ,vndr_trdp_nm = #vndr_trdp_nm# 
			  ,vndr_trdp_addr = #vndr_trdp_addr# 
			  ,iss_usrid = #iss_usrid#
			  ,asgn_usrid = #asgn_usrid#
			  ,INTER_RMK_TXT = #inter_rmk_txt#
			  ,trkg_svc_flg = #trkg_svc_flg#
			  ,cstms_svc_flg = #cstms_svc_flg# 
			  ,obl_tp_cd = #obl_tp_cd# <!-- #1619 [CLT] Original B/L Type- 항목 정리 -->  
			  ,cust_trdp_cd = #cust_trdp_cd#
		      ,cust_trdp_nm = #cust_trdp_nm# 
		      ,pre_vsl_cd = #pre_vsl_cd#
		      ,pre_vsl_nm = #pre_vsl_nm#
		      ,pre_voy = #pre_voy#
		      ,ts1_port_cd = #ts1_port_cd#
			  ,ts1_port_nm = #ts1_port_nm#
			  ,ts1_eta_dt_tm = #ts1_eta_dt_tm#
			  ,ts1_etd_dt_tm = #ts1_etd_dt_tm#
		      ,bkg_agn_trdp_cd =#carr_trdp_cd#
		      ,bkg_agn_trdp_nm =#carr_trdp_nm#
		      <!-- #1928 HSK -->
		      ,cstms_tp_cd = #cstms_tp_cd#
			  <!-- #2070 [PATENT] Customer Booking Entry 화면 Lane 항목 추가 및 Carrier Booking 연동 -->
              ,svc_lane_nm = #svc_lane_nm#
              ,cstms_cut_off_dt = #cstms_cut_off_dt#
              <!-- #2461 [PATENT] Customer Booking 화면에서 House B/L Copy Form 인쇄 -->
              ,mk_txt = #mk_txt#
              ,desc_txt = #desc_txt#
		 WHERE bkg_seq = #bkg_seq#
    </update>
    
    <!--자동채번 버튼한 Booking저장  -->
    <update id="updateBKG_NO" parameterClass="HashMap">
        UPDATE  tb_bkg
           SET  bkg_no      = #bkg_no#
               ,modi_tms    = getdate()
         WHERE  bkg_seq 	= #bkg_seq#
    </update>
    
    <update id="removeBKG_INFO" parameterClass="HashMap">
        UPDATE  tb_bkg
           SET  delt_flg   = #delt_flg#,
                modi_usrid = #proc_usrid#
               ,modi_ofc_cd = #proc_ofccd#
               ,modi_tms   = getdate()
         WHERE  bkg_seq = #bkg_seq#
    </update>
    
    <!-- PO을 입력함  -->
	<insert id="insertBKG_PO_INFO" parameterClass="BkgPoItemInfoVO">
		INSERT INTO tb_bkg_po(
				bkg_seq,     	 	po_sys_no,		  	po_cmdt_seq,
				cust_itm_id,	 	pck_ut_cd,		  	pck_inr_qty,
				pck_qty,		 	ea_cnt,		  		ttl_qty,
				cmdt_kgs_wgt,	 	cmdt_lbs_wgt,    	cmdt_cbm_meas,
				cmdt_cft_meas,
		        rgst_usrid,      	rgst_ofc_cd,     	rgst_tms,
                modi_usrid,      	modi_ofc_cd,     	modi_tms,      		delt_flg,
                cmdt_cd,			cmdt_desc
		)VALUES(
                #bkg_seq#,   	 	#po_sys_no#, 	  	#po_cmdt_seq#,
                #cust_itm_id#,	 	#cmdt_pck_ut_cd#,	#cmdt_pck_inr_qty#,
				#cmdt_pck_qty#,		#cmdt_ea_cnt#,		#cmdt_ttl_qty#,
				#cmdt_kgs_wgt#,	 	#cmdt_lbs_wgt#,  	#cmdt_cbm_meas#,
				#cmdt_cft_meas#,
				#proc_usrid#,    	#proc_ofccd#,    	getdate(),
                #proc_usrid#,    	#proc_ofccd#,    	GETUTCDATE(),     	'N',
                #item_shp_cmdt_cd#,	#item_shp_cmdt_nm#
		)
    </insert>
    
    <!-- CNTR을 입력함  -->
	<select id="selectBKG_CNTR_INFO" parameterClass="HashMap" resultClass="BkgCntrListVO">
		SELECT  bkg_seq,     	 	cntr_seq,		  	cntr_tpsz_cd,
				qty,				delt_flg 
		FROM    tb_bkg_cntr 
		WHERE   bkg_seq = #f_bkg_seq#
        AND     delt_flg = 'N'
    </select>
    
    <!-- CNTR을 입력함  -->
	<insert id="insertBKG_CNTR_INFO" parameterClass="BkgCntrListVO">
		INSERT INTO tb_bkg_cntr(
				bkg_seq,     	 	cntr_tpsz_cd,		qty,			 	
		        rgst_usrid,      	rgst_ofc_cd,     	rgst_tms,
                modi_usrid,      	modi_ofc_cd,     	modi_tms,      		delt_flg

		)VALUES(
                #bkg_seq#,   	 	#cntr_tpsz_cd#,		#qty#,	
				#proc_usrid#,    	#proc_ofccd#,    	getdate(),
                #proc_usrid#,    	#proc_ofccd#,    	GETUTCDATE(),     	'N'
 
		)
    </insert>
    
    <!-- CNTR을 수정함  -->
    <update id="updateBKG_CNTR_INFO" parameterClass="BkgCntrListVO">
        UPDATE  tb_bkg_cntr 
           SET  cntr_tpsz_cd	= #cntr_tpsz_cd#,  
				qty 			= #qty#, 
		        modi_usrid 		= #proc_usrid#,    
		        modi_ofc_cd 	= #proc_ofccd#,   
		        modi_tms		= GETUTCDATE()
		        
		        
		         
		 WHERE  bkg_seq			= #bkg_seq#  
		   AND  cntr_seq 		= #cntr_seq# 
    </update>
    
    <!-- CNTR을 삭제처리함  -->
    <update id="deleteBKG_CNTR_INFO" parameterClass="BkgCntrListVO">
        UPDATE  tb_bkg_cntr 
           SET  delt_flg	= 'Y',  
		        modi_usrid 	= #proc_usrid#,    
		        modi_ofc_cd = #proc_ofccd#,   
		        modi_tms	= GETUTCDATE() 
		 WHERE  bkg_seq		= #bkg_seq#  
		   AND  cntr_seq 	= #cntr_seq# 
    </update>
    
    <!-- CNTR LIST을 입력함  -->
	<select id="selectBKG_CNTR_LIST_INFO" parameterClass="HashMap" resultClass="BkgCntrListVO">
		/*	BlCmmSQL.xml > selectBKG_CNTR_LIST_INFO */
		SELECT  bkg_seq,     	 	cntr_seq,		  	cntr_no,		cntr_tpsz_cd,
				seal_no,
				SUBSTRING(mty_out_dt_tm, 1, 8) AS mty_out_dt,
        		SUBSTRING(mty_out_dt_tm, 9, 4) AS mty_out_tm, 
        		SUBSTRING(full_rtn_dt_tm, 1, 8) AS full_rtn_dt,
        		SUBSTRING(full_rtn_dt_tm, 9, 4) AS full_rtn_tm, 	delt_flg, 
        		cntr_ref_no,
        		CGO_PCK_UT_CD,
        		CGO_PGK_QTY,
        		CGO_KGS_WGT,
        		CGO_LBS_WGT,
        		CGO_CBM_QTY,
        		CGO_CFT_QTY,
				(SELECT isnull(SUBSTRING(ISO_CNTR_CD,3,1),'X')
		           FROM TB_CNTR_TPSZ TCT 
		          WHERE TCT.CNTR_TPSZ_CD = TBCL.CNTR_TPSZ_CD) as L_RC_FLG,
		        (SELECT
		            isnull(VENT_FLG,'X')              
		        FROM
		            TB_CNTR_TPSZ TCT              
		        WHERE
		            TCT.CNTR_TPSZ_CD = TBCL.CNTR_TPSZ_CD) as L_VENT_FLG,		          
				rc_flg, temp_val, temp_cd,
				mgset_flg, vent_cd, ca_flg,        		
        		air_flow,
        		air_flow_unit,
        		humid,
        		cntr_rmk
		FROM    tb_bkg_cntr_list TBCL
		WHERE   bkg_seq = #f_bkg_seq#
        AND     delt_flg = 'N'
    </select>
    
    <!-- CNTR을 입력함  -->
	<insert id="insertBKG_CNTR_LIST_INFO" parameterClass="BkgCntrListVO">
		INSERT INTO tb_bkg_cntr_list(
				bkg_seq,     	 	cntr_no,			cntr_tpsz_cd,
				seal_no,			mty_out_dt_tm,		full_rtn_dt_tm,	
                cntr_ref_no,
		        rgst_usrid,      	rgst_ofc_cd,     	rgst_tms,
                modi_usrid,      	modi_ofc_cd,     	modi_tms,      		delt_flg,
				cgo_pck_ut_cd,
				cgo_pgk_qty,
				cgo_kgs_wgt,
				cgo_lbs_wgt,
				cgo_cbm_qty,
				cgo_cft_qty,
				clp_cntr_seq,
				rc_flg,
				temp_val,
				temp_cd,
				mgset_flg,
				vent_cd,
				ca_flg,
				air_flow,
        		air_flow_unit,
        		humid,
        		cntr_rmk
                
		)VALUES(
                #bkg_seq#,   	 	#cntr_no#,			#cntr_tpsz_cd#,
                #seal_no#,			#mty_out_dt_tm#,	#full_rtn_dt_tm#,	
                #cntr_ref_no#,
				#proc_usrid#,    	#proc_ofccd#,    	getdate(),
                #proc_usrid#,    	#proc_ofccd#,    	GETUTCDATE(),     	'N',
				#cgo_pck_ut_cd#,
				#cgo_pgk_qty#,
				#cgo_kgs_wgt#,
				#cgo_lbs_wgt#,
				#cgo_cbm_qty#,
				#cgo_cft_qty#,
				#clp_cntr_seq#,
				#rc_flg#,
				#temp_val#,
				#temp_cd#,
				#mgset_flg#,
				#vent_cd#,
				#ca_flg#,
				#air_flow#,
        		#air_flow_unit#,   
        		#humid#,   
        		#cntr_rmk#   
				
		)
    </insert>
    
    <!-- CNTR을 수정함  -->
    <update id="updateBKG_CNTR_LIST_INFO" parameterClass="BkgCntrListVO">
    	/* BlCmmSQL.xml -> updateBKG_CNTR_LIST_INFO */
        UPDATE  tb_bkg_cntr_list 
           SET  cntr_no			= #cntr_no#,
           		cntr_tpsz_cd	= #cntr_tpsz_cd#,  
				seal_no 		= #seal_no#, 
				mty_out_dt_tm 	= #mty_out_dt_tm#, 
				full_rtn_dt_tm 	= #full_rtn_dt_tm#, 
				cntr_ref_no		= #cntr_ref_no#,
		        modi_usrid 		= #proc_usrid#,    
		        modi_ofc_cd 	= #proc_ofccd#,   
		        modi_tms		= GETUTCDATE() ,
		        cgo_pck_ut_cd = #cgo_pck_ut_cd#,
		        cgo_pgk_qty = #cgo_pgk_qty#,
				cgo_kgs_wgt = #cgo_kgs_wgt#,
				cgo_lbs_wgt = #cgo_lbs_wgt#,
				cgo_cbm_qty = #cgo_cbm_qty#,
				cgo_cft_qty = #cgo_cft_qty#,
				rc_flg = #rc_flg#,
				temp_val = #temp_val#,
				temp_cd = #temp_cd#, 
				mgset_flg = #mgset_flg#,
				vent_cd = #vent_cd#,
				ca_flg = #ca_flg#,
				air_flow = #air_flow#,
				air_flow_unit = #air_flow_unit#,
				humid = #humid#,
				cntr_rmk = #cntr_rmk#
				
		 WHERE  bkg_seq			= #bkg_seq#  
		   AND  cntr_seq 		= #cntr_seq# 
    </update>
    
     <update id="updateLNR_BKG_CNTR_LIST_SYNC" parameterClass="BkgCntrListVO">
    	/* BlCmmSQL.xml -> updateLNR_BKG_CNTR_LIST_SYNC */
        UPDATE  tb_bkg_cntr_list 
           SET  cntr_no			= #cntr_no#,
           		cntr_tpsz_cd	= #cntr_tpsz_cd#,  
				seal_no 		= #seal_no#,
				cntr_ref_no		= #cntr_ref_no#,
		        modi_usrid 		= #proc_usrid#,    
		        modi_ofc_cd 	= #proc_ofccd#,   
		        modi_tms		= GETUTCDATE() 
		 WHERE clp_cntr_seq 		= #clp_cntr_seq# 
    </update>
    
    <!-- CNTR을 삭제처리함  -->
    <update id="deleteBKG_CNTR_LIST_INFO" parameterClass="BkgCntrListVO">
        UPDATE  tb_bkg_cntr_list 
           SET  delt_flg	= 'Y',  
		        modi_usrid 	= #proc_usrid#,    
		        modi_ofc_cd = #proc_ofccd#,   
		        modi_tms	= GETUTCDATE() 
		 WHERE  bkg_seq		= #bkg_seq#  
		   AND  cntr_seq 	= #cntr_seq# 
    </update>
	
	<!-- Dimension을 수정함  -->
    <update id="updateBKG_PO_INFO" parameterClass="BkgPoItemInfoVO">
        UPDATE  tb_bkg_po
           SET  cust_itm_id		= #cust_itm_id#,  
				pck_ut_cd 		= #cmdt_pck_ut_cd#,	  
				pck_inr_qty		= #cmdt_pck_inr_qty#,	  
				pck_qty			= #cmdt_pck_qty#,	  
				ea_cnt			= #cmdt_ea_cnt#,	  
				ttl_qty			= #cmdt_ttl_qty#,	  
				cmdt_kgs_wgt 	= #cmdt_kgs_wgt#,	  
				cmdt_lbs_wgt 	= #cmdt_lbs_wgt#,
				cmdt_cbm_meas 	= #cmdt_cbm_meas#,
				cmdt_cft_meas 	= #cmdt_cft_meas#,
		        modi_usrid 		= #proc_usrid#,    
		        modi_ofc_cd 	= #proc_ofccd#,   
		        modi_tms		= GETUTCDATE(),
		        cmdt_cd 		= #item_shp_cmdt_cd#,
		        cmdt_desc 		= #item_shp_cmdt_nm#
		 WHERE  bkg_seq= #bkg_seq#  
		   AND  po_sys_no = #po_sys_no# 
		   AND  po_cmdt_seq = #po_cmdt_seq#
    </update>
	
    <update id="deleteBKG_PO_INFO" parameterClass="BkgPoItemInfoVO">
    	DELETE  FROM tb_bkg_po
         WHERE  bkg_seq= #bkg_seq#  
         <isNotEmpty property="po_sys_no">
		   AND  po_sys_no = #po_sys_no# 
		 </isNotEmpty>
		 <isNotEmpty property="po_cmdt_seq">
		   AND  po_cmdt_seq = #po_cmdt_seq# 
		 </isNotEmpty>
    </update>
    
    <!-- Buyer PO No로 PO_SYS_NO 조회해오기   -->
    <select id="searchCustPoNo" parameterClass="HashMap" resultClass="HashMap">
        SELECT  po_sys_no, 
				buyr_trdp_nm,
				vndr_trdp_nm,
				org_loc_nm,
				dest_loc_nm,
				ord_dt,
				shpwin_fr_dt,
				shpwin_to_dt
          FROM  tb_po
         WHERE  cust_po_no = #s_cust_po_no#
           AND  delt_flg = 'N'
    </select>
    
    <!-- Booking List select    -->
    <select id="selectBKG_LIST" parameterClass="java.util.HashMap" resultClass="HBLInfoVO">
		/* BlCmmSQL.xml > selectBKG_LIST */
   		SELECT a1.*
		  FROM (
         	SELECT  ROW_NUMBER() OVER (ORDER BY  BKG.BKG_DT_TM DESC, BKG.MODI_TMS DESC) as ROWNUM,
					BKG.BKG_SEQ, BKG.BKG_NO, BKG.BKG_DT_TM,
					BL.BL_NO AS HBL_NO, BL.INTG_BL_SEQ, BKG.RGST_OFC_CD, 
					BKG.ETD_DT_TM, BKG.ETA_DT_TM,
					BKG.POR_CD, BKG.POR_NM, 
					BKG.POL_CD, BKG.POL_NM, 
					BKG.POD_CD, BKG.POD_NM, 
					BKG.DEL_CD, BKG.DEL_NM,

					BKG.PRNR_TRDP_CD, BKG.PRNR_TRDP_NM,
					BKG.SHPR_TRDP_CD, BKG.SHPR_TRDP_NM,
					BKG.CNEE_TRDP_CD, BKG.CNEE_TRDP_NM,
					BKG.ACT_SHPR_TRDP_CD, BKG.ACT_SHPR_TRDP_NM,
					BKG.LNR_TRDP_CD, BKG.LNR_TRDP_NM,
					BKG.NTFY_TRDP_CD, BKG.NTFY_TRDP_NM,
					BKG.TRK_TRDP_CD, BKG.TRK_TRDP_NM,
					
					BKG.SHP_MOD_CD, BKG.RGST_USRID, 
					BKG.CUST_REF_NO, BKG.LNR_BKG_NO, BKG.EXP_REF_NO,
					(SELECT max(X.ENG_USR_NM) FROM TB_USR X WHERE X.USR_TP = 'I' AND X.USRID = BKG.RGST_USRID ) AS PROC_USRNM,
					BKG.TRNK_VSL_NM, BKG.TRNK_VOY, 
					
					BKG.PCK_QTY, BKG.GRS_WGT, BKG.GRS_WGT1, BKG.MEAS,

  					CASE WHEN CHARINDEX(CHAR(13)+CHAR(10), BKG.PO_NO) = 0 THEN BKG.PO_NO
					ELSE SUBSTRING(BKG.PO_NO, 1, CHARINDEX(CHAR(13)+CHAR(10), BKG.PO_NO)-1) END AS PO_NO , 					
					BKG.LC_NO
			  FROM  TB_BKG BKG
			  LEFT OUTER JOIN  TB_ADD_INFO_BND BND
				ON  BND.INTG_BKG_SEQ = BKG.BKG_SEQ AND BND.DELT_FLG = 'N'
    		  LEFT OUTER JOIN  TB_INTG_BL BL
				ON  BL.INTG_BL_SEQ = BND.INTG_BL_SEQ AND BL.AIR_SEA_CLSS_CD = 'S' AND BL.BIZ_CLSS_CD = 'H' AND BL.DELT_FLG = 'N'
			 WHERE  BKG.DELT_FLG = 'N'
			   AND  BKG.BIZ_CLSS_CD = #f_biz_clss_cd#
			<isNotEmpty property="f_bkg_no">
			   AND  BKG.BKG_NO LIKE  #f_bkg_no# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_hbl_no">
			<!-- #1061 [Binex, Sunway, AIF] V440 Search function -->
			   AND  BL.BL_NO LIKE #f_hbl_no# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_bkg_strdt">
			   AND  BKG.BKG_DT_TM BETWEEN #f_bkg_strdt# AND #f_bkg_enddt#
			</isNotEmpty>
			<isNotEmpty property="f_pol_cd">
			   AND  BKG.POL_CD = #f_pol_cd#
			</isNotEmpty>
			<isNotEmpty property="f_pol_nm">
			   AND  BKG.POL_NM LIKE  #f_pol_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_pod_cd">
			   AND  BKG.POD_CD = #f_pod_cd#
			</isNotEmpty>
			<isNotEmpty property="f_pod_nm">
			   AND  BKG.POD_NM LIKE  #f_pod_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_prnr_trdp_nm">
			   AND  BKG.PRNR_TRDP_NM LIKE  #f_prnr_trdp_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_shpr_trdp_nm">
			   AND  BKG.SHPR_TRDP_NM LIKE  #f_shpr_trdp_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_cnee_trdp_nm">
			   AND  BKG.CNEE_TRDP_NM LIKE  #f_cnee_trdp_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_ahpr_trdp_nm">
			   AND  BKG.ACT_SHPR_TRDP_NM LIKE  #f_ahpr_trdp_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_ntfy_trdp_nm">
			   AND  BKG.NTFY_TRDP_NM LIKE  #f_ntfy_trdp_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_ofc_cd">
			   AND  BKG.RGST_OFC_CD = #f_ofc_cd#
			</isNotEmpty>
			<isNotEmpty property="f_shp_mod_cd">
			   AND  BKG.SHP_MOD_CD = #f_shp_mod_cd#
			</isNotEmpty>
			<isNotEmpty property="f_trnk_vsl_nm">
			   AND  BKG.TRNK_VSL_NM LIKE  #f_trnk_vsl_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_po_no">
			   AND  EXISTS (SELECT 1 
			   			    FROM  TB_BKG_PO BKGPO 
			   			    INNER JOIN TB_PO PO ON BKGPO.PO_SYS_NO = PO.PO_SYS_NO AND PO.DELT_FLG = 'N'
			   			    WHERE BKG.BKG_SEQ = BKGPO.BKG_SEQ 
			   			    AND   BKGPO.DELT_FLG = 'N' 
			   			    AND   PO.CUST_PO_NO LIKE  #f_po_no# + '%')
			</isNotEmpty>
			<isNotEmpty property="f_lc_no">
			   AND  BKG.LC_NO = #f_lc_no#
			</isNotEmpty>
			<isNotEmpty property="f_lnr_bkg_no">
			   AND  BKG.LNR_BKG_NO = #f_lnr_bkg_no#
			</isNotEmpty>
			<isNotEmpty property="f_cust_ref_no">
			   AND  BKG.CUST_REF_NO LIKE  #f_cust_ref_no# + '%'
			</isNotEmpty>	
			 ) a1
			<![CDATA[ where a1.ROWNUM > #beginIdx# AND a1.ROWNUM <= #topCnt#	]]>
    </select>
    
    <!--  House B/L List select count    -->
    <select id="selectBKG_LIST_CNT" parameterClass="java.util.HashMap" resultClass="Integer">
            SELECT  COUNT(bkg.bkg_seq)    
          	  FROM  TB_BKG BKG
   			  LEFT OUTER JOIN  TB_ADD_INFO_BND BND
				ON  BND.INTG_BKG_SEQ = BKG.BKG_SEQ AND BND.DELT_FLG = 'N'
    		  LEFT OUTER JOIN  TB_INTG_BL BL
				ON  BL.INTG_BL_SEQ = BND.INTG_BL_SEQ AND BL.AIR_SEA_CLSS_CD = 'S' AND BL.BIZ_CLSS_CD = 'H' AND BL.DELT_FLG = 'N'
			 WHERE  BKG.DELT_FLG = 'N'
			   AND  BKG.BIZ_CLSS_CD = #f_biz_clss_cd#
			<isNotEmpty property="f_bkg_no">
			   AND  BKG.BKG_NO LIKE  #f_bkg_no# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_hbl_no">
			<!-- #1061 [Binex, Sunway, AIF] V440 Search function -->
			   AND  BL.BL_NO LIKE #f_hbl_no# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_bkg_strdt">
			   AND  BKG.BKG_DT_TM BETWEEN #f_bkg_strdt# AND #f_bkg_enddt#
			</isNotEmpty>
			<isNotEmpty property="f_pol_cd">
			   AND  BKG.POL_CD = #f_pol_cd#
			</isNotEmpty>
			<isNotEmpty property="f_pol_nm">
			   AND  BKG.POL_NM LIKE  #f_pol_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_pod_cd">
			   AND  BKG.POD_CD = #f_pod_cd#
			</isNotEmpty>
			<isNotEmpty property="f_pod_nm">
			   AND  BKG.POD_NM LIKE  #f_pod_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_prnr_trdp_nm">
			   AND  BKG.PRNR_TRDP_NM LIKE  #f_prnr_trdp_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_shpr_trdp_nm">
			   AND  BKG.SHPR_TRDP_NM LIKE  #f_shpr_trdp_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_cnee_trdp_nm">
			   AND  BKG.CNEE_TRDP_NM LIKE  #f_cnee_trdp_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_ahpr_trdp_nm">
			   AND  BKG.ACT_SHPR_TRDP_NM LIKE  #f_ahpr_trdp_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_ntfy_trdp_nm">
			   AND  BKG.NTFY_TRDP_NM LIKE  #f_ntfy_trdp_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_ofc_cd">
			   AND  BKG.RGST_OFC_CD = #f_ofc_cd#
			</isNotEmpty>
			<isNotEmpty property="f_shp_mod_cd">
			   AND  BKG.SHP_MOD_CD = #f_shp_mod_cd#
			</isNotEmpty>
			<isNotEmpty property="f_trnk_vsl_nm">
			   AND  BKG.TRNK_VSL_NM LIKE  #f_trnk_vsl_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_po_no">
			   AND  EXISTS (SELECT 1 
			   			    FROM  TB_BKG_PO BKGPO 
			   			    INNER JOIN TB_PO PO ON BKGPO.PO_SYS_NO = PO.PO_SYS_NO AND PO.DELT_FLG = 'N'
			   			    WHERE BKG.BKG_SEQ = BKGPO.BKG_SEQ 
			   			    AND   BKGPO.DELT_FLG = 'N' 
			   			    AND   PO.CUST_PO_NO LIKE  #f_po_no# + '%')
			</isNotEmpty>
			<isNotEmpty property="f_lc_no">
			   AND  BKG.LC_NO = #f_lc_no#
			</isNotEmpty>
			<isNotEmpty property="f_lnr_bkg_no">
			   AND  BKG.LNR_BKG_NO = #f_lnr_bkg_no#
			</isNotEmpty>
			<isNotEmpty property="f_cust_ref_no">
			   AND  BKG.CUST_REF_NO LIKE  #f_cust_ref_no# + '%'
			</isNotEmpty>
	</select>
	
	<select id="selectBkgNoInfo" parameterClass="HashMap" resultClass="String">
		/* BlCmmSQL.xml > selectBkgNoInfo */
		SELECT TOP 1 
		      ISNULL(bkg.BKG_NO, '') 
		      + '^^' + ISNULL(bkg.BKG_SEQ, '') 
		      + '^^' + ISNULL(bkg.BKG_DT_TM, '')
		      + '^^' + ISNULL(bkg.LC_NO, '') 
		      + '^^' + ISNULL(bkg.ACT_SHPR_TRDP_CD, '') 
		      + '^^' + ISNULL(bkg.ACT_SHPR_TRDP_NM, '') 
		      + '^^' + ISNULL(bkg.SHPR_TRDP_CD, '') 
		      + '^^' + ISNULL(bkg.SHPR_TRDP_NM, '') 
		      + '^^' + ISNULL(bkg.SHPR_TRDP_ADDR, '') 
		      + '^^' + ISNULL(bkg.CNEE_TRDP_CD, '') 
		      + '^^' + ISNULL(bkg.CNEE_TRDP_NM, '') 
		      + '^^' + ISNULL(bkg.CNEE_TRDP_ADDR, '') 
		      + '^^' + ISNULL(bkg.NTFY_TRDP_CD, '') 
		      + '^^' + ISNULL(bkg.NTFY_TRDP_NM, '') 
		      + '^^' + ISNULL(bkg.NTFY_TRDP_ADDR, '') 
		      + '^^' + ISNULL(bkg.EXP_REF_NO, '')
		      + '^^' + ISNULL(bkg.CGO_PU_TRDP_CD, '') 
		      + '^^' + ISNULL(bkg.CGO_PU_TRDP_NM, '') 
		      + '^^' + ISNULL(bkg.CGO_PU_TRDP_ADDR, '') 
		      + '^^' + ISNULL(bkg.TRK_TRDP_CD, '') 
		      + '^^' + ISNULL(bkg.TRK_TRDP_NM, '') 
		      + '^^' + ISNULL(bkg.CUST_REF_NO, '') 
		      + '^^' + ISNULL(bkg.CNTR_INFO, '') 
		      + '^^' + ISNULL(bkg.POR_CD, '') 
		      + '^^' + ISNULL(bkg.POR_NM, '') 
		      + '^^' + ISNULL(bkg.DEL_CD, '') 
		      + '^^' + ISNULL(bkg.DEL_NM, '') 
		      + '^^' + ISNULL(bkg.FNL_DEST_LOC_CD, '') 
		      + '^^' + ISNULL(bkg.FNL_DEST_LOC_NM, '') 
		      + '^^' + ISNULL(bkg.ETD_POR_TM, '')
		      + '^^' + ISNULL(bkg.SHP_MOD_CD, '') 
		      + '^^' + ISNULL(bkg.REP_CMDT_CD, '') 
		      + '^^' + ISNULL(bkg.REP_CMDT_NM, '') 
		      + '^^' + ISNULL(convert(varchar,bkg.PCK_QTY), '') 
		      + '^^' + ISNULL(bkg.PCK_UT_CD, '') 
		      + '^^' + ISNULL(bkg.GRS_WGT_UT_CD, '') 
		      + '^^' + ISNULL(convert(varchar,bkg.GRS_WGT), '') 
		      + '^^' + ISNULL(convert(varchar,bkg.GRS_WGT1), '') 
		      + '^^' + ISNULL(convert(varchar,bkg.MEAS), '') 
		      + '^^' + ISNULL(convert(varchar,bkg.MEAS1), '') 
		      + '^^' + ISNULL(bkg.FM_SVC_TERM_CD, '') 
		      + '^^' + ISNULL(bkg.TO_SVC_TERM_CD, '') 
		      + '^^' + ISNULL(bkg.CARGO_TP_CD, '') 
		      + '^^' + ISNULL(SUBSTRING(bkg.WH_CUT_OFF_DT,1,8), '')
		      + '^^' + ISNULL(SUBSTRING(bkg.WH_CUT_OFF_DT,9,12), '')
		      + '^^' + ISNULL(bkg.SLS_OFC_CD, '') 
		      + '^^' + ISNULL(bkg.SLS_DEPT_CD, '') 
		      + '^^' + ISNULL(bkg.SLS_USRID, '') 
		      + '^^' + ISNULL(bkg.SLS_USR_NM, '')  
		      
		      <!-- #1266 [CLT] OEH B/L Entry 에서 Booking 번호지정 시 Booking Data Copy 로직  -->
		      + '^^' + ISNULL(bkg.HBL_TP_CD, '')  
		      + '^^' + ISNULL(bkg.LNR_BKG_NO, '')  
		      + '^^' + ISNULL(bkg.PRNR_TRDP_CD, '') 
		      + '^^' + ISNULL(bkg.PRNR_TRDP_NM, '') 
		      + '^^' + ISNULL(bkg.VNDR_TRDP_CD, '')
			  + '^^' + ISNULL(bkg.VNDR_TRDP_NM, '')
        	  + '^^' + ISNULL(bkg.VNDR_TRDP_ADDR, '')		
        	  + '^^' + ISNULL(bkg.TRNK_VSL_NM, '')
        	  + '^^' + ISNULL(bkg.TRNK_VOY, '')
        	  + '^^' + ISNULL(bkg.POL_CD, '')
        	  + '^^' + ISNULL(bkg.POL_NM, '') 
        	  + '^^' + ISNULL(bkg.POD_CD, '')
        	  + '^^' + ISNULL(bkg.POD_NM, '') 
        	  + '^^' + ISNULL(bkg.LNR_TRDP_CD, '') 
        	  + '^^' + ISNULL(bkg.LNR_TRDP_NM, '')      
        	  + '^^' + ISNULL(bkg.NOMI_FLG, '')   		
        	  + '^^' + ISNULL(bkg.ETD_DT_TM, '') 
		      + '^^' + ISNULL(bkg.ETA_DT_TM, '') 
		      + '^^' + ISNULL(bkg.FRT_TERM_CD, '') 
		      + '^^' + ISNULL(bkg.ASGN_USRID, '') 
		      + '^^' + ISNULL(bkg.CUST_TRDP_CD, '') 
		      + '^^' + ISNULL(bkg.CUST_TRDP_NM, '') <!--70th -->
		      + '^^' + ISNULL(bkg.RCV_WH_CD, '') 
		      + '^^' + ISNULL(bkg.RCV_WH_NM, '') 
		      <!-- #5289 [Binex] Errors when retrieving Customer Booking on OEH BL Entry -->
		      + '^^' + ISNULL(OBL_TP_CD, '') 
		      <!-- #6644 [Binex-LA] BL Delivery Contact 관련 문의 ( OEH Partner(P01) / Consignee(C01) data mixup ) -->
		      + '^^' + ISNULL(pnt.ENG_ADDR, '')
			  + '^^' + ISNULL(cust.ENG_ADDR, '')
			  + '^^' + ISNULL(trk.ENG_ADDR, '') 
		  FROM TB_BKG bkg
		  LEFT JOIN TB_TRDP pnt on pnt.TRDP_CD = bkg.PRNR_TRDP_CD
		  LEFT JOIN TB_TRDP cust on cust.TRDP_CD = bkg.CUST_TRDP_CD
		  LEFT JOIN TB_TRDP trk on trk.TRDP_CD = bkg.TRK_TRDP_CD
		 WHERE BKG_NO = #f_bkg_no#
		   AND bkg.BIZ_CLSS_CD = 'H'
		   AND bkg.BKG_STS_CD = 'CF'
		   AND bkg.DELT_FLG = 'N'
    </select>
    
    
    <!--HBL Entry에서 Booking저장시 매핑  -->
    <update id="updateHBL_BKG_NO" parameterClass="HBLInfoVO">
    	UPDATE  tb_bkg
    	   SET  intg_bl_seq = ''
    	 WHERE  bkg_seq in (select bkg_seq from tb_bkg where intg_bl_seq = cast(#intg_bl_seq# as varchar) and delt_flg = 'N')
    	   AND  delt_flg = 'N';
    
        UPDATE  tb_bkg
           SET  intg_bl_seq = #intg_bl_seq#
               ,modi_tms 	= getdate()
         WHERE  bkg_no		= #bkg_no#
           AND  bkg_seq		= #bkg_seq#;
    </update>


    <!-- ZOOT-실적처리 실시간 처리 START --> 
    <!-- BL VOL 실적 처리 프로시저 -->
	<procedure id="blVolProcess" parameterClass="HashMap">
		 { CALL SP_BL_VOL(#intg_bl_seq#, #iud_flag#, #cmd#) } 
	</procedure>
	<!-- BL VOL 실적 처리 프로시저 -->
	<procedure id="blPrfProcess" parameterClass="HashMap">
		 { CALL SP_BL_PRF(#intg_bl_seq#, #iud_flag#, #cmd#) } 
	</procedure>	
	<!-- BL SUB_MBL_FLG에 따른  실적 처리 체크 쿼리  -->
	<select id="selectCheckSubMblFlag" parameterClass="java.util.HashMap" resultClass="HashMap">
    /* BlCmmSQL.xml > selectCheckSubMblFlag */
        SELECT ISNULL(MAX(INV_SEQ),'') AS INV_SEQ, ISNULL(MAX(SUB_MBL_FLG),'') AS SUB_MBL_FLG
			FROM(
				SELECT ISNULL(MAX(INV_SEQ),'') AS INV_SEQ , '' AS SUB_MBL_FLG
						  FROM TB_FRT FRT 
						 WHERE FRT.DELT_FLG  = 'N'
						   AND ISNULL(FRT.OTH_SEQ, '') = ''						   
						<![CDATA[ 
						   AND ISNULL(FRT.AIR_SEA_CLSS_CD,'')<>'G'							   
						]]>    
						   AND ((FRT.INTG_BL_SEQ = cast(#intg_bl_seq# as varchar) AND FRT.INTG_BL_SEQ_2 IS NOT NULL) 
						    	 OR (FRT.INTG_BL_SEQ = cast(#intg_bl_seq# as varchar) AND FRT.INTG_BL_SEQ_2 IS NULL))
				UNION ALL
				SELECT '' AS INV_SEQ, ISNULL(MAX(SUB_MBL_FLG),'') AS SUB_MBL_FLG
						  FROM TB_INTG_BL
						 WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
			) A 					 		 	
    </select>
    <!-- ZOOT-실적처리 실시간 처리 END --> 
    
    <!-- HB/L 생성시 MBL 에 Invoice 가 있는 경우 실시간 실적 처리 체크  -->
	<select id="selectMblInvoice" parameterClass="java.util.HashMap" resultClass="HashMap">
    /* BlCmmSQL.xml > selectMblInvoice */
        SELECT ISNULL(MAX(INV_SEQ),'') AS INV_SEQ
		  FROM TB_FRT FRT, TB_INTG_BL_RLT RLT 
		 WHERE FRT.DELT_FLG  = 'N'
		   AND RLT.DELT_FLG  = 'N'
		   AND FRT.INTG_BL_SEQ = RLT.RLT_INTG_BL_SEQ
		   AND RLT.INTG_BL_SEQ = cast(#intg_bl_seq# as varchar) 					 		 	
    </select>
    <!-- ZOOT-실적처리 실시간 처리 END --> 
    
        <!-- HB/L UPDATE 시에 FILE 에 Invoice 가 있는 경우 실시간 실적 처리 체크  -->
	<select id="selectFileInvoice" parameterClass="java.util.HashMap" resultClass="HashMap">
    /* BlCmmSQL.xml > selectFileInvoice */
        SELECT ISNULL(MAX(INV_SEQ),'') AS INV_SEQ
		  FROM (
				SELECT ISNULL(MAX(INV_SEQ),'') AS INV_SEQ
						  FROM TB_FRT FRT, TB_INTG_BL_RLT RLT 
						 WHERE FRT.DELT_FLG  = 'N'
						   AND RLT.DELT_FLG  = 'N'
						   AND FRT.INTG_BL_SEQ = RLT.RLT_INTG_BL_SEQ
						   AND RLT.RLT_INTG_BL_SEQ = #rlt_intg_bl_seq# 		
				UNION 		   
						   
				SELECT ISNULL(INV_SEQ,'') AS INV_SEQ
						  FROM TB_FRT FRT, TB_INTG_BL_RLT RLT 
						 WHERE FRT.DELT_FLG  = 'N'
						   AND RLT.DELT_FLG  = 'N'
						   AND ((FRT.INTG_BL_SEQ = RLT.INTG_BL_SEQ AND FRT.INTG_BL_SEQ_2 IS NOT NULL) 
						    	 OR (FRT.INTG_BL_SEQ = RLT.INTG_BL_SEQ AND FRT.INTG_BL_SEQ_2 IS NULL))
						   AND RLT.RLT_INTG_BL_SEQ = #rlt_intg_bl_seq# 
				) A						 		 	
    </select>
    <!-- ZOOT-실적처리 실시간 처리 END --> 
    
     <!-- BL 정보 확인을 위한 Query  -->
	<select id="selectOrgBlInfo" parameterClass="String" resultClass="HashMap">
    /* BlCmmSQL.xml > selectOrgBlInfo */
        SELECT ISNULL(RLT_INTG_BL_SEQ,'') AS ORG_RLT_INTG_BL_SEQ
		  FROM TB_INTG_BL BL, TB_INTG_BL_RLT RLT 
		 WHERE BL.DELT_FLG  = 'N'
		   AND RLT.DELT_FLG  = 'N'
		   AND BL.INTG_BL_SEQ = RLT.INTG_BL_SEQ
		   AND BL.INTG_BL_SEQ = cast(#intg_bl_seq# as varchar) 				 		 	
    </select>
    
    <!-- 4018 JAPT HBL 의 FILE 변경 시 Invoice Post Date 변경 건 -->
    <select id="selectPostDtUpdateInfo" parameterClass="String" resultClass="HashMap">
		/* BlCmmSQL.xml > selectPostDtUpdateInfo*/
		SELECT 
			POST_DT org_post_dt
		FROM TB_INTG_BL 
		WHERE 1=1
		AND INTG_BL_SEQ=cast(#intg_bl_seq# as varchar)    
	</select>
	
		
    <!-- ZOOT-실적처리 실시간 처리 END -->
    
    
    <!-- ZOOT-AR/AP/DC CHK 실시간 처리 START -->
    <!-- BL AR/AP/DC CHK  -->
    <update id="updateBlArApDcStatus" parameterClass="HashMap">
    /* BlCmmSQL.xml > updateBlArApDcStatus */
        ;WITH BLINFO AS (
			SELECT A.* FROM TB_INTG_BL A WHERE EXISTS (SELECT INTG_BL_SEQ FROM tb_frt B WHERE B.INTG_BL_SEQ = A.INTG_BL_SEQ AND INV_SEQ = #inv_seq# )
		), INVINFO AS(
			SELECT T1.INTG_BL_SEQ,
			<![CDATA[ 
				CASE 
					 WHEN Isnull(inv_sum.ar_cnt, 0) = 0 THEN 'X' 
					 WHEN inv_sum.ar_bal_amt = 0 THEN 'Y' 
					 WHEN inv_sum.ar_inv_sum_amt = inv_sum.ar_bal_amt THEN 'N' 
					 WHEN inv_sum.ar_bal_amt < 0 THEN 'O' 
					 ELSE 'P' 
				   END AS AR_CHK, 
				   CASE 
					 WHEN Isnull(inv_sum.ap_cnt, 0) = 0 THEN 'X' 
					 WHEN inv_sum.ap_bal_amt = 0 THEN 'Y' 
					 WHEN inv_sum.ap_inv_sum_amt = inv_sum.ap_bal_amt THEN 'N' 
					 WHEN inv_sum.ap_bal_amt < 0 THEN 'O' 
					 ELSE 'P' 
				   END AS AP_CHK, 
				   CASE 
					 WHEN Isnull(inv_sum.dc_cnt, 0) = 0 THEN 'X' 
					 WHEN inv_sum.dc_bal_amt = 0 THEN 'Y' 
					 WHEN inv_sum.dc_inv_sum_amt = inv_sum.dc_bal_amt THEN 'N' 
					 WHEN inv_sum.dc_bal_amt < 0 THEN 'O' 
					 ELSE 'P' 
				   END AS DC_CHK  
			]]>    
			FROM (	BLINFO AS T1
				LEFT OUTER JOIN (			
					SELECT frt.intg_bl_seq, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'S' THEN 1 
										ELSE 0 
									END) AS ar_cnt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'S' THEN 
										dtl.inv_sum_amt 
										ELSE 0 
									END) AS ar_inv_sum_amt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'S' THEN 
										dtl.bal_amt 
										ELSE 0 
									END) AS ar_bal_amt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'B' THEN 1 
										ELSE 0 
									END) AS ap_cnt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'B' THEN 
										dtl.inv_sum_amt 
										ELSE 0 
									END) AS ap_inv_sum_amt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'B' THEN 
										dtl.bal_amt 
										ELSE 0 
									END) AS ap_bal_amt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'D' 
											OR frt.sell_buy_tp_cd = 'C' THEN 1 
										ELSE 0 
									END) AS dc_cnt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'D' 
											OR frt.sell_buy_tp_cd = 'C' THEN 
										dtl.inv_sum_amt 
										ELSE 0 
									END) AS dc_inv_sum_amt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'D' 
											OR frt.sell_buy_tp_cd = 'C' THEN 
										dtl.bal_amt 
										ELSE 0 
									END) AS dc_bal_amt 
						FROM   tb_frt frt WITH(nolock) 
								JOIN tb_inv_dtl dtl WITH(INDEX(xif1tb_inv_dtl), nolock) 
									ON dtl.delt_flg = 'N' 
									AND frt.inv_seq = dtl.inv_seq 
						WHERE  frt.delt_flg = 'N' 
							and     frt.INTG_BL_SEQ  IN (SELECT INTG_BL_SEQ FROM tb_frt WHERE INV_SEQ = #inv_seq# ) 
						GROUP  BY frt.intg_bl_seq
					) inv_sum
					ON T1.intg_bl_seq = inv_sum.intg_bl_seq 
			) 
		)
		UPDATE A SET AR_CHK = B.AR_CHK,AP_CHK = B.AP_CHK,DC_CHK = B.DC_CHK
		,FRT_CHK = (CASE WHEN (SELECT <!-- 50599 [BNX] FREIGHT INPUT STATUS인것들 확인 방법   -->
				                COUNT(1) 
				            FROM
				                TB_FRT FRT                            
				            WHERE
				                FRT.INTG_BL_SEQ      = B.INTG_BL_SEQ	 		 	                 
				                AND FRT.INV_STS_CD  = 'FI'                      
				                AND FRT.DELT_FLG = 'N'                    ) 	<![CDATA[ > ]]> 0 THEN 'O'
				                ELSE 'X' END) 
		FROM TB_ADD_INFO_BND AS A, INVINFO AS B
		WHERE A.INTG_BL_SEQ = B.INTG_BL_SEQ	 		 	
    </update>
    <!-- BL AR/AP/DC CHK  -->
    <update id="updateOthArApDcStatus" parameterClass="HashMap">
    /* BlCmmSQL.xml > updateOthArApDcStatus */
        ;WITH OTHINFO AS (
			SELECT A.* FROM TB_OTH_SALES A WHERE EXISTS (SELECT oth_seq FROM tb_frt B WHERE B.oth_seq = A.oth_seq AND INV_SEQ = #inv_seq# )
		), INVINFO AS(
			SELECT T1.oth_seq,
			<![CDATA[ 
				CASE 
					 WHEN Isnull(inv_sum.ar_cnt, 0) = 0 THEN 'X' 
					 WHEN inv_sum.ar_bal_amt = 0 THEN 'Y' 
					 WHEN inv_sum.ar_inv_sum_amt = inv_sum.ar_bal_amt THEN 'N' 
					 WHEN inv_sum.ar_bal_amt < 0 THEN 'O' 
					 ELSE 'P' 
				   END AS AR_CHK, 
				   CASE 
					 WHEN Isnull(inv_sum.ap_cnt, 0) = 0 THEN 'X' 
					 WHEN inv_sum.ap_bal_amt = 0 THEN 'Y' 
					 WHEN inv_sum.ap_inv_sum_amt = inv_sum.ap_bal_amt THEN 'N' 
					 WHEN inv_sum.ap_bal_amt < 0 THEN 'O' 
					 ELSE 'P' 
				   END AS AP_CHK, 
				   CASE 
					 WHEN Isnull(inv_sum.dc_cnt, 0) = 0 THEN 'X' 
					 WHEN inv_sum.dc_bal_amt = 0 THEN 'Y' 
					 WHEN inv_sum.dc_inv_sum_amt = inv_sum.dc_bal_amt THEN 'N' 
					 WHEN inv_sum.dc_bal_amt < 0 THEN 'O' 
					 ELSE 'P' 
				   END AS DC_CHK  
			]]>    
			FROM (	OTHINFO AS T1
				LEFT OUTER JOIN (			
					SELECT frt.oth_seq, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'S' THEN 1 
										ELSE 0 
									END) AS ar_cnt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'S' THEN 
										dtl.inv_sum_amt 
										ELSE 0 
									END) AS ar_inv_sum_amt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'S' THEN 
										dtl.bal_amt 
										ELSE 0 
									END) AS ar_bal_amt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'B' THEN 1 
										ELSE 0 
									END) AS ap_cnt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'B' THEN 
										dtl.inv_sum_amt 
										ELSE 0 
									END) AS ap_inv_sum_amt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'B' THEN 
										dtl.bal_amt 
										ELSE 0 
									END) AS ap_bal_amt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'D' 
											OR frt.sell_buy_tp_cd = 'C' THEN 1 
										ELSE 0 
									END) AS dc_cnt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'D' 
											OR frt.sell_buy_tp_cd = 'C' THEN 
										dtl.inv_sum_amt 
										ELSE 0 
									END) AS dc_inv_sum_amt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'D' 
											OR frt.sell_buy_tp_cd = 'C' THEN 
										dtl.bal_amt 
										ELSE 0 
									END) AS dc_bal_amt 
						FROM   tb_frt frt WITH(nolock) 
								JOIN tb_inv_dtl dtl WITH(INDEX(xif1tb_inv_dtl), nolock) 
									ON dtl.delt_flg = 'N' 
									AND frt.inv_seq = dtl.inv_seq 
						WHERE  frt.delt_flg = 'N' 
							and     frt.oth_seq  IN (SELECT oth_seq FROM tb_frt WHERE INV_SEQ = #inv_seq# ) 
						GROUP  BY frt.oth_seq
					) inv_sum
					ON T1.oth_seq = inv_sum.oth_seq 
			) 
		)UPDATE A SET AR_CHK = B.AR_CHK,AP_CHK = B.AP_CHK,DC_CHK = B.DC_CHK
		FROM TB_OTH_SALES AS A, INVINFO AS B
		WHERE A.OTH_SEQ = B.OTH_SEQ	 	
    </update> 
    <!-- ZOOT-AR/AP/DC CHK 실시간 처리 END -->   
    
    <!-- WMS ACCOUNT LKH 2015.01.20 -->
    <update id="updateWmsArApDcStatus" parameterClass="HashMap">
    /* BlCmmSQL.xml > updateWmsArApDcStatus */
        ;WITH OTHINFO AS (
			SELECT A.* FROM TB_WM_DOC_MST A WHERE EXISTS (SELECT wms_seq FROM tb_frt B WHERE B.wms_seq = A.wm_doc_seq AND INV_SEQ = #inv_seq# )
		), INVINFO AS(
			SELECT T1.WM_DOC_SEQ,
			<![CDATA[ 
				CASE 
					 WHEN Isnull(inv_sum.ar_cnt, 0) = 0 THEN 'X' 
					 WHEN inv_sum.ar_bal_amt = 0 THEN 'Y' 
					 WHEN inv_sum.ar_inv_sum_amt = inv_sum.ar_bal_amt THEN 'N' 
					 WHEN inv_sum.ar_bal_amt < 0 THEN 'O' 
					 ELSE 'P' 
				   END AS AR_CHK, 
				   CASE 
					 WHEN Isnull(inv_sum.ap_cnt, 0) = 0 THEN 'X' 
					 WHEN inv_sum.ap_bal_amt = 0 THEN 'Y' 
					 WHEN inv_sum.ap_inv_sum_amt = inv_sum.ap_bal_amt THEN 'N' 
					 WHEN inv_sum.ap_bal_amt < 0 THEN 'O' 
					 ELSE 'P' 
				   END AS AP_CHK, 
				   CASE 
					 WHEN Isnull(inv_sum.dc_cnt, 0) = 0 THEN 'X' 
					 WHEN inv_sum.dc_bal_amt = 0 THEN 'Y' 
					 WHEN inv_sum.dc_inv_sum_amt = inv_sum.dc_bal_amt THEN 'N' 
					 WHEN inv_sum.dc_bal_amt < 0 THEN 'O' 
					 ELSE 'P' 
				   END AS DC_CHK  
			]]>    
			FROM (	OTHINFO AS T1
				LEFT OUTER JOIN (			
					SELECT frt.wms_seq, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'S' THEN 1 
										ELSE 0 
									END) AS ar_cnt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'S' THEN 
										dtl.inv_sum_amt 
										ELSE 0 
									END) AS ar_inv_sum_amt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'S' THEN 
										dtl.bal_amt 
										ELSE 0 
									END) AS ar_bal_amt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'B' THEN 1 
										ELSE 0 
									END) AS ap_cnt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'B' THEN 
										dtl.inv_sum_amt 
										ELSE 0 
									END) AS ap_inv_sum_amt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'B' THEN 
										dtl.bal_amt 
										ELSE 0 
									END) AS ap_bal_amt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'D' 
											OR frt.sell_buy_tp_cd = 'C' THEN 1 
										ELSE 0 
									END) AS dc_cnt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'D' 
											OR frt.sell_buy_tp_cd = 'C' THEN 
										dtl.inv_sum_amt 
										ELSE 0 
									END) AS dc_inv_sum_amt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'D' 
											OR frt.sell_buy_tp_cd = 'C' THEN 
										dtl.bal_amt 
										ELSE 0 
									END) AS dc_bal_amt 
						FROM   tb_frt frt WITH(nolock) 
								JOIN tb_inv_dtl dtl WITH(INDEX(xif1tb_inv_dtl), nolock) 
									ON dtl.delt_flg = 'N' 
									AND frt.inv_seq = dtl.inv_seq 
						WHERE  frt.delt_flg = 'N' 
							and     frt.wms_seq  IN (SELECT wms_seq FROM tb_frt WHERE INV_SEQ = #inv_seq# ) 
						GROUP  BY frt.wms_seq
					) inv_sum
					ON T1.WM_DOC_SEQ = inv_sum.wms_seq 
			) 
		)UPDATE A SET AR_CHK = B.AR_CHK,AP_CHK = B.AP_CHK,DC_CHK = B.DC_CHK
		FROM TB_WM_DOC_MST AS A, INVINFO AS B
		WHERE A.WM_DOC_SEQ = B.WM_DOC_SEQ	 	
    </update> 
    
    <!-- ZOOT-AR/AP/DC CHK 실시간 처리 START -->
    <!-- BL AR/AP/DC CHK  -->
    <update id="updateBlArApDcStatusForDelete" parameterClass="HashMap">
    /* BlCmmSQL.xml > updateBlArApDcStatusForDelete */
        ;WITH BLINFO AS (
			SELECT A.* FROM TB_INTG_BL A WHERE A.INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
		), INVINFO AS(
			SELECT T1.INTG_BL_SEQ,
			<![CDATA[ 
				CASE 
					 WHEN Isnull(inv_sum.ar_cnt, 0) = 0 THEN 'X' 
					 WHEN inv_sum.ar_bal_amt = 0 THEN 'Y' 
					 WHEN inv_sum.ar_inv_sum_amt = inv_sum.ar_bal_amt THEN 'N' 
					 WHEN inv_sum.ar_bal_amt < 0 THEN 'O' 
					 ELSE 'P' 
				   END AS AR_CHK, 
				   CASE 
					 WHEN Isnull(inv_sum.ap_cnt, 0) = 0 THEN 'X' 
					 WHEN inv_sum.ap_bal_amt = 0 THEN 'Y' 
					 WHEN inv_sum.ap_inv_sum_amt = inv_sum.ap_bal_amt THEN 'N' 
					 WHEN inv_sum.ap_bal_amt < 0 THEN 'O' 
					 ELSE 'P' 
				   END AS AP_CHK, 
				   CASE 
					 WHEN Isnull(inv_sum.dc_cnt, 0) = 0 THEN 'X' 
					 WHEN inv_sum.dc_bal_amt = 0 THEN 'Y' 
					 WHEN inv_sum.dc_inv_sum_amt = inv_sum.dc_bal_amt THEN 'N' 
					 WHEN inv_sum.dc_bal_amt < 0 THEN 'O' 
					 ELSE 'P' 
				   END AS DC_CHK  
			]]>    
			FROM (	BLINFO AS T1
				LEFT OUTER JOIN (			
					SELECT frt.intg_bl_seq, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'S' THEN 1 
										ELSE 0 
									END) AS ar_cnt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'S' THEN 
										dtl.inv_sum_amt 
										ELSE 0 
									END) AS ar_inv_sum_amt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'S' THEN 
										dtl.bal_amt 
										ELSE 0 
									END) AS ar_bal_amt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'B' THEN 1 
										ELSE 0 
									END) AS ap_cnt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'B' THEN 
										dtl.inv_sum_amt 
										ELSE 0 
									END) AS ap_inv_sum_amt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'B' THEN 
										dtl.bal_amt 
										ELSE 0 
									END) AS ap_bal_amt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'D' 
											OR frt.sell_buy_tp_cd = 'C' THEN 1 
										ELSE 0 
									END) AS dc_cnt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'D' 
											OR frt.sell_buy_tp_cd = 'C' THEN 
										dtl.inv_sum_amt 
										ELSE 0 
									END) AS dc_inv_sum_amt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'D' 
											OR frt.sell_buy_tp_cd = 'C' THEN 
										dtl.bal_amt 
										ELSE 0 
									END) AS dc_bal_amt 
						FROM   tb_frt frt WITH(nolock) 
								JOIN tb_inv_dtl dtl WITH(INDEX(xif1tb_inv_dtl), nolock) 
									ON dtl.delt_flg = 'N' 
									AND frt.inv_seq = dtl.inv_seq 
						WHERE  frt.delt_flg = 'N' 
							and     frt.INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
						GROUP  BY frt.intg_bl_seq
					) inv_sum
					ON T1.intg_bl_seq = inv_sum.intg_bl_seq 
			) 
		)
		UPDATE A SET AR_CHK = B.AR_CHK,AP_CHK = B.AP_CHK,DC_CHK = B.DC_CHK
		,FRT_CHK = (CASE WHEN (SELECT			<!-- 50599 [BNX] FREIGHT INPUT STATUS인것들 확인 방법   -->
				                COUNT(1) 
				            FROM
				                TB_FRT FRT                            
				            WHERE
				                FRT.INTG_BL_SEQ      = B.INTG_BL_SEQ	 		 	                 
				                AND FRT.INV_STS_CD  = 'FI'                      
				                AND FRT.DELT_FLG = 'N'                    ) 	<![CDATA[ > ]]> 0 THEN 'O'
				                ELSE 'X' END) 
		FROM TB_ADD_INFO_BND AS A, INVINFO AS B
		WHERE A.INTG_BL_SEQ = B.INTG_BL_SEQ	 		 	
    </update>
    <!-- BL AR/AP/DC CHK  -->
    <update id="updateOthArApDcStatusForDelete" parameterClass="HashMap">
    /* BlCmmSQL.xml > updateOthArApDcStatusForDelete */
        ;WITH OTHINFO AS (
			SELECT A.* FROM TB_OTH_SALES A WHERE A.oth_seq = cast(#intg_bl_seq# as varchar)
		), INVINFO AS(
			SELECT T1.oth_seq,
			<![CDATA[ 
				CASE 
					 WHEN Isnull(inv_sum.ar_cnt, 0) = 0 THEN 'X' 
					 WHEN inv_sum.ar_bal_amt = 0 THEN 'Y' 
					 WHEN inv_sum.ar_inv_sum_amt = inv_sum.ar_bal_amt THEN 'N' 
					 WHEN inv_sum.ar_bal_amt < 0 THEN 'O' 
					 ELSE 'P' 
				   END AS AR_CHK, 
				   CASE 
					 WHEN Isnull(inv_sum.ap_cnt, 0) = 0 THEN 'X' 
					 WHEN inv_sum.ap_bal_amt = 0 THEN 'Y' 
					 WHEN inv_sum.ap_inv_sum_amt = inv_sum.ap_bal_amt THEN 'N' 
					 WHEN inv_sum.ap_bal_amt < 0 THEN 'O' 
					 ELSE 'P' 
				   END AS AP_CHK, 
				   CASE 
					 WHEN Isnull(inv_sum.dc_cnt, 0) = 0 THEN 'X' 
					 WHEN inv_sum.dc_bal_amt = 0 THEN 'Y' 
					 WHEN inv_sum.dc_inv_sum_amt = inv_sum.dc_bal_amt THEN 'N' 
					 WHEN inv_sum.dc_bal_amt < 0 THEN 'O' 
					 ELSE 'P' 
				   END AS DC_CHK  
			]]>    
			FROM (	OTHINFO AS T1
				LEFT OUTER JOIN (			
					SELECT frt.oth_seq, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'S' THEN 1 
										ELSE 0 
									END) AS ar_cnt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'S' THEN 
										dtl.inv_sum_amt 
										ELSE 0 
									END) AS ar_inv_sum_amt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'S' THEN 
										dtl.bal_amt 
										ELSE 0 
									END) AS ar_bal_amt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'B' THEN 1 
										ELSE 0 
									END) AS ap_cnt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'B' THEN 
										dtl.inv_sum_amt 
										ELSE 0 
									END) AS ap_inv_sum_amt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'B' THEN 
										dtl.bal_amt 
										ELSE 0 
									END) AS ap_bal_amt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'D' 
											OR frt.sell_buy_tp_cd = 'C' THEN 1 
										ELSE 0 
									END) AS dc_cnt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'D' 
											OR frt.sell_buy_tp_cd = 'C' THEN 
										dtl.inv_sum_amt 
										ELSE 0 
									END) AS dc_inv_sum_amt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'D' 
											OR frt.sell_buy_tp_cd = 'C' THEN 
										dtl.bal_amt 
										ELSE 0 
									END) AS dc_bal_amt 
						FROM   tb_frt frt WITH(nolock) 
								JOIN tb_inv_dtl dtl WITH(INDEX(xif1tb_inv_dtl), nolock) 
									ON dtl.delt_flg = 'N' 
									AND frt.inv_seq = dtl.inv_seq 
						WHERE  frt.delt_flg = 'N' 
							and     frt.oth_seq = cast(#intg_bl_seq# as varchar)
						GROUP  BY frt.oth_seq
					) inv_sum
					ON T1.oth_seq = inv_sum.oth_seq 
			) 
		)UPDATE A SET AR_CHK = B.AR_CHK,AP_CHK = B.AP_CHK,DC_CHK = B.DC_CHK
		FROM TB_OTH_SALES AS A, INVINFO AS B
		WHERE A.OTH_SEQ = B.OTH_SEQ	 	
    </update> 
    <!-- ZOOT-AR/AP/DC CHK 실시간 처리 END -->   
    <!-- WMS ACCOUNT LKH 2015.01.20 -->
    <update id="updateWmsArApDcStatusForDelete" parameterClass="HashMap">
    /* BlCmmSQL.xml > updateWmsArApDcStatusForDelete */
        ;WITH OTHINFO AS (
			SELECT A.* FROM TB_WM_DOC_MST A WHERE A.wm_doc_seq = cast(#intg_bl_seq# as varchar)
		), INVINFO AS(
			SELECT T1.WM_DOC_SEQ,
			<![CDATA[ 
				CASE 
					 WHEN Isnull(inv_sum.ar_cnt, 0) = 0 THEN 'X' 
					 WHEN inv_sum.ar_bal_amt = 0 THEN 'Y' 
					 WHEN inv_sum.ar_inv_sum_amt = inv_sum.ar_bal_amt THEN 'N' 
					 WHEN inv_sum.ar_bal_amt < 0 THEN 'O' 
					 ELSE 'P' 
				   END AS AR_CHK, 
				   CASE 
					 WHEN Isnull(inv_sum.ap_cnt, 0) = 0 THEN 'X' 
					 WHEN inv_sum.ap_bal_amt = 0 THEN 'Y' 
					 WHEN inv_sum.ap_inv_sum_amt = inv_sum.ap_bal_amt THEN 'N' 
					 WHEN inv_sum.ap_bal_amt < 0 THEN 'O' 
					 ELSE 'P' 
				   END AS AP_CHK, 
				   CASE 
					 WHEN Isnull(inv_sum.dc_cnt, 0) = 0 THEN 'X' 
					 WHEN inv_sum.dc_bal_amt = 0 THEN 'Y' 
					 WHEN inv_sum.dc_inv_sum_amt = inv_sum.dc_bal_amt THEN 'N' 
					 WHEN inv_sum.dc_bal_amt < 0 THEN 'O' 
					 ELSE 'P' 
				   END AS DC_CHK  
			]]>    
			FROM (	OTHINFO AS T1
				LEFT OUTER JOIN (			
					SELECT frt.wms_seq, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'S' THEN 1 
										ELSE 0 
									END) AS ar_cnt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'S' THEN 
										dtl.inv_sum_amt 
										ELSE 0 
									END) AS ar_inv_sum_amt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'S' THEN 
										dtl.bal_amt 
										ELSE 0 
									END) AS ar_bal_amt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'B' THEN 1 
										ELSE 0 
									END) AS ap_cnt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'B' THEN 
										dtl.inv_sum_amt 
										ELSE 0 
									END) AS ap_inv_sum_amt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'B' THEN 
										dtl.bal_amt 
										ELSE 0 
									END) AS ap_bal_amt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'D' 
											OR frt.sell_buy_tp_cd = 'C' THEN 1 
										ELSE 0 
									END) AS dc_cnt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'D' 
											OR frt.sell_buy_tp_cd = 'C' THEN 
										dtl.inv_sum_amt 
										ELSE 0 
									END) AS dc_inv_sum_amt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'D' 
											OR frt.sell_buy_tp_cd = 'C' THEN 
										dtl.bal_amt 
										ELSE 0 
									END) AS dc_bal_amt 
						FROM   tb_frt frt WITH(nolock) 
								JOIN tb_inv_dtl dtl WITH(INDEX(xif1tb_inv_dtl), nolock) 
									ON dtl.delt_flg = 'N' 
									AND frt.inv_seq = dtl.inv_seq 
						WHERE  frt.delt_flg = 'N' 
							and     frt.wms_seq = cast(#intg_bl_seq# as varchar)
						GROUP  BY frt.wms_seq
					) inv_sum
					ON T1.WM_DOC_SEQ = inv_sum.wms_seq 
			) 
		)UPDATE A SET AR_CHK = B.AR_CHK,AP_CHK = B.AP_CHK,DC_CHK = B.DC_CHK
		FROM TB_WM_DOC_MST AS A, INVINFO AS B
		WHERE A.WM_DOC_SEQ = B.WM_DOC_SEQ 	
    </update> 
    
    <!-- 중복 체크   -->
    <select id="selectHblSerialNoDuplCheck" parameterClass="HashMap" resultClass="Integer">
        SELECT  count(*)
          FROM  tb_add_info_bnd bnd
         WHERE  bnd.intg_bl_seq != cast(#intg_bl_seq# as varchar) 
           AND  bnd.delt_flg = 'N'
           AND  bnd.hbl_ser_no = #hbl_ser_no#
    </select>
    
      <select id="selectModifyHBL_LIST" parameterClass="java.util.HashMap" resultClass="HBLInfoVO">
		/* BlCmmSQL.xml > selectModifyHBL_LIST NEW IN/OUT */		
     	  		SELECT a1.*
				  FROM (
		         	SELECT  ROW_NUMBER() OVER (ORDER BY  BL.POST_DT DESC, BL.MODI_TMS DESC) as ROWNUM,
							BL.INTG_BL_SEQ, X.RLT_INTG_BL_SEQ, 
							BL.BL_NO AS HBL_NO, BL.REF_NO, BL.REF_OFC_CD, X.BL_NO AS MBL_NO,
							(SELECT UPPER(X.CNT_CD) FROM TB_OFC X WHERE X.OFC_CD = BL.REF_OFC_CD AND X.DELT_FLG = 'N') AS REF_OFC_CNT,
							BL.ETD_DT_TM, BL.ETA_DT_TM,
							BL.POR_CD, BL.POR_NM, 
							BL.POL_CD, BL.POL_NM, 
							BL.POD_CD, BL.POD_NM, 
							BL.DEL_CD, BL.DEL_NM,		
							PRNR.TRDP_CD AS PRNR_TRDP_CD, PRNR.TRDP_NM AS PRNR_TRDP_NM,
							SHPR.TRDP_CD AS SHPR_TRDP_CD, SHPR.TRDP_NM AS SHPR_TRDP_NM,
							CNEE.TRDP_CD AS CNEE_TRDP_CD, CNEE.TRDP_NM AS CNEE_TRDP_NM,
							ACT.TRDP_CD AS ACT_SHPR_TRDP_CD, ACT.TRDP_NM AS ACT_SHPR_TRDP_NM,
							LNR.TRDP_CD AS LNR_TRDP_CD, LNR.TRDP_NM AS LNR_TRDP_NM,
							NTFY.TRDP_CD AS NTFY_TRDP_CD, NTFY.TRDP_NM AS NTFY_TRDP_NM,
							TRK.TRDP_CD TRK_TRDP_CD, TRK.TRDP_NM TRK_TRDP_NM,
							CUST.TRDP_CD AS CUST_TRDP_CD, CUST.TRDP_NM AS CUST_TRDP_NM,
							VNDR.TRDP_CD VNDR_TRDP_CD, VNDR.TRDP_NM VNDR_TRDP_NM,
							BL.CFS_TRDP_CD, CFS.ENG_NM AS CFS_TRDP_NM,							
							BL.HBL_TP_CD, BL.SHP_MOD_CD, BL.INCO_CD, BL.RGST_USRID, BL.REP_CMDT_NM,
							BL.CUST_REF_NO, BL.LNR_BKG_NO, BL.EXP_REF_NO,
							(SELECT x.cnt_cd FROM TB_OFC x WHERE x.OFC_CD = bl.rgst_ofc_cd) AS BL_CNT, 
							(SELECT max(X.ENG_USR_NM) FROM TB_USR X WHERE X.USR_TP = 'I' AND X.USRID = bnd.issued_by ) AS PROC_USRNM,
							BL.POST_DT, BL.TRNK_VSL_NM, BL.TRNK_VOY, BL.DOC_RECPT_NO, BL.IT_NO,							
							BL.PCK_QTY, BL.GRS_WGT, BL.GRS_WGT1, BL.MEAS,							
							BL.RLSD_FLG, BL.RLSD_DT_TM,
							CASE WHEN bl.EXPRESS_TP_CD ='Y' THEN 'YES' ELSE 'NO' END EXPRESS_TP_CD,
							BL.ORG_BL_RCVD_FLG, BL.RCVD_DT_TM,							
							(SELECT MAX(X.CNTR_NO) FROM TB_CNTR_LIST X WHERE X.INTG_BL_SEQ = BL.INTG_BL_SEQ AND X.DELT_FLG = 'N') AS CNTR_NO,
							ISNULL(DBO.FC_MK_MEMO_SCRIPT(BL.INTG_BL_SEQ), '') AS MEMO,
		  					CASE WHEN CHARINDEX(CHAR(13)+CHAR(10), BL.PO_NO) = 0 THEN BL.PO_NO
							ELSE SUBSTRING(BL.PO_NO, 1, CHARINDEX(CHAR(13)+CHAR(10), BL.PO_NO)-1) END AS PO_NO , 					
							BL.LC_NO, 
							BL.INV_NO,
							BL.AMS_ID,
							BL_STS_CD,
							BL.ISF_NO,
							BL.AMS_NO
		    				,BL.CCN_NO
							,BL.CCN_DT
							,BL.PRE_CCN_NO
							,BL.MNF_FR_LOC
							,BL.MNF_TO_LOC
							,ISNULL(bnd.AR_CHK,'X') AS AR_CHK
							,ISNULL(bnd.AP_CHK,'X') AS AP_CHK
							,ISNULL(bnd.DC_CHK,'X') AS DC_CHK
							,ISNULL(bnd.FRT_CHK,'X') AS FRT_CHK
					  FROM  TB_INTG_BL BL
					  <isEqual property="bnd_clss_cd" compareValue="O">
							with(index(IDX_ETD_DT_TM), nolock)
					  </isEqual>     
					  <isEqual property="bnd_clss_cd" compareValue="I">
							with(index(IDX_ETA_DT_TM), nolock)
					  </isEqual>  
					  JOIN  tb_add_info_bnd bnd
						ON  bl.intg_bl_seq = bnd.intg_bl_seq AND bnd.bnd_clss_cd = #bnd_clss_cd# AND bnd.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr PRNR
						ON  bl.intg_bl_seq = prnr.intg_bl_seq  AND prnr.bl_trdp_tp_cd = 'P01' AND prnr.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr SHPR
						ON  bl.intg_bl_seq = SHPR.intg_bl_seq  AND SHPR.bl_trdp_tp_cd = 'S01' AND SHPR.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr CNEE
						ON  bl.intg_bl_seq = CNEE.intg_bl_seq  AND CNEE.bl_trdp_tp_cd = 'C01' AND CNEE.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr ACT
						ON  bl.intg_bl_seq = act.intg_bl_seq  AND act.bl_trdp_tp_cd = 'S02' AND act.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr LNR
						ON  bl.intg_bl_seq = lnr.intg_bl_seq  AND lnr.bl_trdp_tp_cd = 'L01' AND lnr.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr NTFY
						ON  bl.intg_bl_seq = ntfy.intg_bl_seq  AND ntfy.bl_trdp_tp_cd = 'N01' AND ntfy.delt_flg = 'N'
		   LEFT OUTER JOIN tb_bl_prnr TRK 
		   				ON bl.intg_bl_seq = TRK.intg_bl_seq  AND TRK.bl_trdp_tp_cd = 'T02' AND TRK.delt_flg = 'N'
		   LEFT OUTER JOIN	tb_bl_prnr CUST
		           		ON	bl.intg_bl_seq = cust.intg_bl_seq  AND cust.bl_trdp_tp_cd = 'C03' AND cust.delt_flg = 'N'
		   LEFT OUTER JOIN tb_bl_prnr VNDR 
						ON bl.intg_bl_seq = VNDR.intg_bl_seq  AND VNDR.bl_trdp_tp_cd = 'V01' AND VNDR.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_trdp CFS
						ON  bl.cfs_trdp_cd = cfs.trdp_cd  AND cfs.delt_flg = 'N'
		   LEFT OUTER JOIN (
						SELECT  rlt.intg_bl_seq, mbl.bl_no, rlt.rlt_intg_bl_seq
						  FROM  tb_intg_bl mbl
			   LEFT OUTER JOIN  tb_intg_bl_rlt rlt 
							ON  rlt.rlt_intg_bl_seq = mbl.intg_Bl_seq AND mbl.delt_flg = 'N'  
							) X ON X.intg_bl_seq = bl.intg_Bl_seq													   			
					 WHERE  bl.delt_flg = 'N'
					   AND  bl.air_sea_clss_cd= #air_sea_clss_cd#
					   AND  bl.biz_clss_cd  = #biz_clss_cd#					
					<isNotEmpty property="f_pol_cd">
					   AND  BL.POL_CD = #f_pol_cd#
					</isNotEmpty>
					<isNotEmpty property="f_pol_nm">
					   AND  BL.POL_NM LIKE  #f_pol_nm# + '%'
					</isNotEmpty>
					
					<isNotEmpty property="f_ofc_cd">
					   AND  BL.REF_OFC_CD = #f_ofc_cd#
					</isNotEmpty>
					
					<isNotEmpty property="f_trnk_vsl_nm">
					   AND  BL.TRNK_VSL_NM LIKE  #f_trnk_vsl_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_trnk_voy">
					   AND  BL.TRNK_VOY LIKE  #f_trnk_voy# + '%'
					</isNotEmpty>
											
					 ) a1
		 <![CDATA[ where a1.ROWNUM > #beginIdx# AND a1.ROWNUM <= #topCnt#	]]> 				
    </select>
    
    <!--  House B/L List select count    -->
    
    <select id="selectModifyHBL_LIST_CNT" parameterClass="java.util.HashMap" resultClass="Integer">
        SELECT  COUNT(bl.intg_bl_seq)    
          FROM  TB_INTG_BL BL          
			  JOIN  tb_add_info_bnd bnd
				ON  bl.intg_bl_seq = bnd.intg_bl_seq AND bnd.bnd_clss_cd = #bnd_clss_cd# AND bnd.delt_flg = 'N'
   LEFT OUTER JOIN  tb_bl_prnr PRNR
				ON  bl.intg_bl_seq = prnr.intg_bl_seq  AND prnr.bl_trdp_tp_cd = 'P01' AND prnr.delt_flg = 'N'
   LEFT OUTER JOIN  tb_bl_prnr SHPR
				ON  bl.intg_bl_seq = SHPR.intg_bl_seq  AND SHPR.bl_trdp_tp_cd = 'S01' AND SHPR.delt_flg = 'N'
   LEFT OUTER JOIN  tb_bl_prnr CNEE
				ON  bl.intg_bl_seq = CNEE.intg_bl_seq  AND CNEE.bl_trdp_tp_cd = 'C01' AND CNEE.delt_flg = 'N'
   LEFT OUTER JOIN  tb_bl_prnr ACT
				ON  bl.intg_bl_seq = act.intg_bl_seq  AND act.bl_trdp_tp_cd = 'S02' AND act.delt_flg = 'N'
   LEFT OUTER JOIN  tb_bl_prnr LNR
				ON  bl.intg_bl_seq = lnr.intg_bl_seq  AND lnr.bl_trdp_tp_cd = 'L01' AND lnr.delt_flg = 'N'
   LEFT OUTER JOIN  tb_bl_prnr NTFY
				ON  bl.intg_bl_seq = ntfy.intg_bl_seq  AND ntfy.bl_trdp_tp_cd = 'N01' AND ntfy.delt_flg = 'N'
   LEFT OUTER JOIN	tb_bl_prnr CUST
           		ON	bl.intg_bl_seq = cust.intg_bl_seq  AND cust.bl_trdp_tp_cd = 'C03' AND cust.delt_flg = 'N'
   LEFT OUTER JOIN	tb_bl_prnr trk
           		ON	bl.intg_bl_seq = cust.intg_bl_seq  AND cust.bl_trdp_tp_cd = 'T02' AND cust.delt_flg = 'N'
   LEFT OUTER JOIN	tb_bl_prnr vndr
           		ON	bl.intg_bl_seq = vndr.intg_bl_seq  AND vndr.bl_trdp_tp_cd = 'V01' AND vndr.delt_flg = 'N'
   LEFT OUTER JOIN  tb_trdp CFS
				ON  bl.cfs_trdp_cd = cfs.trdp_cd  AND cfs.delt_flg = 'N'
   LEFT OUTER JOIN (
				SELECT  rlt.intg_bl_seq, mbl.bl_no
				  FROM  tb_intg_bl mbl
	   LEFT OUTER JOIN  tb_intg_bl_rlt rlt 
					ON  rlt.rlt_intg_bl_seq = mbl.intg_Bl_seq AND mbl.delt_flg = 'N'  
					) X ON X.intg_bl_seq = bl.intg_Bl_seq   
        WHERE   bl.delt_flg = 'N'  AND bl.air_sea_clss_cd= #air_sea_clss_cd#
          AND bl.biz_clss_cd  = #biz_clss_cd#
    		<isNotEmpty property="f_pol_cd">
				   AND  BL.POL_CD = #f_pol_cd#
			</isNotEmpty>
			<isNotEmpty property="f_pol_nm">
				   AND  BL.POL_NM LIKE  #f_pol_nm# + '%'
			</isNotEmpty>					
			<isNotEmpty property="f_ofc_cd">
				   AND  BL.REF_OFC_CD = #f_ofc_cd#
			</isNotEmpty>					
			<isNotEmpty property="f_trnk_vsl_nm">
				   AND  BL.TRNK_VSL_NM LIKE  #f_trnk_vsl_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_trnk_voy">
					   AND  BL.TRNK_VOY LIKE  #f_trnk_voy# + '%'
			</isNotEmpty>						
	</select>
	
	<update id="updateBL_MODI_ETDETA" parameterClass="HashMap">
        UPDATE  tb_intg_bl
           SET  etd_dt_tm  = #etd_dt_tm#
           ,    eta_dt_tm  = #eta_dt_tm#            
         WHERE  intg_bl_seq= cast(#intg_bl_seq# as varchar)
    </update>
    
    <select id="searchCtrbMgn" parameterClass="HashMap" resultClass="HBLInfoVO">
    	SELECT TOP 1 CTRB_OFC_CD, CTRB_RATIO_YN, CTRB_MGN
          FROM TB_CTRB_MGN
         WHERE DELT_FLG = 'N'
           AND CUST_CD = #s_cust_cd#
           AND #s_post_dt# BETWEEN FM_DT AND TO_DT
         ORDER BY CTRB_MGN_SEQ DESC
    </select>
    
    <!--Vinh.Vo (S)  -->
    
    <select id="selectMBL_LIST_Excel_All" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
           /* BlCmmSQL.xml > selectMBL_LIST_Excel_All */
            	SELECT 
            	a1.*
            	<!-- #4035 B/L EDI validation 추가 -->
		        ,CASE WHEN ISNULL(TRDP.AGT_EDI_CD,'') != ''
	 				 THEN 
						(SELECT CASE WHEN COUNT(*) > 0 
									 THEN 'Y' 
		             				 ELSE 'N' 
		         				 END 
					       FROM TB_EDI_SND_HIS  
					      WHERE EDI_MSG_NO LIKE 'AGT%' 
		   				    AND EDI_MSG_TXT LIKE '%' + a1.INTG_BL_SEQ + '%' )
		
					 ELSE 'X'
				END	AS snd_flg
				,CASE WHEN bl_sts_cd = 'HF' THEN 'Y' ELSE 'N' END as block_flag
				  FROM (
		         	SELECT  row_number() over (order by  bl.post_dt desc, bl.modi_tms desc) as no,
		         			bl.intg_bl_seq,
							bl.bl_no, bl.ref_no, bl.ref_ofc_cd, bl.lnr_bkg_no,
							
							(case when bl.etd_dt_tm = '' THEN '' when ISNULL(bl.etd_dt_tm,'') = '' then '' 
								else substring(bl.etd_dt_tm,5,2)  + '-' + substring(bl.etd_dt_tm,7,2) + '-' +substring(bl.etd_dt_tm,1,4)END) as etd_dt_tm
 
							,(case when bl.eta_dt_tm = '' THEN '' when ISNULL(bl.eta_dt_tm,'') = '' then '' 
								else substring(bl.eta_dt_tm,5,2)  + '-' +substring(bl.eta_dt_tm,7,2) + '-' +substring(bl.eta_dt_tm,1,4) END) as eta_dt_tm

							,(case when bl.f_eta_dt_tm = '' THEN '' when ISNULL(bl.f_eta_dt_tm,'') = '' then ''
								else substring(bl.f_eta_dt_tm,5,2)  + '-' +substring(bl.f_eta_dt_tm,7,2) + '-' +substring(bl.f_eta_dt_tm,1,4)END) as f_eta_dt_tm
							,bl.por_cd, bl.por_nm, 
							bl.pol_cd, bl.pol_nm, 
							bl.pod_cd, bl.pod_nm, 
							bl.del_cd, bl.del_nm,
							CASE WHEN (SELECT COUNT(X.CNTR_NO)-1 FROM TB_CNTR_LIST X WHERE X.INTG_BL_SEQ = BL.INTG_BL_SEQ AND X.DELT_FLG = 'N') > 0 THEN 
								(select max(x.cntr_no) from tb_cntr_list x where x.intg_bl_seq = bl.intg_bl_seq and x.delt_flg = 'N') + ' + ' + CONVERT(VARCHAR(14),(SELECT COUNT(X.CNTR_NO)-1 FROM TB_CNTR_LIST X WHERE X.INTG_BL_SEQ = BL.INTG_BL_SEQ AND X.DELT_FLG = 'N'))  
							ELSE 
								(select max(x.cntr_no) from tb_cntr_list x where x.intg_bl_seq = bl.intg_bl_seq and x.delt_flg = 'N')
							END cntr_no,
							<!-- #1230 HBL list modification FULLTRANS -->
					       STUFF(( SELECT ',  ' + CNTR_TPSZ_CD +' X ' + LTRIM(STR(COUNT(CNTR_TPSZ_CD)))
					               FROM TB_CNTR_LIST X
					               WHERE ( X.INTG_BL_SEQ = BL.INTG_BL_SEQ
					               <!-- #4057[JAPT] question for our profit report -->
					               AND X.DELT_FLG = 'N'					               
					               )
					               GROUP BY CNTR_TPSZ_CD
					               FOR XML PATH ('')),1,1,'') AS cntr_summary, 	
					               
							prnr2.trdp_cd as prnr_trdp_cd2, prnr2.trdp_nm as prnr_trdp_nm2,
							shpr.trdp_cd as shpr_trdp_cd, shpr.trdp_nm as shpr_trdp_nm,
							cnee.trdp_cd as cnee_trdp_cd, cnee.trdp_nm as cnee_trdp_nm,
							lnr.trdp_cd as lnr_trdp_cd, lnr.trdp_nm as lnr_trdp_nm,
							carr.trdp_cd as carr_trdp_cd, carr.trdp_nm as carr_trdp_nm,
							bl.cy_trdp_cd, cy.eng_nm as cy_trdp_nm,
							bl.cfs_trdp_cd, cfs.eng_nm as cfs_trdp_nm,
							bl.hbl_tp_cd, bl.shp_mod_cd, bl.inco_cd, bl.rgst_usrid, bl.rep_cmdt_nm,
							bl.cust_ref_no,
							(select x.cnt_cd from tb_ofc x where x.ofc_cd = bl.rgst_ofc_cd) as bl_cnt, 
							(select max(x.eng_usr_nm) from tb_usr x where x.usr_tp = 'I' and x.usrid = bnd.issued_by) as proc_usr_nm,
							(case when bl.post_dt = '' THEN '' when ISNULL(bl.post_dt,'') = '' then '' 
								else substring(bl.post_dt,5,2)  + '-' + substring(bl.post_dt,7,2) + '-' +substring(bl.post_dt,1,4)END) as post_dt,
							bl.trnk_vsl_nm, bl.trnk_voy,
							(  select count(*) from tb_intg_bl_rlt rlt where  rlt.rlt_intg_bl_seq = bl.intg_bl_seq and rlt.delt_flg = 'N') as hbl_cnt,    
							isnull(dbo.fc_mk_memo_script(bl.intg_bl_seq), '') as memo,
							ams_id
							, bl.rlsd_flg, bl.rlsd_dt_tm , isnull(blck.bl_sts_cd1, bl.bl_sts_cd) as bl_sts_cd
							<!-- #4724	[Best Ocean] Ocean Import OBL Received and Received Date column and entry add -->
							,bl.org_bl_rcvd_flg
							,bl.rcvd_dt_tm
																				
	    					,bl.ccn_no
							,bl.ccn_dt
							,bl.pre_ccn_no
							,bl.mnf_fr_loc
							,bl.mnf_to_loc
							,bl.imp_ref_no
							,isnull(bnd.ar_chk,'X') as ar_chk
							,isnull(bnd.ap_chk,'X') as ap_chk
							,isnull(bnd.dc_chk,'X') as dc_chk
							,isnull(bnd.frt_chk,'X') as frt_chk
							,bnd.verify_flag
						    ,bnd.pay_flag
							,bnd.svc_lane_nm 
							, bnd.sls_usrid
							, bnd.sls_usr_nm
							 <!--  #943  [PATENT] Lane 추가  -->
							<!-- #1619 [CLT] Original B/L Type- 항목 정리,bnd.bl_rlse_tp_cd  #1430 [PATENT] 0215_15 B/L TYPE DIVERSELY  
							,dtl.CD_NM bl_rlse_tp_nm  -->
							,bl.prnr_ref_no 
							<!-- #5087 Agent EDI Version 1.0, Version 2.0 관리로 인한 로직 변경 -->
            					<!-- ,ISNULL(PRNR.TRDP_CD,CNEE.TRDP_CD) AS AGENT_EDI_CD -->
            					,PRNR.TRDP_CD AS AGENT_EDI_CD
            				  <!-- #4980 [Best Ocean] Created Time and Last Modify Time columns add to BL List-->
            				 ,(case when bl.rgst_tms = '' THEN '' when ISNULL(bl.rgst_tms,'') = '' then '' 
								else CONVERT(varchar(10), bl.rgst_tms, 110) + ' ' + CONVERT(varchar(5), bl.rgst_tms, 108) END) as rgst_tms
            				 ,bl.modi_usr_nm
            				 ,(case when bl.modi_tms = '' THEN '' when ISNULL(bl.modi_tms,'') = '' then '' 
								else CONVERT(varchar(10), DATEADD(HH, DATEDIFF(HH,GETUTCDATE(),GETDATE()),bl.modi_tms), 110) + ' ' + CONVERT(varchar(5), DATEADD(HH, DATEDIFF(HH,GETUTCDATE(),GETDATE()),bl.modi_tms), 108) END) as modi_tms
							<!-- OFVFOUR-7105 [JAPAN TRUST] Adding "Original B/L Type" Column and Search on B/L List -->
							 ,bl.obl_tp_cd 
							 <!-- OFVFOUR-7337: [GPL] Adding Service Term column on OI MBL List-->
							,(ISNULL((SELECT TOP 1 CD_NM FROM TB_COM_CD_DTL  WHERE COM_CD ='C031' AND CD_VAL = BL.FM_SVC_TERM_CD),'') + '/' + ISNULL((SELECT TOP 1 CD_NM FROM TB_COM_CD_DTL  WHERE COM_CD ='C031' AND CD_VAL = BL.TO_SVC_TERM_CD),'')) AS fm_to_svc_term
					  FROM  TB_INTG_BL BL
					  <isEqual property="bnd_clss_cd" compareValue="O">
							with(index(IDX_ETD_DT_TM), nolock)
					  </isEqual>     
					  <isEqual property="bnd_clss_cd" compareValue="I">
							with(index(IDX_ETA_DT_TM), nolock)
					  </isEqual>  
					  JOIN  tb_add_info_bnd bnd
						ON  bl.intg_bl_seq = bnd.intg_bl_seq AND bnd.bnd_clss_cd = #bnd_clss_cd# AND bnd.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr PRNR2
						ON  bl.intg_bl_seq = prnr2.intg_bl_seq  AND prnr2.bl_trdp_tp_cd = 'P03' AND prnr2.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr SHPR
						ON  bl.intg_bl_seq = SHPR.intg_bl_seq  AND SHPR.bl_trdp_tp_cd = 'S01' AND SHPR.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr CNEE
						ON  bl.intg_bl_seq = CNEE.intg_bl_seq  AND CNEE.bl_trdp_tp_cd = 'C01' AND CNEE.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr CARR
						ON  bl.intg_bl_seq = carr.intg_bl_seq  AND carr.bl_trdp_tp_cd = 'B01' AND carr.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr LNR
						ON  bl.intg_bl_seq = lnr.intg_bl_seq  AND lnr.bl_trdp_tp_cd = 'L01' AND lnr.delt_flg = 'N'
						
		   <!--#4073 OEM B/L List Customer, Notify 누락 버그 수정 -->				
		   LEFT OUTER JOIN  tb_bl_prnr CUS
		                ON  bl.intg_bl_seq = cus.intg_bl_seq  AND cus.bl_trdp_tp_cd = 'S02' AND cus.delt_flg = 'N'      
		   LEFT OUTER JOIN  tb_bl_prnr NTF
		                ON  bl.intg_bl_seq = ntf.intg_bl_seq  AND ntf.bl_trdp_tp_cd = 'N01' AND ntf.delt_flg = 'N'
		   
		   <!--#4073 OIM B/L List Forwarding Agent 누락 버그 수정 -->             
	       LEFT OUTER JOIN  tb_bl_prnr AGENT
	                    ON  bl.intg_bl_seq = agent.intg_bl_seq  AND agent.bl_trdp_tp_cd = 'A01' AND agent.delt_flg = 'N'                                		                     
						
		   LEFT OUTER JOIN  tb_trdp CY
						ON  bl.cy_trdp_cd = cy.trdp_cd  AND cy.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_trdp CFS
						ON  bl.cfs_trdp_cd = cfs.trdp_cd  AND cfs.delt_flg = 'N'  
		   LEFT OUTER JOIN(SELECT INTG_BL_SEQ AS INTG_BL_SEQ1, BL_STS_CD AS BL_STS_CD1 FROM TB_INTG_BL_BLCK) BLCK 
		   				ON BL.INTG_BL_SEQ = BLCK.INTG_BL_SEQ1
		   <!-- #4035 B/L EDI validation 추가 -->
		   LEFT OUTER JOIN  tb_bl_prnr PRNR
						ON  bl.intg_bl_seq = PRNR.intg_bl_seq  AND PRNR.bl_trdp_tp_cd = 'P01' AND PRNR.delt_flg = 'N'		   				
		 <!-- #1619 [CLT] Original B/L Type- 항목 정리  
		   LEFT OUTER JOIN TB_COM_CD_DTL dtl
         				ON dtl.com_cd = 'C222' and BND.BL_RLSE_TP_CD = dtl.CD_VAL  		   -->          
					 WHERE  bl.delt_flg = 'N'
					   AND  bl.air_sea_clss_cd = #air_sea_clss_cd#
					   AND  bl.biz_clss_cd  = #biz_clss_cd#
					<isNotEmpty property="f_ref_no">
						<!-- #1061 [Binex, Sunway, AIF] V440 Search function -->
					   AND  BL.REF_NO LIKE #f_ref_no# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_mbl_no">
					<!-- #1061 [Binex, Sunway, AIF] V440 Search function -->
					   AND  BL.BL_NO LIKE #f_mbl_no# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_lnr_bkg_no">
					   AND  BL.LNR_BKG_NO LIKE  #f_lnr_bkg_no# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_cntr_no">
					   AND  BL.INTG_BL_SEQ IN (SELECT  CNTR.INTG_BL_SEQ
												 FROM  TB_CNTR_LIST CNTR
												WHERE  CNTR.CNTR_NO LIKE  #f_cntr_no# + '%')
					</isNotEmpty>
					<isNotEmpty property="f_strdt">
						<isEqual property="f_date_type" compareValue="ETD">
							AND  left(BL.ETD_DT_TM,8) BETWEEN #f_strdt# AND #f_enddt#
						</isEqual>
						<isEqual property="f_date_type" compareValue="ETA">
							AND  left(BL.ETA_DT_TM,8) BETWEEN #f_strdt# AND #f_enddt#
						</isEqual>
						<isEqual property="f_date_type" compareValue="FEA">
							AND  left(BL.F_ETA_DT_TM,8) BETWEEN #f_strdt# AND #f_enddt#
						</isEqual>
						<isEqual property="f_date_type" compareValue="PDT">
							AND  left(BL.POST_DT,8) BETWEEN #f_strdt# AND #f_enddt#
						</isEqual>
						<isEqual property="f_date_type" compareValue="DOC"> <!-- #3821 [JAPT] Adding a searching condition in date range item, 'Doc cut-off date' of MB/L -->
							AND  left(BL.doc_cut_off_dt,8) BETWEEN #f_strdt# AND #f_enddt#
						</isEqual>						
					</isNotEmpty>
					<isNotEmpty property="etd_strdt">
					   AND  left(BL.ETD_DT_TM,8) BETWEEN #etd_strdt# AND #etd_enddt#
					</isNotEmpty>
					<isNotEmpty property="eta_strdt">
					   AND  left(BL.ETA_DT_TM,8) BETWEEN #eta_strdt# AND #eta_enddt#
					</isNotEmpty>
					<isNotEmpty property="f_eta_strdt">
					   AND  left(BL.F_ETA_DT_TM,8) BETWEEN #f_eta_strdt# AND #f_eta_enddt#
					</isNotEmpty>
					
					<isNotEmpty property="f_pol_cd">
					   AND  BL.POL_CD = #f_pol_cd#
					</isNotEmpty>
					<isNotEmpty property="f_pol_nm">
					   AND  BL.POL_NM LIKE  #f_pol_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_por_cd">
					   AND  BL.POR_CD = #f_por_cd#
					</isNotEmpty>
					<isNotEmpty property="f_por_nm">
					   AND  BL.POR_NM LIKE  #f_por_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_pod_cd">
					   AND  BL.POD_CD = #f_pod_cd#
					</isNotEmpty>
					<isNotEmpty property="f_pod_nm">
					   AND  BL.POD_NM LIKE  #f_pod_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_del_cd">
					   AND  BL.DEL_CD = #f_del_cd#
					</isNotEmpty>
					<isNotEmpty property="f_del_nm">
					   AND  BL.DEL_NM LIKE  #f_del_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_prnr_trdp_nm">
						<isEqual property="f_tp_type" compareValue="SHP">
							AND  SHPR.TRDP_NM LIKE  #f_prnr_trdp_nm# + '%'
						</isEqual>
						<isEqual property="f_tp_type" compareValue="CUS">
							AND  CUS.TRDP_NM LIKE  #f_prnr_trdp_nm# + '%'
						</isEqual>
						<isEqual property="f_tp_type" compareValue="NOT">
							AND  NTF.TRDP_NM LIKE  #f_prnr_trdp_nm# + '%'
						</isEqual>
						<isEqual property="f_tp_type" compareValue="CAR">
							AND  LNR.TRDP_NM LIKE  #f_prnr_trdp_nm# + '%'
						</isEqual>
						<isEqual property="f_tp_type" compareValue="TRI">
							AND  PRNR2.TRDP_NM LIKE  #f_prnr_trdp_nm# + '%'
						</isEqual>
						<isEqual property="f_tp_type" compareValue="DES">
							AND  PRNR.TRDP_NM LIKE  #f_prnr_trdp_nm# + '%'
						</isEqual>
						<isEqual property="f_tp_type" compareValue="BCA">
							AND  CARR.TRDP_NM LIKE  #f_prnr_trdp_nm# + '%'
						</isEqual>
						<isEqual property="f_tp_type" compareValue="FWD">
							AND  AGENT.TRDP_NM LIKE  #f_prnr_trdp_nm# + '%'
						</isEqual>
					</isNotEmpty>
					<isNotEmpty property="f_po_no">
						AND  BL.PO_NO LIKE #f_po_no# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_prnr_trdp_nm2">
					   AND  PRNR2.TRDP_NM LIKE  #f_prnr_trdp_nm2# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_shpr_trdp_nm">
					   AND  SHPR.TRDP_NM LIKE  #f_shpr_trdp_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_cnee_trdp_nm">
					   AND  CNEE.TRDP_NM LIKE  #f_cnee_trdp_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_carr_trdp_nm">
					   AND  LNR.TRDP_NM LIKE  #f_carr_trdp_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_cy_trdp_nm">
					   AND  CY.ENG_NM LIKE  #f_cy_trdp_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_cfs_trdp_nm">
					   AND  CFS.ENG_NM LIKE  #f_cfs_trdp_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_hbl_tp_cd">
					   AND  BL.HBL_TP_CD = #f_hbl_tp_cd#
					</isNotEmpty>
					<isNotEmpty property="f_ofc_cd">
					   AND  BL.REF_OFC_CD = #f_ofc_cd#
					</isNotEmpty>
					<isNotEmpty property="f_shp_mod_cd">
					   AND  BL.SHP_MOD_CD = #f_shp_mod_cd#
					</isNotEmpty>
					<isNotEmpty property="f_pic_id">
					   AND  BL.RGST_USRID LIKE  #f_pic_id# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_trnk_vsl_nm">
					   AND  BL.TRNK_VSL_NM LIKE  #f_trnk_vsl_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_trnk_voy">
					   AND  BL.TRNK_VOY LIKE  #f_trnk_voy# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_imp_ref_no">
					   AND  BL.IMP_REF_NO LIKE  #f_imp_ref_no# + '%'
					</isNotEmpty>				
					<isNotEmpty property="f_ccn_no">
					   AND  BL.CCN_NO LIKE  #f_ccn_no# + '%'
					</isNotEmpty>		
					<isNotEmpty property="post_strdt">
					   AND  BL.POST_DT BETWEEN #post_strdt# AND #post_enddt#
					</isNotEmpty>		
					<isNotEmpty property="opr_usrid">
					   AND  BND.ISSUED_BY = #opr_usrid#
					</isNotEmpty>
				    <isNotEmpty property="or_usrid">
					  AND  (BND.ISSUED_BY = #or_usrid# or BND.SLS_USRID = #or_usrid#)
					</isNotEmpty>	
					<!--#1430 [PATENT] 0215_15 B/L TYPE DIVERSELY  -->			
					<!-- #1619 [CLT] Original B/L Type- 항목 정리
					<isNotEmpty property="f_bl_rlse_tp_cd">
					  AND  BND.bl_rlse_tp_cd = #f_bl_rlse_tp_cd# 
					</isNotEmpty>	
					 -->		
					<!--#1019 [UFF] Add “FWDR Reference No” column and search field to OEM B/L List -->
					<isNotEmpty property="f_ref_type_no">
						<isEqual property="f_ref_type" compareValue="CUST">
							AND  BL.CUST_REF_NO LIKE  #f_ref_type_no# + '%'
						</isEqual>
						<isEqual property="f_ref_type" compareValue="PRNR">
							AND  BL.PRNR_REF_NO LIKE  #f_ref_type_no# + '%'
						</isEqual>
					</isNotEmpty>	
					<!-- OFVFOUR-7105 [JAPAN TRUST] Adding "Original B/L Type" Column and Search on B/L List -->
					<isNotEmpty property="f_obl_tp_cd">
					   AND  BL.OBL_TP_CD = #f_obl_tp_cd#
					</isNotEmpty>								
										 							
			  ) a1
			  <!-- #4035 B/L EDI validation 추가 -->
				LEFT JOIN TB_TRDP TRDP
				ON A1.AGENT_EDI_CD = TRDP.TRDP_CD			  			  
			  ORDER BY a1.no  
    </select>
    
    <select id="selectHBL_LIST_Excel_All" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		/* BlCmmSQL.xml > selectHBL_LIST_Excel_All */		
     	  		SELECT a1.*
     	  			,CASE WHEN bl_sts_cd = 'HF' THEN 'Y' ELSE 'N' END as block_flag
				  FROM (
		         	SELECT  row_number() over (order by  bl.post_dt desc, bl.modi_tms desc) as no,
							bl.intg_bl_seq, x.rlt_intg_bl_seq, 
							bl.bl_no, bl.ref_no, bl.ref_ofc_cd, x.bl_no as mbl_no,
							(select upper(x.cnt_cd) from tb_ofc x where x.ofc_cd = bl.ref_ofc_cd and x.delt_flg = 'N') as ref_ofc_cnt,
							(case when bl.etd_dt_tm = '' THEN '' when ISNULL(bl.etd_dt_tm,'') = '' then '' 
								else substring(bl.etd_dt_tm,5,2)  + '-' + substring(bl.etd_dt_tm,7,2) + '-' +substring(bl.etd_dt_tm,1,4)END) as etd_dt_tm
							,(case when bl.eta_dt_tm = '' THEN '' when ISNULL(bl.eta_dt_tm,'') = '' then '' 
								else substring(bl.eta_dt_tm,5,2)  + '-' + substring(bl.eta_dt_tm,7,2) + '-' +substring(bl.eta_dt_tm,1,4)END) as eta_dt_tm,
							bl.doc_cut_off_dt,
							bl.por_cd, bl.por_nm, 
							bl.pol_cd, bl.pol_nm, 
							bl.pod_cd, bl.pod_nm, 
							bl.del_cd, bl.del_nm,		
							prnr.trdp_cd as prnr_trdp_cd, prnr.trdp_nm as prnr_trdp_nm,
							shpr.trdp_cd as shp_trdp_cd, shpr.trdp_nm as shp_trdp_nm,
							cnee.trdp_cd as cne_trdp_cd, cnee.trdp_nm as cne_trdp_nm,
							act.trdp_cd as act_trdp_cd, act.trdp_nm as act_trdp_nm,
							lnr.trdp_cd as lnr_trdp_cd, lnr.trdp_nm as lnr_trdp_nm,
							ntfy.trdp_cd as ntfy_trdp_cd, ntfy.trdp_nm as ntfy_trdp_nm,
							trk.trdp_cd trk_trdp_cd, trk.trdp_nm trk_trdp_nm,
							cust.trdp_cd as cust_trdp_cd, cust.trdp_nm as cust_trdp_nm,
							vndr.trdp_cd vndr_trdp_cd, vndr.trdp_nm vndr_trdp_nm,
							bl.cfs_trdp_cd, cfs.eng_nm as cfs_trdp_nm,							
							bl.hbl_tp_cd, bl.shp_mod_cd, bl.inco_cd, bl.rgst_usrid, bl.rep_cmdt_nm,
							bl.cust_ref_no, bl.lnr_bkg_no, bl.exp_ref_no,
							(select x.cnt_cd from tb_ofc x where x.ofc_cd = bl.rgst_ofc_cd) as bl_cnt, 
							(select max(x.eng_usr_nm) from tb_usr x where x.usr_tp = 'I' and x.usrid = bnd.issued_by ) as proc_usr_nm,
							(case when bl.post_dt = '' THEN '' when ISNULL(bl.post_dt,'') = '' then '' 
								else substring(bl.post_dt,5,2)  + '-' + substring(bl.post_dt,7,2) + '-' +substring(bl.post_dt,1,4)END) as post_dt,
							bl.trnk_vsl_nm, bl.trnk_voy, bl.doc_recpt_no, bl.it_no,							
							bl.pck_qty, bl.grs_wgt, bl.grs_wgt1, bl.meas,							
							bl.rlsd_flg, 
							(case when bl.rlsd_dt_tm = '' then '' when isnull(bl.rlsd_dt_tm,'') = '' then '' 
								else substring(bl.rlsd_dt_tm,5,2)  + '-' + substring(bl.rlsd_dt_tm,7,2) + '-' +substring(bl.rlsd_dt_tm,1,4)end) as rlsd_dt_tm,
							case when bl.express_tp_cd ='Y' then 'YES' else 'NO' end express_tp_cd,
							bl.org_bl_rcvd_flg, 
							(case when bl.rcvd_dt_tm = '' then '' when isnull(bl.rcvd_dt_tm,'') = '' then '' 
								else substring(bl.rcvd_dt_tm,5,2)  + '-' + substring(bl.rcvd_dt_tm,7,2) + '-' +substring(bl.rcvd_dt_tm,1,4)end) as rcvd_dt_tm,
							CASE WHEN (SELECT COUNT(X.CNTR_NO)-1 FROM TB_CNTR_LIST X WHERE X.INTG_BL_SEQ = BL.INTG_BL_SEQ AND X.DELT_FLG = 'N') > 0 THEN 
								(select max(x.cntr_no) from tb_cntr_list x where x.intg_bl_seq = bl.intg_bl_seq and x.delt_flg = 'N') + ' + ' + CONVERT(VARCHAR(14),(SELECT COUNT(X.CNTR_NO)-1 FROM TB_CNTR_LIST X WHERE X.INTG_BL_SEQ = BL.INTG_BL_SEQ AND X.DELT_FLG = 'N'))  
							ELSE 
								(select max(x.cntr_no) from tb_cntr_list x where x.intg_bl_seq = bl.intg_bl_seq and x.delt_flg = 'N')
							END cntr_no,
							<!-- #1230 HBL list modification FULLTRANS -->
					       STUFF(( SELECT ',  ' + CNTR_TPSZ_CD +' X ' + LTRIM(STR(COUNT(CNTR_TPSZ_CD)))
					               FROM TB_CNTR_LIST X
					               WHERE ( X.INTG_BL_SEQ = BL.INTG_BL_SEQ
					          	   <!-- #4057[JAPT] question for our profit report -->
					               AND X.DELT_FLG = 'N'
					                )
					               GROUP BY CNTR_TPSZ_CD
					               FOR XML PATH ('')),1,1,'') AS cntr_summary, 
					               
							isnull(dbo.fc_mk_memo_script(bl.intg_bl_seq), '') as memo,
		  					case when charindex(char(13)+char(10), bl.po_no) = 0 then bl.po_no
							else substring(bl.po_no, 1, charindex(char(13)+char(10), bl.po_no)-1) end as po_no , 					
							bl.lc_no, 
							bl.inv_no,
							bl.ams_id,
							isnull(blck.bl_sts_cd1, bl.bl_sts_cd) as bl_sts_cd,
							bl.isf_no,
							bl.ams_no
		    				,bl.ccn_no
							,bl.ccn_dt
							,bl.pre_ccn_no
							,bl.mnf_fr_loc
							,bl.mnf_to_loc
							,isnull(bnd.ar_chk,'X') as ar_chk
							,isnull(bnd.ap_chk,'X') as ap_chk
							,isnull(bnd.dc_chk,'X') as dc_chk
							,isnull(bnd.frt_chk,'X') as frt_chk
							,bnd.verify_flag
						    ,bnd.pay_flag
							,bnd.hbl_ser_no
							,bnd.sls_usr_nm
							,bl.fnl_dest_loc_cd
							,bl.fnl_dest_loc_nm
							,(case when bl.f_eta_dt_tm = '' then '' when isnull(bl.f_eta_dt_tm,'') = '' then '' 
								else substring(bl.f_eta_dt_tm,5,2)  + '-' + substring(bl.f_eta_dt_tm,7,2) + '-' +substring(bl.f_eta_dt_tm,1,4)end) as f_eta_dt_tm
							,bnd.entr_no
							,(case when bnd.pkup_dt = '' then '' when isnull(bnd.pkup_dt,'') = '' then '' 
								else substring(bnd.pkup_dt,5,2)  + '-' + substring(bnd.pkup_dt,7,2) + '-' +substring(bnd.pkup_dt,1,4)end) as pkup_dt
							,bl.sub_bl_no
							,CASE WHEN ISNULL(bnd.AN_EML_SND_DT,'') = ''
							      THEN ''
							      ELSE (SUBSTRING(bnd.AN_EML_SND_DT,5,2)+'-'+SUBSTRING(bnd.AN_EML_SND_DT,7,2)+'-'+SUBSTRING(bnd.AN_EML_SND_DT,1,4)+' '+
							            SUBSTRING(bnd.AN_EML_SND_DT,9,2)+':'+SUBSTRING(bnd.AN_EML_SND_DT,11,2)) 
                              END AS an_eml_snd_dt
							,CASE WHEN ISNULL(bnd.AN_FAX_SND_DT,'') = ''
							      THEN ''
							      ELSE (SUBSTRING(bnd.AN_FAX_SND_DT,5,2)+'-'+SUBSTRING(bnd.AN_FAX_SND_DT,7,2)+'-'+SUBSTRING(bnd.AN_FAX_SND_DT,1,4)+' '+
							            SUBSTRING(bnd.AN_FAX_SND_DT,9,2)+':'+SUBSTRING(bnd.AN_FAX_SND_DT,11,2)) 
                              END AS an_fax_snd_dt
                            <!-- #1619 [CLT] Original B/L Type- 항목 정리 ,BND.BL_RLSE_TP_CD  #1430 [PATENT] 0215_15 B/L TYPE DIVERSELY  
                             ,dtl.CD_NM bl_rlse_tp_nm -->
                             ,bnd.tli_no
                             <!-- #4980 [Best Ocean] Created Time and Last Modify Time columns add to BL List-->
            				 ,(case when bl.rgst_tms = '' THEN '' when ISNULL(bl.rgst_tms,'') = '' then '' 
								else CONVERT(varchar(10), bl.rgst_tms, 110) + ' ' + CONVERT(varchar(5), bl.rgst_tms, 108) END) as rgst_tms
            				 ,bl.modi_usr_nm
            				 ,(case when bl.modi_tms = '' THEN '' when ISNULL(bl.modi_tms,'') = '' then '' 
								else CONVERT(varchar(10), DATEADD(HH, DATEDIFF(HH,GETUTCDATE(),GETDATE()),bl.modi_tms), 110) + ' ' + CONVERT(varchar(5), DATEADD(HH, DATEDIFF(HH,GETUTCDATE(),GETDATE()),bl.modi_tms), 108) END) as modi_tms
							 <!-- OFVFOUR-7105 [JAPAN TRUST] Adding "Original B/L Type" Column and Search on B/L List -->
							 ,bl.obl_tp_cd
                             
					  FROM  TB_INTG_BL BL
					  <isEqual property="bnd_clss_cd" compareValue="O">
							with(index(IDX_ETD_DT_TM), nolock)
					  </isEqual>     
					  <isEqual property="bnd_clss_cd" compareValue="I">
							with(index(IDX_ETA_DT_TM), nolock)
					  </isEqual>  
					  JOIN  tb_add_info_bnd bnd
						ON  bl.intg_bl_seq = bnd.intg_bl_seq AND bnd.bnd_clss_cd = #bnd_clss_cd# AND bnd.delt_flg = 'N'
						<isNotEmpty property="f_bl_ser_no_frm">
						   	<isNotEmpty property="f_bl_ser_no_to">
						  	 	AND  bnd.hbl_ser_no between #f_bl_ser_no_frm# and #f_bl_ser_no_to#
							</isNotEmpty>
						</isNotEmpty>
		   LEFT OUTER JOIN  tb_bl_prnr PRNR
						ON  bl.intg_bl_seq = prnr.intg_bl_seq  AND prnr.bl_trdp_tp_cd = 'P01' AND prnr.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr SHPR
						ON  bl.intg_bl_seq = SHPR.intg_bl_seq  AND SHPR.bl_trdp_tp_cd = 'S01' AND SHPR.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr CNEE
						ON  bl.intg_bl_seq = CNEE.intg_bl_seq  AND CNEE.bl_trdp_tp_cd = 'C01' AND CNEE.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr ACT
						ON  bl.intg_bl_seq = act.intg_bl_seq  AND act.bl_trdp_tp_cd = 'S02' AND act.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr LNR
						ON  bl.intg_bl_seq = lnr.intg_bl_seq  AND lnr.bl_trdp_tp_cd = 'L01' AND lnr.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_bl_prnr NTFY
						ON  bl.intg_bl_seq = ntfy.intg_bl_seq  AND ntfy.bl_trdp_tp_cd = 'N01' AND ntfy.delt_flg = 'N'
		   LEFT OUTER JOIN tb_bl_prnr TRK 
		   				ON bl.intg_bl_seq = TRK.intg_bl_seq  AND TRK.bl_trdp_tp_cd = 'T02' AND TRK.delt_flg = 'N'
		   LEFT OUTER JOIN	tb_bl_prnr CUST
		           		ON	bl.intg_bl_seq = cust.intg_bl_seq  AND cust.bl_trdp_tp_cd = 'C03' AND cust.delt_flg = 'N'
		   LEFT OUTER JOIN tb_bl_prnr VNDR 
						ON bl.intg_bl_seq = VNDR.intg_bl_seq  AND VNDR.bl_trdp_tp_cd = 'V01' AND VNDR.delt_flg = 'N'
		   LEFT OUTER JOIN  tb_trdp CFS
						ON  bl.cfs_trdp_cd = cfs.trdp_cd  AND cfs.delt_flg = 'N'
		   LEFT OUTER JOIN (
						SELECT  rlt.intg_bl_seq, mbl.bl_no, rlt.rlt_intg_bl_seq
						  FROM  tb_intg_bl mbl
			   LEFT OUTER JOIN  tb_intg_bl_rlt rlt 
							ON  rlt.rlt_intg_bl_seq = mbl.intg_Bl_seq AND mbl.delt_flg = 'N'  
							) X ON X.intg_bl_seq = bl.intg_Bl_seq
		   LEFT OUTER JOIN(SELECT INTG_BL_SEQ AS INTG_BL_SEQ1, BL_STS_CD AS BL_STS_CD1 FROM TB_INTG_BL_BLCK) BLCK 
		   				ON BL.INTG_BL_SEQ = BLCK.INTG_BL_SEQ1	
		   				<!-- #1619 [CLT] Original B/L Type- 항목 정리
           LEFT OUTER JOIN TB_COM_CD_DTL dtl
         				ON dtl.com_cd = 'C222' and BND.BL_RLSE_TP_CD = dtl.CD_VAL  		 -->   																			   			
					 WHERE  bl.delt_flg = 'N'
					   AND  bl.air_sea_clss_cd= #air_sea_clss_cd#
					   AND  bl.biz_clss_cd  = #biz_clss_cd#
					<isNotEmpty property="f_hbl_no">
						<!-- #1061 [Binex, Sunway, AIF] V440 Search function -->
					   AND  BL.BL_NO LIKE #f_hbl_no# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_ref_no">
						<!-- #1061 [Binex, Sunway, AIF] V440 Search function -->
					   AND  BL.REF_NO LIKE #f_ref_no# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_mbl_no">
						<!-- #1061 [Binex, Sunway, AIF] V440 Search function -->
					   AND  X.BL_NO LIKE #f_mbl_no# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_cntr_no">
					   AND  BL.INTG_BL_SEQ IN (SELECT  CNTR.INTG_BL_SEQ
												 FROM  TB_CNTR_LIST CNTR
												WHERE  CNTR.CNTR_NO LIKE  #f_cntr_no# + '%' )
					</isNotEmpty>
					<isNotEmpty property="f_prnr_trdp_nm">
						<isEqual property="f_tp_type" compareValue="SHP">
							AND  SHPR.TRDP_NM LIKE  #f_prnr_trdp_nm# + '%'
						</isEqual>
						<isEqual property="f_tp_type" compareValue="CUS">
							AND  ACT.TRDP_NM LIKE  #f_prnr_trdp_nm# + '%'
						</isEqual>
						<isEqual property="f_tp_type" compareValue="NOT">
							AND  NTFY.TRDP_NM LIKE  #f_prnr_trdp_nm# + '%'
						</isEqual>     
						<isEqual property="f_tp_type" compareValue="PAR">
							AND  PRNR.TRDP_NM LIKE  #f_prnr_trdp_nm# + '%'
						</isEqual>     
						<isEqual property="f_tp_type" compareValue="CBR">
							AND  CUST.TRDP_NM LIKE  #f_prnr_trdp_nm# + '%'
						</isEqual>     
						<isEqual property="f_tp_type" compareValue="CAR">
							AND  LNR.TRDP_NM LIKE  #f_prnr_trdp_nm# + '%'
						</isEqual>     
					</isNotEmpty>
					<isNotEmpty property="f_strdt">
						<isEqual property="f_date_type" compareValue="ETA">
					   	AND  BL.ETA_DT_TM BETWEEN #f_strdt# AND #f_enddt#
					   	</isEqual>
						<isEqual property="f_date_type" compareValue="ETD">
					   	AND  BL.ETD_DT_TM BETWEEN #f_strdt# AND #f_enddt#
					   	</isEqual>
						<isEqual property="f_date_type" compareValue="PDT">
					   	AND  BL.POST_DT BETWEEN #f_strdt# AND #f_enddt#
					   	</isEqual>
						<isEqual property="f_date_type" compareValue="DCT">
					   	<!-- AND  SUBSTRING(x.DOC_CUT_OFF_DT,1,8) BETWEEN #f_strdt# AND #f_enddt# -->
					   	AND  SUBSTRING(bnd.hbl_cut_off_dt,1,8) BETWEEN #f_strdt# AND #f_enddt#
					   	</isEqual>					   	
					   	
					</isNotEmpty>
					<isNotEmpty property="etd_strdt">
					   AND  BL.ETD_DT_TM BETWEEN #etd_strdt# AND #etd_enddt#
					</isNotEmpty>
					<isNotEmpty property="eta_strdt">
					   AND  BL.ETA_DT_TM BETWEEN #eta_strdt# AND #eta_enddt#
					</isNotEmpty>
					<isNotEmpty property="f_pol_cd">
					   AND  BL.POL_CD = #f_pol_cd#
					</isNotEmpty>
					<isNotEmpty property="f_pol_nm">
					   AND  BL.POL_NM LIKE  #f_pol_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_por_cd">
					   AND  BL.POR_CD = #f_por_cd#
					</isNotEmpty>
					<isNotEmpty property="f_por_nm">
					   AND  BL.POR_NM LIKE  #f_por_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_pod_cd">
					   AND  BL.POD_CD = #f_pod_cd#
					</isNotEmpty>
					<isNotEmpty property="f_pod_nm">
					   AND  BL.POD_NM LIKE  #f_pod_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_del_cd">
					   AND  BL.DEL_CD = #f_del_cd#
					</isNotEmpty>
					<isNotEmpty property="f_del_nm">
					   AND  BL.DEL_NM LIKE  #f_del_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_prnr_trdp_nm">
					   AND  PRNR.TRDP_NM LIKE  #f_prnr_trdp_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_shpr_trdp_nm">
					   AND  SHPR.TRDP_NM LIKE  #f_shpr_trdp_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_cnee_trdp_nm">
					   AND  CNEE.TRDP_NM LIKE  #f_cnee_trdp_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_ahpr_trdp_nm">
					   AND  ACT.TRDP_NM LIKE  #f_ahpr_trdp_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_ntfy_trdp_nm">
					   AND  NTFY.TRDP_NM LIKE  #f_ntfy_trdp_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_lnr_trdp_nm"><!-- #1230 HBL list modification FULLTRANS -->
					   AND  LNR.TRDP_NM LIKE  #f_lnr_trdp_nm# + '%'
					</isNotEmpty>					
					<isNotEmpty property="f_cfs_trdp_nm">
					   AND  CFS.ENG_NM LIKE  #f_cfs_trdp_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_hbl_tp_cd">
					   AND  BL.HBL_TP_CD = #f_hbl_tp_cd#
					</isNotEmpty>
					<isNotEmpty property="f_ofc_cd">
					   AND  BL.REF_OFC_CD = #f_ofc_cd#
					</isNotEmpty>
					<isNotEmpty property="f_shp_mod_cd">
					   AND  BL.SHP_MOD_CD = #f_shp_mod_cd#
					</isNotEmpty>
					<isNotEmpty property="f_inco_cd">
					   AND  BL.INCO_CD = #f_inco_cd#
					</isNotEmpty>
					<isNotEmpty property="f_pic_id">
					   AND  BL.RGST_USRID LIKE  #f_pic_id# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_cmdt_nm">
					   AND  BL.REP_CMDT_NM LIKE  #f_cmdt_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_trnk_vsl_nm">
					   AND  BL.TRNK_VSL_NM LIKE  #f_trnk_vsl_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_trnk_voy">
					   AND  BL.TRNK_VOY LIKE  #f_trnk_voy# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_grs_wgt">
					   AND  BL.GRS_WGT LIKE  #f_grs_wgt# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_grs_wgt1">
					   AND  BL.GRS_WGT1 LIKE  #f_grs_wgt1# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_meas">
					   AND  BL.MEAS LIKE  #f_meas# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_it_no">
					   AND  BL.IT_NO LIKE  #f_it_no# + '%'
					</isNotEmpty>
					<isNotEmpty property="fm_pck_qty">
					   AND  BL.PCK_QTY BETWEEN #fm_pck_qty# AND #to_pck_qty#
					</isNotEmpty>
					<isNotEmpty property="fm_grs_wgt">
						<isNotEmpty property="to_grs_wgt">
							<isEqual property="f_grs_wgt_sel_cd" compareValue="KG">
								AND  BL.GRS_WGT BETWEEN #fm_grs_wgt# AND #to_grs_wgt#
							</isEqual>
							<isEqual property="f_grs_wgt_sel_cd" compareValue="LG">
								AND  BL.GRS_WGT1 BETWEEN #fm_grs_wgt# AND #to_grs_wgt#
							</isEqual>
						</isNotEmpty>
						
						<isEmpty property="to_grs_wgt">
							<isEqual property="f_grs_wgt_sel_cd" compareValue="KG">
								AND BL.GRS_WGT <![CDATA[>=]]> #fm_grs_wgt# 
							</isEqual>
							<isEqual property="f_grs_wgt_sel_cd" compareValue="LG">
								AND BL.GRS_WGT1 <![CDATA[>=]]> #fm_grs_wgt#
							</isEqual>
						</isEmpty>
					</isNotEmpty>
					<isEmpty property="fm_grs_wgt">
						<isNotEmpty property="to_grs_wgt">
							<isEqual property="f_grs_wgt_sel_cd" compareValue="KG">
								AND BL.GRS_WGT <![CDATA[<=]]> #to_grs_wgt#
							</isEqual>
							<isEqual property="f_grs_wgt_sel_cd" compareValue="LG">
								AND BL.GRS_WGT1 <![CDATA[<=]]> #to_grs_wgt#
							</isEqual>
						</isNotEmpty>
					</isEmpty>
					<isNotEmpty property="fm_meas">
					   AND  BL.MEAS BETWEEN #fm_meas# AND #to_meas#
					</isNotEmpty>
					<isNotEmpty property="f_po_no">
					   AND  BL.PO_NO LIKE  #f_po_no# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_lc_no">
					   AND  BL.LC_NO = #f_lc_no#
					</isNotEmpty>
					<isNotEmpty property="f_inv_no">
					   AND  BL.INV_NO = #f_inv_no#
					</isNotEmpty>
					<isNotEmpty property="f_lnr_bkg_no">
					   AND  BL.LNR_BKG_NO = #f_lnr_bkg_no#
					</isNotEmpty>
					<isNotEmpty property="f_cust_ref_no">
					   AND  BL.CUST_REF_NO LIKE  #f_cust_ref_no# + '%'
					</isNotEmpty>			
					<isNotEmpty property="f_ams_no">
						<isEqual property="f_ams_isf_sel_cd" compareValue="AMS">
							AND  BL.AMS_NO LIKE  #f_ams_no# + '%'
						</isEqual>
						<isEqual property="f_ams_isf_sel_cd" compareValue="ISF">
							AND  BL.ISF_NO LIKE  #f_ams_no# + '%'
						</isEqual>
					</isNotEmpty>
					<isNotEmpty property="f_ccn_no">
					   AND  BL.CCN_NO LIKE  #f_ccn_no# + '%'
					</isNotEmpty>	
					<isNotEmpty property="f_fnl_dest_loc_cd">
					   AND  BL.FNL_DEST_LOC_CD = #f_fnl_dest_loc_cd#
					</isNotEmpty>
					<isNotEmpty property="f_fnl_dest_loc_nm">
					   AND  BL.FNL_DEST_LOC_NM LIKE  #f_fnl_dest_loc_nm# + '%'
					</isNotEmpty>
					<isNotEmpty property="f_entr_no">
					   AND  BND.ENTR_NO LIKE  #f_entr_no# + '%'
					</isNotEmpty>	
					<isNotEmpty property="post_strdt">
					   AND  BL.POST_DT BETWEEN #post_strdt# AND #post_enddt#
					</isNotEmpty>	
					<isNotEmpty property="f_sub_bl_no">
						<!-- #1061 [Binex, Sunway, AIF] V440 Search function -->
					   AND  BL.SUB_BL_NO LIKE #f_sub_bl_no# + '%'
					</isNotEmpty>
					<isNotEmpty property="opr_usrid">
					   AND  BND.ISSUED_BY = #opr_usrid#
					</isNotEmpty>
				    <isNotEmpty property="or_usrid">
					  AND  (BND.ISSUED_BY = #or_usrid# or BND.SLS_USRID = #or_usrid#)
					</isNotEmpty>	
					<isNotEmpty property="f_no">
						<isEqual property="f_no_type" compareValue="LC">
							AND  BL.LC_NO = #f_no#
						</isEqual>
						<isEqual property="f_no_type" compareValue="INV">
							AND  BL.INV_NO = #f_no#
						</isEqual>
						<isEqual property="f_no_type" compareValue="BKG">
							AND  BL.LNR_BKG_NO = #f_no#
						</isEqual>
						<isEqual property="f_no_type" compareValue="TLI">
							AND  BND.TLI_NO = #f_no#
						</isEqual>							
					</isNotEmpty>
					<isNotEmpty property="sls_usrid">
					   AND  BND.SLS_USRID = #sls_usrid#
					</isNotEmpty>
					<!--#1430 [PATENT] 0215_15 B/L TYPE DIVERSELY  -->	
					<!-- #1619 [CLT] Original B/L Type- 항목 정리		
					<isNotEmpty property="f_bl_rlse_tp_cd">
					  AND  BND.bl_rlse_tp_cd = #f_bl_rlse_tp_cd# 
					</isNotEmpty>			
					 -->			
					<!-- #1327 [OCEAN BLUE] CUSTOM BROKER SEARCH FIELD ADD TO IMPORT HBL LIST  -->	
					<isNotEmpty property="f_cust_trdp_nm">
					   AND  CUST.TRDP_NM LIKE  #f_cust_trdp_nm# + '%'
					</isNotEmpty> 
					<!-- OFVFOUR-7105 [JAPAN TRUST] Adding "Original B/L Type" Column and Search on B/L List -->
					<isNotEmpty property="f_obl_tp_cd">
					   AND  BL.OBL_TP_CD = #f_obl_tp_cd#
					</isNotEmpty>
					 ) a1
					 order by a1.no
    </select>
    
    <!--Vinh.Vo (E)  -->
    
    
	<!-- LKH TODO::작업중  -->
    <update id="updateBlArApDcStatusFromJnr" parameterClass="HashMap">
    /* BlCmmSQL.xml > updateBlArApDcStatusFromJnr */
        ;WITH  
			INVINFO AS( 
				SELECT inv_sum.INTG_BL_SEQ, 
				<![CDATA[ 
				CASE 
			        WHEN Isnull(inv_sum.ar_cnt, 0) = 0 THEN 'X' 
			        WHEN inv_sum.ar_bal_amt = 0 THEN 'Y' 
			        WHEN inv_sum.ar_inv_sum_amt = inv_sum.ar_bal_amt THEN 'N' 
			        WHEN inv_sum.ar_bal_amt < 0 THEN 'O' 
			        ELSE 'P' 
				END AS AR_CHK, 
				CASE 
			        WHEN Isnull(inv_sum.ap_cnt, 0) = 0 THEN 'X' 
			        WHEN inv_sum.ap_bal_amt = 0 THEN 'Y' 
			        WHEN inv_sum.ap_inv_sum_amt = inv_sum.ap_bal_amt THEN 'N' 
			        WHEN inv_sum.ap_bal_amt < 0 THEN 'O' 
			        ELSE 'P' 
				END AS AP_CHK, 
				CASE 
			        WHEN Isnull(inv_sum.dc_cnt, 0) = 0 THEN 'X' 
			        WHEN inv_sum.dc_bal_amt = 0 THEN 'Y' 
			        WHEN inv_sum.dc_inv_sum_amt = inv_sum.dc_bal_amt THEN 'N' 
			        WHEN inv_sum.dc_bal_amt < 0 THEN 'O' 
			        ELSE 'P' 
				END AS DC_CHK 
				]]> 
			FROM ( 
					SELECT frt.intg_bl_seq,           
					  SUM(CASE            WHEN frt.sell_buy_tp_cd = 'S' THEN 1            ELSE 0           END) AS ar_cnt,           
					  SUM(CASE            WHEN frt.sell_buy_tp_cd = 'S' THEN            dtl.inv_sum_amt            ELSE 0           END) AS ar_inv_sum_amt,           
					  SUM(CASE            WHEN frt.sell_buy_tp_cd = 'S' THEN            dtl.bal_amt            ELSE 0           END) AS ar_bal_amt,           
					  SUM(CASE            WHEN frt.sell_buy_tp_cd = 'B' THEN 1            ELSE 0           END) AS ap_cnt,           
					  SUM(CASE            WHEN frt.sell_buy_tp_cd = 'B' THEN            dtl.inv_sum_amt            ELSE 0           END) AS ap_inv_sum_amt,           
					  SUM(CASE            WHEN frt.sell_buy_tp_cd = 'B' THEN            dtl.bal_amt            ELSE 0           END) AS ap_bal_amt,           
					  SUM(CASE            WHEN frt.sell_buy_tp_cd = 'D'             OR frt.sell_buy_tp_cd = 'C' THEN 1            ELSE 0           END) AS dc_cnt,           
					  SUM(CASE            WHEN frt.sell_buy_tp_cd = 'D'             OR frt.sell_buy_tp_cd = 'C' THEN            dtl.inv_sum_amt            ELSE 0           END) AS dc_inv_sum_amt,           
					  SUM(CASE            WHEN frt.sell_buy_tp_cd = 'D'             OR frt.sell_buy_tp_cd = 'C' THEN            dtl.bal_amt            ELSE 0           END) AS dc_bal_amt         
					FROM   tb_frt frt WITH(nolock)           
					  JOIN tb_inv_dtl dtl WITH(INDEX(xif1tb_inv_dtl), nolock) ON dtl.delt_flg = 'N'           AND frt.inv_seq = dtl.inv_seq         
					  JOIN ( SELECT f.INTG_BL_SEQ 
							   FROM tb_frt f WITH(nolock) 
							       ,TB_JNR_DTL J WITH(nolock) 
							WHERE J.INV_SEQ = F.INV_SEQ 
							AND J.JNR_NO = #jnr_no# 
							AND ISNULL(F.INV_SEQ, '') !='' 
							AND ISNULL(OTH_SEQ, '') = '' 
			                AND ISNULL(WMS_SEQ, '') = '' ) T1 ON T1.intg_bl_seq = frt.intg_bl_seq 
					WHERE frt.delt_flg = 'N'   
					AND T1.intg_bl_seq = frt.intg_bl_seq 
					GROUP  BY frt.intg_bl_seq) inv_sum  
			) 			
			
			UPDATE A 
			   SET AR_CHK = B.AR_CHK, 
			       AP_CHK = B.AP_CHK, 
			       DC_CHK = B.DC_CHK 
			  FROM TB_ADD_INFO_BND AS A, 
			       INVINFO AS B 
			 WHERE A.INTG_BL_SEQ = B.INTG_BL_SEQ	 		 	
    </update>
	<!-- LKH TODO::작업중  -->
    <update id="updateOthArApDcStatusFromJnr" parameterClass="HashMap">
    /* BlCmmSQL.xml > updateOthArApDcStatusFromJnr */
        ;WITH OTHINFO AS (
			SELECT A.oth_seq FROM TB_OTH_SALES A WITH(nolock) WHERE EXISTS (
				SELECT oth_seq FROM tb_frt B WITH(nolock)
					WHERE B.oth_seq = A.oth_seq 
						 AND INV_SEQ IN (
									SELECT
										INV_SEQ 
									FROM
										TB_JNR_DTL WITH(nolock)    
									WHERE
										JNR_NO =  #jnr_no#
									AND ISNULL(INV_SEQ, '')	!=''		
								) 
						  <![CDATA[ 
						  AND ISNULL(OTH_SEQ,'') <> '' 
						  ]]>    
				)
		), INVINFO AS(
			SELECT T1.oth_seq,
			<![CDATA[ 
				CASE 
					 WHEN Isnull(inv_sum.ar_cnt, 0) = 0 THEN 'X' 
					 WHEN inv_sum.ar_bal_amt = 0 THEN 'Y' 
					 WHEN inv_sum.ar_inv_sum_amt = inv_sum.ar_bal_amt THEN 'N' 
					 WHEN inv_sum.ar_bal_amt < 0 THEN 'O' 
					 ELSE 'P' 
				   END AS AR_CHK, 
				   CASE 
					 WHEN Isnull(inv_sum.ap_cnt, 0) = 0 THEN 'X' 
					 WHEN inv_sum.ap_bal_amt = 0 THEN 'Y' 
					 WHEN inv_sum.ap_inv_sum_amt = inv_sum.ap_bal_amt THEN 'N' 
					 WHEN inv_sum.ap_bal_amt < 0 THEN 'O' 
					 ELSE 'P' 
				   END AS AP_CHK, 
				   CASE 
					 WHEN Isnull(inv_sum.dc_cnt, 0) = 0 THEN 'X' 
					 WHEN inv_sum.dc_bal_amt = 0 THEN 'Y' 
					 WHEN inv_sum.dc_inv_sum_amt = inv_sum.dc_bal_amt THEN 'N' 
					 WHEN inv_sum.dc_bal_amt < 0 THEN 'O' 
					 ELSE 'P' 
				   END AS DC_CHK  
			]]>    
			FROM (	OTHINFO AS T1
				LEFT OUTER JOIN (			
					SELECT frt.oth_seq, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'S' THEN 1 
										ELSE 0 
									END) AS ar_cnt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'S' THEN 
										dtl.inv_sum_amt 
										ELSE 0 
									END) AS ar_inv_sum_amt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'S' THEN 
										dtl.bal_amt 
										ELSE 0 
									END) AS ar_bal_amt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'B' THEN 1 
										ELSE 0 
									END) AS ap_cnt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'B' THEN 
										dtl.inv_sum_amt 
										ELSE 0 
									END) AS ap_inv_sum_amt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'B' THEN 
										dtl.bal_amt 
										ELSE 0 
									END) AS ap_bal_amt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'D' 
											OR frt.sell_buy_tp_cd = 'C' THEN 1 
										ELSE 0 
									END) AS dc_cnt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'D' 
											OR frt.sell_buy_tp_cd = 'C' THEN 
										dtl.inv_sum_amt 
										ELSE 0 
									END) AS dc_inv_sum_amt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'D' 
											OR frt.sell_buy_tp_cd = 'C' THEN 
										dtl.bal_amt 
										ELSE 0 
									END) AS dc_bal_amt 
						FROM   tb_frt frt WITH(nolock) 
								JOIN tb_inv_dtl dtl WITH(INDEX(xif1tb_inv_dtl), nolock) 
									ON dtl.delt_flg = 'N' 
									AND frt.inv_seq = dtl.inv_seq 
						WHERE  frt.delt_flg = 'N' 
							and     frt.oth_seq  IN (SELECT oth_seq FROM OTHINFO T WITH(nolock) WHERE T.oth_seq=FRT.oth_seq)      
						GROUP  BY frt.oth_seq
					) inv_sum
					ON T1.oth_seq = inv_sum.oth_seq 
			) 
		)UPDATE A SET AR_CHK = B.AR_CHK,AP_CHK = B.AP_CHK,DC_CHK = B.DC_CHK
		FROM TB_OTH_SALES AS A, INVINFO AS B
		WHERE A.OTH_SEQ = B.OTH_SEQ	 	
    </update> 
	<!-- LKH TODO::작업중  --> 
    <update id="updateWmsArApDcStatusFromJnr" parameterClass="HashMap">
    /* BlCmmSQL.xml > updateWmsArApDcStatusFromJnr */
        ;WITH OTHINFO AS (
			SELECT A.WM_DOC_SEQ FROM TB_WM_DOC_MST A WITH(nolock) WHERE EXISTS (
				SELECT wms_seq FROM tb_frt B WITH(nolock)
					WHERE B.wms_seq = A.wm_doc_seq 					
						 AND INV_SEQ IN (
									SELECT
										INV_SEQ 
									FROM
										TB_JNR_DTL WITH(nolock)   
									WHERE
										JNR_NO =  #jnr_no#
									AND ISNULL(INV_SEQ, '')	!=''	
								) 
						  <![CDATA[ 
						  AND ISNULL(WMS_SEQ,'') <> '' 
						  ]]>    
				)
		), INVINFO AS(
			SELECT T1.WM_DOC_SEQ,
			<![CDATA[ 
				CASE 
					 WHEN Isnull(inv_sum.ar_cnt, 0) = 0 THEN 'X' 
					 WHEN inv_sum.ar_bal_amt = 0 THEN 'Y' 
					 WHEN inv_sum.ar_inv_sum_amt = inv_sum.ar_bal_amt THEN 'N' 
					 WHEN inv_sum.ar_bal_amt < 0 THEN 'O' 
					 ELSE 'P' 
				   END AS AR_CHK, 
				   CASE 
					 WHEN Isnull(inv_sum.ap_cnt, 0) = 0 THEN 'X' 
					 WHEN inv_sum.ap_bal_amt = 0 THEN 'Y' 
					 WHEN inv_sum.ap_inv_sum_amt = inv_sum.ap_bal_amt THEN 'N' 
					 WHEN inv_sum.ap_bal_amt < 0 THEN 'O' 
					 ELSE 'P' 
				   END AS AP_CHK, 
				   CASE 
					 WHEN Isnull(inv_sum.dc_cnt, 0) = 0 THEN 'X' 
					 WHEN inv_sum.dc_bal_amt = 0 THEN 'Y' 
					 WHEN inv_sum.dc_inv_sum_amt = inv_sum.dc_bal_amt THEN 'N' 
					 WHEN inv_sum.dc_bal_amt < 0 THEN 'O' 
					 ELSE 'P' 
				   END AS DC_CHK  
			]]>    
			FROM (	OTHINFO AS T1
				LEFT OUTER JOIN (			
					SELECT frt.wms_seq, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'S' THEN 1 
										ELSE 0 
									END) AS ar_cnt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'S' THEN 
										dtl.inv_sum_amt 
										ELSE 0 
									END) AS ar_inv_sum_amt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'S' THEN 
										dtl.bal_amt 
										ELSE 0 
									END) AS ar_bal_amt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'B' THEN 1 
										ELSE 0 
									END) AS ap_cnt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'B' THEN 
										dtl.inv_sum_amt 
										ELSE 0 
									END) AS ap_inv_sum_amt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'B' THEN 
										dtl.bal_amt 
										ELSE 0 
									END) AS ap_bal_amt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'D' 
											OR frt.sell_buy_tp_cd = 'C' THEN 1 
										ELSE 0 
									END) AS dc_cnt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'D' 
											OR frt.sell_buy_tp_cd = 'C' THEN 
										dtl.inv_sum_amt 
										ELSE 0 
									END) AS dc_inv_sum_amt, 
								SUM(CASE 
										WHEN frt.sell_buy_tp_cd = 'D' 
											OR frt.sell_buy_tp_cd = 'C' THEN 
										dtl.bal_amt 
										ELSE 0 
									END) AS dc_bal_amt 
						FROM   tb_frt frt WITH(nolock) 
								JOIN tb_inv_dtl dtl WITH(INDEX(xif1tb_inv_dtl), nolock) 
									ON dtl.delt_flg = 'N' 
									AND frt.inv_seq = dtl.inv_seq 
						WHERE  frt.delt_flg = 'N' 
							and     frt.wms_seq  IN (SELECT WM_DOC_SEQ FROM OTHINFO T WITH(nolock) WHERE T.WM_DOC_SEQ=FRT.wms_seq)       
						GROUP  BY frt.wms_seq
					) inv_sum
					ON T1.WM_DOC_SEQ = inv_sum.wms_seq 
			) 
		)UPDATE A SET AR_CHK = B.AR_CHK,AP_CHK = B.AP_CHK,DC_CHK = B.DC_CHK
		FROM TB_WM_DOC_MST AS A, INVINFO AS B
		WHERE A.WM_DOC_SEQ = B.WM_DOC_SEQ	 	
    </update> 
    
    <select id="selectMBL_SHP_MOD_CD" parameterClass="java.util.HashMap" resultClass="SeeMasterBLVO">
    	SELECT shp_mod_cd, fm_svc_term_cd, to_svc_term_cd, cy_trdp_cd, cfs_trdp_cd
    	FROM   tb_intg_bl
    	WHERE  intg_bl_seq =  cast(#intg_bl_seq# as varchar)
    </select>
    
    <select id="selectBkgPoInfo" parameterClass="HashMap" resultClass="BkgPoInfoVO">
    	SELECT distinct(po.cust_po_no) AS cust_po_no 
    	  FROM tb_bkg_po po_itm, tb_po po 
    	 WHERE po_itm.po_sys_no = po.po_sys_no
    	   AND po_itm.bkg_seq = #bkg_seq#
    </select>
    
    <select id="selectBkgItemInfo" parameterClass="HashMap" resultClass="BkgPoItemInfoVO">
    	SELECT distinct(po_itm.cust_itm_id) AS cust_itm_id 
    	  FROM tb_bkg_po po_itm, tb_po po 
    	 WHERE po_itm.po_sys_no = po.po_sys_no
    	   AND po_itm.bkg_seq = #bkg_seq#
    </select>
    
    <select id="selectQTTN_INFO" parameterClass="HashMap" resultClass="QttnInfoVO">
    	/* BlCmmSQL.xml > selectQTTN_INFO */
    	SELECT TOP 1
    	       qttn_seq,		qttn_no,		air_sea_clss_cd,	bnd_clss_cd 
		      ,cust_cd,			cust_nm,		cust_pic_nm 
		      ,agn_cd,			agn_nm,			cmdt_cd,			cmdt_nm 
		      ,por_cd,			por_nm,			del_cd,				del_nm 
		      ,pol_cd,			pol_nm,			pod_cd,				pod_nm,			fnl_dest_loc_cd,	fnl_dest_loc_nm 
		      ,pck_qty,			pck_ut_cd,		grs_wgt_kg,			grs_wgt_lbs,	meas_cbm,			meas_cft 
		      ,mode,			tt,				carr_nm,			qttn_dt,		opr_usr_id,			vty_dt
		      ,state_cd,		state_nm,		state_cnt_cd,		curr_cd,		bkg_no,				cust_ref_no 
		      ,rmk,				rmk2,			free_form_chk,		free_form_txt,	rate_qttn_txt,		delt_flg 
		      ,rgst_usrid,		rgst_ofc_cd,	rgst_tms,			modi_usrid,		modi_ofc_cd,		modi_tms
		      ,inco_cd,			eq_type,		eq_type_cd,			chg_wgt_kg,		chg_wgt_lbs,		cust_addr
		      ,size_ut_cd
		  FROM tb_qttn 
		 WHERE delt_flg = 'N'
		   AND air_sea_clss_cd = #air_sea_clss_cd#
		   AND bnd_clss_cd = #bnd_clss_cd#
		 <isNotEmpty property="f_qttn_seq">
		   AND qttn_seq = #f_qttn_seq#
		</isNotEmpty>
		<isNotEmpty property="f_qttn_no">
		  AND qttn_no = #f_qttn_no#
		</isNotEmpty>
    </select>
    
    <select id="selectQTTN_CHG_LIST" parameterClass="HashMap" resultClass="QttnChgInfoVO">
    	/* BlCmmSQL.xml > selectQTTN_CHG_INFO */
    	SELECT qttn_chg_seq
		      ,qttn_seq
		      ,chg_desc
		      ,unit
		      ,qty
		      ,chg_unit_amt
		      ,chg_ttl_amt
		      ,delt_flg
		  FROM tb_qttn_chg
		 WHERE delt_flg = 'N'
		   AND qttn_seq = #f_qttn_seq#
    </select>
    
    <select id="selectQTTN_OTH_CHG_LIST" parameterClass="HashMap" resultClass="QttnOthChgInfoVO">
    	/* BlCmmSQL.xml > selectQTTN_OTH_CHG_INFO */
    	SELECT qttn_oth_chg_seq
		      ,qttn_seq
		      ,oth_chg_desc
		      ,oth_chg_amt
		      ,delt_flg
		  FROM tb_qttn_oth_chg
		 WHERE delt_flg = 'N'
		   AND qttn_seq = #f_qttn_seq#
    </select>
    
    <insert id="insertQTTN_INFO"  parameterClass="QttnInfoVO">
    	/* BlCmmSQL.xml > insertQTTN_INFO */
    	INSERT into tb_qttn(
		           	qttn_seq,		qttn_no,		air_sea_clss_cd,	bnd_clss_cd 
				   ,cust_cd,		cust_nm,		cust_pic_nm 
				   ,agn_cd,			agn_nm,			cmdt_cd,			cmdt_nm 
				   ,por_cd,			por_nm,			del_cd,				del_nm 
				   ,pol_cd,			pol_nm,			pod_cd,				pod_nm,			fnl_dest_loc_cd,	fnl_dest_loc_nm 
				   ,pck_qty,		pck_ut_cd,		grs_wgt_kg,			grs_wgt_lbs,	meas_cbm,			meas_cft 
				   ,mode,			tt,				carr_nm,			qttn_dt,		opr_usr_id,			vty_dt 
				   ,state_cd,		state_nm,		state_cnt_cd,		curr_cd,		bkg_no,				cust_ref_no 
				   ,rmk,			rmk2,			free_form_chk,		free_form_txt,	rate_qttn_txt,		delt_flg 
				   ,rgst_usrid,		rgst_ofc_cd,	rgst_tms,			modi_usrid,		modi_ofc_cd,		modi_tms
				   ,inco_cd,		eq_type,		eq_type_cd,			chg_wgt_kg,		chg_wgt_lbs,		cust_addr
				   ,size_ut_cd )
     	VALUES (
     			    #qttn_seq#,		#qttn_no#,		#air_sea_clss_cd#,	#bnd_clss_cd# 
				   ,#cust_cd#,		#cust_nm#,		#cust_pic_nm# 
				   ,#agn_cd#,		#agn_nm#,		#cmdt_cd#,			#cmdt_nm# 
				   ,#por_cd#,		#por_nm#,		#del_cd#,			#del_nm# 
				   ,#pol_cd#,		#pol_nm#,		#pod_cd#,			#pod_nm#,			#fnl_dest_loc_cd#,	#fnl_dest_loc_nm# 
				   ,#pck_qty#,		#pck_ut_cd#,	#grs_wgt_kg#,		#grs_wgt_lbs#,		#meas_cbm#,			#meas_cft# 
				   ,#mode#,			#tt#,			#carr_nm#,			#qttn_dt#,			#opr_usr_id#,		#vty_dt# 
				   ,#state_cd#,		#state_nm#,		#state_cnt_cd#,		#curr_cd#,			#bkg_no#,			#cust_ref_no# 
				   ,#rmk#,			#rmk2#,			#free_form_chk#,	#free_form_txt#,	#rate_qttn_txt#,	'N' 
				   ,#proc_usrid#,	#proc_ofccd#,	getdate(),			#proc_usrid#,		#proc_ofccd#,		GETUTCDATE()
				   ,#inco_cd#,		#eq_type#,		#eq_type_cd#,		#chg_wgt_kg#,		#chg_wgt_lbs#,		#cust_addr#
				   ,#size_ut_cd#
     	)
     </insert>
     
     <update id="updateQTTN_INFO" parameterClass="QttnInfoVO">
    	/* BlCmmSQL.xml > updateQTTN_INFO */
        UPDATE tb_qttn
		   SET qttn_seq 		= #qttn_seq#
		      ,qttn_no 			= #qttn_no#
		      ,cust_cd 			= #cust_cd#
		      ,cust_nm 			= #cust_nm#
		      ,cust_pic_nm		= #cust_pic_nm#
		      ,agn_cd 			= #agn_cd#
		      ,agn_nm 			= #agn_nm#
		      ,cmdt_cd 			= #cmdt_cd#
		      ,cmdt_nm 			= #cmdt_nm#
		      ,por_cd 			= #por_cd#
		      ,por_nm 			= #por_nm#
		      ,del_cd 			= #del_cd#
		      ,del_nm 			= #del_nm#
		      ,pol_cd 			= #pol_cd#
		      ,pol_nm 			= #pol_nm#
		      ,pod_cd 			= #pod_cd#
		      ,pod_nm 			= #pod_nm#
		      ,fnl_dest_loc_cd 	= #fnl_dest_loc_cd#
		      ,fnl_dest_loc_nm 	= #fnl_dest_loc_nm#
		      ,pck_qty 			= #pck_qty#
		      ,pck_ut_cd 		= #pck_ut_cd#
		      ,grs_wgt_kg 		= #grs_wgt_kg#
		      ,grs_wgt_lbs 		= #grs_wgt_lbs#
		      ,chg_wgt_kg 		= #chg_wgt_kg#
		      ,chg_wgt_lbs 		= #chg_wgt_lbs#
		      ,meas_cbm 		= #meas_cbm#
		      ,meas_cft 		= #meas_cft#
		      ,mode 			= #mode#
		      ,tt 				= #tt#
		      ,carr_nm 			= #carr_nm#
		      ,qttn_dt 			= #qttn_dt#
		      ,opr_usr_id 		= #opr_usr_id#
		      ,inco_cd 			= #inco_cd#
		      ,vty_dt 			= #vty_dt#
		      ,state_cd 		= #state_cd#
		      ,state_nm 		= #state_nm#
		      ,state_cnt_cd 	= #state_cnt_cd#
		      ,curr_cd 			= #curr_cd#
		      ,bkg_no 			= #bkg_no#
		      ,cust_ref_no 		= #cust_ref_no#
		      ,rmk 				= #rmk#
		      ,rmk2 			= #rmk2#
		      ,free_form_chk 	= #free_form_chk#
		      ,free_form_txt	= #free_form_txt#
		      ,rate_qttn_txt 	= #rate_qttn_txt#
		      ,eq_type			= #eq_type#
		      ,eq_type_cd		= #eq_type_cd#
		      ,cust_addr		= #cust_addr#
		      ,size_ut_cd       = #size_ut_cd#
		      ,modi_usrid 		= #proc_usrid#
		      ,modi_ofc_cd 		= #proc_ofccd#
		      ,modi_tms 		= GETUTCDATE()
		 WHERE air_sea_clss_cd 	= #air_sea_clss_cd#
		   AND bnd_clss_cd 		= #bnd_clss_cd#
		   AND qttn_seq 		= #qttn_seq#
    </update> 
    
    <update id="deleteQTTN_INFO" parameterClass="QttnInfoVO">
    	/* BlCmmSQL.xml > deleteQTTN_INFO */
        UPDATE tb_qttn
		   SET delt_flg 		= 'Y'
		      ,modi_usrid 		= #proc_usrid#
		      ,modi_ofc_cd 		= #proc_ofccd#
		      ,modi_tms 		= GETUTCDATE()
		 WHERE qttn_seq 		= #qttn_seq#
    </update> 
    
    <!-- Purchase Order Item 등록   -->
	<insert id="insertQTTN_CHG_LIST" parameterClass="QttnChgInfoVO">
		/* BlCmmSQL.xml > insertQTTN_CHG_LIST */
		INSERT INTO tb_qttn_chg (
			 qttn_seq
			,chg_desc
			,unit
			,qty
			,chg_unit_amt
			,chg_ttl_amt
			,delt_flg
			,rgst_usrid
			,rgst_ofc_cd
			,rgst_tms
			,modi_usrid
			,modi_ofc_cd
			,modi_tms
		) VALUES (
			 #qttn_seq#
			,#chg_desc#
			,#unit#
			,#qty#
			,#chg_unit_amt#
			,#chg_ttl_amt#
			,'N'
			,#proc_usrid#
			,#proc_ofccd#
			,getdate()
			,#proc_usrid#
			,#proc_ofccd#
			,GETUTCDATE()
		)
	</insert>
	
	<!-- Purchase Order Item 수정   -->
	<update id="updateQTTN_CHG_LIST" parameterClass="QttnChgInfoVO">
		/* BlCmmSQL.xml > updateQTTN_CHG_LIST */
		UPDATE   tb_qttn_chg
		   SET   chg_desc		= #chg_desc#
				,unit			= #unit#
				,qty			= #qty#
				,chg_unit_amt	= #chg_unit_amt#
				,chg_ttl_amt	= #chg_ttl_amt#
				,modi_usrid		= #proc_usrid#
				,modi_ofc_cd	= #proc_ofccd#
				,modi_tms		= GETUTCDATE()
		 WHERE   qttn_seq  		= #qttn_seq#
		   AND   qttn_chg_seq 	= #qttn_chg_seq#
	</update>
	
	<!-- Purchase Order Item 삭제   -->
	<update id="deleteQTTN_CHG_LIST" parameterClass="QttnChgInfoVO">
		/* BlCmmSQL.xml > deleteQTTN_CHG_LIST */
		UPDATE   tb_qttn_chg
		   SET   delt_flg		= 'Y'
				,modi_usrid		= #proc_usrid#
				,modi_ofc_cd	= #proc_ofccd#
				,modi_tms		= GETUTCDATE()
		 WHERE   qttn_seq  		= #qttn_seq#
		   AND   qttn_chg_seq 	= #qttn_chg_seq#
	</update>
	
	<!-- Purchase Order Item All 삭제   -->
	<update id="deleteQTTN_CHG_LIST_ALL" parameterClass="QttnInfoVO">
		/* BlCmmSQL.xml > deleteQTTN_CHG_LIST_ALL */
		UPDATE   tb_qttn_chg
		   SET   delt_flg		= 'Y'
				,modi_usrid		= #proc_usrid#
				,modi_ofc_cd	= #proc_ofccd#
				,modi_tms		= GETUTCDATE()
		 WHERE   qttn_seq  		= #qttn_seq#
	</update>
	
	<!-- Purchase Order Item 등록   -->
	<insert id="insertQTTN_OTH_CHG_LIST" parameterClass="QttnOthChgInfoVO">
		/* BlCmmSQL.xml > insertQTTN_OTH_CHG_LIST */
		INSERT INTO tb_qttn_oth_chg (
			 qttn_seq
			,oth_chg_desc
			,oth_chg_amt
			,delt_flg
			,rgst_usrid
			,rgst_ofc_cd
			,rgst_tms
			,modi_usrid
			,modi_ofc_cd
			,modi_tms
		) VALUES (
			 #qttn_seq#
			,#oth_chg_desc#
			,#oth_chg_amt#
			,'N'
			,#proc_usrid#
			,#proc_ofccd#
			,getdate()
			,#proc_usrid#
			,#proc_ofccd#
			,GETUTCDATE()
		)
	</insert>
	
	<!-- Purchase Order Item 수정   -->
	<update id="updateQTTN_OTH_CHG_LIST" parameterClass="QttnOthChgInfoVO">
		/* BlCmmSQL.xml > updateQTTN_OTH_CHG_LIST */
		UPDATE   tb_qttn_oth_chg
		   SET   oth_chg_desc		= #oth_chg_desc#
				,oth_chg_amt		= #oth_chg_amt#
				,modi_usrid			= #proc_usrid#
				,modi_ofc_cd		= #proc_ofccd#
				,modi_tms			= GETUTCDATE()
		 WHERE   qttn_seq  			= #qttn_seq#
		   AND   qttn_oth_chg_seq 	= #qttn_oth_chg_seq#
	</update>
	
	<!-- Purchase Order Item 삭제   -->
	<update id="deleteQTTN_OTH_CHG_LIST" parameterClass="QttnOthChgInfoVO">
		/* BlCmmSQL.xml > deleteQTTN_OTH_CHG_LIST */
		UPDATE   tb_qttn_oth_chg
		   SET   delt_flg			= 'Y'
				,modi_usrid			= #proc_usrid#
				,modi_ofc_cd		= #proc_ofccd#
				,modi_tms			= GETUTCDATE()
		 WHERE   qttn_seq  			= #qttn_seq#
		   AND   qttn_oth_chg_seq 	= #qttn_oth_chg_seq#
	</update>
	
	<!-- Purchase Order Item All 삭제   -->
	<update id="deleteQTTN_OTH_CHG_LIST_ALL" parameterClass="QttnInfoVO">
		/* BlCmmSQL.xml > deleteQTTN_OTH_CHG_LIST_ALL */
		UPDATE   tb_qttn_oth_chg
		   SET   delt_flg			= 'Y'
				,modi_usrid			= #proc_usrid#
				,modi_ofc_cd		= #proc_ofccd#
				,modi_tms			= GETUTCDATE()
		 WHERE   qttn_seq  			= #qttn_seq#
	</update>
	
	<!-- Quotation List select    -->
    <select id="selectQTTN_LIST" parameterClass="java.util.HashMap" resultClass="QttnInfoVO">
		/* BlCmmSQL.xml > selectQTTN_LIST */
   		SELECT a1.*
		  FROM (
		  	SELECT  ROW_NUMBER() OVER (ORDER BY  QTTN_DT DESC, MODI_TMS DESC) as ROWNUM,
         		    QTTN_SEQ,		QTTN_NO,		AIR_SEA_CLSS_CD,	BND_CLSS_CD, 
				    CUST_CD,		CUST_NM,		CUST_PIC_NM, 
				    AGN_CD,			AGN_NM,			CMDT_CD,			CMDT_NM, 
				    POR_CD,			POR_NM,			DEL_CD,				DEL_NM, 
				    POL_CD,			POL_NM,			POD_CD,				POD_NM,			FNL_DEST_LOC_CD,	FNL_DEST_LOC_NM, 
				    PCK_QTY,		PCK_UT_CD,		GRS_WGT_KG,			GRS_WGT_LBS,	MEAS_CBM,			MEAS_CFT, 
				    MODE,			TT,				CARR_NM,			QTTN_DT,		OPR_USR_ID,			VTY_DT, 
				    STATE_CD,		STATE_NM,		STATE_CNT_CD,		CURR_CD,		BKG_NO,				CUST_REF_NO, 
				    RMK,			RMK2,			FREE_FORM_CHK,		FREE_FORM_TXT,	RATE_QTTN_TXT,		DELT_FLG, 
				    RGST_USRID,		RGST_OFC_CD,	RGST_TMS,			MODI_USRID,		MODI_OFC_CD,		MODI_TMS,
				    INCO_CD,		CUST_ADDR
			  FROM  TB_QTTN
			 WHERE  DELT_FLG = 'N'
			   AND  AIR_SEA_CLSS_CD = #air_sea_clss_cd#
			   AND  BND_CLSS_CD = #bnd_clss_cd#
			<isNotEmpty property="f_qttn_no">
				AND  QTTN_NO LIKE  #f_qttn_no# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_qttn_strdt">
			   AND  QTTN_DT BETWEEN #f_qttn_strdt# AND #f_qttn_enddt#
			</isNotEmpty>
			<isNotEmpty property="f_opr_usr_id">
				AND  OPR_USR_ID LIKE  #f_opr_usr_id# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_cust_cd">
			   AND  CUST_CD = #f_cust_cd#
			</isNotEmpty>
			<isNotEmpty property="f_cust_nm">
			   AND  CUST_NM LIKE  #f_cust_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_por_cd">
			   AND  POR_CD = #f_por_cd#
			</isNotEmpty>
			<isNotEmpty property="f_por_nm">
			   AND  POR_NM LIKE  #f_por_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_pol_cd">
			   AND  POL_CD = #f_pol_cd#
			</isNotEmpty>
			<isNotEmpty property="f_pol_nm">
			   AND  POL_NM LIKE  #f_pol_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_pod_cd">
			   AND  POD_CD = #f_pod_cd#
			</isNotEmpty>
			<isNotEmpty property="f_pod_nm">
			   AND  POD_NM LIKE  #f_pod_nm# + '%'
			</isNotEmpty>
			 ) a1
			<![CDATA[ where a1.ROWNUM > #beginIdx# AND a1.ROWNUM <= #topCnt#	]]>
    </select>
    
    <!--  Quotation List select count    -->
    <select id="selectQTTN_LIST_CNT" parameterClass="java.util.HashMap" resultClass="Integer">
            SELECT  COUNT(QTTN_SEQ)    
          	  FROM  TB_QTTN
			 WHERE  DELT_FLG = 'N'
			   AND  AIR_SEA_CLSS_CD = #air_sea_clss_cd#
			   AND  BND_CLSS_CD = #bnd_clss_cd#
			<isNotEmpty property="f_qttn_no">
				AND  QTTN_NO LIKE  #f_qttn_no# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_qttn_strdt">
			   AND  QTTN_DT BETWEEN #f_qttn_strdt# AND #f_qttn_enddt#
			</isNotEmpty>
			<isNotEmpty property="f_opr_usr_id">
				AND  OPR_USR_ID LIKE  #f_opr_usr_id# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_cust_cd">
			   AND  CUST_CD = #f_cust_cd#
			</isNotEmpty>
			<isNotEmpty property="f_cust_nm">
			   AND  CUST_NM LIKE  #f_cust_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_por_cd">
			   AND  POR_CD = #f_por_cd#
			</isNotEmpty>
			<isNotEmpty property="f_por_nm">
			   AND  POR_NM LIKE  #f_por_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_pol_cd">
			   AND  POL_CD = #f_pol_cd#
			</isNotEmpty>
			<isNotEmpty property="f_pol_nm">
			   AND  POL_NM LIKE  #f_pol_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_pod_cd">
			   AND  POD_CD = #f_pod_cd#
			</isNotEmpty>
			<isNotEmpty property="f_pod_nm">
			   AND  POD_NM LIKE  #f_pod_nm# + '%'
			</isNotEmpty>
	</select>
	 
	
	<update id="updateBlFrtChkStatus" parameterClass="HashMap">
    /* BlCmmSQL.xml > updateBlFrtChkStatus */ 
    
		UPDATE TB_ADD_INFO_BND SET  FRT_CHK =  (CASE WHEN (SELECT
				                COUNT(1) 
				            FROM
				                TB_FRT FRT                            
				            WHERE
				                FRT.INTG_BL_SEQ      = cast(#intg_bl_seq# as varchar) 	                  
				                AND FRT.INV_STS_CD  = 'FI'                      
				                AND FRT.DELT_FLG = 'N'                    ) 	<![CDATA[ > ]]> 0 THEN 'O'
				                ELSE 'X' END) 
				,MODI_TMS			= GETUTCDATE() 
		WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)		 	
    </update>
    
    
    
    
    
    
    <!--  ************************************************************** CO-LOAD B/L ******************************************************************************************  -->
    
    <!--CO-LOAD BL정보 조회  -->
    <select id="selectXTRA_BL" parameterClass="HashMap" resultClass="HBLInfoVO">
    	/* BlCmmSQL.xml > selectXTRA_BL */
        SELECT
	        bl.intg_bl_seq,
	        bkg.bkg_no,
	        bl.bl_no, /* co-load BL NO */
	        bl.hbl_tp_cd,
	        ISNULL(BLCK.BL_STS_CD1,
	        BL.BL_STS_CD) AS BL_STS_CD,
	        bkg.bkg_seq,        
	        mbl.bl_no AS mbl_no,
	        bl.biz_clss_cd,
	        bl.air_sea_clss_cd,
	        bl.shp_tp_cd,
	        bl.shp_mod_cd,
	        bl.inco_cd, 
	        bl.bl_iss_dt,
	        bl.frt_term_cd,
	        bl.rep_cmdt_cd,
	        bl.rep_cmdt_nm,
	        bl.pck_qty,
	        bl.pck_ut_cd,
	        pcd.pck_nm AS pck_ut_nm,
	        bl.grs_wgt,
	        bl.grs_wgt_ut_cd,
	        bl.act_wgt,
	        bl.act_wgt_ut_cd,
	        bl.meas,
	        bl.meas_ut_cd,
	        bl.fm_svc_term_cd,
	        bl.to_svc_term_cd, 
	        bl.por_cd,
	        '' AS por_nod_cd,
	        bl.por_nm,
	        bl.pol_cd,
	        bl.pol_nm,
	        bl.pod_cd,
	        bl.pod_nm,
	        bl.del_cd,
	        '' AS del_nod_cd,
	        bl.del_nm,
	        bl.iss_loc_cd,
	        bl.iss_loc_nm,
	        bl.pay_loc_cd,
	        bl.pay_loc_nm,
	        bl.fnl_dest_loc_cd,
	        '' AS fnl_dest_nod_cd,
	        bl.fnl_dest_loc_nm,
	        bl.cgo_rcv_dt_tm,
	        bl.cfs_loc_cd,
	        bl.cfs_nod_cd,
	        bl.trnk_vsl_cd,
	        bl.trnk_vsl_nm,
	        bl.trnk_voy,
	        bl.cgo_clz_dt_tm,
	        bl.obrd_dt_tm,
	        bl.etd_dt_tm,
	        bl.eta_dt_tm,
	        bl.mk_txt,
	        bl.desc_txt,
	        bl.rmk,
	        bl.say_txt,
	        bl.sad_txt,
	        bl.mm_txt,
	        bl.act_shp_info,
	        ISNULL(bl.org_bl_qty,
	        0)  AS org_bl_qty,
	        bl.dept_cd,
	        bl.modi_tms,
	        bl.issued_by AS issued_by,
	        (select
	            max(eng_usr_nm) 
	        from
	            tb_usr 
	        where
	            usrid = bl.issued_by )  AS proc_usrnm,
	        bl.modi_ofc_cd AS proc_ofccd,
	        bl.dept_cd AS proc_dept_cd,
	        
	        '' AS exp_frt_desc , /* bl.exp_frt_desc, */ 
	        '' AS ts1_port_nm,  /* bl.ts1_port_nm, */
	        '' AS ts1_port_cd, /* bl.ts1_port_cd,*/
	        '' AS ts1_etd_dt_tm, /* bl.ts1_etd_dt_tm,*/
	        '' AS ts1_eta_dt_tm, /* bl.ts1_eta_dt_tm, */
	        bl.shpr_trdp_cd,
	        bl.shpr_trdp_nm,
	        bl.shpr_trdp_addr,
	        bl.cnee_trdp_cd,
	        bl.cnee_trdp_nm,
	        bl.cnee_trdp_addr,
	        bl.ntfy_trdp_cd,
	        bl.ntfy_trdp_nm,
	        bl.ntfy_trdp_addr,        
	        lnr.trdp_cd AS lnr_trdp_cd,
	        lnr.trdp_nm AS lnr_trdp_nm,
	        ptn.trdp_cd AS prnr_trdp_cd,
	        ptn.trdp_nm AS prnr_trdp_nm,
	        ptn.trdp_addr AS prnr_trdp_addr,        
	        carr.trdp_cd AS carr_trdp_cd,
	        carr.trdp_nm AS carr_trdp_nm,
	        carr.trdp_addr AS carr_trdp_addr,
	        '' AS mrn,
	        rlt.rlt_intg_bl_seq,
	        bl.cargo_tp_cd,
	        bl.curr_cd,
	        bl.mrn_no,
	        bl.post_dt,     
	        bl.grs_wgt1,
	        bl.act_wgt1,
	        bl.meas1,
	        bl.express_tp_cd,
	        bl.iss_loc_cd1,
	        bl.iss_loc_nm1,
	        bl.clean_on_board,
	        bl.frt_term_c_cd,
	        bl.frt_term_a_cd,
	        bl.obrd_dt_tm1,
	        bl.exp_ref_no,
	        bl.rcv_wh_cd,       
	        bl.mk_grs_wgt,
	        bl.mk_grs_wgt1,
	        bl.mk_meas,
	        bl.mk_meas1,
	        bl.f_eta_dt_tm,
	        bl.d_eta_dt_tm, 
	        bl.ams_no,
	        bl.isf_no,
	        bl.imp_ref_no,
	        bl.cust_ref_no,
	        bl.svc_scope,
	        bl.att_mk_txt,
	        bl.att_desc_txt,
	        bl.desc_txt1,
	        bl.wgt_disp_cd,
	        '' AS reserve_field07,
	        '' AS reserve_field08,
	        '' AS reserve_field09,
	        '' AS reserve_field10,
	        '' AS reserve_field12,
	        (CASE 
	            WHEN bl.biz_clss_cd =  'H' THEN mbl.curr_cd 
	            ELSE bl.curr_cd 
	        END) as mbl_curr_cd,
	        bl.cntr_info      ,
	        bl.etd_por_tm     ,  
	        bl.nomi_flg     ,  
	        (SELECT BL_NO FROM TB_INTG_BL WHERE INTG_BL_SEQ = bl.INTG_BL_SEQ) AS hbl_no  /* HOUSE B/L NO*/        
                     
    FROM
        TB_XTRA_BL bl                     
                     
    LEFT OUTER JOIN
        TB_PCK_UT_CD PCD                        
            ON   BL.PCK_UT_CD   = PCD.PCK_UT_CD    
            AND PCD.DELT_FLG = 'N'  
    LEFT OUTER JOIN
        TB_BL_PRNR LNR                
            ON   BL.INTG_BL_SEQ = LNR.INTG_BL_SEQ  
            AND LNR.BL_TRDP_TP_CD = 'L01' 
            AND LNR.DELT_FLG = 'N'          
    LEFT OUTER JOIN
        TB_BL_PRNR PTN                
            ON   BL.INTG_BL_SEQ = PTN.INTG_BL_SEQ  
            AND PTN.BL_TRDP_TP_CD = 'P01' 
            AND PTN.DELT_FLG = 'N' 
    LEFT OUTER JOIN
        TB_BL_PRNR CARR                
            ON   BL.INTG_BL_SEQ = CARR.INTG_BL_SEQ  
            AND CARR.BL_TRDP_TP_CD = 'B01' 
            AND CARR.DELT_FLG = 'N'
    LEFT OUTER JOIN
        TB_INTG_BL_RLT RLT                 
            ON  BL.INTG_BL_SEQ = RLT.INTG_BL_SEQ 
            AND RLT.DELT_FLG = 'N'                  
    LEFT OUTER JOIN
        TB_INTG_BL MBL                 
            ON  RLT.RLT_INTG_BL_SEQ = MBL.INTG_BL_SEQ 
            AND MBL.BIZ_CLSS_CD = 'M' 
            AND MBL.DELT_FLG = 'N'  
    LEFT OUTER JOIN
        TB_ADD_INFO_BND BND                 
            ON  BND.INTG_BL_SEQ = BL.INTG_BL_SEQ 
            AND BND.DELT_FLG = 'N'                      
    LEFT OUTER JOIN
        TB_BKG BKG                 
            ON  BKG.BKG_SEQ = BND.INTG_BKG_SEQ 
            AND BKG.DELT_FLG = 'N'          
    LEFT OUTER JOIN
        (
            SELECT
                INTG_BL_SEQ AS INTG_BL_SEQ1,
                BL_STS_CD AS BL_STS_CD1 
            FROM
                TB_INTG_BL_BLCK
        ) BLCK         
            ON BL.INTG_BL_SEQ = BLCK.INTG_BL_SEQ1                  
    WHERE
        BL.DELT_FLG = 'N' 
        AND BL.BIZ_CLSS_CD =  #biz_clss_cd#
        AND BL.AIR_SEA_CLSS_CD =  #air_sea_clss_cd#
        
        <dynamic>
            <isNotEmpty property="f_intg_bl_seq">
                             
            </isNotEmpty>           
            <isNotEmpty property="f_xtra_bl_seq">
                AND bl.XTRA_BL_SEQ = #f_xtra_bl_seq#                
            </isNotEmpty>                       
            <isNotEmpty property="f_bl_no">
                AND BL.INTG_BL_SEQ  = (SELECT INTG_BL_SEQ FROM TB_INTG_BL WHERE BL_NO = #f_bl_no#
                AND BIZ_CLSS_CD  =  'H' 
                AND AIR_SEA_CLSS_CD =  'S'
                AND DELT_FLG = 'N' 
                )  /* hbl_no */
            </isNotEmpty>
        </dynamic>
    </select>
    
    
    <!-- co-load Container 목록 조회  -->
    <select id="selectXtraCNTR_LIST" parameterClass="HashMap" resultClass="CntrLstVO">
        /* BlCmmSQL.xml > selectXtraCNTR_LIST */
        SELECT  lst.intg_bl_seq,        lst.cntr_list_seq,       lst.rgst_cntr_yn,
                lst.cntr_no,            lst.cntr_tpsz_cd,
                lst.cgo_pck_qty,        lst.cgo_pck_ut,          lst.cgo_wgt,           lst.cgo_meas,         lst.vol_meas,
                lst.soc_flg,            lst.dg_gds_flg,          lst.cntr_rmk,
                lst.seal_no1,           lst.seal_no2,            lst.seal_no3, 
                lst.cntr_sprl_trdp_cd,  prn.eng_nm AS cntr_sprl_trdp_nm,
                lst.cgo_wgt1, lst.cgo_meas1
                , lst.pickup_number, CONVERT(VARCHAR, ISNULL(lst.lfd, ''), 120) AS lfd ,CONVERT(VARCHAR, ISNULL(lst.cntr_go_date, ''), 120) AS cntr_go_date
                , lst.temp_cd, lst.vent_cd ,lst.temp_val 
                , '' AS emty_rt_dt /* lst.emty_rt_dt */
          FROM  TB_XTRA_BL_CNTR_LIST lst
		  LEFT OUTER JOIN tb_trdp prn
            ON  lst.cntr_sprl_trdp_cd = prn.trdp_cd  
           AND prn.delt_flg = 'N'        
         WHERE  1=1 
           AND lst.intg_bl_seq = cast(#intg_bl_seq# as varchar)
                AND lst.XTRA_BL_SEQ = #f_xtra_bl_seq#    
           AND lst.delt_flg = 'N'
      ORDER BY  lst.cntr_list_seq ASC
    </select>
    
    <!-- co-load 수출신고 번호 조회   E/D Inform -->
    <select id="selectXtraEDI_INFO" parameterClass="HashMap" resultClass="com.clt.apps.fis.see.bmd.housebl.dto.EdiXptInfoVO">
        /* BlCmmSQL.xml > selectXtraEDI_INFO */
        SELECT xpt.intg_bl_seq,   xpt.edi_xpt_seq,    xpt.mbl_no,           xpt.xpt_no,     xpt.edi_snd_sts_cd,
               xpt.edi_grs_wt,    xpt.sprt_flg,       xpt.sprt_seq,         cdt.cd_nm AS edi_snd_sts_nm,
               xpt.sam_pck_tp,    xpt.sam_pck_qty,    xpt.sam_pck_ut_cd,
               xpt.pck_qty AS edi_pck_qty,            
               xpt.pck_ut_cd AS edi_pck_ut_cd,        utc.pck_nm AS edi_pck_ut_nm
         FROM  TB_XTRA_BL_XPT_LIC xpt
        
		LEFT OUTER JOIN tb_pck_ut_cd  utc
		           ON  xpt.pck_ut_cd = utc.pck_ut_cd AND utc.delt_flg = 'N'
		        
		LEFT OUTER JOIN tb_com_cd_dtl cdt
		           ON  xpt.edi_snd_sts_cd = cdt.cd_val AND cdt.com_cd = 'C061'
		        
		        WHERE  xpt.intg_bl_seq = cast(#intg_bl_seq# as varchar)  
                AND xpt.XTRA_BL_SEQ = #f_xtra_bl_seq#     
		        AND  xpt.delt_flg    = 'N'
     ORDER BY  xpt.edi_xpt_seq ASC
    </select>
    
    
    <!-- 단계(상태) 변경. Status를 변경함  -->
    <update id="updateXtra_BL_STS" parameterClass="HashMap">
        UPDATE  TB_XTRA_BL
           SET  bl_sts_cd  = #bl_sts_cd#,    modi_tms    = GETUTCDATE()
         WHERE  intg_bl_seq= cast(#intg_bl_seq# as varchar)
    </update>

	<!--  등록  -->
    <insert id="insertXtra_BL" parameterClass="HBLInfoVO">
	    /** BlCmmSQL.xml > insertXtra_BL **/
	    INSERT INTO TB_XTRA_BL
         (
	    	INTG_BL_SEQ
           ,XTRA_BL_SEQ
           ,BIZ_CLSS_CD
           ,BND_CLSS_CD
           ,BL_NO
           ,FRT_TERM_CD
           ,REP_CMDT_CD
           ,REP_CMDT_NM
           ,PCK_UT_CD
           ,PCK_QTY
           ,GRS_WGT_UT_CD
           ,GRS_WGT
           ,MEAS_UT_CD
           ,MEAS
           ,POR_CD
           ,POR_NM
           ,POL_CD
           ,POL_NM
           ,POD_CD
           ,POD_NM
           ,DEL_CD
           ,DEL_NM
           ,ISS_LOC_CD
           ,PAY_LOC_CD
           ,OBRD_DT_TM 
           ,CURR_CD
           ,ETD_DT_TM
           ,ETA_DT_TM
           ,SHP_MOD_CD
           ,FM_SVC_TERM_CD
           ,TO_SVC_TERM_CD
           ,TRNK_VSL_CD
           ,TRNK_VOY
           ,FLT_NO
           ,CGO_CLZ_DT_TM
           ,CARGO_TP_CD 
           ,CHG_WGT_UT_CD
           ,CHG_WGT
           ,FNL_DEST_LOC_CD
           ,FNL_DEST_LOC_NM  
           ,HBL_TP_CD
           ,INCO_CD
           ,MK_TXT
           ,DESC_TXT
           ,AIR_SEA_CLSS_CD
           ,ACT_WGT_UT_CD
           ,ACT_WGT
           ,CGO_RCV_DT_TM
           ,CFS_LOC_CD
           ,CFS_NOD_CD
           ,ORG_BL_QTY 
           ,SAD_TXT
           ,SAY_TXT 
           ,BL_ISS_DT
           ,RMK
           ,RGST_USRID
           ,RGST_OFC_CD
           ,RGST_TMS
           ,MODI_USRID
           ,MODI_OFC_CD
           ,MODI_TMS
           ,DELT_FLG
           ,BL_STS_CD
           ,DEPT_CD 
           ,MM_TXT
           ,SHP_TP_CD
           ,TRNK_VSL_NM
           ,MODI_USR_NM
           ,ACT_SHP_INFO
           ,ISS_LOC_NM
           ,PAY_LOC_NM
           ,MRN_NO
           ,POST_DT
           ,GRS_WGT1
           ,ACT_WGT1
           ,MEAS1
           ,EXPRESS_TP_CD
           ,ISS_LOC_CD1
           ,ISS_LOC_NM1
           ,CLEAN_ON_BOARD
           ,FRT_TERM_C_CD
           ,FRT_TERM_A_CD
           ,OBRD_DT_TM1
           ,EXP_REF_NO
           ,RCV_WH_CD
           ,MK_GRS_WGT
           ,MK_GRS_WGT1
           ,MK_MEAS
           ,MK_MEAS1
           ,F_ETA_DT_TM
           ,D_ETA_DT_TM
           ,AMS_NO
           ,ISF_NO
           ,IMP_REF_NO
           ,CUST_REF_NO
           ,CHG_WGT1
           ,BL_DT_TM
           ,WGT_DISP_CD
           ,VOL_WGT
           ,VOL_MEAS
           ,SVC_SCOPE
           ,ATT_MK_TXT
           ,ATT_DESC_TXT 
           ,DESC_TXT1
           ,CNTR_INFO
           ,ETD_POR_TM
           ,SHPR_TRDP_CD
           ,SHPR_TRDP_NM
           ,SHPR_TRDP_ADDR
           ,CNEE_TRDP_CD
           ,CNEE_TRDP_NM
           ,CNEE_TRDP_ADDR
           ,NTFY_TRDP_CD
           ,NTFY_TRDP_NM
           ,NTFY_TRDP_ADDR
           ,ISSUED_BY
           ,NOMI_FLG
	   )
     VALUES
           (
	    	#intg_bl_seq#
           ,#xtra_bl_seq#
           ,#biz_clss_cd#
           ,#bnd_clss_cd#
           ,#bl_no#
           ,#frt_term_cd#
           ,#rep_cmdt_cd#
           ,#rep_cmdt_nm#
           ,#pck_ut_cd#
           ,#pck_qty#
           ,#grs_wgt_ut_cd#
           ,#grs_wgt#
           ,#meas_ut_cd#
           ,#meas#
           ,#por_cd#
           ,#por_nm#
           ,#pol_cd#
           ,#pol_nm#
           ,#pod_cd#
           ,#pod_nm#
           ,#del_cd#
           ,#del_nm#
           ,#iss_loc_cd#
           ,#pay_loc_cd#
           ,#obrd_dt_tm# 
           ,#curr_cd#
           ,#etd_dt_tm#
           ,#eta_dt_tm#
           ,#shp_mod_cd#
           ,#fm_svc_term_cd#
           ,#to_svc_term_cd#
           ,#trnk_vsl_cd#
           ,#trnk_voy#
           ,#flt_no#
           ,#cgo_clz_dt_tm#
           ,#cargo_tp_cd# 
           ,#chg_wgt_ut_cd#
           ,#chg_wgt#
           ,#fnl_dest_loc_cd#
           ,#fnl_dest_loc_nm#  
           ,#hbl_tp_cd#
           ,#inco_cd#
           ,#mk_txt#
           ,#desc_txt#
           ,#air_sea_clss_cd#
           ,#act_wgt_ut_cd#
           ,#act_wgt#
           ,#cgo_rcv_dt_tm#
           ,#cfs_loc_cd#
           ,#cfs_nod_cd#
           ,#org_bl_qty# 
           ,#sad_txt#
           ,#say_txt# 
           ,#bl_iss_dt#
           ,#rmk#
           ,#proc_usrid#
           ,#proc_ofccd#
           ,GETDATE()
           ,#proc_usrid#
           ,#proc_ofccd#
           ,GETUTCDATE()
           ,'N'
           ,#bl_sts_cd#
           ,#proc_dept_cd# 
           ,#mm_txt#
           ,#shp_tp_cd#
           ,#trnk_vsl_nm#
           ,#proc_usrnm#
           ,#act_shp_info#
           ,#iss_loc_nm#
           ,#pay_loc_nm#
           ,#mrn_no#
           ,#post_dt#
           ,#grs_wgt1#
           ,#act_wgt1#
           ,#meas1#
           ,#express_tp_cd#
           ,#iss_loc_cd1#
           ,#iss_loc_nm1#
           ,#clean_on_board#
           ,#frt_term_c_cd#
           ,#frt_term_a_cd#
           ,#obrd_dt_tm1#
           ,#exp_ref_no#
           ,#rcv_wh_cd#
           ,#mk_grs_wgt#
           ,#mk_grs_wgt1#
           ,#mk_meas#
           ,#mk_meas1#
           ,#f_eta_dt_tm#
           ,#d_eta_dt_tm#
           ,#ams_no#
           ,#isf_no#
           ,#imp_ref_no#
           ,#cust_ref_no#
           ,#chg_wgt1#
           ,#bl_dt_tm#
           ,#wgt_disp_cd#
           ,#vol_wgt#
           ,#vol_meas#
           ,#svc_scope#
           ,#att_mk_txt#
           ,#att_desc_txt# 
           ,#desc_txt1#
           ,#cntr_info#
           ,#etd_por_tm#
           ,#shpr_trdp_cd#
           ,#shpr_trdp_nm#
           ,#shpr_trdp_addr#
           ,#cnee_trdp_cd#
           ,#cnee_trdp_nm#
           ,#cnee_trdp_addr#
           ,#ntfy_trdp_cd#
           ,#ntfy_trdp_nm#
           ,#ntfy_trdp_addr#
           ,#issued_by#
           ,#nomi_flg#
	   )	    
	</insert>
    
    <!-- CO Load Entry 등록여부 로 콤보를 만든다  -->
        <select id="searchTbXtraBlInfo" parameterClass="HashMap" resultClass="String">
            /** BlCmmSQL.xml > searchTbXtraBlInfo **/
		SELECT 
				 STUFF((
					select CONVERT(VARCHAR, XTRA_BL_SEQ)+'@'+CONVERT(VARCHAR, BL_NO)+'^' from TB_XTRA_BL WHERE INTG_BL_SEQ IN (SELECT INTG_BL_SEQ FROM TB_INTG_BL WHERE BL_NO = #bl_no# )
					and DELT_FLG = 'N' 
					 FOR XML PATH('')), 1 ,0, '') AS XTRA_BL_SEQ
    </select>
    <!-- CO Load Entry 등록여부 중복 검사 -->
        <select id="searchTbXtraBlDupInfo" parameterClass="HashMap" resultClass="String">
            /** BlCmmSQL.xml > searchTbXtraBlDupInfo **/
		 
					 SELECT COUNT(1) AS CNT
					 FROM TB_XTRA_BL WHERE BL_NO = #bl_no#
					 AND DELT_FLG = 'N'
    </select>
    
    
	<!-- PK생성   -->
    <select id="selectBL_XTRA_BL_SEQ_PK" parameterClass="String" resultClass="Integer">
       /** BlCmmSQL.xml > selectBL_XTRA_BL_SEQ_PK **/
        SELECT ISNULL(MAX(XTRA_BL_SEQ),0)+1
          FROM TB_XTRA_BL
		 WHERE intg_bl_seq = #value#
    </select>
	<!-- PK생성   -->
    <select id="selectBL_XTRA_CNTR_LIST_SEQ_PK" parameterClass="String" resultClass="Integer">
      /** BlCmmSQL.xml > selectBL_XTRA_CNTR_LIST_SEQ_PK **/
        SELECT ISNULL(MAX(CNTR_LIST_SEQ),0)+1
          FROM TB_XTRA_BL_CNTR_LIST 
    </select>
	<!-- PK생성   -->
    <select id="selectEDI_XPT_SEQ_PK" parameterClass="String" resultClass="Integer">
      /** BlCmmSQL.xml > selectEDI_XPT_SEQ_PK **/
        SELECT ISNULL(MAX(EDI_XPT_SEQ),0)+1
          FROM TB_XTRA_BL_XPT_LIC 
    </select>
    
       <insert id="insertXtra_BL_CNTR_LIST" parameterClass="CntrLstVO">
	    /** BlCmmSQL.xml > insertXtra_BL_CNTR_LIST **/
 
          
   INSERT INTO TB_XTRA_BL_CNTR_LIST
         (
	    	CNTR_LIST_SEQ
			,RGST_CNTR_YN
			,CNTR_NO
			,CNTR_TPSZ_CD
			,CGO_PCK_QTY
			,CGO_PCK_UT
			,CGO_WGT
			,CGO_MEAS
			,VOL_MEAS
			,SOC_FLG
			,DG_GDS_FLG
			,CNTR_RMK
			,INTG_BL_SEQ
			,XTRA_BL_SEQ
			,SEAL_NO1
			,SEAL_NO2
			,SEAL_NO3
			,CNTR_SPRL_TRDP_CD
			,RGST_USRID
			,RGST_OFC_CD
			,RGST_TMS
			,MODI_USRID
			,MODI_OFC_CD
			,MODI_TMS
			,DELT_FLG
			,CGO_WGT1
			,CGO_MEAS1
			,PICKUP_NUMBER
			,LFD  
			,CNTR_GO_DATE
			,TEMP_CD
			,VENT_CD
			,TEMP_VAL
			,ORG_PKUP_DT
			,FNL_DEST_ETA_DT
			,APNT_DT
			,DE_DT
			,FREE_DET_DT
			,CFS_IN_DT
			,DEVAN_DT
	   )
     VALUES
           (
	    	#cntr_list_seq#
			,#rgst_cntr_yn#
			,#cntr_no#
			,#cntr_tpsz_cd#
			,#cgo_pck_qty#
			,#cgo_pck_ut#
			,#cgo_wgt#
			,#cgo_meas#
			,#vol_meas#
			,#soc_flg#
			,#dg_gds_flg#
			,#cntr_rmk#
			,#intg_bl_seq#
			,#xtra_bl_seq#
			,#seal_no1#
			,#seal_no2#
			,#seal_no3#
			,#cntr_sprl_trdp_cd#
			,#proc_usrid#
			,#proc_ofccd#
			,GETDATE()
			,#proc_usrid#
			,#proc_ofccd#
			,GETUTCDATE()
			,'N'
			,#cgo_wgt1#
			,#cgo_meas1#
			,#pickup_number#
			,#lfd#  
			,#cntr_go_date#
			,#temp_cd#
			,#vent_cd#
			,#temp_val#
			,#org_pkup_dt#
			,#fnl_dest_eta_dt#
			,#apnt_dt#
			,#de_dt#
			,#free_det_dt#
			,#cfs_in_dt#
			,#devan_dt#
	   )	    
	</insert>
    
    
       <insert id="insertXtra_BL_XPT_LIC" parameterClass="com.clt.apps.fis.see.bmd.housebl.dto.EdiXptInfoVO">
	    /** BlCmmSQL.xml > insertXtra_BL_XPT_LIC **/
	   
          
   INSERT INTO TB_XTRA_BL_XPT_LIC
         (
	    	INTG_BL_SEQ
			,XTRA_BL_SEQ
			,EDI_XPT_SEQ
			,MBL_NO
			,XPT_NO
			,EDI_SND_STS_CD
			,PCK_QTY
			,PCK_UT_CD
			,EDI_GRS_WT
			,SPRT_FLG
			<isNotEmpty property="sprt_seq">
			,SPRT_SEQ
			</isNotEmpty>
			,SAM_PCK_TP
			,SAM_PCK_QTY
			,SAM_PCK_UT_CD
			,RGST_USRID
			,RGST_OFC_CD
			,RGST_TMS
			,MODI_USRID
			,MODI_OFC_CD
			,MODI_TMS
			,DELT_FLG
	   )
     VALUES
           (
	    	#intg_bl_seq#
			,#xtra_bl_seq#
			,#edi_xpt_seq#
			,#mbl_no#
			,#xpt_no#
			,#edi_snd_sts_cd#
			,#edi_pck_qty#
			,#edi_pck_ut_cd#
			,#edi_grs_wt#
			,#sprt_flg#
			<isNotEmpty property="sprt_seq">
			,#sprt_seq#
			</isNotEmpty>
			,#sam_pck_tp#
			,#sam_pck_qty#
			,#sam_pck_ut_cd#
			,#proc_usrid#
			,#proc_ofccd#
			,GETDATE()
			,#proc_usrid#
			,#proc_ofccd#
			,GETUTCDATE()
			,'N'
	   )	    
	</insert>
    
       <update id="updateXtra_BL" parameterClass="HBLInfoVO">
	    /** BlCmmSQL.xml > updateXtra_BL **/
 
	   update TB_XTRA_BL set 	    
	   
		BIZ_CLSS_CD = #biz_clss_cd#
		,BND_CLSS_CD = #bnd_clss_cd#
		,BL_NO = #bl_no#
		,FRT_TERM_CD = #frt_term_cd#
		,REP_CMDT_CD = #rep_cmdt_cd#
		,REP_CMDT_NM = #rep_cmdt_nm#
		,PCK_UT_CD = #pck_ut_cd#
		,PCK_QTY = #pck_qty#
		,GRS_WGT_UT_CD = #grs_wgt_ut_cd#
		,GRS_WGT = #grs_wgt#
		,MEAS_UT_CD = #meas_ut_cd#
		,MEAS = #meas#
		,POR_CD = #por_cd#
		,POR_NM = #por_nm#
		,POL_CD = #pol_cd#
		,POL_NM = #pol_nm#
		,POD_CD = #pod_cd#
		,POD_NM = #pod_nm#
		,DEL_CD = #del_cd#
		,DEL_NM = #del_nm#
		,ISS_LOC_CD = #iss_loc_cd#
		,PAY_LOC_CD = #pay_loc_cd#
		,OBRD_DT_TM = #obrd_dt_tm#  
		,CURR_CD = #curr_cd#
		,ETD_DT_TM = #etd_dt_tm#
		,ETA_DT_TM = #eta_dt_tm#
		,SHP_MOD_CD = #shp_mod_cd#
		,FM_SVC_TERM_CD = #fm_svc_term_cd#
		,TO_SVC_TERM_CD = #to_svc_term_cd#
		,TRNK_VSL_CD = #trnk_vsl_cd#
		,TRNK_VOY = #trnk_voy#
		,FLT_NO = #flt_no#
		,CGO_CLZ_DT_TM = #cgo_clz_dt_tm#
		,CARGO_TP_CD = #cargo_tp_cd# 
		,CHG_WGT_UT_CD = #chg_wgt_ut_cd#
		,CHG_WGT = #chg_wgt#
		,FNL_DEST_LOC_CD = #fnl_dest_loc_cd#
		,FNL_DEST_LOC_NM = #fnl_dest_loc_nm#  
		,HBL_TP_CD = #hbl_tp_cd#
		,INCO_CD = #inco_cd#
		,MK_TXT = #mk_txt#
		,DESC_TXT = #desc_txt#
		,AIR_SEA_CLSS_CD = #air_sea_clss_cd#
		,ACT_WGT_UT_CD = #act_wgt_ut_cd#
		,ACT_WGT = #act_wgt#
		,CGO_RCV_DT_TM = #cgo_rcv_dt_tm#
		,CFS_LOC_CD = #cfs_loc_cd#
		,CFS_NOD_CD = #cfs_nod_cd#
		,ORG_BL_QTY = #org_bl_qty# 
		,SAD_TXT = #sad_txt#
		,SAY_TXT = #say_txt# 
		,BL_ISS_DT = #bl_iss_dt#
		,RMK = #rmk# 
		,MODI_USRID = #proc_usrid#
		,MODI_OFC_CD = #proc_ofccd#
		,MODI_TMS = GETUTCDATE()
		,BL_STS_CD = #bl_sts_cd#
		,DEPT_CD = #proc_dept_cd# 
		,MM_TXT = #mm_txt#
		,SHP_TP_CD = #shp_tp_cd#
		,TRNK_VSL_NM = #trnk_vsl_nm#
		,MODI_USR_NM = #proc_usrnm#
		,ACT_SHP_INFO = #act_shp_info#
		,ISS_LOC_NM = #iss_loc_nm#
		,PAY_LOC_NM = #pay_loc_nm#
		,MRN_NO = #mrn_no#
		,POST_DT = #post_dt#
		,GRS_WGT1 = #grs_wgt1#
		,ACT_WGT1 = #act_wgt1#
		,MEAS1 = #meas1#
		,EXPRESS_TP_CD = #express_tp_cd#
		,ISS_LOC_CD1 = #iss_loc_cd1#
		,ISS_LOC_NM1 = #iss_loc_nm1#
		,CLEAN_ON_BOARD = #clean_on_board#
		,FRT_TERM_C_CD = #frt_term_c_cd#
		,FRT_TERM_A_CD = #frt_term_a_cd#
		,OBRD_DT_TM1 = #obrd_dt_tm1#
		,EXP_REF_NO = #exp_ref_no#
		,RCV_WH_CD = #rcv_wh_cd#
		,MK_GRS_WGT = #mk_grs_wgt#
		,MK_GRS_WGT1 = #mk_grs_wgt1#
		,MK_MEAS = #mk_meas#
		,MK_MEAS1 = #mk_meas1#
		,F_ETA_DT_TM = #f_eta_dt_tm#
		,D_ETA_DT_TM = #d_eta_dt_tm#
		,AMS_NO = #ams_no#
		,ISF_NO = #isf_no#
		,IMP_REF_NO = #imp_ref_no#
		,CUST_REF_NO = #cust_ref_no#
		,CHG_WGT1 = #chg_wgt1#
		,BL_DT_TM = #bl_dt_tm#
		,WGT_DISP_CD = #wgt_disp_cd#
		,VOL_WGT = #vol_wgt#
		,VOL_MEAS = #vol_meas#
		,SVC_SCOPE = #svc_scope#
		,ATT_MK_TXT = #att_mk_txt#
		,ATT_DESC_TXT = #att_desc_txt# 
		,DESC_TXT1 = #desc_txt1#
		,CNTR_INFO = #cntr_info#
		,ETD_POR_TM = #etd_por_tm#
		,SHPR_TRDP_CD = #shpr_trdp_cd#
		,SHPR_TRDP_NM = #shpr_trdp_nm#
		,SHPR_TRDP_ADDR = #shpr_trdp_addr#
		,CNEE_TRDP_CD = #cnee_trdp_cd#
		,CNEE_TRDP_NM = #cnee_trdp_nm#
		,CNEE_TRDP_ADDR = #cnee_trdp_addr#
		,NTFY_TRDP_CD = #ntfy_trdp_cd#
		,NTFY_TRDP_NM = #ntfy_trdp_nm#
		,NTFY_TRDP_ADDR = #ntfy_trdp_addr#
		,ISSUED_BY = #issued_by#
		,NOMI_FLG = #nomi_flg#
		
		where INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
		and XTRA_BL_SEQ = #xtra_bl_seq#
	</update>
    
    
       <delete id="removeXtra_BL_CNTR_LIST" parameterClass="HBLInfoVO">
	    /** BlCmmSQL.xml > removeXtra_BL_CNTR_LIST **/
	    delete from TB_XTRA_BL_CNTR_LIST  where INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
		and XTRA_BL_SEQ = #xtra_bl_seq#
	</delete>
    
       <delete id="removeXtra_BL_XPT_LIC" parameterClass="HBLInfoVO">
	    /** BlCmmSQL.xml > removeXtra_BL_XPT_LIC **/
	    delete from TB_XTRA_BL_XPT_LIC   where INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
		and XTRA_BL_SEQ = #xtra_bl_seq#
	</delete>
	
       <update id="updateDelFlgXtra_BL" parameterClass="HBLInfoVO">
	    /** BlCmmSQL.xml > updateDelFlgXtra_BL **/
	   update TB_XTRA_BL set DELT_FLG = 'Y' 
	   		,MODI_USRID = #proc_usrid#
		,MODI_OFC_CD = #proc_ofccd#
		,MODI_TMS = GETUTCDATE()
	   where INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
		and XTRA_BL_SEQ = #xtra_bl_seq#  
	</update>
	
       <update id="updateDelFlgXtra_BL_CNTR_LIST" parameterClass="HBLInfoVO">
	    /** BlCmmSQL.xml > updateDelFlgXtra_BL_CNTR_LIST **/
	   update TB_XTRA_BL_CNTR_LIST set DELT_FLG = 'Y' 
	   		,MODI_USRID = #proc_usrid#
		,MODI_OFC_CD = #proc_ofccd#
		,MODI_TMS = GETUTCDATE()
	   where INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
		and XTRA_BL_SEQ = #xtra_bl_seq#  
	</update>
    
       <update id="updateDelFlgXtra_BL_XPT_LIC" parameterClass="HBLInfoVO">
	    /** BlCmmSQL.xml > updateDelFlgXtra_BL_XPT_LIC **/
	   update TB_XTRA_BL_XPT_LIC set DELT_FLG = 'Y' 
	   		,MODI_USRID = #proc_usrid#
		,MODI_OFC_CD = #proc_ofccd#
		,MODI_TMS = GETUTCDATE()
	   where INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
		and XTRA_BL_SEQ = #xtra_bl_seq#  
	</update>
	
	
	
	    <select id="select_COBL_LIST" parameterClass="java.util.HashMap" resultClass="HBLInfoVO">
    	/* BlCmmSQL.xml > select_COBL_LIST */
      SELECT a1.*
				  FROM (
		         	SELECT  ROW_NUMBER() OVER (ORDER BY  BL.POST_DT DESC, BL.MODI_TMS DESC) as ROWNUM,
		         	 
	       bl.intg_bl_seq, 
	        bl.bl_no, /* co-load BL NO */ 
	        mbl.bl_no AS mbl_no, 
	        bl.bl_iss_dt,   
	        bl.shpr_trdp_cd,
	        bl.shpr_trdp_nm,
	        bl.shpr_trdp_addr,
	        bl.cnee_trdp_cd,
	        bl.cnee_trdp_nm,
	        bl.cnee_trdp_addr,
	        bl.ntfy_trdp_cd,
	        bl.ntfy_trdp_nm,
	        bl.ntfy_trdp_addr,        
	        lnr.trdp_cd AS lnr_trdp_cd,
	        lnr.trdp_nm AS lnr_trdp_nm,
	        ptn.trdp_cd AS prnr_trdp_cd,
	        ptn.trdp_nm AS prnr_trdp_nm,
	        ptn.trdp_addr AS prnr_trdp_addr,        
	        carr.trdp_cd AS carr_trdp_cd,
	        carr.trdp_nm AS carr_trdp_nm,
	        carr.trdp_addr AS carr_trdp_addr,  
	        
           
            act.trdp_cd as act_shpr_trdp_cd,
            act.trdp_nm as act_shpr_trdp_nm,
            vndr.trdp_cd vndr_trdp_cd,
            vndr.trdp_nm vndr_trdp_nm,
            bl.trnk_vsl_nm,
            	         
	        bl.etd_dt_tm,
	        bl.eta_dt_tm,
	        bl.xtra_bl_seq,
          	ibl.ref_ofc_cd,
            ibl.ref_no,
            ibl.shp_mod_cd,
            bl.bl_sts_cd, 
            ibl.BL_NO  AS hbl_no  /* HOUSE B/L NO*/           
                     
	    FROM
	        TB_XTRA_BL bl                     
		LEFT OUTER JOIN
            TB_INTG_BL ibl                                  
                 ON bl.intg_bl_seq = ibl.intg_bl_seq   
                AND ibl.delt_flg = 'N'      
	    LEFT OUTER JOIN
	        TB_PCK_UT_CD PCD                        
	            ON   BL.PCK_UT_CD   = PCD.PCK_UT_CD    
	            AND PCD.DELT_FLG = 'N'  
	    LEFT OUTER JOIN
	        TB_BL_PRNR LNR                
	            ON   BL.INTG_BL_SEQ = LNR.INTG_BL_SEQ  
	            AND LNR.BL_TRDP_TP_CD = 'L01' 
	            AND LNR.DELT_FLG = 'N'          
	    LEFT OUTER JOIN
	        TB_BL_PRNR PTN                
	            ON   BL.INTG_BL_SEQ = PTN.INTG_BL_SEQ  
	            AND PTN.BL_TRDP_TP_CD = 'P01' 
	            AND PTN.DELT_FLG = 'N' 
	    LEFT OUTER JOIN
	        TB_BL_PRNR CARR                
	            ON   BL.INTG_BL_SEQ = CARR.INTG_BL_SEQ  
	            AND CARR.BL_TRDP_TP_CD = 'B01' 
	            AND CARR.DELT_FLG = 'N'
	    LEFT OUTER JOIN
	        TB_INTG_BL_RLT RLT                 
	            ON  BL.INTG_BL_SEQ = RLT.INTG_BL_SEQ 
	            AND RLT.DELT_FLG = 'N'                  
	    LEFT OUTER JOIN
	        TB_INTG_BL MBL                 
	            ON  RLT.RLT_INTG_BL_SEQ = MBL.INTG_BL_SEQ 
	            AND MBL.BIZ_CLSS_CD = 'M' 
	            AND MBL.DELT_FLG = 'N'    
	    LEFT OUTER JOIN
	        TB_ADD_INFO_BND BND                 
	            ON  BND.INTG_BL_SEQ = BL.INTG_BL_SEQ 
	            AND BND.DELT_FLG = 'N'                             
	    LEFT OUTER JOIN
	        TB_BKG BKG                 
	            ON  BKG.BKG_SEQ = BND.INTG_BKG_SEQ 
	            AND BKG.DELT_FLG = 'N' 
	            
        LEFT OUTER JOIN
            TB_BL_PRNR ACT  
                ON  BL.INTG_BL_SEQ = ACT.INTG_BL_SEQ  
                AND ACT.BL_TRDP_TP_CD = 'S02' 
                AND ACT.DELT_FLG = 'N'      
        LEFT OUTER JOIN
            TB_BL_PRNR VNDR 
                ON BL.INTG_BL_SEQ = VNDR.INTG_BL_SEQ  
                AND VNDR.BL_TRDP_TP_CD = 'V01' 
                AND VNDR.DELT_FLG = 'N'      
                	                     
	    LEFT OUTER JOIN
	        (
	            SELECT
	                INTG_BL_SEQ AS INTG_BL_SEQ1,
	                BL_STS_CD AS BL_STS_CD1 
	            FROM
	                TB_INTG_BL_BLCK
	        ) BLCK         
	            ON BL.INTG_BL_SEQ = BLCK.INTG_BL_SEQ1                  
	                        
    WHERE
        BL.DELT_FLG = 'N' 
      
        
        <dynamic>
            <isNotEmpty property="f_hbl_no">
            	<!-- #1061 [Binex, Sunway, AIF] V440 Search function -->
              AND ibl.BL_NO LIKE  #f_hbl_no# + '%'                  
            </isNotEmpty>           
			<isNotEmpty property="etd_strdt">
			   AND  BL.etd_dt_tm BETWEEN #etd_strdt# AND #etd_enddt#
			</isNotEmpty>
            <isNotEmpty property="f_bl_no">
            	<!-- #1061 [Binex, Sunway, AIF] V440 Search function -->
              AND BL.BL_NO LIKE  #f_bl_no# + '%'                  
            </isNotEmpty> 
            <isNotEmpty property="f_prnr_trdp_nm">
              AND  ptn.TRDP_NM LIKE  #f_prnr_trdp_nm# + '%'
            </isNotEmpty> 
            <isNotEmpty property="f_cnee_trdp_nm">
              AND  bl.cnee_trdp_nm LIKE  #f_cnee_trdp_nm# + '%'
            </isNotEmpty> 
            <isNotEmpty property="f_shpr_trdp_nm">
              AND  bl.shpr_trdp_nm LIKE  #f_shpr_trdp_nm# + '%'
            </isNotEmpty> 
            <isNotEmpty property="f_ntfy_trdp_nm">
              AND  bl.ntfy_trdp_nm LIKE  #f_ntfy_trdp_nm# + '%'
            </isNotEmpty> 
            <isNotEmpty property="f_ofc_cd">
              AND  ibl.ref_ofc_cd = #f_ofc_cd#  
            </isNotEmpty> 
            <isNotEmpty property="f_ahpr_trdp_nm">
              AND  act.trdp_nm LIKE  #f_ahpr_trdp_nm# + '%'
            </isNotEmpty> 
            <isNotEmpty property="f_trnk_vsl_nm">
              AND  bl.trnk_vsl_nm LIKE  #f_trnk_vsl_nm# + '%'
            </isNotEmpty> 
            
            
            
            
            
        </dynamic>
        
        
        	 ) a1
		 <![CDATA[ where a1.ROWNUM > #beginIdx# AND a1.ROWNUM <= #topCnt#	]]> 	
		 
		 
    </select>
    <select id="select_COBL_LIST_CNT" parameterClass="java.util.HashMap" resultClass="Integer">
    		         	SELECT  
	        count
	        (bl.intg_bl_seq) 
                     
     FROM
	        TB_XTRA_BL bl                     
	                     
	    LEFT OUTER JOIN
            TB_INTG_BL ibl                                  
                 ON bl.intg_bl_seq = ibl.intg_bl_seq   
                AND ibl.delt_flg = 'N'      
	    LEFT OUTER JOIN
	        TB_PCK_UT_CD PCD                        
	            ON   BL.PCK_UT_CD   = PCD.PCK_UT_CD    
	            AND PCD.DELT_FLG = 'N'  
	    LEFT OUTER JOIN
	        TB_BL_PRNR LNR                
	            ON   BL.INTG_BL_SEQ = LNR.INTG_BL_SEQ  
	            AND LNR.BL_TRDP_TP_CD = 'L01' 
	            AND LNR.DELT_FLG = 'N'          
	    LEFT OUTER JOIN
	        TB_BL_PRNR PTN                
	            ON   BL.INTG_BL_SEQ = PTN.INTG_BL_SEQ  
	            AND PTN.BL_TRDP_TP_CD = 'P01' 
	            AND PTN.DELT_FLG = 'N' 
	    LEFT OUTER JOIN
	        TB_BL_PRNR CARR                
	            ON   BL.INTG_BL_SEQ = CARR.INTG_BL_SEQ  
	            AND CARR.BL_TRDP_TP_CD = 'B01' 
	            AND CARR.DELT_FLG = 'N'
	    LEFT OUTER JOIN
	        TB_INTG_BL_RLT RLT                 
	            ON  BL.INTG_BL_SEQ = RLT.INTG_BL_SEQ 
	            AND RLT.DELT_FLG = 'N'                  
	    LEFT OUTER JOIN
	        TB_INTG_BL MBL                 
	            ON  RLT.RLT_INTG_BL_SEQ = MBL.INTG_BL_SEQ 
	            AND MBL.BIZ_CLSS_CD = 'M' 
	            AND MBL.DELT_FLG = 'N'    
	    LEFT OUTER JOIN
	        TB_ADD_INFO_BND BND                 
	            ON  BND.INTG_BL_SEQ = BL.INTG_BL_SEQ 
	            AND BND.DELT_FLG = 'N'                      
	    LEFT OUTER JOIN
	        TB_BKG BKG                 
	            ON  BKG.BKG_SEQ = BND.INTG_BKG_SEQ 
	            AND BKG.DELT_FLG = 'N' 
	            
        LEFT OUTER JOIN
            TB_BL_PRNR ACT 
                ON  BL.INTG_BL_SEQ = ACT.INTG_BL_SEQ  
                AND ACT.BL_TRDP_TP_CD = 'S02' 
                AND ACT.DELT_FLG = 'N'      
        LEFT OUTER JOIN
            TB_BL_PRNR VNDR 
                ON BL.INTG_BL_SEQ = VNDR.INTG_BL_SEQ  
                AND VNDR.BL_TRDP_TP_CD = 'V01' 
                AND VNDR.DELT_FLG = 'N'      
                	                     
	    LEFT OUTER JOIN
	        (
	            SELECT
	                INTG_BL_SEQ AS INTG_BL_SEQ1,
	                BL_STS_CD AS BL_STS_CD1 
	            FROM
	                TB_INTG_BL_BLCK
	        ) BLCK         
	            ON BL.INTG_BL_SEQ = BLCK.INTG_BL_SEQ1                  
	                          
                               
    WHERE
        BL.DELT_FLG = 'N' 
      
        
        <dynamic>
            <isNotEmpty property="f_hbl_no">
            	<!-- #1061 [Binex, Sunway, AIF] V440 Search function -->
              AND ibl.BL_NO LIKE  #f_hbl_no# + '%'                  
            </isNotEmpty>           
			<isNotEmpty property="etd_strdt">
			   AND  BL.etd_dt_tm BETWEEN #etd_strdt# AND #etd_enddt#
			</isNotEmpty>
            <isNotEmpty property="f_bl_no">
            	<!-- #1061 [Binex, Sunway, AIF] V440 Search function -->
              AND BL.BL_NO LIKE  #f_bl_no# + '%'                  
            </isNotEmpty> 
            <isNotEmpty property="f_prnr_trdp_nm">
              AND  ptn.TRDP_NM LIKE  #f_prnr_trdp_nm# + '%'
            </isNotEmpty> 
            <isNotEmpty property="f_cnee_trdp_nm">
              AND  bl.cnee_trdp_nm LIKE  #f_cnee_trdp_nm# + '%'
            </isNotEmpty> 
            <isNotEmpty property="f_shpr_trdp_nm">
              AND  bl.shpr_trdp_nm LIKE  #f_shpr_trdp_nm# + '%'
            </isNotEmpty> 
            <isNotEmpty property="f_ntfy_trdp_nm">
              AND  bl.ntfy_trdp_nm LIKE  #f_ntfy_trdp_nm# + '%'
            </isNotEmpty> 
            <isNotEmpty property="f_ofc_cd">
              AND  ibl.ref_ofc_cd = #f_ofc_cd#  
            </isNotEmpty> 
            <isNotEmpty property="f_ahpr_trdp_nm">
              AND  act.trdp_nm LIKE  #f_ahpr_trdp_nm# + '%'
            </isNotEmpty> 
            <isNotEmpty property="f_trnk_vsl_nm">
              AND  bl.trnk_vsl_nm LIKE  #f_trnk_vsl_nm# + '%'
            </isNotEmpty> 
            
            			
        </dynamic>
        
	    </select>
	    
    <select id="selectColoadCNTR_LIST" parameterClass="HashMap" resultClass="CntrLstVO">
    	/* selectColoadCNTR_LIST */
         SELECT lst.intg_bl_seq,        lst.cntr_list_seq,       lst.rgst_cntr_yn,
                lst.cntr_no,            lst.cntr_tpsz_cd,
                lst.cgo_pck_qty,        lst.cgo_pck_ut,          lst.cgo_wgt,           lst.cgo_meas,         lst.vol_meas,
                lst.soc_flg,            lst.dg_gds_flg,          lst.cntr_rmk,		    lst.cgo_wgt1, 		  lst.cgo_meas1,
                lst.seal_no1,           lst.seal_no2,            lst.seal_no3, 
                lst.cntr_sprl_trdp_cd,  prn.eng_nm AS cntr_sprl_trdp_nm, 
                bl.shp_mod_cd
                ,lst.dg_gds_flg, lst.cntr_rmk, lst.pickup_number, CONVERT(VARCHAR, ISNULL(lst.lfd, ''), 120) AS lfd
                ,CONVERT(VARCHAR, ISNULL(lst.cntr_go_date, ''), 120) AS cntr_go_date
                ,lst.temp_cd, lst.vent_cd ,lst.temp_val
                , lst.emty_rt_dt
		   FROM TB_INTG_BL BL
		   JOIN TB_CNTR_LIST LST ON BL.INTG_BL_SEQ = LST.INTG_BL_SEQ AND LST.DELT_FLG = 'N'
LEFT OUTER JOIN tb_trdp prn
             ON LST.cntr_sprl_trdp_cd = prn.trdp_cd  AND prn.delt_flg = 'N'
 		  WHERE 1=1
 		    AND bl.biz_clss_cd = 'H'
 		  <isNotEmpty property="f_rlt_intg_bl_seq">
   			AND BL.intg_bl_seq = #f_rlt_intg_bl_seq#
 		  </isNotEmpty>
 		  <isNotEmpty property="f_cntr_no">
   			AND LST.CNTR_NO LIKE  #f_cntr_no# + '%'
 		  </isNotEmpty>
 		  <isNotEmpty property="f_cntr_tpsz_cd">
   			AND LST.CNTR_TPSZ_CD = #f_cntr_tpsz_cd#
 		  </isNotEmpty>
       ORDER BY lst.cntr_list_seq ASC
    </select>
    
    
    <!-- 52320 [COMMON] Transaction 변경처리시 Block Date 까지 Check 하도록 수정 -->
    <select id="searchIntgBlSeqModiTms" resultClass="java.lang.String" parameterClass="java.util.HashMap">
		/*  searchIntgBlSeqModiTms  */
		SELECT MAX(MODI_TMS) AS MODI_TMS
		FROM (
			SELECT MODI_TMS
			  FROM TB_INTG_BL with(nolock)
			 WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
			 
			union all
			 
			 SELECT MODI_TMS
			  FROM TB_INTG_BL_BLCK    with(nolock)
			 WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
			 
			 
		) INVAL
    </select>    
    
    <!-- Bl Booking Remark 수정 -->
    <update id="updateBookingRemark" parameterClass="HashMap">
        UPDATE  tb_intg_bl
           SET  rmk         = #rmk#, 
                modi_usrid  = #proc_usrid#, 
                modi_ofc_cd = #proc_ofccd#,    
                modi_tms    = GETUTCDATE()
         WHERE  intg_bl_seq = cast(#intg_bl_seq# as varchar)
    </update>
    
        <!-- 20170125 Bkg Booking Remark 수정 -->
    <update id="updateBkgRemark" parameterClass="HashMap">
        UPDATE  tb_bkg
           SET  rmk         = #rmk#, 
                modi_usrid  = #proc_usrid#, 
                modi_ofc_cd = #proc_ofccd#,    
                modi_tms    = getdate()
         WHERE  bkg_seq = #bkg_seq#
    </update>
    
    <!-- Office post_dt_imp 조회   -->
    <select id="selectCurr_cd" parameterClass="HashMap" resultClass="String">
         SELECT A.TRF_CUR_CD   
           FROM TB_OFC A       
          WHERE 1 = 1
            AND A.DELT_FLG = 'N'         
            AND A.OFC_CD = #f_ofc_cd#            
            AND A.USE_FLG = 'Y'   
    </select>
    
    <!-- #47 #52766 - [ZEN] Mark & Desc Tab SAY 항목 Long Name 지정  -->
    <!-- #2107 [PATENT] HB/L의 FCL Shipmode 시 SAY 항목 표시 보완 -->
    <select id="getCntrSay" parameterClass="HashMap" resultClass="String">
		SELECT CONVERT(VARCHAR, COUNT(A.CNTR_LIST_SEQ)) + '*^^*' + '(' + CONVERT(VARCHAR, COUNT(A.CNTR_LIST_SEQ))  + 'X' +  B.CNTR_TPSZ_CD + ') ' + B.CNTR_TPSZ_NM + ',' 
		FROM TB_CNTR_LIST A 
			JOIN TB_CNTR_TPSZ B 
			ON  A.CNTR_TPSZ_CD = B.CNTR_TPSZ_CD 
			AND B.DELT_FLG = 'N'
		WHERE 1 = 1 
		AND A.INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
		AND ISNULL(PRT_CGO_FLG, 'N') = 'N'
		GROUP BY B.CNTR_TPSZ_NM, B.CNTR_TPSZ_CD
		ORDER BY B.CNTR_TPSZ_NM
		FOR XML PATH(''), ELEMENTS
    </select>
    
    <!--Carrier Booking 정보 조회  -->
    <select id="selectLNRBKG_INFO" parameterClass="HashMap" resultClass="SeeMasterBLVO">
    	/* BlCmmSQL.xml > selectLNRBKG_INFO */
        SELECT TOP 1
               BKG.BKG_NO 
		      ,BKG.BKG_SEQ 
		      ,BL.INTG_BL_SEQ
        	  ,( CASE WHEN ISNULL(BKG.BL_NO, '') = '' THEN BL.BL_NO ELSE BKG.BL_NO END) AS BL_NO
        	  ,BL.REF_NO
		      ,BKG.BKG_DT_TM 
		      ,BKG.PRNR_TRDP_CD 
		      ,BKG.PRNR_TRDP_NM 
		      ,(SELECT a.eng_addr FROM tb_trdp a WHERE a.trdp_cd = BKG.PRNR_TRDP_CD ) AS PRNR_TRDP_ADDR
		      ,BKG.SHPR_TRDP_CD  
		      ,BKG.SHPR_TRDP_NM 
		      ,BKG.SHPR_TRDP_ADDR
		      ,BKG.SHPR_PIC_NM
		      ,BKG.SHPR_PIC_PHN 
		      ,BKG.CNEE_TRDP_CD 
		      ,BKG.CNEE_TRDP_NM 
		      ,BKG.CNEE_TRDP_ADDR 
		      ,BKG.CNEE_PIC_NM
		      ,BKG.CNEE_PIC_PHN 
		      ,BKG.NTFY_TRDP_CD 
		      ,BKG.NTFY_TRDP_NM 
		      ,BKG.NTFY_TRDP_ADDR
		      ,BKG.NTFY_PIC_NM
		      ,BKG.NTFY_PIC_PHN
	          ,BKG.ACT_SHPR_TRDP_CD <!-- #1153 [Binex-Visibility]Carrier Booking Status 수정 -->
	          ,BKG.ACT_SHPR_TRDP_NM 			       
		      ,BKG.CUST_REF_NO 
		      ,BKG.CNTR_INFO 
		      ,BKG.TRNK_VSL_CD 
		      ,BKG.TRNK_VSL_NM 
		      ,BKG.TRNK_VOY 
		      ,BKG.POR_CD 
		      ,BKG.POR_NM 
		      ,BKG.POL_CD 
		      ,BKG.POL_NM 
		      ,BKG.POD_CD 
		      ,BKG.POD_NM 
		      ,BKG.DEL_CD 
		      ,BKG.DEL_NM 
		      ,BKG.FNL_DEST_LOC_CD 
		      ,BKG.FNL_DEST_LOC_NM 
		      ,BKG.LNR_TRDP_CD 
		      ,BKG.LNR_TRDP_NM 
		      ,BKG.LNR_BKG_NO 
		      ,BKG.ETD_DT_TM 
		      ,BKG.ETA_DT_TM 
		      ,BKG.ETD_POR_TM 
		      ,BKG.ETA_DEL_DT_TM 
		      ,BKG.ETA_FNL_DEST_DT_TM 
		      ,BKG.REP_CMDT_CD 
		      ,BKG.REP_CMDT_NM 
		      ,BKG.PCK_QTY 
		      ,BKG.PCK_UT_CD 
		      ,BKG.GRS_WGT_UT_CD 
		      ,BKG.GRS_WGT 
		      ,BKG.GRS_WGT1 
		      ,BKG.MEAS_UT_CD 
		      ,BKG.MEAS 
		      ,BKG.MEAS1 
		      ,BKG.FM_SVC_TERM_CD 
		      ,BKG.TO_SVC_TERM_CD 
		      ,BKG.CARGO_TP_CD 
		      ,BKG.RMK 
		      ,BKG.DEPT_CD 
		      ,BKG.RGST_USRID 
		      ,BKG.RGST_OFC_CD 
		      <!--  ,CONVERT(VARCHAR,BKG.RGST_TMS,112) AS RGST_TMS -->
		      <!--  ,CONVERT(VARCHAR,DATEADD(MINUTE,60*CONVERT( float,isnull (ccd.RMK ,'0')), BKG.RGST_TMS ),112) AS RGST_TMS -->
		      ,CONVERT(VARCHAR(10),DATEADD(MINUTE,60*CONVERT( float,isnull (ccd.RMK ,'0')),BKG.RGST_TMS ),112) + REPLACE(CONVERT(VARCHAR(8),DATEADD(MINUTE,60*CONVERT( float,isnull (ccd.RMK ,'0')),BKG.RGST_TMS ),108),':','')  AS RGST_TMS
		      ,BKG.MODI_USRID 
		      ,BKG.MODI_OFC_CD 
		      <!--  ,CONVERT(VARCHAR,DATEADD(MINUTE,60*CONVERT( float,isnull (ccd.RMK ,'0')), BKG.MODI_TMS ),112) AS MODI_TMS -->
		      ,CONVERT(VARCHAR(10),DATEADD(MINUTE,60*CONVERT( float,isnull (ccd.RMK ,'0')),BKG.MODI_TMS ),112) + REPLACE(CONVERT(VARCHAR(8),DATEADD(MINUTE,60*CONVERT( float,isnull (ccd.RMK ,'0')),BKG.MODI_TMS ),108),':','')  AS MODI_TMS
		      ,BKG.DELT_FLG 
		      ,BKG.LNR_CTRT_NO
        	  ,BKG.FRT_TERM_CD
        	  ,BKG.FRT_TERM_CD
        	  ,BKG.FWRD_AGN_TRDP_CD
        	  ,BKG.FWRD_AGN_TRDP_NM
        	  ,BKG.FWRD_AGN_TRDP_ADDR
        	  ,BKG.BKG_AGN_TRDP_CD AS CARR_TRDP_CD
        	  ,BKG.BKG_AGN_TRDP_NM AS CARR_TRDP_NM
        	  ,BKG.BKG_AGN_TRDP_ADDR AS CARR_TRDP_ADDR
        	  ,BKG.BKG_STS_CD
        	  ,BKG.SVC_LANE_NM  <!--  #943  [PATENT] Lane 추가  -->
        	  <!-- ,(SELECT RSN_TXT 
			      FROM (SELECT RSN_TXT, ROW_NUMBER() OVER (ORDER BY RGST_TMS DESC) ROWNO 
						  FROM TB_BKG_STS_HIS HIS 
						 WHERE HIS.BKG_SEQ = BKG.BKG_SEQ) INVAL 
				 WHERE BKG_STS_CD IN ('RJ','CN')
				   AND ROWNO = 1) AS RSN_TXT -->
			<!-- #1024 [PATENT] Booking Entry 개선 및 Quotation Audit 기능 개발 -->	   
           ,BKG.sls_usrid       
           ,BKG.sls_ofc_cd
           ,BKG.rcv_wh_cd
           ,BKG.rcv_wh_nm
           ,BKG.pu_trdp_cd
           ,BKG.pu_trdp_nm
           ,BKG.vgm_cut_off_dt
           ,BKG.doc_cut_off_dt
           ,BKG.rail_cut_off_dt
           ,BKG.cut_off_dt
           ,BKG.port_open_dt
           ,BKG.shp_mod_cd   				   
           ,BKG.nomi_flg   				   
           ,BKG.hbl_tp_cd   
			,BKG.OBL_TP_CD  <!-- #1619 [CLT] Original B/L Type- 항목 정리 -->
			,BKG.INTER_RMK_TXT
			,BKG.asgn_usrid
			,BKG.trkg_svc_flg
			,BKG.cstms_svc_flg
			,BKG.cstms_cut_off_dt
			,BKG.grs_wgt AS mk_grs_wgt
			,BKG.grs_wgt1 AS mk_grs_wgt1
			,BKG.meas AS mk_meas
			,BKG.meas1 AS mk_meas1  
			,(SELECT TOP 1 CD_VAL FROM TB_COM_CD_DTL WHERE COM_CD = 'C097' ORDER BY SRT_SEQ) AS WGT_DISP_CD
			,BKG.iss_loc_cd
			,BKG.iss_loc_nm
			,BKG.org_bl_qty
			,BKG.cstms_tp_cd
			<!-- #4899 ** [Binex] Carrier Booking Entry to have Customer Ref. No., Export References No., Agent Ref. No. -->	
			,BKG.exp_ref_no
		  	,BKG.prnr_ref_no
		  FROM TB_BKG BKG
		  LEFT OUTER JOIN TB_ADD_INFO_BND BND ON BKG.BKG_SEQ = BND.INTG_BKG_SEQ AND BND.DELT_FLG = 'N'
		  LEFT OUTER JOIN TB_INTG_BL BL ON BND.INTG_BL_SEQ = BL.INTG_BL_SEQ AND BL.DELT_FLG = 'N' 
		  LEFT OUTER JOIN TB_OFC TOF ON BKG.RGST_OFC_CD = TOF.OFC_CD      
		  LEFT OUTER JOIN TB_COM_CD_DTL CCD ON CCD.COM_CD = 'TIMEZN' AND TOF.TIME_ZONE = CCD.CD_VAL        
		 WHERE 1 = 1
		   AND BKG.DELT_FLG = 'N'
		   AND BKG.BIZ_CLSS_CD = #biz_clss_cd#
        <dynamic>
        	<isNotEmpty property="f_bkg_no">
                AND BKG.BKG_NO = #f_bkg_no#
            </isNotEmpty>
        	<isNotEmpty property="f_bkg_seq">
                AND BKG.BKG_SEQ = #f_bkg_seq#
            </isNotEmpty>
        	<isNotEmpty property="f_lnr_bkg_no">
                AND BKG.LNR_BKG_NO = #f_lnr_bkg_no#
            </isNotEmpty>
        	<isNotEmpty property="f_rgst_ofc_cd">
                AND BKG.RGST_OFC_CD = #f_rgst_ofc_cd#
            </isNotEmpty>
        </dynamic>
    </select>
    
    <!--Booking 테이블 등록   -->
    <insert id="insertLNRBKG_INFO" parameterClass="SeeMasterBLVO">
	    /** BlCmmSQL.xml > insertLNRBKG_INFO **/
	    INSERT INTO tb_bkg
           (bkg_no 
           ,bkg_seq 
           ,bkg_dt_tm 
           ,prnr_trdp_cd 
           ,prnr_trdp_nm 
           ,shpr_trdp_cd 
           ,shpr_trdp_nm 
           ,shpr_trdp_addr 
           ,shpr_pic_nm
           ,shpr_pic_phn
           ,cnee_trdp_cd 
           ,cnee_trdp_nm 
           ,cnee_trdp_addr
           ,cnee_pic_nm
           ,cnee_pic_phn 
           ,ntfy_trdp_cd 
           ,ntfy_trdp_nm 
           ,ntfy_trdp_addr 
           ,ntfy_pic_nm
           ,ntfy_pic_phn
           ,act_shpr_trdp_cd  <!-- #1153 [Binex-Visibility]Carrier Booking Status -->
           ,act_shpr_trdp_nm            
           ,cust_ref_no 
           ,cntr_info 
           ,trnk_vsl_cd 
           ,trnk_vsl_nm 
           ,trnk_voy 
           ,por_cd 
           ,por_nm 
           ,pol_cd 
           ,pol_nm 
           ,pod_cd 
           ,pod_nm 
           ,del_cd 
           ,del_nm 
           ,fnl_dest_loc_cd 
           ,fnl_dest_loc_nm 
           ,lnr_trdp_cd 
           ,lnr_trdp_nm 
           ,lnr_bkg_no 
           ,etd_dt_tm 
           ,eta_dt_tm 
           ,etd_por_tm 
           ,rep_cmdt_cd 
           ,rep_cmdt_nm 
           ,pck_qty 
           ,pck_ut_cd 
           ,grs_wgt_ut_cd 
           ,grs_wgt 
           ,grs_wgt1 
           ,meas_ut_cd 
           ,meas 
           ,meas1 
           ,fm_svc_term_cd 
           ,to_svc_term_cd 
           ,cargo_tp_cd 
           ,rmk 
           ,dept_cd 
           ,rgst_usrid 
           ,rgst_ofc_cd 
           ,rgst_tms 
           ,modi_usrid 
           ,modi_ofc_cd 
           ,modi_tms 
           ,delt_flg
           ,lnr_ctrt_no
           ,frt_term_cd
           ,biz_clss_cd
           ,fwrd_agn_trdp_cd
           ,fwrd_agn_trdp_nm
           ,fwrd_agn_trdp_addr
           ,eta_del_dt_tm
           ,eta_fnl_dest_dt_tm
           ,bkg_agn_trdp_cd
           ,bkg_agn_trdp_nm
           ,bkg_agn_trdp_addr
           ,svc_lane_nm      <!--  #943  [PATENT] Lane 추가  -->
           ,sls_usrid        <!-- #1024 [PATENT] Booking Entry 개선 및 Quotation Audit 기능 개발 -->
           ,sls_ofc_cd
           ,rcv_wh_cd
           ,rcv_wh_nm
           ,pu_trdp_cd
           ,pu_trdp_nm
           ,vgm_cut_off_dt
           ,doc_cut_off_dt
           ,rail_cut_off_dt
           ,cut_off_dt
           ,port_open_dt
           ,shp_mod_cd
           ,nomi_flg
           ,hbl_tp_cd
			,obl_tp_cd <!-- #1619 [CLT] Original B/L Type- 항목 정리 -->
			,INTER_RMK_TXT
			,asgn_usrid
			,trkg_svc_flg
			,cstms_svc_flg
			,cstms_cut_off_dt
			,bl_no
			,iss_loc_cd
			,iss_loc_nm
			,org_bl_qty
		<!-- #4899 ** [Binex] Carrier Booking Entry to have Customer Ref. No., Export References No., Agent Ref. No. -->	
		 ,exp_ref_no
		 ,prnr_ref_no	
           )
     VALUES
           (#bkg_no# 
           ,#bkg_seq#
           ,#bkg_dt_tm#
           ,#prnr_trdp_cd# 
           ,#prnr_trdp_nm# 
           ,#shpr_trdp_cd# 
           ,#shpr_trdp_nm# 
           ,#shpr_trdp_addr# 
           ,#shpr_pic_nm#
           ,#shpr_pic_phn#
           ,#cnee_trdp_cd# 
           ,#cnee_trdp_nm# 
           ,#cnee_trdp_addr# 
           ,#cnee_pic_nm#
           ,#cnee_pic_phn#
           ,#ntfy_trdp_cd# 
           ,#ntfy_trdp_nm# 
           ,#ntfy_trdp_addr#
           ,#ntfy_pic_nm#
           ,#ntfy_pic_phn# 
           ,#act_shpr_trdp_cd#
           ,#act_shpr_trdp_nm#              
           ,#cust_ref_no# 
           ,#cntr_info# 
           ,#trnk_vsl_cd# 
           ,#trnk_vsl_nm# 
           ,#trnk_voy# 
           ,#por_cd# 
           ,#por_nm# 
           ,#pol_cd# 
           ,#pol_nm# 
           ,#pod_cd# 
           ,#pod_nm# 
           ,#del_cd# 
           ,#del_nm# 
           ,#fnl_dest_loc_cd# 
           ,#fnl_dest_loc_nm# 
           ,#lnr_trdp_cd# 
           ,#lnr_trdp_nm# 
           ,#lnr_bkg_no# 
           ,#etd_dt_tm# 
           ,#eta_dt_tm# 
           ,#etd_por_tm# 
           ,#rep_cmdt_cd# 
           ,#rep_cmdt_nm# 
           ,#pck_qty# 
           ,#pck_ut_cd# 
           ,#grs_wgt_ut_cd# 
           ,#grs_wgt# 
           ,#grs_wgt1# 
           ,#meas_ut_cd# 
           ,#meas# 
           ,#meas1# 
           ,#fm_svc_term_cd# 
           ,#to_svc_term_cd# 
           ,#cargo_tp_cd# 
           ,#rmk# 
           ,#proc_dept_cd# 
           ,#proc_usrid# 
           ,#proc_ofccd# 
           ,getdate() 
           ,#proc_usrid# 
           ,#proc_ofccd# 
           ,getdate() 
           ,'N'
           ,#lnr_ctrt_no#
           ,#frt_term_cd#
           ,#biz_clss_cd#
           ,#fwrd_agn_trdp_cd#
           ,#fwrd_agn_trdp_nm#
           ,#fwrd_agn_trdp_addr#
           ,#eta_del_dt_tm#
           ,#eta_fnl_dest_dt_tm#
           ,#carr_trdp_cd#
           ,#carr_trdp_nm#
           ,#carr_trdp_addr#
           ,#svc_lane_nm#     <!--  #943  [PATENT] Lane 추가  -->
           ,#sls_usrid#       <!-- #1024 [PATENT] Booking Entry 개선 및 Quotation Audit 기능 개발 -->
           ,#sls_ofc_cd#
           ,#rcv_wh_cd#
           ,#rcv_wh_nm#
           ,#pu_trdp_cd#
           ,#pu_trdp_nm#
           ,#vgm_cut_off_dt#
           ,#doc_cut_off_dt#
           ,#rail_cut_off_dt#
           ,#cut_off_dt#
           ,#port_open_dt#
           ,#shp_mod_cd#
           ,#nomi_flg#
           ,#hbl_tp_cd#           
			,#obl_tp_cd#     <!-- #1619 [CLT] Original B/L Type- 항목 정리 -->
			,#inter_rmk_txt#
			,#asgn_usrid#
			,#trkg_svc_flg#
			,#cstms_svc_flg#     
			,#cstms_cut_off_dt# 
			,#bl_no#   
			,#iss_loc_cd#
			,#iss_loc_nm#
			,#org_bl_qty#		
		 <!-- #4899 ** [Binex] Carrier Booking Entry to have Customer Ref. No., Export References No., Agent Ref. No. -->	
		 ,#exp_ref_no#
		 ,#prnr_ref_no#	   
           )
    </insert>
    
    <!-- Booking 내용 수정   -->
   <update id="updateLNRBKG_INFO" parameterClass="SeeMasterBLVO">
   		/** BlCmmSQL.xml > updateLNRBKG_INFO **/
   		UPDATE tb_bkg
		   SET bkg_no = #bkg_no#
		      ,bkg_dt_tm = #bkg_dt_tm#
		      ,prnr_trdp_cd = #prnr_trdp_cd#
		      ,prnr_trdp_nm = #prnr_trdp_nm#
		      ,shpr_trdp_cd = #shpr_trdp_cd#
		      ,shpr_trdp_nm = #shpr_trdp_nm#
		      ,shpr_trdp_addr = #shpr_trdp_addr#
		      ,shpr_pic_nm = #shpr_pic_nm#
		      ,shpr_pic_phn = #shpr_pic_phn#
		      ,cnee_trdp_cd = #cnee_trdp_cd#
		      ,cnee_trdp_nm = #cnee_trdp_nm#
		      ,cnee_trdp_addr = #cnee_trdp_addr#
		      ,cnee_pic_nm = #cnee_pic_nm#
		      ,cnee_pic_phn = #cnee_pic_phn#
		      ,ntfy_trdp_cd = #ntfy_trdp_cd#
		      ,ntfy_trdp_nm = #ntfy_trdp_nm#
		      ,ntfy_trdp_addr = #ntfy_trdp_addr#
		      ,ntfy_pic_nm = #ntfy_pic_nm#
		      ,ntfy_pic_phn = #ntfy_pic_phn#
	          ,act_shpr_trdp_cd = #act_shpr_trdp_cd#  <!-- #1153 [Binex-Visibility]Carrier Booking Status -->
	          ,act_shpr_trdp_nm = #act_shpr_trdp_nm#             		      
		      ,cust_ref_no = #cust_ref_no#
		      ,cntr_info = #cntr_info#
		      ,trnk_vsl_cd = #trnk_vsl_cd#
		      ,trnk_vsl_nm = #trnk_vsl_nm#
		      ,trnk_voy = #trnk_voy#
		      ,por_cd = #por_cd#
		      ,por_nm = #por_nm#
		      ,pol_cd = #pol_cd#
		      ,pol_nm = #pol_nm#
		      ,pod_cd = #pod_cd#
		      ,pod_nm = #pod_nm#
		      ,del_cd = #del_cd#
		      ,del_nm = #del_nm#
		      ,fnl_dest_loc_cd = #fnl_dest_loc_cd#
		      ,fnl_dest_loc_nm = #fnl_dest_loc_nm#
		      ,lnr_trdp_cd = #lnr_trdp_cd#
		      ,lnr_trdp_nm = #lnr_trdp_nm#
		      ,lnr_bkg_no = #lnr_bkg_no#
		      ,etd_dt_tm = #etd_dt_tm#
		      ,eta_dt_tm = #eta_dt_tm#
		      ,etd_por_tm = #etd_por_tm#
		      ,rep_cmdt_cd = #rep_cmdt_cd#
		      ,rep_cmdt_nm = #rep_cmdt_nm#
		      ,pck_qty = #pck_qty#
		      ,pck_ut_cd = #pck_ut_cd#
		      ,grs_wgt_ut_cd = #grs_wgt_ut_cd#
		      ,grs_wgt = #grs_wgt#
		      ,grs_wgt1 = #grs_wgt1#
		      ,meas_ut_cd = #meas_ut_cd#
		      ,meas = #meas#
		      ,meas1 = #meas1#
		      ,fm_svc_term_cd = #fm_svc_term_cd#
		      ,to_svc_term_cd = #to_svc_term_cd#
		      ,cargo_tp_cd = #cargo_tp_cd#
		      ,rmk = #rmk#
		      ,dept_cd = #proc_dept_cd#
		      ,modi_usrid = #proc_usrid#
		      ,modi_ofc_cd = #proc_ofccd#
		      ,modi_tms = getdate()
		      ,delt_flg = 'N'
		      ,frt_term_cd = #frt_term_cd#
        	  ,lnr_ctrt_no = #lnr_ctrt_no#
        	  ,fwrd_agn_trdp_cd = #fwrd_agn_trdp_cd#
        	  ,fwrd_agn_trdp_nm = #fwrd_agn_trdp_nm#
        	  ,fwrd_agn_trdp_addr = #fwrd_agn_trdp_addr#
        	  ,eta_del_dt_tm = #eta_del_dt_tm#
        	  ,eta_fnl_dest_dt_tm = #eta_fnl_dest_dt_tm#
        	  ,bkg_agn_trdp_cd = #carr_trdp_cd#
        	  ,bkg_agn_trdp_nm = #carr_trdp_nm#
        	  ,bkg_agn_trdp_addr = #carr_trdp_addr#
        	  ,svc_lane_nm = #svc_lane_nm#     <!--  #943  [PATENT] Lane 추가  -->
	          ,sls_usrid = #sls_usrid#       <!-- #1024 [PATENT] Booking Entry 개선 및 Quotation Audit 기능 개발 -->
	          ,sls_ofc_cd = #sls_ofc_cd#
	          ,rcv_wh_cd = #rcv_wh_cd#
	          ,rcv_wh_nm = #rcv_wh_nm#
	          ,pu_trdp_cd = #pu_trdp_cd#
	          ,pu_trdp_nm = #pu_trdp_nm#
	          ,vgm_cut_off_dt = #vgm_cut_off_dt#
	          ,doc_cut_off_dt = #doc_cut_off_dt#
	          ,rail_cut_off_dt = #rail_cut_off_dt#
	          ,cut_off_dt = #cut_off_dt#
	          ,port_open_dt = #port_open_dt#
	          ,shp_mod_cd = #shp_mod_cd#
              ,nomi_flg = #nomi_flg#
              ,hbl_tp_cd = #hbl_tp_cd#   
			,obl_tp_cd = #obl_tp_cd#      <!-- #1619 [CLT] Original B/L Type- 항목 정리 -->
			,INTER_RMK_TXT = #inter_rmk_txt#
			,asgn_usrid = #asgn_usrid#
			,trkg_svc_flg = #trkg_svc_flg#
			,cstms_svc_flg = #cstms_svc_flg#
			,cstms_cut_off_dt = #cstms_cut_off_dt#
			,bl_no = #bl_no#
			,iss_loc_cd = #iss_loc_cd#
			,iss_loc_nm = #iss_loc_nm#
			,org_bl_qty = #org_bl_qty#
			<!-- #4899 ** [Binex] Carrier Booking Entry to have Customer Ref. No., Export References No., Agent Ref. No. -->	
		 	,exp_ref_no = #exp_ref_no#
		 	,prnr_ref_no = #prnr_ref_no#	 
		 WHERE bkg_seq = #bkg_seq#
    </update>
    
    <update id="removeLNRBKG_INFO" parameterClass="HashMap">
        UPDATE  tb_bkg
           SET  delt_flg   = #delt_flg#,
                modi_usrid = #proc_usrid#
               ,modi_ofc_cd = #proc_ofccd#
               ,modi_tms   = getdate()
         WHERE  bkg_seq = #bkg_seq#
    </update>
    
    <!-- Carrier Booking List select    -->
    <select id="selectLNRBKG_LIST" parameterClass="java.util.HashMap" resultClass="SeeMasterBLVO">
		/* BlCmmSQL.xml > selectLNRBKG_LIST */
		WITH H_LIST AS 
		(
			select 
			    RLT.RLT_BKG_SEQ as PRE_BKG_SEQ
				,H.*
				   
			 from TB_BKG H
			 left outer join tb_bkg_rlt RLT
			 on(H.BKG_SEQ = RLT.BKG_SEQ)
			 where rlt.RLT_BKG_SEQ is not null
			 and rlt.RLT_BKG_SEQ != ''
			 and H.DELT_FLG = 'N'

		)
		,RECURSIVE_QUERY AS 
		(
		
		  SELECT 
		        CONVERT(VARCHAR(255), M.bkg_seq) AS PRE_BKG_SEQ,		  
		        CONVERT(VARCHAR(255), M.bkg_seq) AS BKG_SEQ,
		        CONVERT(VARCHAR(255), 'P')       AS PART,
		        CONVERT(VARCHAR(255), '' + ' ' + M.bkg_seq) AS SORT,
		        1 AS LEVEL
		        <!-- #4821 [PATENT] [Binex] Booking List 속도 문제 -->
			/***
            M.BKG_NO,
            M.BKG_DT_TM,
            M.RGST_OFC_CD,
            M.BIZ_CLSS_CD,
            M.ETD_DT_TM,
            M.ETA_DT_TM,
            M.POR_CD,
            M.POR_NM,
            M.POL_CD,
            M.POL_NM,
            M.POD_CD,
            M.POD_NM,
            M.DEL_CD,
            M.DEL_NM,
            M.PRNR_TRDP_CD,
            M.PRNR_TRDP_NM,
            M.SHPR_TRDP_CD,
            M.SHPR_TRDP_NM,
            M.CNEE_TRDP_CD,
            M.CNEE_TRDP_NM,
            M.LNR_TRDP_CD,
            M.LNR_TRDP_NM,
            M.NTFY_TRDP_CD,
            M.NTFY_TRDP_NM,
            M.ACT_SHPR_TRDP_CD,
            M.ACT_SHPR_TRDP_NM,
            M.SHP_MOD_CD,
            M.CUST_REF_NO,
            M.ASGN_USRID,
            M.RGST_USRID,
            M.EXP_REF_NO,
            M.LNR_BKG_NO,
            M.TRNK_VSL_NM,
            M.TRNK_VOY,
            M.PCK_QTY,
            M.GRS_WGT,
            M.GRS_WGT1,
            M.MEAS,
            M.LC_NO,
            M.BKG_STS_CD,
            M.SLS_USRID   
		    <!-- #1890 [PATENT] Booking List, Consolidation List 媛쒖꽑 ?ы빆 - 留곹겕 ??異붽? -->
		    ,M.TRKG_SVC_FLG
		    ,M.CSTMS_SVC_FLG
		    <!-- #1891 [PATENT] Booking List - VGM Cut-Off, SI Cut-Off search filter (S) -->
		    ,M.DOC_CUT_OFF_DT
		    ,M.VGM_CUT_OFF_DT
		    <!-- #1891 [PATENT] Booking List - VGM Cut-Off, SI Cut-Off search filter (E) -->
		    
		    <!-- #3190 [BINEX] BOOKING LIST DATA LISTING ORDER -->
		    ,M.MODI_TMS
		    **/
		   FROM TB_BKG M
		   WHERE M.DELT_FLG = 'N'
		   
		   UNION ALL
		
		  SELECT 
		         CONVERT(VARCHAR(255), B.PRE_BKG_SEQ)    AS PRE_BKG_SEQ,		  
				     CONVERT(VARCHAR(255), b.BKG_SEQ)        AS BKG_SEQ,
		         CONVERT(VARCHAR(255), 'C')              AS PART,
		         CONVERT(VARCHAR(255), RTRIM(C.SORT) + '|' + B.BKG_SEQ) AS SORT,
		         LEVEL+1 AS LEVEL
			<!-- #4821 [PATENT] [Binex] Booking List 속도 문제 -->
			/****
            B.BKG_NO,
            B.BKG_DT_TM,
            B.RGST_OFC_CD,
            B.BIZ_CLSS_CD,
            B.ETD_DT_TM,
            B.ETA_DT_TM,
            B.POR_CD,
            B.POR_NM,
            B.POL_CD,
            B.POL_NM,
            B.POD_CD,
            B.POD_NM,
            B.DEL_CD,
            B.DEL_NM,
            B.PRNR_TRDP_CD,
            B.PRNR_TRDP_NM,
            B.SHPR_TRDP_CD,
            B.SHPR_TRDP_NM,
            B.CNEE_TRDP_CD,
            B.CNEE_TRDP_NM,
            B.LNR_TRDP_CD,
            B.LNR_TRDP_NM,
            B.NTFY_TRDP_CD,
            B.NTFY_TRDP_NM,
            B.ACT_SHPR_TRDP_CD,
            B.ACT_SHPR_TRDP_NM,
            B.SHP_MOD_CD,
            B.CUST_REF_NO,
            B.ASGN_USRID,
            B.RGST_USRID,
            B.EXP_REF_NO,
            B.LNR_BKG_NO,
            B.TRNK_VSL_NM,
            B.TRNK_VOY,
            B.PCK_QTY,
            B.GRS_WGT,
            B.GRS_WGT1,
            B.MEAS,
            B.LC_NO,
            B.BKG_STS_CD,
            B.SLS_USRID               
            <!-- #1890 [PATENT] Booking List, Consolidation List 媛쒖꽑 ?ы빆 - 留곹겕 ??異붽? -->
		    ,B.TRKG_SVC_FLG
		    ,B.CSTMS_SVC_FLG
   		    <!-- #1891 [PATENT] Booking List - VGM Cut-Off, SI Cut-Off search filter (S) -->
		    ,B.DOC_CUT_OFF_DT
		    ,B.VGM_CUT_OFF_DT
		    <!-- #1891 [PATENT] Booking List - VGM Cut-Off, SI Cut-Off search filter (E) -->
		    
		    <!-- #3190 [BINEX] BOOKING LIST DATA LISTING ORDER -->
		    ,B.MODI_TMS
		    ***/
		    FROM  H_LIST B, RECURSIVE_QUERY C
		    WHERE B.PRE_BKG_SEQ = C.BKG_SEQ
		)
SELECT
        a1.*     
    FROM
        (   
		SELECT
 
             ROW_NUMBER() OVER (ORDER BY BKG.BKG_DT_TM DESC, BKG.MODI_TMS ) as ROWNUM	
		     
		     <!-- #4821 [PATENT] [Binex] Booking List 속도 문제 -->
		     ,Q.PRE_BKG_SEQ
			,Q.BKG_SEQ
			,Q.PART
			,Q.SORT
			,Q.LEVEL
			,BKG.BKG_NO
			,BKG.BKG_DT_TM
			,BKG.RGST_OFC_CD
			,BKG.BIZ_CLSS_CD
			,BKG.ETD_DT_TM
			,BKG.ETA_DT_TM
			,BKG.POR_CD
			,BKG.POR_NM
			,BKG.POL_CD
			,BKG.POL_NM
			,BKG.POD_CD
			,BKG.POD_NM
			,BKG.DEL_CD
			,BKG.DEL_NM
			,BKG.PRNR_TRDP_CD
			,BKG.PRNR_TRDP_NM
			,BKG.SHPR_TRDP_CD
			,BKG.SHPR_TRDP_NM
			,BKG.CNEE_TRDP_CD
			,BKG.CNEE_TRDP_NM
			,BKG.LNR_TRDP_CD
			,BKG.LNR_TRDP_NM
			,BKG.NTFY_TRDP_CD
			,BKG.NTFY_TRDP_NM
			,BKG.ACT_SHPR_TRDP_CD
			,BKG.ACT_SHPR_TRDP_NM
			,BKG.SHP_MOD_CD
			,BKG.CUST_REF_NO
			,BKG.ASGN_USRID
			,BKG.RGST_USRID
			,BKG.EXP_REF_NO
			,BKG.LNR_BKG_NO
			,BKG.TRNK_VSL_NM
			,BKG.TRNK_VOY
			,BKG.PCK_QTY
			,BKG.GRS_WGT
			,BKG.GRS_WGT1
			,BKG.MEAS
			,BKG.LC_NO
			,BKG.BKG_STS_CD
			,BKG.SLS_USRID
			,BKG.TRKG_SVC_FLG
			,BKG.CSTMS_SVC_FLG
			,BKG.DOC_CUT_OFF_DT
			,BKG.VGM_CUT_OFF_DT
			,BKG.MODI_TMS
		
		     ,CASE WHEN  BKG.BIZ_CLSS_CD ='M' then BL.BL_NO 
		     	  WHEN  BKG.BIZ_CLSS_CD ='H' then (select BL_NO from TB_INTG_BL where REF_NO = BL.REF_NO and BIZ_CLSS_CD='M' and DELT_FLG = 'N')
		      end AS MBL_NO 
		     ,CASE WHEN  BKG.BIZ_CLSS_CD ='H' then BL.BL_NO end AS HBL_NO
		     		    
		    ,A.ENG_USR_NM AS ASGN_USR_NM
			,R.ENG_USR_NM AS RGST_USRNM
			,S.ENG_USR_NM AS SLS_USR_NM
		    <!-- #1890 [PATENT] Booking List, Consolidation List 媛쒖꽑 ?ы빆 - 留곹겕 ??異붽? -->
		    ,BL.REF_NO AS FILLING_NO       
		  from  RECURSIVE_QUERY Q
				JOIN TB_BKG BKG ON Q.BKG_SEQ = BKG.BKG_SEQ
				LEFT OUTER JOIN
		        TB_ADD_INFO_BND MBND 
		            ON BKG.BKG_SEQ = MBND.INTG_BKG_SEQ 
		            AND MBND.DELT_FLG = 'N'      
		        LEFT OUTER JOIN
		        TB_INTG_BL BL 
		            ON MBND.INTG_BL_SEQ = BL.INTG_BL_SEQ 
		            AND BL.BIZ_CLSS_CD = BKG.BIZ_CLSS_CD
		            AND BL.DELT_FLG = 'N'   
		        LEFT OUTER JOIN TB_USR A ON A.USRID = BKG.ASGN_USRID AND A.USR_TP = 'I'
				LEFT OUTER JOIN TB_USR R ON R.USRID = BKG.RGST_USRID AND R.USR_TP = 'I'
				LEFT OUTER JOIN TB_USR S ON S.USRID = BKG.SLS_USRID AND S.USR_TP = 'I'
							      
		WHERE 1=1
	 	  AND	PRE_bkg_SEQ not IN
					 (
							 SELECT 
								   A.BKG_SEQ
							 FROM h_list A
					  
					 )
		    <isNotEmpty property="f_bkg_no">
			    AND  BKG.BKG_NO LIKE  #f_bkg_no# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_bkg_strdt">
			 <!-- #1891 [PATENT] Booking List - VGM Cut-Off, SI Cut-Off search filter (S) -->
			 <isEqual property="f_dt_tp" compareValue="BKD">
			   AND  BKG.BKG_DT_TM BETWEEN #f_bkg_strdt# AND #f_bkg_enddt#
			 </isEqual>
			 <isEqual property="f_dt_tp" compareValue="DCD">
			   AND  BKG.DOC_CUT_OFF_DT BETWEEN #f_bkg_strdt# + '0000' AND #f_bkg_enddt# + '2359'
			 </isEqual>
			 <isEqual property="f_dt_tp" compareValue="VCD">
			   AND  BKG.VGM_CUT_OFF_DT BETWEEN #f_bkg_strdt# + '0000' AND #f_bkg_enddt# + '2359'
			 </isEqual>
			 <!-- #1891 [PATENT] Booking List - VGM Cut-Off, SI Cut-Off search filter (E) -->
			</isNotEmpty>
			<isNotEmpty property="f_prnr_trdp_nm">
			   AND  BKG.PRNR_TRDP_NM LIKE  #f_prnr_trdp_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_shpr_trdp_nm">
			   AND  BKG.SHPR_TRDP_NM LIKE  #f_shpr_trdp_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_cnee_trdp_nm">
			   AND  BKG.CNEE_TRDP_NM LIKE  #f_cnee_trdp_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_ntfy_trdp_nm">
			   AND  BKG.NTFY_TRDP_NM LIKE  #f_ntfy_trdp_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_ahpr_trdp_nm">
			   AND  BKG.ACT_SHPR_TRDP_NM LIKE  #f_ahpr_trdp_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_shp_mod_cd">
			   AND  BKG.SHP_MOD_CD = #f_shp_mod_cd#
			</isNotEmpty>
			<isNotEmpty property="f_mbl_no">
			   AND  BL.BL_NO = #f_mbl_no#
			</isNotEmpty>
			<isNotEmpty property="f_hbl_no">
			   AND  BL.BL_NO = #f_hbl_no#
			</isNotEmpty>
			<isNotEmpty property="f_pol_cd">
			   AND  BKG.POL_CD = #f_pol_cd#
			</isNotEmpty>
			<isNotEmpty property="f_pol_nm">
			   AND  BKG.POL_NM LIKE  #f_pol_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_po_no">
			   AND  EXISTS (SELECT 1 
			   			    FROM  TB_BKG_PO BKGPO 
			   			    INNER JOIN TB_PO PO ON BKGPO.PO_SYS_NO = PO.PO_SYS_NO AND PO.DELT_FLG = 'N'
			   			    WHERE BKG.BKG_SEQ = BKGPO.BKG_SEQ 
			   			    AND   BKGPO.DELT_FLG = 'N' 
			   			    AND   PO.CUST_PO_NO LIKE  #f_po_no# + '%')
			</isNotEmpty>
			<isNotEmpty property="f_lc_no">
			   AND  BKG.LC_NO = #f_lc_no#
			</isNotEmpty>
			<isNotEmpty property="f_bkg_sts_cd">
			   AND  BKG.BKG_STS_CD = #f_bkg_sts_cd#
			</isNotEmpty>
			<isNotEmpty property="f_ofc_cd">
			   AND  BKG.RGST_OFC_CD = #f_ofc_cd#
			</isNotEmpty>
			<isNotEmpty property="f_lnr_bkg_no">
			   AND  BKG.LNR_BKG_NO LIKE  #f_lnr_bkg_no# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_pod_cd">
			   AND  BKG.POD_CD = #f_pod_cd#
			</isNotEmpty>
			<isNotEmpty property="f_pod_nm">
			   AND  BKG.POD_NM LIKE  #f_pod_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_trnk_vsl_nm">
			   AND  BKG.TRNK_VSL_NM LIKE  #f_trnk_vsl_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_biz_clss_cd">
				AND  BKG.BIZ_CLSS_CD = #f_biz_clss_cd#
			</isNotEmpty>
             <isNotNull prepend="AND" property="f_opr_usrid"> 
		        <isEqual property="f_isb_pic_sel_cd" compareValue="ISB">
		             BKG.RGST_USRID = #f_opr_usrid#
		        </isEqual>
		        <isEqual property="f_isb_pic_sel_cd" compareValue="PIC">
		             BKG.SLS_USRID = #f_opr_usrid#
		        </isEqual>
		        <isEqual property="f_isb_pic_sel_cd" compareValue="ASGN">
		             BKG.ASGN_USRID = #f_opr_usrid#
		        </isEqual> 
		        <isEqual property="f_isb_pic_sel_cd" compareValue="OR">
		             (BKG.RGST_USRID = #f_opr_usrid# OR BKG.SLS_USRID = #f_opr_usrid#)
		        </isEqual>  	
	        </isNotNull>				
			 ) a1
			<![CDATA[ where a1.ROWNUM > #beginIdx# AND a1.ROWNUM <= #topCnt#	]]>
			<!-- #3190 [BINEX] BOOKING LIST DATA LISTING ORDER -->
			ORDER BY BKG_DT_TM DESC, MODI_TMS DESC
    </select>
    
    <!--  House B/L List select count    -->
    <select id="selectLNRBKG_LIST_CNT" parameterClass="java.util.HashMap" resultClass="Integer">
    /* BlCmmSQL.xml > selectLNRBKG_LIST_CNT */
		WITH H_LIST AS 
		(
			select 
			    RLT.RLT_BKG_SEQ as PRE_BKG_SEQ
				,H.*
				   
			 from TB_BKG H
			 left outer join tb_bkg_rlt RLT
			 on(H.BKG_SEQ = RLT.BKG_SEQ)
			 where rlt.RLT_BKG_SEQ is not null
			 and H.DELT_FLG = 'N'

		)
		,RECURSIVE_QUERY AS 
		(
		
		  SELECT 
		        CONVERT(VARCHAR(255), M.bkg_seq) AS PRE_BKG_SEQ,		  
		        CONVERT(VARCHAR(255), M.bkg_seq) AS BKG_SEQ,
		        CONVERT(VARCHAR(255), 'P')       AS PART,
		        CONVERT(VARCHAR(255), '' + ' ' + M.bkg_seq) AS SORT,
		        1 AS LEVEL
		        
		        <!-- #4821 [PATENT] [Binex] Booking List 속도 문제 -->
			/****
            M.BKG_NO,
            M.BKG_DT_TM,
            M.RGST_OFC_CD,
            M.BIZ_CLSS_CD,
            M.ETD_DT_TM,
            M.ETA_DT_TM,
            M.POR_CD,
            M.POR_NM,
            M.POL_CD,
            M.POL_NM,
            M.POD_CD,
            M.POD_NM,
            M.DEL_CD,
            M.DEL_NM,
            M.PRNR_TRDP_CD,
            M.PRNR_TRDP_NM,
            M.SHPR_TRDP_CD,
            M.SHPR_TRDP_NM,
            M.CNEE_TRDP_CD,
            M.CNEE_TRDP_NM,
            M.LNR_TRDP_CD,
            M.LNR_TRDP_NM,
            M.NTFY_TRDP_CD,
            M.NTFY_TRDP_NM,
            M.ACT_SHPR_TRDP_CD,
            M.ACT_SHPR_TRDP_NM,
            M.SHP_MOD_CD,
            M.CUST_REF_NO,
            M.RGST_USRID,
            M.EXP_REF_NO,
            M.LNR_BKG_NO,
            M.TRNK_VSL_NM,
            M.TRNK_VOY,
            M.PCK_QTY,
            M.GRS_WGT,
            M.GRS_WGT1,
            M.MEAS,
            M.LC_NO,
            M.BKG_STS_CD,
            M.ASGN_USRID,
            M.SLS_USRID	   
			<!-- #1891 [PATENT] Booking List - VGM Cut-Off, SI Cut-Off search filter (S) -->
		    ,M.DOC_CUT_OFF_DT
		    ,M.VGM_CUT_OFF_DT
		    <!-- #1891 [PATENT] Booking List - VGM Cut-Off, SI Cut-Off search filter (E) -->
		    ****/
		   FROM TB_BKG M
		   WHERE M.DELT_FLG = 'N'
		   
		   UNION ALL
		
		  SELECT 
		         CONVERT(VARCHAR(255), B.PRE_BKG_SEQ)    AS PRE_BKG_SEQ,		  
				     CONVERT(VARCHAR(255), b.BKG_SEQ)        AS BKG_SEQ,
		         CONVERT(VARCHAR(255), 'C')              AS PART,
		         CONVERT(VARCHAR(255), RTRIM(C.SORT) + '|' + B.BKG_SEQ) AS SORT,
		         LEVEL+1 AS LEVEL
			/****
            B.BKG_NO,
            B.BKG_DT_TM,
            B.RGST_OFC_CD,
            B.BIZ_CLSS_CD,
            B.ETD_DT_TM,
            B.ETA_DT_TM,
            B.POR_CD,
            B.POR_NM,
            B.POL_CD,
            B.POL_NM,
            B.POD_CD,
            B.POD_NM,
            B.DEL_CD,
            B.DEL_NM,
            B.PRNR_TRDP_CD,
            B.PRNR_TRDP_NM,
            B.SHPR_TRDP_CD,
            B.SHPR_TRDP_NM,
            B.CNEE_TRDP_CD,
            B.CNEE_TRDP_NM,
            B.LNR_TRDP_CD,
            B.LNR_TRDP_NM,
            B.NTFY_TRDP_CD,
            B.NTFY_TRDP_NM,
            B.ACT_SHPR_TRDP_CD,
            B.ACT_SHPR_TRDP_NM,
            B.SHP_MOD_CD,
            B.CUST_REF_NO,
            B.RGST_USRID,
            B.EXP_REF_NO,
            B.LNR_BKG_NO,
            B.TRNK_VSL_NM,
            B.TRNK_VOY,
            B.PCK_QTY,
            B.GRS_WGT,
            B.GRS_WGT1,
            B.MEAS,
            B.LC_NO,
            B.BKG_STS_CD,
            B.ASGN_USRID,	 
            B.SLS_USRID	 
           	<!-- #1891 [PATENT] Booking List - VGM Cut-Off, SI Cut-Off search filter (S) -->
		    ,B.DOC_CUT_OFF_DT
		    ,B.VGM_CUT_OFF_DT
		    <!-- #1891 [PATENT] Booking List - VGM Cut-Off, SI Cut-Off search filter (E) -->	
		    ***/
		    FROM  H_LIST B, RECURSIVE_QUERY C
		    WHERE B.PRE_BKG_SEQ = C.BKG_SEQ
		)
 
		SELECT
 			COUNT(*)
		  from  RECURSIVE_QUERY Q
		  		JOIN TB_BKG BKG     ON Q.BKG_SEQ = BKG.BKG_SEQ
				LEFT OUTER JOIN
		        TB_ADD_INFO_BND MBND 
		            ON BKG.BKG_SEQ = MBND.INTG_BKG_SEQ 
		            AND MBND.DELT_FLG = 'N'      
		        LEFT OUTER JOIN
		        TB_INTG_BL BL 
		            ON MBND.INTG_BL_SEQ = BL.INTG_BL_SEQ 
		            AND BL.BIZ_CLSS_CD = BKG.BIZ_CLSS_CD
		            AND BL.DELT_FLG = 'N'   
				      
		WHERE 1=1
	 	  AND	PRE_bkg_SEQ not IN
					 (
							 SELECT 
								   A.BKG_SEQ
							 FROM h_list A
					  
					 )
			<isNotEmpty property="f_bkg_no">
			    AND  BKG.BKG_NO LIKE  #f_bkg_no# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_bkg_strdt">
			 <!-- #1891 [PATENT] Booking List - VGM Cut-Off, SI Cut-Off search filter (S) -->
			 <isEqual property="f_dt_tp" compareValue="BKD">
			   AND  BKG.BKG_DT_TM BETWEEN #f_bkg_strdt# AND #f_bkg_enddt#
			 </isEqual>
			 <isEqual property="f_dt_tp" compareValue="DCD">
			   AND  BKG.DOC_CUT_OFF_DT BETWEEN #f_bkg_strdt# + '0000' AND #f_bkg_enddt# + '2359'
			 </isEqual>
			 <isEqual property="f_dt_tp" compareValue="VCD">
			   AND  BKG.VGM_CUT_OFF_DT BETWEEN #f_bkg_strdt# + '0000' AND #f_bkg_enddt# + '2359'
			 </isEqual>
			 <!-- #1891 [PATENT] Booking List - VGM Cut-Off, SI Cut-Off search filter (E) -->
			</isNotEmpty>
			<isNotEmpty property="f_prnr_trdp_nm">
			   AND  BKG.PRNR_TRDP_NM LIKE  #f_prnr_trdp_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_shpr_trdp_nm">
			   AND  BKG.SHPR_TRDP_NM LIKE  #f_shpr_trdp_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_cnee_trdp_nm">
			   AND  BKG.CNEE_TRDP_NM LIKE  #f_cnee_trdp_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_ntfy_trdp_nm">
			   AND  BKG.NTFY_TRDP_NM LIKE  #f_ntfy_trdp_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_ahpr_trdp_nm">
			   AND  BKG.ACT_SHPR_TRDP_NM LIKE  #f_ahpr_trdp_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_shp_mod_cd">
			   AND  BKG.SHP_MOD_CD = #f_shp_mod_cd#
			</isNotEmpty>
			<isNotEmpty property="f_mbl_no">
			   AND  BL.BL_NO = #f_mbl_no#
			</isNotEmpty>
			<isNotEmpty property="f_hbl_no">
			   AND  BL.BL_NO = #f_hbl_no#
			</isNotEmpty>
			<isNotEmpty property="f_pol_cd">
			   AND  BKG.POL_CD = #f_pol_cd#
			</isNotEmpty>
			<isNotEmpty property="f_pol_nm">
			   AND  BKG.POL_NM LIKE  #f_pol_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_po_no">
			   AND  EXISTS (SELECT 1 
			   			    FROM  TB_BKG_PO BKGPO 
			   			    INNER JOIN TB_PO PO ON BKGPO.PO_SYS_NO = PO.PO_SYS_NO AND PO.DELT_FLG = 'N'
			   			    WHERE BKG.BKG_SEQ = BKGPO.BKG_SEQ 
			   			    AND   BKGPO.DELT_FLG = 'N' 
			   			    AND   PO.CUST_PO_NO LIKE  #f_po_no# + '%')
			</isNotEmpty>
			<isNotEmpty property="f_lc_no">
			   AND  BKG.LC_NO = #f_lc_no#
			</isNotEmpty>
			<isNotEmpty property="f_bkg_sts_cd">
			   AND  BKG.BKG_STS_CD = #f_bkg_sts_cd#
			</isNotEmpty>
			<isNotEmpty property="f_ofc_cd">
			   AND  BKG.RGST_OFC_CD = #f_ofc_cd#
			</isNotEmpty>
			<isNotEmpty property="f_lnr_bkg_no">
			   AND  BKG.LNR_BKG_NO LIKE  #f_lnr_bkg_no# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_pod_cd">
			   AND  BKG.POD_CD = #f_pod_cd#
			</isNotEmpty>
			<isNotEmpty property="f_pod_nm">
			   AND  BKG.POD_NM LIKE  #f_pod_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_trnk_vsl_nm">
			   AND  BKG.TRNK_VSL_NM LIKE  #f_trnk_vsl_nm# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_biz_clss_cd">
				AND  BKG.BIZ_CLSS_CD = #f_biz_clss_cd#
			</isNotEmpty>
             <isNotNull prepend="AND" property="f_opr_usrid"> 
		        <isEqual property="f_isb_pic_sel_cd" compareValue="ISB">
		             BKG.RGST_USRID = #f_opr_usrid#
		        </isEqual>
		        <isEqual property="f_isb_pic_sel_cd" compareValue="PIC">
		             BKG.SLS_USRID = #f_opr_usrid#
		        </isEqual>
				<isEqual property="f_isb_pic_sel_cd" compareValue="ASGN">
		             BKG.ASGN_USRID = #f_opr_usrid#
		        </isEqual> 
		         
		        <isEqual property="f_isb_pic_sel_cd" compareValue="OR">
		             (BKG.RGST_USRID = #f_opr_usrid# OR BKG.SLS_USRID = #f_opr_usrid#)
		        </isEqual>  	
	        </isNotNull>			
	</select>
	
	<!-- #3524 Carrier Booking 의 정보로 여러개의 MBL을 생성 시, Carrier Booking# 중복 validation 추가 -->
	<select id="selectLnrBkgNoCnt" parameterClass="HashMap" resultClass="String">
		/* BlCmmSQL.xml > selectLnrBkgNoCnt */
		SELECT count(1)
		  FROM TB_BKG 
		 WHERE LNR_BKG_NO = #f_lnr_bkg_no#
		   AND BIZ_CLSS_CD = 'M'
		   AND (
		   		BKG_STS_CD = 'CF'
		   		OR 
		   		BKG_STS_CD = 'BL'
		   )
		   AND DELT_FLG = 'N'
    </select>
  	
	<select id="selectLnrBkgNoInfo" parameterClass="HashMap" resultClass="String">
		/* BlCmmSQL.xml > selectLnrBkgNoInfo */
		SELECT TOP 1 
		      ISNULL(LNR_BKG_NO, '') 
		      + '^^' + ISNULL(BKG_NO, '') 
		      + '^^' + ISNULL(BKG_SEQ, '') 
		      + '^^' + ISNULL(BKG_DT_TM, '')
		      + '^^' + ISNULL(LNR_TRDP_CD, '') 
		      + '^^' + ISNULL(LNR_TRDP_NM, '') 
		      + '^^' + ISNULL(SHPR_TRDP_CD, '') 
		      + '^^' + ISNULL(SHPR_TRDP_NM, '') 
		      + '^^' + ISNULL(SHPR_TRDP_ADDR, '') 
		      + '^^' + ISNULL(CUST_REF_NO, '') 
		      + '^^' + ISNULL(CNEE_TRDP_CD, '') 				<!-- 10 -->
		      + '^^' + ISNULL(CNEE_TRDP_NM, '') 
		      + '^^' + ISNULL(CNEE_TRDP_ADDR, '') 
		      + '^^' + ISNULL(NTFY_TRDP_CD, '') 
		      + '^^' + ISNULL(NTFY_TRDP_NM, '') 
		      + '^^' + ISNULL(NTFY_TRDP_ADDR, '') 
		      + '^^' + ISNULL(LNR_CTRT_NO, '')
		      + '^^' + ISNULL(FWRD_AGN_TRDP_CD, '') 
		      + '^^' + ISNULL(FWRD_AGN_TRDP_NM, '') 
		      + '^^' + ISNULL(FWRD_AGN_TRDP_ADDR, '') 
		      + '^^' + ISNULL(PRNR_TRDP_CD, '')  				<!-- 20 -->
		      + '^^' + ISNULL(PRNR_TRDP_NM, '') 
		      + '^^' + ISNULL(TRNK_VSL_CD, '') 
		      + '^^' + ISNULL(TRNK_VSL_NM, '') 
		      + '^^' + ISNULL(TRNK_VOY, '') 
		      + '^^' + ISNULL(POR_CD, '') 
		      + '^^' + ISNULL(POR_NM, '') 
		      + '^^' + ISNULL(POL_CD, '') 
		      + '^^' + ISNULL(POL_NM, '') 
		      + '^^' + ISNULL(POD_CD, '') 
		      + '^^' + ISNULL(POD_NM, '')  						<!-- 30 -->
		      + '^^' + ISNULL(DEL_CD, '') 
		      + '^^' + ISNULL(DEL_NM, '') 
		      + '^^' + ISNULL(FNL_DEST_LOC_CD, '') 
		      + '^^' + ISNULL(FNL_DEST_LOC_NM, '') 
		      + '^^' + ISNULL(ETD_POR_TM, '')
		      + '^^' + ISNULL(ETD_DT_TM, '')
		      + '^^' + ISNULL(ETA_DT_TM, '')
		      + '^^' + ISNULL(ETA_DEL_DT_TM, '')
		      + '^^' + ISNULL(ETA_FNL_DEST_DT_TM, '')
		      + '^^' + ISNULL(REP_CMDT_CD, '')  				<!-- 40 -->
		      + '^^' + ISNULL(REP_CMDT_NM, '') 
		      + '^^' + ISNULL(FRT_TERM_CD, '') 
		      + '^^' + ISNULL(convert(varchar,PCK_QTY), '') 
		      + '^^' + ISNULL(PCK_UT_CD, '') 
		      + '^^' + ISNULL(GRS_WGT_UT_CD, '') 
		      + '^^' + ISNULL(convert(varchar,GRS_WGT), '') 
		      + '^^' + ISNULL(convert(varchar,GRS_WGT1), '') 
		      + '^^' + ISNULL(MEAS_UT_CD, '') 
		      + '^^' + ISNULL(convert(varchar,MEAS), '') 
		      + '^^' + ISNULL(convert(varchar,MEAS1), '')  		<!-- 50 -->
		      + '^^' + ISNULL(FM_SVC_TERM_CD, '') 
		      + '^^' + ISNULL(TO_SVC_TERM_CD, '') 
		      + '^^' + ISNULL(CARGO_TP_CD, '') 
		      + '^^' + ISNULL(CNTR_INFO, '') 
		      + '^^' + ISNULL(RMK, '')  
		      + '^^' + ISNULL(BKG_AGN_TRDP_CD, '')  
		      + '^^' + ISNULL(BKG_AGN_TRDP_NM, '')  
		      + '^^' + ISNULL(BKG_AGN_TRDP_ADDR, '')  
		      + '^^' + ISNULL(ACT_SHPR_TRDP_CD, '')  
		      + '^^' + ISNULL(ACT_SHPR_TRDP_NM, '')  			<!-- 60 -->
		      + '^^' + ISNULL(HBL_TP_CD, '')  
		      + '^^' + ISNULL(NOMI_FLG, '')  
		      + '^^' + ISNULL(SHP_MOD_CD, '')  
		      + '^^' + ISNULL(ASGN_USRID, '') 
		      + '^^' + ISNULL(RGST_USRID, '')  
		      + '^^' + ISNULL(BKG_STS_CD, '')  
			<!-- #3524 Carrier Booking 의 정보로 여러개의 MBL을 생성 시, Carrier Booking# 중복 validation 추가 -->
				+ '^^' + ISNULL(substring(vgm_cut_off_dt,1,8), '')  <!--   67 -->
				+ '^^' + ISNULL(substring(vgm_cut_off_dt,9,12), '')
				+ '^^' + ISNULL(substring(doc_cut_off_dt,1,8) , '')
				+ '^^' + ISNULL(substring(doc_cut_off_dt,9,12), '')<!-- 70 -->
				+ '^^' + ISNULL(substring(rail_cut_off_dt,1,8), '')
				+ '^^' + ISNULL(substring(rail_cut_off_dt,9,12), '')
				+ '^^' + ISNULL(substring(port_open_dt,1,8), '')
				+ '^^' + ISNULL(substring(port_open_dt,9,12), '')
				+ '^^' + ISNULL(rcv_wh_cd, '')
				+ '^^' + ISNULL(rcv_wh_nm, '')	
				+ '^^' + ISNULL(pu_trdp_cd, '')
				+ '^^' + ISNULL(pu_trdp_nm, '')
				+ '^^' + ISNULL(substring(cut_off_dt,1,8),'')
				+ '^^' + ISNULL(substring(cut_off_dt,9,12),'') <!-- 80 -->	
				+ '^^' + ISNULL(etd_dt_tm,'')	
				<!-- #4899 ** [Binex] Carrier Booking Entry to have Customer Ref. No., Export References No., Agent Ref. No. -->
				+ '^^' + ISNULL(EXP_REF_NO, '') <!-- 82 -->	
				+ '^^' + ISNULL(PRNR_REF_NO, '') <!-- 83 -->	
				+ '^^' + ISNULL(OBL_TP_CD, '') <!-- 84 -->					      
		  FROM TB_BKG 
		 WHERE LNR_BKG_NO = #f_lnr_bkg_no#
		   AND BIZ_CLSS_CD = 'M'
		   AND (
		   		BKG_STS_CD = 'CF'
		   		OR 
		   		BKG_STS_CD = 'BL'
		   )
		   AND DELT_FLG = 'N'
    </select>
    
    <select id="selectLnrBkgNo" parameterClass="java.util.HashMap" resultClass="String">
    	/* BlCmmSQL.xml > selectLnrBkgNo */
    	SELECT ISNULL(LNR_BKG_NO, '') AS LNR_BKG_NO
		  FROM TB_BKG 
		 WHERE BKG_SEQ = #bkg_seq#
		   AND BIZ_CLSS_CD = 'M'
		   AND DELT_FLG = 'N'
    </select>
    
    <select id="searchBkgStatus" parameterClass="java.util.HashMap" resultClass="String">
    	/* BlCmmSQL.xml > searchBkgStatus */
    	SELECT BKG_STS_CD
		  FROM TB_BKG 
		 WHERE BKG_SEQ = #bkg_seq#
		   AND BIZ_CLSS_CD = #biz_clss_cd#
		   AND DELT_FLG = 'N'
    </select>
    
    <update id="updateBKG_STATUS" parameterClass="HashMap">
    	/* BlCmmSQL.xml > updateBKG_STATUS */
        UPDATE TB_BKG
		   SET BKG_STS_CD 		= #bkg_sts_cd#
		      ,MODI_USRID 		= #proc_usrid#
		      ,MODI_OFC_CD 		= #proc_ofccd#
		      ,MODI_TMS 		= getdate()
		 WHERE BKG_SEQ 			= #bkg_seq#
    </update> 
    
    
    <update id="updateBKG_CFM_INFO" parameterClass="HashMap">
   		/** BlCmmSQL.xml > updateBKG_CFM_INFO **/
   		UPDATE TB_BKG
		   SET CFM_USRID 		= #cfm_usrid#
		      ,CFM_DT 			= #cfm_dt#
		      ,MODI_USRID 		= #proc_usrid#
		      ,MODI_OFC_CD 		= #proc_ofccd#
		      ,MODI_TMS 		= getdate() 	          
		 WHERE BKG_SEQ 			= #bkg_seq#
    </update>
    
    <!-- Booking Status History 저장 -->
    <insert id="insertBKG_STS_HIS" parameterClass="HashMap">
    	/* BlCmmSQL.xml > insertBKG_STS_HIS */
    	INSERT INTO TB_BKG_STS_HIS (
    		BKG_SEQ,		MODI_SEQ,		BKG_STS_CD,		RSN_TXT,	RGST_USRID,		RGST_OFC_CD,	RGST_TMS
    	) 
    	SELECT #bkg_seq#,	(SELECT ISNULL(MAX(MODI_SEQ),0) + 1 FROM TB_BKG_STS_HIS WHERE BKG_SEQ = #bkg_seq#),		#bkg_sts_cd#,		#rsn_txt#,		#proc_usrid#,		#proc_ofccd#,		getdate()
    </insert>
    
    <!-- Booking Status History 조회 -->
    <select id="selectBKG_STS_HIS" parameterClass="HashMap" resultClass="SeeMasterBLVO">
    	/* BlCmmSQL.xml > selectBKG_STS_HIS */
    	
    	SELECT MODI_SEQ, BKG_STS_CD, RSN_TXT
    	,  (SELECT ENG_USR_NM
			FROM TB_USR
			WHERE 1=1
			AND USRID = HIS.RGST_USRID)AS RGST_USRID
		<!-- (2017/06/08 1차)  릴리스 테스트 내역 - 미진 사항  -->	
        ,CONVERT(VARCHAR(10),DATEADD(MINUTE,60*CONVERT( float,isnull (ccd.RMK ,'0')),HIS.RGST_TMS ),112) + REPLACE(CONVERT(VARCHAR(8),DATEADD(MINUTE,60*CONVERT( float,isnull (ccd.RMK ,'0')),HIS.RGST_TMS ),108),':','')  AS RGST_TMS              
    	
    	  FROM TB_BKG_STS_HIS HIS
		  LEFT OUTER JOIN TB_OFC TOF ON HIS.RGST_OFC_CD = TOF.OFC_CD      
		  LEFT OUTER JOIN TB_COM_CD_DTL CCD ON CCD.COM_CD = 'TIMEZN' AND TOF.TIME_ZONE = CCD.CD_VAL         	  
    	 WHERE BKG_SEQ = #f_bkg_seq#
    	 ORDER BY HIS.RGST_TMS DESC
    </select>
    
    <!-- Booking Modify Tms 조회 -->
    <select id="searchBkgSeqModiTms" resultClass="java.lang.String" parameterClass="java.util.HashMap">
		/*  searchBkgSeqModiTms  */
		SELECT MAX(MODI_TMS) AS MODI_TMS
		FROM (
			SELECT MODI_TMS
			  FROM TB_BKG
			 WHERE BKG_SEQ = #bkg_seq#
		) INVAL
    </select>    
    
    <!-- ROLE && INV 체크   -->
    <select id="selectRoleInvChk" parameterClass="HashMap" resultClass="HashMap">
		SELECT COUNT(*) AS INV_CNT
			   ,(
			   		SELECT COUNT(*) AS CNT
				  FROM TB_USR A
				  JOIN  TB_ROLE B ON A.ROLE_CD = B.ROLE_CD
				  LEFT JOIN TB_ROLE_FNC C ON B.ROLE_CD = C.ROLE_CD
				 WHERE A.USRID = #user_id# 
				   AND C.ROLE_FNC_CD = #role_fnc_cd#
				   AND C.USE_FLG = 'Y'  
			   ) AS ROLE_CNT
			   	
		  FROM TB_INTG_BL BL
		  JOIN TB_FRT FRT ON BL.INTG_BL_SEQ = FRT.INTG_BL_SEQ
		  JOIN TB_INV_DTL INV ON FRT.INV_SEQ = INV.INV_SEQ 
		 WHERE 1=1  
		   AND BL.DELT_FLG  ='N'
		   AND FRT.DELT_FLG ='N'
		   AND INV.DELT_FLG ='N'
		   
		   <isNotEmpty property="ref_no">
		   AND BL.REF_NO =   #ref_no#
		   </isNotEmpty> 
		   <isNotEmpty property="intg_bl_seq">
		   AND BL.REF_NO =   (SELECT A.REF_NO from TB_INTG_BL A where a.INTG_BL_SEQ=cast(#intg_bl_seq# as varchar) )
		   </isNotEmpty> 

    </select>
        
    <!-- ROLE && INV 체크   -->
    <select id="selectHouseRoleInvChk" parameterClass="HashMap" resultClass="HashMap">
		SELECT COUNT(*) AS INV_CNT
			   ,(
			   		SELECT COUNT(*) AS CNT
				  FROM TB_USR A
				  JOIN  TB_ROLE B ON A.ROLE_CD = B.ROLE_CD
				  LEFT JOIN TB_ROLE_FNC C ON B.ROLE_CD = C.ROLE_CD
				 WHERE A.USRID = #user_id# 
				   AND C.ROLE_FNC_CD = #role_fnc_cd#
				   AND C.USE_FLG = 'Y'  
			   ) AS ROLE_CNT
			   	
		  FROM TB_INTG_BL BL
		  JOIN TB_FRT FRT ON BL.INTG_BL_SEQ = FRT.INTG_BL_SEQ
		  JOIN TB_INV_DTL INV ON FRT.INV_SEQ = INV.INV_SEQ 
		 WHERE 1=1  
		   AND BL.DELT_FLG  ='N'
		   AND FRT.DELT_FLG ='N'
		   AND INV.DELT_FLG ='N'
		   AND BL.INTG_BL_SEQ =  cast(#intg_bl_seq# as varchar)

    </select>    
    
    <!-- release 여부를 설정한다. -->
    <update id="updateReleaseOption" parameterClass="HashMap">
		/*updateReleaseOption*/
		UPDATE  TB_INTG_BL
		   SET  RLSD_FLG    = #rlsd_flg#
               ,RLSD_DT_TM  = REPLACE(CONVERT(VARCHAR(12), getdate(), 111), '/', '')
        	   ,RLSD_USRID 	= #rlsd_usrid#
        	   ,MODI_USRID 	= #proc_usrid#
		       ,MODI_OFC_CD = #proc_ofccd#
			   ,MODI_TMS  	= GETUTCDATE()
		 WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
	</update>
	
	
    <select id="selectBKG_TPSZ_LIST" parameterClass="java.util.HashMap" resultClass="com.clt.apps.fis.see.frt.freight.dto.FrtTpszListVO">
	    SELECT CNTR_TPSZ_CD,   COUNT(CNTR_TPSZ_CD) AS CNTR_TPSZ_CNT  
          FROM TB_BKG_CNTR_LIST
         WHERE BKG_SEQ =  #bkg_seq#        
		   AND DELT_FLG = 'N' 
	  GROUP BY CNTR_TPSZ_CD    
    </select>
    
    
    <select id="selectCheckCustomerBooking" parameterClass="HashMap" resultClass="Integer">
		SELECT 
			COUNT(*)
		  FROM TB_BKG
		 WHERE BKG_SEQ = #bkg_seq#
		   AND BKG_NO  = #bkg_no#
	</select>      

    <select id="selectCheckCreateCarrierBooking" parameterClass="HashMap" resultClass="Integer">
		SELECT 
			COUNT(*)
		  FROM TB_BKG CUS
		  JOIN TB_BKG_RLT RLT
		   ON(CUS.BKG_SEQ = RLT.BKG_SEQ  )
		  JOIN TB_BKG CARI 
		   ON(CARI.BKG_SEQ = RLT.RLT_BKG_SEQ   )
		 WHERE CUS.BKG_SEQ = #bkg_seq#
		   AND CUS.BKG_NO  = #bkg_no#
    </select>
    
    <insert id="insertBKG_RLT_INFO" parameterClass="HashMap">
        INSERT INTO  TB_BKG_RLT(
                 bkg_seq,         rlt_bkg_seq,       bkg_rlt_cd,
                 rgst_usrid,      rgst_ofc_cd,       rgst_tms,         
                 modi_usrid,      modi_ofc_cd,       modi_tms,     delt_flg
        )VALUES(
                #tb_bkg_seq#,    #rlt_tb_bkg_seq#,  #tb_bkg_rlt_cd#,
                #proc_usrid#,     #proc_ofccd#,      getdate(),
                #proc_usrid#,     #proc_ofccd#,      GETUTCDATE(),        'N'
        )
    </insert>    
    
    <!-- CNTR LIST을 입력함  -->
	<select id="selectBKG_CNTR_LIST_COPY_INFO" parameterClass="HashMap" resultClass="BkgCntrListVO">
		WITH tmp(lv) AS
		(
			SELECT 1 lv
			 UNION ALL
			SELECT lv + 1
			  FROM tmp
			 WHERE lv + 1 <![CDATA[ <= ]]>  500
		)
		, TEMP_LIST AS
		(
		  	SELECT  '' AS BKG_SEQ
		  	       ,A.CNTR_SEQ
		  	       ,''   AS cntr_no
		  	       ,A.CNTR_TPSZ_CD
		  	       ,''   AS seal_no
		  	       ,''   AS mty_out_dt
		  	       ,''   AS mty_out_tm
		  	       ,''   AS full_rtn_dt
		  	       ,''   AS full_rtn_tm
		  	       ,A.DELT_FLG
		  	       ,''   AS cntr_ref_no
				   ,(ROW_NUMBER() OVER (PARTITION BY A.BKG_SEQ , A.CNTR_TPSZ_CD ORDER BY  A.BKG_SEQ , A.CNTR_TPSZ_CD)) AS RNUM
				   ,'I'  AS cntr_ibflag
		
			  FROM TB_BKG_CNTR A 
				   ,TMP
			 WHERE 1=1 
			   AND BKG_SEQ = #c_bkg_seq#
			   AND TMP.LV BETWEEN 1 AND A.QTY 
			   AND A.DELT_FLG ='N'
		)
		select * from TEMP_LIST
		order by CNTR_TPSZ_CD
		OPTION (MAXRECURSION 0)
		
    </select>    
    
    <select id="selectBKG_PO_COPY_INFO" parameterClass="HashMap" resultClass="BkgPoItemInfoVO">
		SELECT  bkg.bkg_seq,
				bkg.po_sys_no,
				po.cust_po_no,
				bkg.po_cmdt_seq,
				bkg.cust_itm_id,
				custitm.item_nm 	as cust_itm_nm,
				bkg.pck_ut_cd 		as cmdt_pck_ut_cd,
				unit.pck_nm 		as cmdt_pck_ut_nm, 
				bkg.pck_inr_qty 	as cmdt_pck_inr_qty,
		        bkg.pck_qty 		as cmdt_pck_qty,
		        bkg.ea_cnt 			as cmdt_ea_cnt,
		        bkg.ttl_qty 		as cmdt_ttl_qty,
		        bkg.cmdt_kgs_wgt,
		        bkg.cmdt_lbs_wgt,		        
		        bkg.cmdt_cbm_meas,
		        bkg.cmdt_cft_meas,
		        'I' AS item_ibflag
		  FROM  tb_bkg_po bkg
		 INNER  JOIN tb_po po ON bkg.po_sys_no = po.po_sys_no AND po.delt_flg = 'N'
		  LEFT  OUTER JOIN tb_po_cmdt po_cmdt ON bkg.po_sys_no = po_cmdt.po_sys_no AND bkg.po_cmdt_seq = po_cmdt.po_cmdt_seq AND po_cmdt.delt_flg = 'N'
	      LEFT  OUTER JOIN tl_ctrt_cust_item custitm ON po_cmdt.ctrt_no = custitm.ctrt_no AND po_cmdt.item_sys_no = custitm.item_sys_no AND po_cmdt.cust_itm_id = custitm.item_cd AND custitm.item_use_flg = 'Y'
		  LEFT  OUTER JOIN tb_pck_ut_cd unit ON bkg.pck_ut_cd = unit.pck_ut_cd AND unit.use_flg = 'Y'
		 WHERE  bkg.bkg_seq = #c_bkg_seq# 
		   AND  bkg.delt_flg = 'N'
	  ORDER BY  bkg.po_sys_no, bkg.po_cmdt_seq ASC
    </select>    
    
    
    <update id="updateBKG_CUS_STATUS" parameterClass="HashMap">
    	/* BlCmmSQL.xml > updateBKG_CUS_STATUS */
        UPDATE TB_BKG
		   SET BKG_STS_CD 		= #bkg_sts_cd#
		      ,MODI_USRID 		= #proc_usrid#
		      ,MODI_OFC_CD 		= #proc_ofccd#
		      ,MODI_TMS 		= getdate()
		 WHERE BKG_SEQ 			in  (SELECT A.BKG_SEQ 
		 							   FROM TB_BKG_RLT A 
		 							  WHERE A.RLT_BKG_SEQ = #bkg_seq# 
		 							    AND A.RGST_OFC_CD = #proc_ofccd#
		 							 )
    </update>    
    <!-- Booking Status History 저장 -->
    <insert id="insertBKG_CUS_STS_HIS" parameterClass="HashMap">
    	/* BlCmmSQL.xml > insertBKG_CUS_STS_HIS */
    	INSERT INTO TB_BKG_STS_HIS (
    		BKG_SEQ,		MODI_SEQ,		BKG_STS_CD,		RSN_TXT,	RGST_USRID,		RGST_OFC_CD,	RGST_TMS
    	) 
    	
    	SELECT A.BKG_SEQ
    	      ,(SELECT ISNULL(MAX(MODI_SEQ),0) + 1 FROM TB_BKG_STS_HIS WHERE BKG_SEQ = A.BKG_SEQ)
    	      ,#bkg_sts_cd#
    	      ,#rsn_txt#
    	      ,#proc_usrid#
    	      ,#proc_ofccd#
    	      ,	getdate()
    	  from TB_BKG_RLT A
    	 WHERE A.RLT_BKG_SEQ = #bkg_seq#
    	   AND A.RGST_OFC_CD = #proc_ofccd#    
    </insert>   
    
         <!-- Item목록 조회   -->
    <select id="selectSHP_CMDT_COPY_LIST" parameterClass="HashMap" resultClass="ItmLstVO">
	        SELECT  '' AS intg_bl_seq
	        	    ,'' AS item_cntr_list_seq
					,cust_po_no	 AS item_cust_po_no
					,cust_itm_id AS item_cmdt_cd
					,cust_itm_nm AS ITEM_CMDT_NM
	        	    ,cmdt_pck_qty AS item_shp_cmdt_cd
	        	    ,cmdt_pck_ut_cd AS item_pck_ut_cd
					,cmdt_pck_inr_qty AS item_pck_inr_qty
					,cmdt_ea_cnt AS item_ea_cnt
					,cmdt_ttl_qty AS item_ttl_qty					
	        	    ,cmdt_kgs_wgt AS item_wgt
	        	    ,cmdt_lbs_wgt	AS item_lbs_wgt
	        	    ,cmdt_cbm_meas AS item_meas
	        	    ,cmdt_cft_meas AS item_cft_meas
	        	    ,'' AS item_shp_cmdt_nm					 
	        	    ,'' AS item_shp_cmdt_seq
	        	    ,'' AS item_pck_qty
	        	    ,'' AS item_rmk
	        	    ,'' AS item_dg_cd_tp
	        	    ,'' AS item_dg_cd
					,'' AS item_dg_cntc_nm
	        	    ,'' AS item_pck_nm
	        	    ,'' AS item_cntr_no
	        	    ,''	AS item_hs_grp_cd
					,'' AS item_po_cmdt_seq
					,'' AS item_po_sys_no
					,item_ibflag



		FROM (	      
	      
		SELECT  bkg.bkg_seq,
				bkg.po_sys_no,
				po.cust_po_no,
				bkg.po_cmdt_seq,
				bkg.cust_itm_id,
				custitm.item_nm 	as cust_itm_nm,
				bkg.pck_ut_cd 		as cmdt_pck_ut_cd,
				unit.pck_nm 		as cmdt_pck_ut_nm, 
				bkg.pck_inr_qty 	as cmdt_pck_inr_qty,
		        bkg.pck_qty 		as cmdt_pck_qty,
		        bkg.ea_cnt 			as cmdt_ea_cnt,
		        bkg.ttl_qty 		as cmdt_ttl_qty,
		        bkg.cmdt_kgs_wgt,
		        bkg.cmdt_lbs_wgt,		        
		        bkg.cmdt_cbm_meas,
		        bkg.cmdt_cft_meas,
		        'I' AS item_ibflag
		  FROM  tb_bkg_po bkg
		 INNER  JOIN tb_po po ON bkg.po_sys_no = po.po_sys_no AND po.delt_flg = 'N'
		  LEFT  OUTER JOIN tb_po_cmdt po_cmdt ON bkg.po_sys_no = po_cmdt.po_sys_no AND bkg.po_cmdt_seq = po_cmdt.po_cmdt_seq AND po_cmdt.delt_flg = 'N'
	      LEFT  OUTER JOIN tl_ctrt_cust_item custitm ON po_cmdt.ctrt_no = custitm.ctrt_no AND po_cmdt.item_sys_no = custitm.item_sys_no AND po_cmdt.cust_itm_id = custitm.item_cd AND custitm.item_use_flg = 'Y'
		  LEFT  OUTER JOIN tb_pck_ut_cd unit ON bkg.pck_ut_cd = unit.pck_ut_cd AND unit.use_flg = 'Y'
		 WHERE  bkg.bkg_seq = #bkg_seq#
		   AND  bkg.delt_flg = 'N'
	  	      
	     ) PO
    </select>
    
	<select id="selectBKGCNTR_COPY_LIST" parameterClass="HashMap" resultClass="CntrLstVO">
		WITH tmp(lv) AS
		(
			SELECT 1 lv
			 UNION ALL
			SELECT lv + 1
			  FROM tmp
			 WHERE lv + 1 <![CDATA[ <= ]]>  500
		)
		, TEMP_LIST AS
		(
		  	SELECT  '' AS BKG_SEQ
		  	       ,A.CNTR_SEQ
		  	       ,''   AS cntr_no
		  	       ,A.CNTR_TPSZ_CD
		  	       ,''   AS seal_no
		  	       ,''   AS seal_no1
		  	       ,''   AS mty_out_dt
		  	       ,''   AS mty_out_tm
		  	       ,''   AS full_rtn_dt
		  	       ,''   AS full_rtn_tm
		  	       ,A.DELT_FLG
		  	       ,''   AS cntr_ref_no
				   ,(ROW_NUMBER() OVER (PARTITION BY A.BKG_SEQ , A.CNTR_TPSZ_CD ORDER BY  A.BKG_SEQ , A.CNTR_TPSZ_CD)) AS RNUM
				   ,'I'  AS cntr_ibflag
		
			  FROM TB_BKG_CNTR A 
				   ,TMP
			 WHERE 1=1 
			   AND BKG_SEQ = #bkg_seq#
			   AND TMP.LV BETWEEN 1 AND A.QTY 
			   AND A.DELT_FLG ='N'
		)
		select cntr_no, cntr_tpsz_cd, seal_no as seal_no1,cntr_ref_no from TEMP_LIST
		order by CNTR_TPSZ_CD
		OPTION (MAXRECURSION 0)
		
    </select>  
          
    <!-- REF_NO로 INTG_BL_SEQ 조회  -->
    <select id="selectINTG_BL_SEQ_FOR_RFF" parameterClass="String" resultClass="String">
	    /* BlCmmSQL.xml > selectINTG_BL_SEQ */
    	SELECT BL.intg_bl_seq
    	  FROM TB_INTG_BL BL
    	 WHERE BL.REF_NO = #ref_no#
    	   AND BIZ_CLSS_CD = 'M' 
    	   AND DELT_FLG    = 'N'
    </select>    
    
    <!--Booking 정보 조회  -->
    <select id="selectBKG_INFO_TO_CARREIR" parameterClass="HashMap" resultClass="HBLInfoVO">
    	/* BlCmmSQL.xml > selectBKG_INFO_TO_CARREIR */
        SELECT TOP 1
               BKG.BKG_NO 
		      ,BKG.BKG_SEQ 
		      <!--,BKG.INTG_BL_SEQ-->
		      ,BL.INTG_BL_SEQ
		      ,BL.BL_NO 
		      ,BKG.BKG_DT_TM 
		      ,BKG.PO_NO 
		      ,BKG.LC_NO 
		      ,BKG.PRNR_TRDP_CD 
		      ,BKG.PRNR_TRDP_NM 
		      ,BKG.ACT_SHPR_TRDP_CD 
		      ,BKG.ACT_SHPR_TRDP_NM 
		      ,BKG.SHPR_TRDP_CD 
		      ,BKG.SHPR_TRDP_NM 
		      ,BKG.SHPR_TRDP_ADDR 
		      ,BKG.CNEE_TRDP_CD 
		      ,BKG.CNEE_TRDP_NM 
		      ,BKG.CNEE_TRDP_ADDR 
		      ,BKG.NTFY_TRDP_CD 
		      ,BKG.NTFY_TRDP_NM 
		      ,BKG.NTFY_TRDP_ADDR 
		      ,BKG.EXP_REF_NO 
		      ,BKG.PU_TRDP_CD 
		      ,BKG.PU_TRDP_NM 
		      ,BKG.CGO_PU_TRDP_CD 
		      ,BKG.CGO_PU_TRDP_NM 
		      ,BKG.CGO_PU_TRDP_ADDR 
		      ,BKG.RCV_WH_CD 
		      ,BKG.RCV_WH_NM 
		      ,BKG.TRK_TRDP_CD 
		      ,BKG.TRK_TRDP_NM 
		      ,BKG.CUST_REF_NO 
		      ,BKG.CNTR_INFO 
		      ,BKG.TRNK_VSL_CD 
		      ,BKG.TRNK_VSL_NM 
		      ,BKG.TRNK_VOY 
		      ,BKG.POR_CD 
		      ,BKG.POR_NOD_CD 
		      ,BKG.POR_NM 
		      ,BKG.POL_CD 
		      ,BKG.POL_NOD_CD 
		      ,BKG.POL_NM 
		      ,BKG.POD_CD 
		      ,BKG.POD_NOD_CD 
		      ,BKG.POD_NM 
		      ,BKG.DEL_CD 
		      ,BKG.DEL_NOD_CD 
		      ,BKG.DEL_NM 
		      ,BKG.FNL_DEST_LOC_CD 
		      ,BKG.FNL_DEST_NOD_CD 
		      ,BKG.FNL_DEST_LOC_NM 
		      ,BKG.LNR_TRDP_CD 
		      ,BKG.LNR_TRDP_NM 
		      ,BKG.LNR_BKG_NO 
		      ,BKG.ETD_DT_TM 
		      ,BKG.ETA_DT_TM 
		      ,BKG.ETD_POR_TM 
		      ,BKG.SHP_MOD_CD 
		      ,BKG.REP_CMDT_CD 
		      ,BKG.REP_CMDT_NM 
		      ,BKG.PCK_QTY 
		      ,BKG.PCK_UT_CD 
		      ,BKG.GRS_WGT_UT_CD 
		      ,BKG.GRS_WGT 
		      ,BKG.GRS_WGT1 
		      ,BKG.MEAS_UT_CD 
		      ,BKG.MEAS 
		      ,BKG.MEAS1 
		      ,BKG.FM_SVC_TERM_CD 
		      ,BKG.TO_SVC_TERM_CD 
		      ,BKG.CARGO_TP_CD 
		      ,BKG.CUT_OFF_DT 
		      ,BKG.RAIL_CUT_OFF_DT 
		      ,BKG.WH_CUT_OFF_DT 
		      ,BKG.DOC_CUT_OFF_DT 
		      ,BKG.SLS_OFC_CD 
		      ,BKG.SLS_DEPT_CD 
		      ,BKG.SLS_USRID 
		      ,BKG.SLS_USR_NM 
		      ,BKG.RMK 
		      ,BKG.DEPT_CD 
		      ,BKG.DELT_FLG 
		      ,BKG.LNR_CTRT_NO
        	  ,BKG.FRT_TERM_CD
        	  ,BKG.PORT_OPEN_DT
        	  ,BKG.VGM_CUT_OFF_DT
        	  ,BKG.BKG_STS_CD
        	  <!-- ,(SELECT RSN_TXT 
			      FROM (SELECT RSN_TXT, ROW_NUMBER() OVER (ORDER BY RGST_TMS DESC) ROWNO 
						  FROM TB_BKG_STS_HIS HIS 
						 WHERE HIS.BKG_SEQ = BKG.BKG_SEQ) INVAL 
				 WHERE BKG_STS_CD IN ('RJ','CN')
				   AND ROWNO = 1) AS RSN_TXT -->
			  ,BKG.PORT_OPEN_DT
        	  ,BKG.VGM_CUT_OFF_DT
		      ,BKG.RGST_USRID
		      ,BKG.RGST_OFC_CD
		      <!--  #1024 [PATENT] Booking Entry 개선 및 Quotation Audit 기능 개발   -->
		      <!-- ,CONVERT(VARCHAR,  BKG.RGST_TMS,  112) AS RGST_TMS -->
		      ,CONVERT(VARCHAR,    DATEADD(MINUTE,   60*CONVERT( float, isnull (ccd.RMK ,   '0')),  BKG.RGST_TMS ),    112) AS RGST_TMS         
		      ,BKG.MODI_USRID
		      ,BKG.MODI_OFC_CD
		      ,CONVERT(VARCHAR,    DATEADD(MINUTE,   60*CONVERT( float, isnull (ccd.RMK ,   '0')),  BKG.MODI_TMS ),    112) AS MODI_TMS     
	          ,BKG.HBL_TP_CD
	          ,BKG.NOMI_FLG   	
		  FROM TB_BKG BKG
		    LEFT OUTER JOIN
		        TB_ADD_INFO_BND BND 
		            ON BKG.BKG_SEQ = BND.INTG_BKG_SEQ 
		            AND BND.DELT_FLG = 'N'     
		    LEFT OUTER JOIN
		        TB_INTG_BL BL 
		            ON BND.INTG_BL_SEQ = BL.INTG_BL_SEQ 
		            AND BL.DELT_FLG = 'N'   
		  LEFT OUTER JOIN
			   TB_OFC TOF 
		   ON BKG.RGST_OFC_CD = TOF.OFC_CD           
		  LEFT OUTER JOIN
			   TB_COM_CD_DTL CCD 
		   ON CCD.COM_CD = 'TIMEZN'  AND TOF.TIME_ZONE = CCD.CD_VAL  		   
		 WHERE 1 = 1
		   AND BKG.DELT_FLG = 'N'
		   AND BKG.BIZ_CLSS_CD = 'M'
           AND BKG.BKG_SEQ = #f_bkg_seq#
    </select>    
    
    
    <select id="selectBKG_RLT_INFO" resultClass="Integer" parameterClass="HashMap">
        SELECT COUNT(*) 
          FROM TB_BKG_RLT
         WHERE BKG_SEQ      = #tb_bkg_seq#
           AND RLT_BKG_SEQ  = #rlt_tb_bkg_seq#
    </select>
    
    <select id="selectCUST_BKG_SEQ_LIST" resultClass="String" parameterClass="HashMap">
        SELECT BKG_SEQ
          FROM TB_BKG_RLT
         WHERE RLT_BKG_SEQ  = #rlt_bkg_seq#
            AND DELT_FLG = 'N'
    </select>
    
    <update id="deleteBKG_RLT_INFO" parameterClass="HashMap">
    	DELETE FROM TB_BKG_RLT
         WHERE BKG_SEQ      = #tb_bkg_seq#
           AND RLT_BKG_SEQ  = #rlt_tb_bkg_seq#
    </update>
    
    <select id="selectCarrierNo" parameterClass="HashMap" resultClass="HashMap">
	    /** BlCmmSQL.xml > selectCarrierNo **/      
	    SELECT
	        TOP 1
	        bkg.bkg_no,
	        bkg.bkg_seq,
	        bkg.lnr_bkg_no,
			ISNULL(clp.clp_no, '') AS clp_no,
			bkg.hbl_tp_cd,					
			bkg.act_shpr_trdp_cd, 			
			bkg.act_shpr_trdp_nm
	    FROM
	        tb_bkg bkg     
	    LEFT OUTER JOIN tb_clp clp ON bkg.bkg_seq = clp.bkg_seq  and clp.delt_flg = 'N' 
	    WHERE bkg.delt_flg = 'N'         
		  AND bkg.BKG_NO  = #bkg_no#
	      AND bkg.biz_clss_cd =  'M' /**P*/                         
    </select>    
    
    <update id="updateCUSTOMER_BKG_LNR_NO" parameterClass="HashMap">
		UPDATE  TB_BKG
		   SET  LNR_BKG_NO   = #lnr_bkg_no#
		       ,modi_usrid  = #proc_usrid#
		       ,modi_ofc_cd = #proc_ofccd#    
			   ,MODI_TMS     = getdate()
	     WHERE  BKG_SEQ IN (SELECT BKG_SEQ FROM TB_BKG_RLT WHERE rlt_bkg_seq = #rlt_tb_bkg_seq#) 
	</update>    
	
    <!-- CNTR을 입력함  -->
	<select id="selectCOPY_BKG_CNTR_INFO" parameterClass="HashMap" resultClass="BkgCntrListVO">
		SELECT  bkg_seq,     	 	cntr_seq,		  	cntr_tpsz_cd,
				qty,				delt_flg,           'I' AS cntr_ibflag 
		FROM    tb_bkg_cntr 
		WHERE   bkg_seq = #f_bkg_seq#
        AND     delt_flg = 'N'
    </select>
    
	<select id="selectBKG_CNTR_LIST_COPY_INFO_CARR" parameterClass="HashMap" resultClass="BkgCntrListVO">
		SELECT  '' as bkg_seq,     	 	
				cntr_seq,		  	
				cntr_no,		
				cntr_tpsz_cd,		
				seal_no,
				<!-- 
				SUBSTRING(mty_out_dt_tm, 1, 8) AS mty_out_dt,
        		SUBSTRING(mty_out_dt_tm, 9, 4) AS mty_out_tm, 
        		SUBSTRING(full_rtn_dt_tm, 1, 8) AS full_rtn_dt,
        		SUBSTRING(full_rtn_dt_tm, 9, 4) AS full_rtn_tm,
        		 -->
				'' AS mty_out_dt,
        		'' AS mty_out_tm, 
        		'' AS full_rtn_dt,
        		'' AS full_rtn_tm,        		  	
        		delt_flg, 
        		cntr_ref_no,
				'I'  AS cntr_ibflag,
				(SELECT isnull(SUBSTRING(ISO_CNTR_CD,3,1),'X')
		           FROM TB_CNTR_TPSZ TCT 
		          WHERE TCT.CNTR_TPSZ_CD = TBCL.CNTR_TPSZ_CD) as L_RC_FLG,
		        (SELECT
		            isnull(VENT_FLG,'X')              
		        FROM
		            TB_CNTR_TPSZ TCT              
		        WHERE
		            TCT.CNTR_TPSZ_CD = TBCL.CNTR_TPSZ_CD) as L_VENT_FLG,		          
				rc_flg, temp_val, temp_cd,
				mgset_flg, vent_cd, ca_flg,        		
        		air_flow,
        		air_flow_unit,
        		humid,
        		cntr_rmk				
				        		
		FROM    tb_bkg_cntr_list tbcl
		WHERE   bkg_seq = #c_bkg_seq#
        AND     delt_flg = 'N'
    </select> 
    
    <select id="searchTrkCntrList" parameterClass="HashMap" resultClass="CntrLstVO">
    /** BlCmmSQL.xml > searchTrkCntrList **/      
 			SELECT
                X.CNTR_NO 
            FROM
                TB_CNTR_LIST X 
            WHERE X.INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
              AND X.DELT_FLG = 'N'         
              AND X.CNTR_NO is not null 
              AND X.CNTR_NO != ''
		    GROUP BY CNTR_NO              
            ORDER BY CNTR_NO                            
    </select>
             
    <select id="searchCntrListForRefNo" parameterClass="HashMap" resultClass="com.clt.apps.opusbase.system.systemcode.dto.ComCdDtlVO">
    /** BlCmmSQL.xml > searchCntrListForRefNo **/      
 			SELECT
                X.CNTR_NO AS cd_val
                ,X.CNTR_NO AS cd_nm
            FROM
                TB_CNTR_LIST X 
            WHERE X.INTG_BL_SEQ in (select INTG_BL_SEQ from TB_INTG_BL  where REF_NO =#ref_no#)
              AND X.DELT_FLG = 'N'         
              AND X.CNTR_NO is not null 
              AND X.CNTR_NO != ''
            GROUP BY CNTR_NO               
            ORDER BY CNTR_NO                           
    </select>         
    	
    <select id="selectCarrBkgMblInfo" parameterClass="HashMap" resultClass="HashMap">
	    /** BlCmmSQL.xml > selectCarrBkgMblInfo **/      
	    	SELECT ISNULL(CARI.BKG_SEQ,'') AS CARR_BKG_SEQ, ISNULL(BL.REF_NO,'') AS REF_NO
			  FROM TB_BKG CUS
			  LEFT OUTER JOIN TB_BKG_RLT RLT ON CUS.BKG_SEQ = RLT.BKG_SEQ AND RLT.DELT_FLG = 'N'
			  LEFT OUTER JOIN TB_BKG CARI ON CARI.BKG_SEQ = RLT.RLT_BKG_SEQ AND CARI.DELT_FLG = 'N'
			  LEFT OUTER JOIN TB_ADD_INFO_BND BND ON CARI.BKG_SEQ = BND.INTG_BKG_SEQ AND BND.DELT_FLG = 'N'   
	          LEFT OUTER JOIN TB_INTG_BL BL ON BND.INTG_BL_SEQ = BL.INTG_BL_SEQ AND BL.DELT_FLG = 'N'              
			 WHERE CUS.BKG_SEQ = #cust_bkg_seq#
			   AND CUS.DELT_FLG = 'N'                        
    </select>    

	<!--COMMERCIAL INVOICE 등록   -->
    <insert id="insert_BLINFO" parameterClass="com.clt.apps.fis.aie.bmd.housebl.dto.AieInParamVO">
    	/* BlCmmSQL.xml > insert_BLINFO */
    	INSERT INTO TB_BL_OTH
    		(intg_bl_seq
			,wrk_tp
			,seller_addr
			,cnee_addr
			,vndr_trdp_cd
			,vndr_trdp_nm
			,vndr_trdp_addr
			,vsl_flt
			,etd_dttm
			,bl_no
			,inv_no
			,inv_dt
			,cnt_origin
			,lc_no
			,lc_dt
			,lc_issue_bank
			,carr_trdp_cd
			,carr_trdp_nm
			,por_nm
			,pol_nm
			,pod_nm
			,notify_addr
			,svc_term
			,mk_txt
			,desc_txt
			,qty
			,price
			,amount
			,rgst_usrid
			,rgst_ofc_cd
			,rgst_tms
			,modi_usrid
			,modi_ofc_cd
			,modi_tms
			,inco_cd
			,pol_cd
			,pod_cd
			,eta_dt_tm
			,grs_wgt
			,net_wgt_txt
		)VALUES(
			#intg_bl_seq#
			,CASE WHEN #f_wrk_tp# is null THEN 'CI' ELSE #f_wrk_tp# END
			,#f_seller#
			,#f_consignee#
			,#f_vendor_cd#
			,#f_vendor_nm#
			,#f_vendor#
			,#f_vslflt#
			,#f_dept_dt#
			,#f_awb_no#
			,#f_inv_no#
			,#f_inv_dt#
			,#f_cnt_origin#
			,#f_lc_no#
			,#f_lc_dt#
			,#f_lc_issue_bank#
			,#f_carr_trdp_cd#
			,#f_carr_trdp_nm#
			,#f_por#
			,#f_dept#
			,#f_dest#
			,#f_notify#
			,#f_termpay#
			,#f_mk_txt#
			,#f_desc_good#
			,#f_qty#
			,#f_unit#
			,#f_amt#
			,#userInfo.usrid#
			,#userInfo.ofc_cd#
			,getdate()
			,#userInfo.usrid#
			,#userInfo.ofc_cd#
			,GETUTCDATE()
			,#f_inco_cd#
			,#f_pol_cd#
			,#f_pod_cd#
			,#f_eta_dttm#
			,#f_ttl_grs_wgt#
			,#f_ttl_net_wgt#
    	)
    
    </insert>
    
    <!--COMMERCIAL INVOICE 수정   -->
    <update id="update_BLINFO" parameterClass="com.clt.apps.fis.aie.bmd.housebl.dto.AieInParamVO">
    	/* BlCmmSQL.xml > update_BLINFO */
    	UPDATE TB_BL_OTH
    	   SET seller_addr		= #f_seller#
	           ,cnee_addr		= #f_consignee#
	           ,vndr_trdp_cd	= #f_vendor_cd#
			   ,vndr_trdp_nm	= #f_vendor_nm#
	           ,vndr_trdp_addr  = #f_vendor#
	           ,notify_addr		= #f_notify#
	           ,vsl_flt			= #f_vslflt#
	           ,etd_dttm		= #f_dept_dt#
	           ,inv_no			= #f_inv_no#
	           ,inv_dt			= #f_inv_dt#
	           ,cnt_origin		= #f_cnt_origin#
	           ,lc_no			= #f_lc_no#
	           ,lc_dt			= #f_lc_dt#
	           ,lc_issue_bank 	= #f_lc_issue_bank#
	           ,carr_trdp_cd 	= #f_carr_trdp_cd#
	           ,carr_trdp_nm 	= #f_carr_trdp_nm#
	           ,por_nm			= #f_por#
	           ,pol_nm			= #f_dept#
	           ,pod_nm			= #f_dest#
	           ,svc_term		= #f_termpay#
	           ,mk_txt			= #f_mk_txt#
	           ,desc_txt		= #f_desc_good#
	           ,qty				= #f_qty#
	           ,price			= #f_unit#
	           ,amount			= #f_amt#
	           ,modi_usrid		= #userInfo.usrid#
	           ,modi_ofc_cd		= #userInfo.ofc_cd#
	           ,modi_tms		= GETUTCDATE()
			   ,inco_cd			= #f_inco_cd#
			   ,pol_cd			= #f_pol_cd#
			   ,pod_cd			= #f_pod_cd#
			   ,eta_dt_tm		= #f_eta_dttm#
			   ,grs_wgt			= #f_ttl_grs_wgt#
			   ,net_wgt_txt		= #f_ttl_net_wgt#
	     WHERE intg_bl_seq  	= cast(#intg_bl_seq# as varchar)
	       AND wrk_tp 			= CASE WHEN #f_wrk_tp# is null THEN 'CI' ELSE #f_wrk_tp# END
    </update>
	
	<delete id="delete_BLINFO" parameterClass="com.clt.apps.fis.aie.bmd.housebl.dto.AieInParamVO">
		/* BlCmmSQL.xml > delete_BLINFO */
		DELETE TB_BL_OTH
		WHERE 
			intg_bl_seq = cast(#intg_bl_seq# as varchar)
		AND
			wrk_tp = #f_wrk_tp#
		
	</delete>

	<!-- #1279 [UFF] Add Commodity field to OEM BL Entry -->
	<select id="selectHblIntgSeq" parameterClass="String" resultClass="HashMap">
		SELECT intg_bl_seq 
		  FROM tb_intg_bl_rlt 
		 WHERE rlt_intg_bl_seq = #rlt_intg_bl_seq# 
	</select>

	<!-- #2354 [PATENT] House Bill Based - Processing Logic Enhancement -->
    <select id="checkRouteChange" parameterClass="HashMap" resultClass="String">
    	 SELECT  CASE WHEN COUNT(*) > 0 THEN 'Y' ELSE 'N' END AS CHKFLG
           FROM  TB_INTG_BL
          WHERE  1=1
            AND  INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
            AND  POR_CD = #por_cd#
            AND  POL_CD = #pol_cd#
            AND  POD_CD = #pod_cd#
            AND  DEL_CD = #del_cd#
    </select>

    <!-- #2354 [PATENT] House Bill Based - Processing Logic Enhancement -->
    <select id="getHblCount" parameterClass="String" resultClass="Integer">
		SELECT COUNT(*) FROM TB_INTG_BL_RLT RLT 
		WHERE RLT_INTG_BL_SEQ = (SELECT RLT_INTG_BL_SEQ FROM TB_INTG_BL_RLT WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar) AND RLT.DELT_FLG = 'N')
		AND DELT_FLG = 'N'
    </select>
    
    <!-- #2354 [PATENT] House Bill Based - Processing Logic Enhancement -->
    <update id="updateMbl_Info" parameterClass="HBLInfoVO">
   		/** BlCmmSQL.xml > updateMbl_Info **/
        UPDATE  tb_intg_bl set
                pck_qty        = #pck_qty#,            pck_ut_cd      = #pck_ut_cd#,
                grs_wgt        = #grs_wgt#,            grs_wgt_ut_cd  = #grs_wgt_ut_cd#,
                grs_wgt1       = #grs_wgt1#,           meas1          = #meas1#,
                meas           = #meas#,               meas_ut_cd     = #meas_ut_cd#,
                mk_txt         = #mk_txt#,             desc_txt       = #desc_txt#,
                <!-- #2560 [Fusion] A bug reported by Fusion on OEM B/L List -->
                cntr_info      = #cntr_info#,   
                <!-- #6312 [Binex-LA] Last Modified by 수정 issue -->        
                modi_usrid     = #proc_usrid#,          modi_ofc_cd    = #proc_ofccd#, 
                modi_usr_nm    = #proc_usrnm#,          modi_tms       = GETUTCDATE()
         WHERE  intg_bl_seq    = (SELECT RLT_INTG_BL_SEQ FROM TB_INTG_BL_RLT WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar))
    </update>
    
    <!-- #2501 [PATENT]Payment Verification -->
    <update id="updateMblVerify" parameterClass="HBLInfoVO">
   		/** BlCmmSQL.xml > updateMblVerify **/
        UPDATE  tb_add_info_bnd set
				verify_dt_tm = (
					CASE WHEN 'Y' = (SELECT ISNULL(VERIFY_FLAG,'') FROM TB_ADD_INFO_BND WHERE intg_bl_seq = cast(#intg_bl_seq# as varchar)) 
					     THEN (SELECT verify_dt_tm FROM TB_ADD_INFO_BND WHERE intg_bl_seq = cast(#intg_bl_seq# as varchar)) 
					     ELSE
							(CASE WHEN '1' = (SELECT ISNULL(OPT_VAL,'') FROM TB_SYS_OPT WHERE OPT_KEY =  'PAY_VERIFY_OPT') 
							      THEN (SELECT CONVERT(VARCHAR, CONVERT(DATETIME, SUBSTRING(OBRD_DT_TM, 1, 8)), 23) FROM TB_INTG_BL WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar))
	            	              WHEN '2' = (SELECT ISNULL(OPT_VAL,'') FROM TB_SYS_OPT WHERE OPT_KEY =  'PAY_VERIFY_OPT') 
	            	              THEN
			            	   		(CASE WHEN '1' = (SELECT COUNT(INTG_BL_SEQ) FROM TB_INTG_BL WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar) AND HBL_TP_CD IN ('DR','FW','DT')) 
			            	   		      THEN
					            	   		(CASE WHEN 'O' = (SELECT ISNULL(OBL_TP_CD, '') FROM TB_INTG_BL WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)) 
					            	   		     THEN (SELECT CONVERT(VARCHAR, DATEADD(D,-1,CONVERT(DATETIME, SUBSTRING(ETD_DT_TM, 1, 8))),23) FROM TB_INTG_BL WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar))
					            	   			 ELSE (SELECT CONVERT(VARCHAR, DATEADD(D,-7,CONVERT(DATETIME, SUBSTRING(ETA_DT_TM, 1, 8))),23) FROM TB_INTG_BL WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar))
					            	   		END)
			            	   			  ELSE (SELECT CONVERT(VARCHAR, DATEADD(D,-7,CONVERT(DATETIME, SUBSTRING(ETA_DT_TM, 1, 8))),23) FROM TB_INTG_BL WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)) 
			            	   	     END)
	              				  ELSE '' 
	              			END)
	              	END
              	)
         WHERE  intg_bl_seq    = (SELECT RLT_INTG_BL_SEQ FROM TB_INTG_BL_RLT WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar))
    </update>
    
    <!-- #2501 [PATENT]Payment Verification -->
    <update id="updateHblVerify" parameterClass="HBLInfoVO">
   		/** BlCmmSQL.xml > updateMblVerify **/
        UPDATE  tb_add_info_bnd set
				verify_dt_tm = (
				SELECT verify_dt_tm FROM TB_ADD_INFO_BND WHERE INTG_BL_SEQ = (SELECT RLT_INTG_BL_SEQ FROM TB_INTG_BL_RLT WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar))
              	)
         WHERE  intg_bl_seq    = cast(#intg_bl_seq# as varchar)
    </update>
    
    <!-- #2354 [PATENT] House Bill Based - Processing Logic Enhancement -->
    <select id="checkMblCntrByHbl" parameterClass="CntrLstVO" resultClass="Integer">
        select count(*) from tb_cntr_list
         WHERE  intg_bl_seq = cast(#intg_bl_seq# as varchar)
           AND  cntr_no = #cntr_no#
    </select>
    
    <!-- #2354 [PATENT] House Bill Based - Processing Logic Enhancement -->
    <insert id="insertMbl_CntrList" parameterClass="CntrLstVO">
        INSERT INTO tb_cntr_list(
            intg_bl_seq,        cntr_list_seq,       rgst_cntr_yn,
            cntr_no,            cntr_tpsz_cd,
            cgo_pck_qty,        cgo_pck_ut,          cgo_wgt,           cgo_meas,         vol_meas,
            soc_flg,            dg_gds_flg,          cntr_rmk,
            seal_no1,           seal_no2,            seal_no3, 
            cntr_sprl_trdp_cd,
            rgst_usrid,         rgst_ofc_cd,         rgst_tms,
            modi_usrid,         modi_ofc_cd,         modi_tms,          delt_flg,
            cgo_wgt1, cgo_meas1
            ,pickup_number, lfd, cntr_go_date, temp_cd, vent_cd, cfs_in_dt, devan_dt
            ,org_pkup_dt 			,fnl_dest_eta_dt 	,apnt_dt 			,de_dt 			,free_det_dt , emty_rt_dt
            <isNotEmpty property="temp_val">
            ,temp_val
            </isNotEmpty>
            ,SEAL_TP1		,SEAL_TP2		,VGM_CGO_WGT		,VGM_CGO_WGT_TP		,VGM_DT		,VGM_TM		,VGM_METHOD	,VGM_CNTR_TP
			,VGM_AM_TRDP_CD	,VGM_AM_TRDP_NM	,VGM_AM_TRDP_PIC	,VGM_SPC_TRDP_CD	,VGM_SPC_TRDP_NM	,VGM_SPC_TRDP_PIC	
			,VGM_SEQ
			,cntr_ref_no
			,trkg_fee_txt
        )VALUES(
            #intg_bl_seq#,       (SELECT MAX(CNTR_LIST_SEQ) + 1 FROM TB_CNTR_LIST),    #rgst_cntr_yn#, 
            #cntr_no#,           #cntr_tpsz_cd#, 
            #cgo_pck_qty#,       #cgo_pck_ut#,       #cgo_wgt#,          #cgo_meas#,        #vol_meas#, 
            #soc_flg#,           #dg_gds_flg#,       #cntr_rmk#, 
            #seal_no1#,          #seal_no2#,         #seal_no3#, 
            #cntr_sprl_trdp_cd#, 
            #proc_usrid#,        #proc_ofccd#,       getdate(),
            #proc_usrid#,        #proc_ofccd#,       GETUTCDATE(),         'N',
            #cgo_wgt1#, #cgo_meas1#
            ,#pickup_number#, #lfd#, #cntr_go_date#, #temp_cd#, #vent_cd#, #cfs_in_dt#, #devan_dt#
            ,#org_pkup_dt# 		,#fnl_dest_eta_dt# 	,#apnt_dt# 		,#de_dt# 		,#free_det_dt# , #emty_rt_dt#
            <isNotEmpty property="temp_val">
            , #temp_val#
            </isNotEmpty>
            ,#seal_tp1#		,#seal_tp2#		,#vgm_cgo_wgt#		,#vgm_cgo_wgt_tp#		,#vgm_dt#		,#vgm_tm#		,#vgm_method#	,#vgm_cntr_tp#
			,#vgm_am_trdp_cd#	,#vgm_am_trdp_nm#	,#vgm_am_trdp_pic#	,#vgm_spc_trdp_cd#	,#vgm_spc_trdp_nm#	,#vgm_spc_trdp_pic#	
			,CONVERT(varchar,(SELECT MAX(CNTR_LIST_SEQ) + 1 FROM TB_CNTR_LIST))+CONVERT(varchar,#intg_bl_seq#)
			,#cntr_ref_no#
			,#trkg_fee_txt#
        )
    </insert>
    
    <!-- #2354 [PATENT] House Bill Based - Processing Logic Enhancement -->
    <update id="updateMbl_CntrList" parameterClass="CntrLstVO">
        UPDATE  tb_cntr_list
           SET  cgo_pck_qty= #cgo_pck_qty#,   cgo_pck_ut  = #cgo_pck_ut#,          
                cgo_wgt    = #cgo_wgt#,       cgo_meas    = #cgo_meas#,       vol_meas = #vol_meas#,
                cgo_wgt1 = #cgo_wgt1#, cgo_meas1 = #cgo_meas1#,
                modi_usrid = #proc_usrid#,    modi_ofc_cd = #proc_ofccd#,     modi_tms = GETUTCDATE()
         WHERE  intg_bl_seq = cast(#intg_bl_seq# as varchar)
           AND  cntr_no = #cntr_no#
    </update>
    
    <!-- #2354 [PATENT] House Bill Based - Processing Logic Enhancement -->
    <select id="selectHouseCNTR_LIST" parameterClass="HashMap" resultClass="CntrLstVO">
    	/* selectHouseCNTR_LIST */
		SELECT
			lst.cntr_no as cntr_no,
			SUM(lst.cgo_pck_qty) as cgo_pck_qty,
			CONVERT(VARCHAR, CASE WHEN 1 <![CDATA[ < ]]> count(distinct lst.cgo_pck_ut) THEN 'GT' ELSE MAX(lst.cgo_pck_ut) END) as cgo_pck_ut,
			SUM(lst.cgo_wgt) as cgo_wgt,
			SUM(lst.cgo_meas) as cgo_meas,
			SUM(lst.vol_meas) as vol_meas,
			SUM(lst.cgo_wgt1) as cgo_wgt1,
			SUM(lst.cgo_meas1) as cgo_meas1
		FROM TB_INTG_BL BL      
		JOIN TB_CNTR_LIST LST 
		ON BL.INTG_BL_SEQ = LST.INTG_BL_SEQ AND LST.DELT_FLG = 'N' 
		LEFT OUTER JOIN tb_trdp prn ON LST.cntr_sprl_trdp_cd = prn.trdp_cd AND prn.delt_flg = 'N'
		WHERE 1 = 1
		AND BL.intg_bl_seq in  (
			SELECT INTG_BL_SEQ FROM TB_INTG_BL_RLT RLT WHERE RLT.RLT_INTG_BL_SEQ = cast(#intg_bl_seq# as varchar) )
		AND BL.DELT_FLG = 'N'
		GROUP BY cntr_no 
    </select>

    <!-- #2689 [Patent] Bugs for "Sum" button -->
    <select id="selectHouseBlCntrShipmentInfo" parameterClass="HashMap" resultClass="CntrLstVO">
    	/* selectHouseBlCntrShipmentInfo */
		SELECT
			BL.INTG_BL_SEQ,
			SUM(lst.cgo_pck_qty) as cgo_pck_qty,
			CONVERT(VARCHAR, CASE WHEN 1 <![CDATA[ < ]]> count(distinct lst.cgo_pck_ut) THEN 'GT' ELSE MAX(lst.cgo_pck_ut) END) as cgo_pck_ut,
			SUM(lst.cgo_wgt) as cgo_wgt,
			SUM(lst.cgo_meas) as cgo_meas,
			SUM(lst.vol_meas) as vol_meas,
			SUM(lst.cgo_wgt1) as cgo_wgt1,
			SUM(lst.cgo_meas1) as cgo_meas1
		FROM TB_INTG_BL BL      
		JOIN TB_CNTR_LIST LST 
		ON BL.INTG_BL_SEQ = LST.INTG_BL_SEQ AND LST.DELT_FLG = 'N' 
		LEFT OUTER JOIN tb_trdp prn ON LST.cntr_sprl_trdp_cd = prn.trdp_cd AND prn.delt_flg = 'N'
		WHERE 1 = 1
		AND BL.intg_bl_seq in  (
			SELECT INTG_BL_SEQ FROM TB_INTG_BL_RLT RLT WHERE RLT.RLT_INTG_BL_SEQ = cast(#intg_bl_seq# as varchar) )
		AND BL.DELT_FLG = 'N'
		GROUP BY BL.INTG_BL_SEQ 
    </select>

    <!-- #2689 [Patent] Bugs for "Sum" button -->
    <update id="updateMblShipmentInfo" parameterClass="CntrLstVO">
    	/* updateMblShipmentInfo */
    	UPDATE TB_INTG_BL
    	SET PCK_UT_CD     = #cgo_pck_ut#
    	  , PCK_QTY       = #cgo_pck_qty#
    	  , GRS_WGT       = #cgo_wgt#
    	  , GRS_WGT1      = #cgo_wgt1#
    	  , MEAS          = #cgo_meas#
    	  , MEAS1         = #cgo_meas1#
    	  , MK_GRS_WGT    = #cgo_wgt#
    	  , MK_GRS_WGT1   = #cgo_wgt1#
    	  , MK_MEAS       = #cgo_meas#
    	  , MK_MEAS1      = #cgo_meas1#
    	WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
    </update>

	<!-- #1762 [IMPEX] OCEAN QUOTATION TO HAVE DIMENSION BOX (S) -->
	<select id="selectDimensionList" parameterClass="HashMap" resultClass="com.clt.apps.fis.see.bmd.masterbl.dto.DimVO">
		/* BlCmmSQL.xml > selectDimensionList */
		SELECT INTG_BL_SEQ
			 , DIM_SEQ
			 , WDT_DIM
			 , LEN_DIM
			 , HGT_DIM
			 , PCE_QTY
			 , PCK_UT_CD
			 , DELT_FLG
			 , ACT_DIM
			 , CHG_WGT
			 , CHG_WGT1
			 , MEAS
			 , MEAS1
			 , WH_RECP_NO
		  FROM TB_DIM
		 WHERE 1 = 1
		   AND INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
		   AND ISNULL(DELT_FLG, 'N') = 'N'
	</select>

	<insert id="insertDimension" parameterClass="com.clt.apps.fis.see.bmd.masterbl.dto.DimVO">
		/* BlCmmSQL.xml > insertDimension */
        INSERT INTO TB_DIM
        (
            INTG_BL_SEQ
          , DIM_SEQ
          , WDT_DIM
          , LEN_DIM
          , HGT_DIM
          , ACT_DIM
          , PCE_QTY
          , PCK_UT_CD
          , CHG_WGT
          , CHG_WGT1
          , MEAS
          , MEAS1
          , WH_RECP_NO
          , RGST_USRID
          , RGST_OFC_CD
          , RGST_TMS
          , MODI_USRID
          , MODI_OFC_CD
          , MODI_TMS
          , DELT_FLG
        )
        VALUES
        (
            #intg_bl_seq#
          , (
             SELECT ISNULL(MAX(DIM_SEQ),0) + 1
               FROM TB_DIM
              WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
            )
          , #wdt_dim#
          , #len_dim#
          , #hgt_dim#
          , #act_dim#
          , #pce_qty#
          , #pck_ut_cd#
          , #chg_wgt#
          , #chg_wgt1#
          , #meas#
          , #meas1#
          , #wh_recp_no#
          , #proc_usrid#
          , #proc_ofccd#
          , getdate()
          , #proc_usrid#
          , #proc_ofccd#
          , GETUTCDATE()
          , 'N'
        )
	</insert>
	
	<update id="updateDimension" parameterClass="com.clt.apps.fis.see.bmd.masterbl.dto.DimVO">
		/* BlCmmSQL.xml > updateDimension */
		UPDATE TB_DIM
		   SET WDT_DIM = #wdt_dim#
			 , LEN_DIM = #len_dim#
			 , HGT_DIM = #hgt_dim#
			 , PCE_QTY = #pce_qty#
			 , ACT_DIM = #act_dim#
		 WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
		   AND DIM_SEQ     = #dim_seq#
	</update>

	<delete id="deleteDimension" parameterClass="com.clt.apps.fis.see.bmd.masterbl.dto.DimVO">
		/* BlCmmSQL.xml > deleteDimension */
		DELETE TB_DIM
		 WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
		   AND DIM_SEQ     = #dim_seq#
	</delete>

	<!-- #1762 [IMPEX] OCEAN QUOTATION TO HAVE DIMENSION BOX (E) -->

	<!-- #2355 [PATENT] B/L Split / Combine -->
    <select id="searchBlCombine_LIST" parameterClass="java.util.HashMap" resultClass="SeeMasterBLVO">
		/* BlCmmSQL.xml > searchBlCombine_LIST */
		SELECT * FROM (
       SELECT 
		       BL.INTG_BL_SEQ 
		      ,BL.BIZ_CLSS_CD
        	  ,BL.BL_NO
        	  ,BL.REF_NO
		      ,BL.POST_DT 
		      ,ptn.trdp_cd AS PRNR_TRDP_CD 
		      ,ptn.trdp_nm AS PRNR_TRDP_NM 
		      ,(SELECT a.eng_addr FROM tb_trdp a WHERE a.trdp_cd = ptn.trdp_cd) AS PRNR_TRDP_ADDR
		      ,shp.trdp_cd AS SHPR_TRDP_CD 
		      ,shp.trdp_nm AS SHPR_TRDP_NM 
		      ,(SELECT a.eng_addr FROM tb_trdp a WHERE a.trdp_cd = shp.trdp_cd) AS SHPR_TRDP_ADDR 
		      ,cne.trdp_cd AS CNEE_TRDP_CD 
		      ,cne.trdp_nm AS CNEE_TRDP_NM 
		      ,(SELECT a.eng_addr FROM tb_trdp a WHERE a.trdp_cd = cne.trdp_cd) AS CNEE_TRDP_ADDR 
		      ,ntf.trdp_cd AS NTFY_TRDP_CD 
		      ,ntf.trdp_nm AS NTFY_TRDP_NM 
		      ,(SELECT a.eng_addr FROM tb_trdp a WHERE a.trdp_cd = ntf.trdp_cd) AS NTFY_TRDP_ADDR
	          ,act.trdp_cd AS ACT_SHPR_TRDP_CD
	          ,act.trdp_nm AS ACT_SHPR_TRDP_NM
		      ,BL.CUST_REF_NO 
		      ,BL.CNTR_INFO 
		      ,BL.TRNK_VSL_CD 
		      ,BL.TRNK_VSL_NM 
		      ,BL.TRNK_VOY 
		      ,BL.POR_CD 
		      ,BL.POR_NM 
		      ,BL.POL_CD 
		      ,BL.POL_NM 
		      ,BL.POD_CD 
		      ,BL.POD_NM 
		      ,BL.DEL_CD 
		      ,BL.DEL_NM 
		      ,BL.FNL_DEST_LOC_CD 
		      ,BL.FNL_DEST_LOC_NM 
		      ,lnr.trdp_cd AS LNR_TRDP_CD 
		      ,lnr.trdp_nm AS LNR_TRDP_NM 
		      ,BL.LNR_BKG_NO 
		      ,BL.ETD_DT_TM 
		      ,BL.ETA_DT_TM 
		      ,BL.ETD_POR_TM 
		      ,BL.REP_CMDT_CD 
		      ,BL.REP_CMDT_NM 
		      ,BL.PCK_QTY 
		      ,BL.PCK_UT_CD 
		      ,unit.pck_nm 		as PCK_UT_NM
		      ,BL.GRS_WGT_UT_CD 
		      ,BL.GRS_WGT 
		      ,BL.GRS_WGT1 
		      ,BL.MEAS_UT_CD 
		      ,BL.MEAS 
		      ,BL.MEAS1 
		      ,BL.FM_SVC_TERM_CD 
		      ,BL.TO_SVC_TERM_CD 
		      ,BL.CARGO_TP_CD 
		      ,BL.RMK 
		      ,BL.DEPT_CD 
		      ,BL.RGST_USRID 
		      ,BL.RGST_OFC_CD 
		      ,CONVERT(VARCHAR(10),DATEADD(MINUTE,60*CONVERT( float,isnull (ccd.RMK ,'0')),BL.RGST_TMS ),112) + REPLACE(CONVERT(VARCHAR(8),DATEADD(MINUTE,60*CONVERT( float,isnull (ccd.RMK ,'0')),BL.RGST_TMS ),108),':','')  AS RGST_TMS
		      ,BL.MODI_USRID 
		      ,BL.MODI_OFC_CD 
		      ,CONVERT(VARCHAR(10),DATEADD(MINUTE,60*CONVERT( float,isnull (ccd.RMK ,'0')),BL.MODI_TMS ),112) + REPLACE(CONVERT(VARCHAR(8),DATEADD(MINUTE,60*CONVERT( float,isnull (ccd.RMK ,'0')),BL.MODI_TMS ),108),':','')  AS MODI_TMS
		      ,BL.DELT_FLG 
        	  ,BL.FRT_TERM_CD
        	  ,agent.trdp_cd AS FWRD_AGN_TRDP_CD
        	  ,agent.trdp_nm AS FWRD_AGN_TRDP_NM
        	  ,(SELECT a.eng_addr FROM tb_trdp a WHERE a.trdp_cd = agent.trdp_cd) AS FWRD_AGN_TRDP_ADDR
        	  ,carr.trdp_cd AS CARR_TRDP_CD
        	  ,carr.trdp_nm AS CARR_TRDP_NM
        	  ,(SELECT a.eng_addr FROM tb_trdp a WHERE a.trdp_cd = carr.trdp_cd) AS CARR_TRDP_ADDR
        	  ,bnd.SVC_LANE_NM
        	  ,bnd.sls_usrid
        	  ,bnd.sls_ofc_cd
        	  ,bl.rcv_wh_cd
        	  ,(SELECT eng_nm FROM tb_trdp x WHERE x.trdp_cd = bl.rcv_wh_cd) AS rcv_wh_nm
        	  ,bl.pu_trdp_cd
        	  ,(SELECT eng_nm FROM tb_trdp x WHERE x.trdp_cd = bl.pu_trdp_cd) AS pu_trdp_nm
        	  ,bnd.vgm_cut_off_dt
        	  ,bl.doc_cut_off_dt
        	  ,bl.rail_cut_off_dt
        	  ,bl.cut_off_dt
        	  ,bnd.port_open_dt
        	  ,bl.shp_mod_cd
        	  ,bl.nomi_flg
        	  ,bl.hbl_tp_cd
        	  ,isnull((select count(*) from tb_cntr_list where intg_bl_seq = bl.intg_bl_seq),0) as cntr_qty
        	  <isNotEmpty property="splitFlag">
				<isEqual property="splitFlag" compareValue="Y">
				,isnull((select count(*) from tb_cntr_list where intg_bl_seq = bl.intg_bl_seq and delt_flg = 'N' and isnull(cntr_no, '') = ''), 0) as cntr_no
        	  	</isEqual>
        	  </isNotEmpty>
        	  <isEmpty property="splitFlag">
        	  	,isnull((select cntr_no + '/' from tb_cntr_list where intg_bl_seq = bl.intg_bl_seq and delt_flg = 'N' and isnull(cntr_no, '') <![CDATA[ <> ]]> '' FOR XML PATH('')), '') as cntr_no
        	  </isEmpty>
        	  <!-- #2355 [PATENT] B/L Split / Combine -->
                ,(SELECT COUNT(*) FROM TB_INTG_BL_RLT RLT WHERE  RLT.RLT_INTG_BL_SEQ = BL.INTG_BL_SEQ AND RLT.DELT_FLG = 'N') as hbl_cnt
        	  
        	  ,bl.mk_txt
        	  ,bl.desc_txt
		  FROM TB_INTG_BL BL
		  LEFT OUTER JOIN TB_ADD_INFO_BND BND ON BL.INTG_BL_SEQ = BND.INTG_BL_SEQ AND BND.DELT_FLG = 'N'
		  LEFT OUTER JOIN TB_OFC TOF ON BL.RGST_OFC_CD = TOF.OFC_CD      
		  LEFT OUTER JOIN TB_COM_CD_DTL CCD ON CCD.COM_CD = 'TIMEZN' AND TOF.TIME_ZONE = CCD.CD_VAL   
		  LEFT OUTER JOIN tb_pck_ut_cd unit ON bl.pck_ut_cd = unit.pck_ut_cd AND unit.use_flg = 'Y'
		  LEFT OUTER JOIN tb_bl_prnr act ON bl.intg_bl_seq = act.intg_bl_seq  AND act.bl_trdp_tp_cd = 'S02' AND act.delt_flg = 'N'
		  LEFT OUTER JOIN tb_bl_prnr ptn ON bl.intg_bl_seq = ptn.intg_bl_seq  AND ptn.bl_trdp_tp_cd = 'P01' AND ptn.delt_flg = 'N'
		  LEFT OUTER JOIN tb_bl_prnr shp ON bl.intg_bl_seq = shp.intg_bl_seq  AND shp.bl_trdp_tp_cd = 'S01' AND shp.delt_flg = 'N'
		  LEFT OUTER JOIN tb_bl_prnr cne ON bl.intg_bl_seq = cne.intg_bl_seq  AND cne.bl_trdp_tp_cd = 'C01' AND cne.delt_flg = 'N'
		  LEFT OUTER JOIN tb_bl_prnr ntf ON bl.intg_bl_seq = ntf.intg_bl_seq  AND ntf.bl_trdp_tp_cd = 'N01' AND ntf.delt_flg = 'N'
		  LEFT OUTER JOIN tb_bl_prnr lnr ON bl.intg_bl_seq = lnr.intg_bl_seq  AND lnr.bl_trdp_tp_cd = 'L01' AND lnr.delt_flg = 'N'
		  LEFT OUTER JOIN tb_bl_prnr carr ON bl.intg_bl_seq = carr.intg_bl_seq  AND carr.bl_trdp_tp_cd = 'B01' AND carr.delt_flg = 'N'
		  LEFT OUTER JOIN tb_bl_prnr agent ON bl.intg_bl_seq = agent.intg_bl_seq  AND agent.bl_trdp_tp_cd = 'A01' AND agent.delt_flg = 'N'
		 WHERE 1 = 1
		   AND BL.DELT_FLG = 'N'
		   AND BL.AIR_SEA_CLSS_CD = 'S'
		   AND BND.BND_CLSS_CD = 'O'
		    <isNotEmpty property="f_bl_no">
			    AND  BL.BL_NO LIKE  #f_bl_no# + '%'
			</isNotEmpty>
			<isNotEmpty property="f_biz_clss_cd">
				AND  BL.BIZ_CLSS_CD = #f_biz_clss_cd#
			</isNotEmpty>
			<isNotEmpty property="f_post_strdt">
			   AND  BL.POST_DT BETWEEN #f_post_strdt# AND #f_post_enddt#
			</isNotEmpty>
			<isNotEmpty property="f_sel_trdp_nm">
				<isEqual property="f_sel_trdp_tp" compareValue="PRNR">
					AND  upper(ptn.trdp_nm) LIKE  upper(#f_sel_trdp_nm#) + '%'
				</isEqual>
				<isEqual property="f_sel_trdp_tp" compareValue="SHPR">
					AND  upper(shp.trdp_nm) LIKE  upper(#f_sel_trdp_nm#) + '%'
				</isEqual>
				<isEqual property="f_sel_trdp_tp" compareValue="CNEE">
					AND  upper(cne.trdp_nm) LIKE  upper(#f_sel_trdp_nm#) + '%'
				</isEqual>
				<isEqual property="f_sel_trdp_tp" compareValue="NTFY">
					AND  upper(ntf.trdp_nm) LIKE  upper(#f_sel_trdp_nm#) + '%'
				</isEqual>
				<isEqual property="f_sel_trdp_tp" compareValue="AHPR">
					AND  upper(act.trdp_nm) LIKE  upper(#f_sel_trdp_nm#) + '%'
				</isEqual>
			</isNotEmpty>
			<isNotEmpty property="f_shp_mod_cd">
			   AND  bl.SHP_MOD_CD = #f_shp_mod_cd#
			</isNotEmpty>
			<isNotEmpty property="f_pol_cd">
			   AND  bl.POL_CD = #f_pol_cd#
			</isNotEmpty>
			<isNotEmpty property="f_ofc_cd">
			   AND  bl.RGST_OFC_CD = #f_ofc_cd#
			</isNotEmpty>
			<isNotEmpty property="f_pod_cd">
			   AND  bl.POD_CD = #f_pod_cd#
			</isNotEmpty>
			<isNotEmpty property="f_trnk_vsl_nm">
			   AND  upper(bl.trnk_vsl_nm) LIKE  upper(#f_trnk_vsl_nm#) + '%'
			</isNotEmpty>
			) T1
			WHERE 1 = 1
			<isNotEmpty property="splitFlag">
				<isEqual property="splitFlag" compareValue="Y">
					AND T1.CNTR_QTY > 0
					AND T1.CNTR_NO = 0
				</isEqual>
			</isNotEmpty>
    </select>	

	<update id="updateCombineMainBl" parameterClass="HashMap">
		/* BlCmmSQL.xml > updateCombineMainBl */
		UPDATE TB_INTG_BL SET
			  PCK_QTY = #pck_qty#
			, PCK_UT_CD = #pck_ut_cd#
			, GRS_WGT = #grs_wgt#
			, GRS_WGT1 = #grs_wgt1#
			, MEAS = #meas#
			, MEAS1 = #meas1#
			, MK_TXT = #mk_txt#
			, DESC_TXT = #desc_txt#
			, MODI_USRID = #proc_usrid#
			, MODI_OFC_CD = #proc_ofccd#
			, MODI_TMS = getdate()
		 WHERE 1 = 1
		 AND   INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
	</update>

	<select id="searchCntrCombine_LIST" parameterClass="java.util.HashMap" resultClass="CntrLstVO">
		SELECT
			  MAX(RGST_CNTR_YN) AS RGST_CNTR_YN, CNTR_NO AS CNTR_NO, MAX(CNTR_TPSZ_CD) AS CNTR_TPSZ_CD, SUM(CGO_PCK_QTY) AS CGO_PCK_QTY
			, CONVERT(VARCHAR,
				CASE WHEN 1 <![CDATA[ < ]]> (SELECT COUNT(DISTINCT CGO_PCK_UT) FROM TB_CNTR_LIST WHERE INTG_BL_SEQ = MAX(A.INTG_BL_SEQ)) 
				THEN 'GT' ELSE (SELECT DISTINCT CGO_PCK_UT FROM TB_CNTR_LIST WHERE INTG_BL_SEQ = MAX(A.INTG_BL_SEQ)) END
				) AS CGO_PCK_UT
			, SUM(CGO_WGT) AS CGO_WGT, SUM(CGO_MEAS) AS CGO_MEAS, SUM(VOL_MEAS) AS VOL_MEAS, MAX(SOC_FLG) AS SOC_FLG
			, MAX(DG_GDS_FLG) AS DG_GDS_FLG, MAX(CNTR_RMK) AS CNTR_RMK, MAX(SEAL_NO1) AS SEAL_NO1, MAX(SEAL_NO2) AS SEAL_NO2
			, MAX(SEAL_NO3) AS SEAL_NO3, MAX(CNTR_SPRL_TRDP_CD) AS CNTR_SPRL_TRDP_CD, MAX(DELT_FLG) AS DELT_FLG, MAX(CGO_WGT1) AS CGO_WGT1
			, MAX(CGO_MEAS1) AS CGO_MEAS1, MAX(PICKUP_NUMBER) AS PICKUP_NUMBER, MAX(LFD) AS LFD, MAX(IN_DATE) AS IN_DATE, MAX(OUT_DATE) AS OUT_DATE
			, MAX(CNTR_GO_DATE) AS CNTR_GO_DATE, MAX(TEMP_CD) AS TEMP_CD, MAX(VENT_CD) AS VENT_CD, MAX(TEMP_VAL) AS TEMP_VAL, MAX(ORG_PKUP_DT) AS ORG_PKUP_DT
			, MAX(FNL_DEST_ETA_DT) AS FNL_DEST_ETA_DT, MAX(APNT_DT) AS APNT_DT, MAX(DE_DT) AS DE_DT, MAX(FREE_DET_DT) AS FREE_DET_DT, MAX(CFS_IN_DT) AS CFS_IN_DT
			, MAX(DEVAN_DT) AS DEVAN_DT, MAX(EMTY_RT_DT) AS EMTY_RT_DT, MAX(SEAL_TP1) AS SEAL_TP1, MAX(SEAL_TP2) AS SEAL_TP2, MAX(VGM_CGO_WGT) AS VGM_CGO_WGT
			, MAX(VGM_CGO_WGT_TP) AS VGM_CGO_WGT_TP, MAX(VGM_DT) AS VGM_DT, MAX(VGM_TM) AS VGM_TM, MAX(VGM_METHOD) AS VGM_METHOD, MAX(VGM_CNTR_TP) AS VGM_CNTR_TP
			, MAX(VGM_AM_TRDP_CD) AS VGM_AM_TRDP_CD, MAX(VGM_AM_TRDP_NM) AS VGM_AM_TRDP_NM, MAX(VGM_AM_TRDP_PIC) AS VGM_AM_TRDP_PIC, MAX(VGM_SPC_TRDP_CD) AS VGM_SPC_TRDP_CD, MAX(VGM_SPC_TRDP_NM) AS VGM_SPC_TRDP_NM
			, MAX(VGM_SPC_TRDP_PIC) AS VGM_SPC_TRDP_PIC, MAX(VGM_SEQ) AS VGM_SEQ, MAX(CNTR_REF_NO) AS CNTR_REF_NO, MAX(TRKG_FEE_TXT) AS TRKG_FEE_TXT
		FROM  TB_CNTR_LIST A
		WHERE 1 = 1
		AND  DELT_FLG = 'N'
		AND  INTG_BL_SEQ IN (
			<iterate property="subIntgBlSeq" conjunction=",">	
				#subIntgBlSeq[]# 
			</iterate>
			)
		GROUP BY CNTR_NO
	</select>
	
	<insert id="insertCombineMainBl_cntr" parameterClass="CntrLstVO">
		/* BlCmmSQL.xml > insertCombineMainBl_cntr */
		INSERT INTO TB_CNTR_LIST(
			  CNTR_LIST_SEQ, RGST_CNTR_YN, CNTR_NO, CNTR_TPSZ_CD, CGO_PCK_QTY
			, CGO_PCK_UT
			, CGO_WGT, CGO_MEAS, VOL_MEAS, SOC_FLG
			, DG_GDS_FLG, CNTR_RMK, INTG_BL_SEQ, SEAL_NO1, SEAL_NO2
			, SEAL_NO3, CNTR_SPRL_TRDP_CD, RGST_USRID, RGST_OFC_CD, RGST_TMS
			, MODI_USRID, MODI_OFC_CD, MODI_TMS, DELT_FLG, CGO_WGT1
			, CGO_MEAS1, PICKUP_NUMBER, LFD, IN_DATE, OUT_DATE
			, CNTR_GO_DATE, TEMP_CD, VENT_CD, TEMP_VAL, ORG_PKUP_DT
			, FNL_DEST_ETA_DT, APNT_DT, DE_DT, FREE_DET_DT, CFS_IN_DT
			, DEVAN_DT, EMTY_RT_DT, SEAL_TP1, SEAL_TP2, VGM_CGO_WGT
			, VGM_CGO_WGT_TP, VGM_DT, VGM_TM, VGM_METHOD, VGM_CNTR_TP
			, VGM_AM_TRDP_CD, VGM_AM_TRDP_NM, VGM_AM_TRDP_PIC, VGM_SPC_TRDP_CD, VGM_SPC_TRDP_NM
			, VGM_SPC_TRDP_PIC, VGM_SEQ, CNTR_REF_NO, TRKG_FEE_TXT
		)
		SELECT (select max(cntr_list_seq) + 1 from tb_cntr_list), #rgst_cntr_yn#, #cntr_no#, #cntr_tpsz_cd#, #cgo_pck_qty#
			, #cgo_pck_ut#
			, #cgo_wgt#, #cgo_meas#, #vol_meas#, #soc_flg#
			, #dg_gds_flg#, #cntr_rmk#, #intg_bl_seq#, #seal_no1#, #seal_no2#
			, #seal_no3#, #cntr_sprl_trdp_cd#, #proc_usrid# ,#proc_ofccd#, getdate()
			, #proc_usrid#, #proc_ofccd#, getdate(), #delt_flg#, #cgo_wgt1#
			, #cgo_meas1#, #pickup_number#, #lfd#, #in_date#, #out_date#
			, #cntr_go_date#, #temp_cd#, #vent_cd#, #temp_val#, #org_pkup_dt#
			, #fnl_dest_eta_dt#, #apnt_dt#, #de_dt#, #free_det_dt#, #cfs_in_dt#
			, #devan_dt#, #emty_rt_dt#, #seal_tp1#, #seal_tp2#, #vgm_cgo_wgt#
			, #vgm_cgo_wgt_tp#, #vgm_dt#, #vgm_tm#, #vgm_method#, #vgm_cntr_tp#
			, #vgm_am_trdp_cd#, #vgm_am_trdp_nm#, #vgm_am_trdp_pic#, #vgm_spc_trdp_cd#, #vgm_spc_trdp_nm#
			, #vgm_spc_trdp_pic#, #vgm_seq#, #cntr_ref_no#, #trkg_fee_txt#
	</insert>

	<insert id="insertCombineMainBl_frt" parameterClass="HashMap">
		/* BlCmmSQL.xml > insertCombineMainBl_frt */
		INSERT INTO TB_FRT(
			  INTG_BL_SEQ ,INV_SEQ ,MBL_NO ,HBL_NO ,BKG_NO
			,WO_NO ,FRT_CD ,AIR_SEA_CLSS_CD ,BND_CLSS_CD ,SELL_BUY_TP_CD
			,TRDP_CD ,RAT_CURR_CD ,APLY_UT_CD ,CNTR_TPSZ_CD ,QTY
			,SCG_INCL_FLG ,FRT_TERM_CD ,RU ,VAT_RT ,VAT_AMT
			,INV_CURR_CD ,INV_XCRT ,INV_AMT ,INV_VAT_AMT ,PERF_CURR_CD
			,PERF_XCRT ,PERF_AMT ,PERF_VAT_AMT ,LOCL_CURR_CD ,LOCL_XCRT
			,LOCL_AMT ,LOCL_VAT_AMT ,FRT_ASK_CLSS_CD ,FRT_BIZ_CLSS_CD ,INV_STS_CD
			,CFM_FLG ,INV_ISS_FLG ,FRT_DIVD_FLG ,FINC_OFC_CD ,SLS_OFC_CD
			,AUTO_TRF_FLG ,TRF_CTRT_NO ,TRF_DTL_SEQ ,RGST_USRID ,RGST_OFC_CD
			,RGST_TMS ,MODI_USRID ,MODI_OFC_CD ,MODI_TMS ,DELT_FLG
			,DFLT_FLG ,INV_SUM_AMT ,TRF_CUR_SUM_AMT ,PAY_AMT ,SPLS_AMT
			,INV_XCRT_DT ,REF_NO ,INV_POST_DT ,AGENT_RU ,AGENT_AMT
			,FRT_CD_NM ,OTH_SEQ ,CR_AMT ,INTG_BL_SEQ_2 ,RESERVE_FIELD01
			,RESERVE_FIELD02 ,RESERVE_FIELD03 ,RESERVE_FIELD04 ,RESERVE_FIELD05 ,RESERVE_FIELD06
			,RESERVE_FIELD07 ,WMS_SEQ ,WHLD_VAT_RT ,VAT_RT_CD ,VAT_RT1
			,VAT_RT2 ,VAT_RT_CD1 ,VAT_RT_CD2) 
		SELECT
			 #intg_bl_seq# ,INV_SEQ ,#mbl_no# ,HBL_NO ,BKG_NO
			,WO_NO ,FRT_CD ,AIR_SEA_CLSS_CD ,BND_CLSS_CD ,SELL_BUY_TP_CD
			,TRDP_CD ,RAT_CURR_CD ,APLY_UT_CD ,CNTR_TPSZ_CD ,QTY
			,SCG_INCL_FLG ,FRT_TERM_CD ,RU ,VAT_RT ,VAT_AMT
			,INV_CURR_CD ,INV_XCRT ,INV_AMT ,INV_VAT_AMT ,PERF_CURR_CD
			,PERF_XCRT ,PERF_AMT ,PERF_VAT_AMT ,LOCL_CURR_CD ,LOCL_XCRT
			,LOCL_AMT ,LOCL_VAT_AMT ,FRT_ASK_CLSS_CD ,FRT_BIZ_CLSS_CD ,INV_STS_CD
			,CFM_FLG ,INV_ISS_FLG ,FRT_DIVD_FLG ,FINC_OFC_CD ,SLS_OFC_CD
			,AUTO_TRF_FLG ,TRF_CTRT_NO ,TRF_DTL_SEQ ,#proc_usrid#, #proc_ofccd#
			,getdate() ,#proc_usrid# ,#proc_ofccd# ,getdate() ,DELT_FLG
			,DFLT_FLG ,INV_SUM_AMT ,TRF_CUR_SUM_AMT ,PAY_AMT ,SPLS_AMT
			,INV_XCRT_DT ,REF_NO ,INV_POST_DT ,AGENT_RU ,AGENT_AMT
			,FRT_CD_NM ,OTH_SEQ ,CR_AMT ,INTG_BL_SEQ_2 ,RESERVE_FIELD01
			,RESERVE_FIELD02 ,RESERVE_FIELD03 ,RESERVE_FIELD04 ,RESERVE_FIELD05 ,RESERVE_FIELD06
			,RESERVE_FIELD07 ,WMS_SEQ ,WHLD_VAT_RT ,VAT_RT_CD ,VAT_RT1
			,VAT_RT2 ,VAT_RT_CD1 ,VAT_RT_CD2
		FROM  tb_frt
		WHERE 1 = 1
		AND  DELT_FLG = 'N'
		AND  INTG_BL_SEQ IN (
		<iterate property="subIntgBlSeq" conjunction=",">	
			#subIntgBlSeq[]# 
		</iterate>
		)
	</insert>

	<insert id="insertCombineMainBl_po" parameterClass="HashMap">
		/* BlCmmSQL.xml > insertCombineMainBl_po */
		INSERT INTO PO(
			 PO_SYS_NO, REF_OFC_CD, INTG_BL_SEQ, ORD_STS_CD, BUYR_TRDP_CD
			,BUYR_TRDP_NM, VNDR_TRDP_CD, VNDR_TRDP_NM, VNDR_TRDP_ADDR, VNDR_TRDP_PIC
			,VNDR_TRDP_EML, VNDR_TRDP_PHN, VNDR_TRDP_FAX, FCTRY_TRDP_CD, FCTRY_TRDP_NM
			,FCTRY_TRDP_ADDR, FCTRY_TRDP_PIC, FCTRY_TRDP_EML, FCTRY_TRDP_PHN, FCTRY_TRDP_FAX
			,ORG_LOC_CD, ORG_LOC_NM, DEST_LOC_CD, DEST_LOC_NM, AIR_SEA_CLSS_CD
			,FRT_TERM_CD, INCO_CD, ORD_DT, ARR_DT, SHPWIN_FR_DT
			,SHPWIN_TO_DT, CGO_RDY_DT, RGST_USRID, RGST_OFC_CD, RGST_TMS
			,MODI_USRID, MODI_OFC_CD, MODI_TMS, DELT_FLG, CUST_PO_NO
			,CUST_TRDP_CD, CUST_TRDP_NM, CUST_TRDP_ADDR, CUST_TRDP_PIC, CUST_TRDP_EML
			,CUST_TRDP_PHN, CUST_TRDP_FAX, CUST_INSTR_TXT, PO_RMK, DEPT_CD
			,CNTR_QTY, CNTR_TPSZ_CD, SHPTO_TRDP_CD, SHPTO_TRDP_NM, SHPTO_TRDP_ADDR
			,SHPTO_TRDP_PIC, SHPTO_TRDP_EML, SHPTO_TRDP_PHN, SHPTO_TRDP_FAX, SHPWIN_ALERT_YN
			,NOTI_SEND_YN, CTRT_NO, CTRT_NM, ORD_YR, ORD_WK		
			) 
		SELECT
			 PO_SYS_NO, REF_OFC_CD, #intg_bl_seq#, ORD_STS_CD, BUYR_TRDP_CD
			,BUYR_TRDP_NM, VNDR_TRDP_CD, VNDR_TRDP_NM, VNDR_TRDP_ADDR, VNDR_TRDP_PIC
			,VNDR_TRDP_EML, VNDR_TRDP_PHN, VNDR_TRDP_FAX, FCTRY_TRDP_CD, FCTRY_TRDP_NM
			,FCTRY_TRDP_ADDR, FCTRY_TRDP_PIC, FCTRY_TRDP_EML, FCTRY_TRDP_PHN, FCTRY_TRDP_FAX
			,ORG_LOC_CD, ORG_LOC_NM, DEST_LOC_CD, DEST_LOC_NM, AIR_SEA_CLSS_CD
			,FRT_TERM_CD, INCO_CD, ORD_DT, ARR_DT, SHPWIN_FR_DT
			,SHPWIN_TO_DT, CGO_RDY_DT, #proc_usrid#, #proc_ofccd#, getdate()
			,#proc_usrid#, #proc_ofccd#, getdate(), DELT_FLG, CUST_PO_NO
			,CUST_TRDP_CD, CUST_TRDP_NM, CUST_TRDP_ADDR, CUST_TRDP_PIC, CUST_TRDP_EML
			,CUST_TRDP_PHN, CUST_TRDP_FAX, CUST_INSTR_TXT, PO_RMK, DEPT_CD
			,CNTR_QTY, CNTR_TPSZ_CD, SHPTO_TRDP_CD, SHPTO_TRDP_NM, SHPTO_TRDP_ADDR
			,SHPTO_TRDP_PIC, SHPTO_TRDP_EML, SHPTO_TRDP_PHN, SHPTO_TRDP_FAX, SHPWIN_ALERT_YN
			,NOTI_SEND_YN, CTRT_NO, CTRT_NM, ORD_YR, ORD_WK
		FROM  TB_PO
		WHERE 1 = 1
		AND  DELT_FLG = 'N'
		AND  INTG_BL_SEQ IN (
		<iterate property="subIntgBlSeq" conjunction=",">	
			#subIntgBlSeq[]# 
		</iterate>
		)
	</insert>

	<update id="updateCombineMainBl_hbl" parameterClass="HashMap">
		/* BlCmmSQL.xml > updateCombineMainBl_hbl */
		UPDATE TB_INTG_BL_RLT SET
			  RLT_INTG_BL_SEQ = #intg_bl_seq#
			, MODI_USRID = #proc_usrid#
			, MODI_OFC_CD = #proc_ofccd#
			, MODI_TMS = getdate()
		WHERE 1 = 1
		AND  RLT_INTG_BL_SEQ IN (
		<iterate property="subIntgBlSeq" conjunction=",">	
			#subIntgBlSeq[]# 
		</iterate>
		)
	</update>
	
	<update id="updateCombineMainBl_hblRef" parameterClass="HashMap">
		/* BlCmmSQL.xml > "updateCombineMainBl_hblRef" */
		UPDATE TB_INTG_BL SET
			  REF_NO = (SELECT REF_NO FROM TB_INTG_BL WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar))
			, MODI_USRID = #proc_usrid#
			, MODI_OFC_CD = #proc_ofccd#
			, MODI_TMS = getdate()
		WHERE 1 = 1
		AND  INTG_BL_SEQ IN (
		(SELECT INTG_BL_SEQ FROM TB_INTG_BL_RLT WHERE RLT_INTG_BL_SEQ = cast(#intg_bl_seq# as varchar))
		)
	</update>
	
	
	<update id="updateDeleteSubBl" parameterClass="HashMap">
		/* BlCmmSQL.xml > updateDeleteSubBl */
		UPDATE TB_INTG_BL SET
			  DELT_FLG = 'Y'
			, MODI_USRID = #proc_usrid#
			, MODI_OFC_CD = #proc_ofccd#
			, MODI_TMS = getdate()
		WHERE 1 = 1
		AND  INTG_BL_SEQ IN (
		<iterate property="subIntgBlSeq" conjunction=",">	
			#subIntgBlSeq[]# 
		</iterate>
		)
	</update>

	<update id="updateDeleteSubBl_cntr" parameterClass="HashMap">
		/* BlCmmSQL.xml > updateDeleteSubBl_cntr */
		UPDATE TB_CNTR_LIST SET
			  DELT_FLG = 'Y'
			, MODI_USRID = #proc_usrid#
			, MODI_OFC_CD = #proc_ofccd#
			, MODI_TMS = getdate()
		WHERE 1 = 1
		AND  INTG_BL_SEQ IN (
		<iterate property="subIntgBlSeq" conjunction=",">	
			#subIntgBlSeq[]# 
		</iterate>
		)
	</update>

	<update id="updateDeleteSubBl_frt" parameterClass="HashMap">
		/* BlCmmSQL.xml > updateDeleteSubBl_frt */
		UPDATE TB_FRT SET
			  DELT_FLG = 'Y'
			, INTG_BL_SEQ = ''
			, MODI_USRID = #proc_usrid#
			, MODI_OFC_CD = #proc_ofccd#
			, MODI_TMS = getdate()
		WHERE 1 = 1
		AND  INTG_BL_SEQ IN (
		<iterate property="subIntgBlSeq" conjunction=",">	
			#subIntgBlSeq[]# 
		</iterate>
		)
	</update>
	
	<insert id="insertCombineBl_hist" parameterClass="HashMap">
		INSERT INTO tb_intg_cng_his_aif(
			intg_cng_his_seq
			,intg_bl_seq
			,bnd_clss_cd
			,ett_nm
			,cng_attr_seq
			,bfr_cng_txt
			,aft_cng_txt
			,rgst_usrid
			,rgst_ofc_cd
			,rgst_tms
			,modi_seq
			)
			select 
			(select isnull(max(intg_cng_his_seq),0)+1 from tb_intg_cng_his_aif)
			,#intg_bl_seq#
			,'O'
			,'TB_INTG_BL'
			,(select max(CNG_ATTR_SEQ) from TB_CNG_PPT where PHYS_ETT_NM = 'BL_COMBINE' and use_flg = 'Y' and delt_flg = 'N')
			,#bfr_cng_txt#
			,#aft_cng_txt#
			,#proc_usrid#
			,#proc_ofccd#
			,getdate()
			,(select isnull(max(modi_seq),0)+1 from tb_intg_cng_his_aif)
	</insert>
	
   <select id="searchBlCntrList" parameterClass="java.util.HashMap" resultClass="CntrLstVO">
	/* BlCmmSQL.xml > searchBlCntrList */
		SELECT cntr_list_seq, cntr_no
		FROM TB_CNTR_LIST
		WHERE DELT_FLG = 'N'
		AND INTG_BL_SEQ = #f_intg_bl_seq#
		ORDER BY CNTR_TPSZ_CD DESC, CNTR_LIST_SEQ ASC, CNTR_NO DESC
   </select>
	
    <select id="searchBlSplitCntrList" parameterClass="java.util.HashMap" resultClass="com.clt.apps.fis.see.bmd.masterbl.dto.SeeMasterCntrVO" remapResults="true">
    /* BlCmmSQL.xml > searchBlSplitCntrList */
		SELECT * FROM (
			SELECT 
			$cntrLSql$
			,  CNTR_TPSZ_CD
			 FROM TB_CNTR_LIST a
			WHERE DELT_FLG = 'N'
			AND INTG_BL_SEQ = #f_intg_bl_seq#
			) as a
		PIVOT   (MAX(CNTR_TPSZ_CD) FOR CNTR_LIST_SEQ IN ($cntrLSeqList$)) AS PVT 
    </select>    
	
   <select id="getBlSpitCntrListHdr" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
    /* BlCmmSQL.xml > getBlSpitCntrListHdr */
	   SELECT cntr_list_seq, cntr_tpsz_cd, cntr_no
		,  ( SELECT COUNT(*) FROM TB_INTG_BL WHERE INTG_BL_SEQ IN (
				(SELECT INTG_BL_SEQ FROM TB_CNTR_LIST WHERE INTG_BL_SEQ IN (
						(SELECT INTG_BL_SEQ FROM TB_INTG_BL_RLT WHERE RLT_INTG_BL_SEQ = a.INTG_BL_SEQ AND DELT_FLG = 'N')
						)
					AND CNTR_NO = A.CNTR_NO
					)
				)
			) AS chk_cntr_rlt
		,  ( SELECT COUNT(*) FROM TB_CNTR_LIST WHERE INTG_BL_SEQ IN (
				( SELECT INTG_BL_SEQ FROM TB_INTG_BL WHERE INTG_BL_SEQ IN (
					(SELECT INTG_BL_SEQ FROM TB_CNTR_LIST WHERE INTG_BL_SEQ IN (
						(SELECT INTG_BL_SEQ FROM TB_INTG_BL_RLT WHERE RLT_INTG_BL_SEQ = a.INTG_BL_SEQ AND DELT_FLG = 'N')
								)
								AND CNTR_NO = A.CNTR_NO
							)
						)
					)
				)
			) AS chk_hbl_cntr_rlt
	   , RANK() over (partition by CNTR_TPSZ_CD ORDER BY CNTR_TPSZ_CD DESC, CNTR_LIST_SEQ ASC)  as rowcnt
		   FROM TB_CNTR_LIST a
		   WHERE DELT_FLG = 'N'
	   	   AND INTG_BL_SEQ = #f_intg_bl_seq#
	   	   ORDER BY CNTR_TPSZ_CD DESC, CNTR_LIST_SEQ ASC, CNTR_NO DESC
   </select>  

    <update id="updateSplitOriginBL" parameterClass="com.clt.apps.fis.see.bmd.masterbl.dto.SeeMasterCntrVO">
     /** BlCmmSQL.xml > updateSplitOriginBL **/
        UPDATE  tb_intg_bl SET
        	<!-- ref_no       = #ref_no#,
        	bl_no        = #bl_no#, -->
        	pck_qty      = #pck_qty#,    
        	meas      	 = #meas#,   
        	meas1     	 = #meas1#,   
        	grs_wgt      = #grs_wgt#,   
        	grs_wgt1     = #grs_wgt1#,
            modi_usrid = #proc_usrid#,
            modi_ofc_cd = #proc_ofccd#,
            modi_tms   = GETUTCDATE()
         WHERE  intg_bl_seq = cast(#intg_bl_seq# as varchar) 
    </update>

    <update id="updateOriginbl_CNTR_LIST" parameterClass="HashMap">
  		/* BlCmmSQL.xml > updateOriginbl_CNTR_LIST */  
        UPDATE  tb_cntr_list SET  
        	delt_flg   = 'Y',
            modi_usrid = #proc_usrid#,
            modi_ofc_cd = #proc_ofccd#,
            modi_tms   = GETUTCDATE()     	           
         WHERE  intg_bl_seq = cast(#intg_bl_seq# as varchar) 
        <isNotEmpty property="cntr_list_seq">
		 AND  cntr_list_seq= #cntr_list_seq#
		</isNotEmpty>         
    </update>     

    <insert id="insertSplitBL" parameterClass="com.clt.apps.fis.see.bmd.masterbl.dto.SeeMasterCntrVO">
	    /** BlCmmSQL.xml > insertSplitBL **/
		INSERT INTO TB_INTG_BL 
			(INTG_BL_SEQ ,BIZ_CLSS_CD ,BL_NO ,FRT_TERM_CD ,REP_CMDT_CD
			,REP_CMDT_NM ,PCK_UT_CD ,PCK_QTY ,GRS_WGT_UT_CD ,GRS_WGT
			,MEAS_UT_CD ,MEAS ,POR_CD ,POR_NM ,POL_CD
			,POL_NOD_CD ,POL_NM ,POD_CD ,POD_NOD_CD ,POD_NM
			,DEL_CD ,DEL_NM ,ISS_LOC_CD ,PAY_LOC_CD ,OBRD_DT_TM
			,FT_DT ,CURR_CD ,ETD_DT_TM ,ETA_DT_TM ,LNR_RMK
			,SHP_MOD_CD ,FM_SVC_TERM_CD ,TO_SVC_TERM_CD ,TRNK_VSL_CD ,TRNK_VOY
			,PRE_VSL_CD ,PRE_VOY ,FLT_NO ,CGO_CLZ_DT_TM ,CARGO_TP_CD ,OTR_CHG_TERM_CD
			,CHG_WGT_UT_CD ,CHG_WGT ,FNL_DEST_LOC_CD ,FNL_DEST_LOC_NM ,DECL_CRR_VAL
			,DECL_CSTMS_VAL ,AMT_INSUR_VAL ,HNDL_INFO_TXT ,ACCTG_INFO_TXT ,BKG_NO
			,PO_NO ,BKG_DT_TM ,LNR_BKG_NO ,HBL_TP_CD ,INCO_CD
			,MK_TXT ,DESC_TXT ,AIR_SEA_CLSS_CD ,ACT_WGT_UT_CD ,ACT_WGT
			,CGO_RCV_DT_TM ,CFS_LOC_CD ,CFS_NOD_CD ,DE_DUE_DT ,SR_NO
			,LNR_SKD_SEQ ,CA_STS_CD ,ORG_BL_QTY ,TTL_BL_QTY ,SAD_TXT
			,SAY_TXT ,BL_KND_CD ,BL_ISS_DT ,RMK ,RGST_USRID
			,RGST_OFC_CD ,RGST_TMS ,MODI_USRID ,MODI_OFC_CD ,MODI_TMS
			,DELT_FLG ,BL_STS_CD ,DEPT_CD ,BKG_SEQ ,SR_SEQ
			,HBL_SEQ ,SR_CRE_DT ,HBL_CRE_DT ,MM_TXT ,SHP_TP_CD
			,TRNK_VSL_NM ,PRE_VSL_NM ,MODI_USR_NM ,SRD_FLG ,ACT_SHP_INFO
			,NOMI_FLG ,TS1_PORT_CD ,TS1_FLT_NO ,TS2_PORT_CD ,TS2_FLT_NO
			,TS3_PORT_CD ,TS3_FLT_NO ,CFS_LOC_NM ,BL_SER_NO ,CSTS_CLR_TP
			,ISS_LOC_NM ,PAY_LOC_NM ,REF_NO ,SUB_BL_NO ,MBL_REF_NO
			,POST_DT ,SUB_MBL_FLG ,STATE_CD ,GRS_WGT1 ,ACT_WGT1
			,MEAS1 ,SIZE_UT_CD ,AGENT_RT ,AGENT_AMT ,AGENT_CURR_CD
			,CUST_RT ,CUST_AMT ,CUST_CURR_CD ,PROFIT_SHARE ,EXPRESS_TP_CD
			,ISS_LOC_CD1 ,ISS_LOC_NM1 ,TRANS_SHIPMENT ,ITN_NO ,ONWARD_ROUT
			,CLEAN_ON_BOARD ,FRT_TERM_C_CD ,FRT_TERM_A_CD ,OBRD_DT_TM1 ,REF_OFC_CD
			,EXP_REF_NO ,OBL_TP_CD ,BROKER_RT ,RCV_WH_CD ,SC_NO
			,CNT_CD ,MK_GRS_WGT ,MK_GRS_WGT1 ,MK_MEAS ,MK_MEAS1
			,F_ETA_DT_TM ,D_ETA_DT_TM ,AVAIL_DT_TM ,LFD_DT_TM ,GO_DT_TM
			,RCVD_DT_TM ,RLSD_DT_TM ,TE ,IT_NO ,IT_LOC
			,BOND_CARR_CD ,BOND_NO ,GOODS_AT ,GOODS_VALUE ,DOOR_LOC_CD
			,FNL_WH_CD ,ORG_BL_RCVD_FLG ,ROR_FLG ,RLSD_FLG ,RLSD_USRID
			,TE_DT_TM ,AMS_NO ,ISF_NO ,CARR_TRDP_CD1 ,CY_TRDP_CD
			,CFS_TRDP_CD ,RT_TRDP_CD ,IMP_REF_NO ,CUST_REF_NO ,AGENT_GRS_WGT
			,AGENT_GRS_WGT1 ,AGENT_CHG_WGT ,AGENT_CHG_WGT1 ,PRNR_REF_NO ,LC_NO
			,INV_NO ,DISP_NTFY_FLG ,CHG_WGT1 ,BL_DT_TM ,WGT_DISP_CD
			,VOL_WGT ,VOL_MEAS ,SPOT_NO ,IATA_CD ,IT_CLASS
			,STO_START_DT ,FOREIGN_DEST ,WH_ARRV_DT_TM ,DOC_PKUP_ON_DT_TM ,DOC_PKUP_BY
			,CGO_RLSD_ON_DT_TM ,CGO_RLSD_TO ,MANIFEST_TO ,FIRST_PORT_CD ,LAST_PORT_CD
			,FRT_LOC_CD ,SVC_SCOPE ,ATT_MK_TXT ,ATT_DESC_TXT ,BL_GRS_WGT
			,BL_CHG_WGT ,BL_GRS_WGT1 ,BL_CHG_WGT1 ,AGENT_UNIT_CHK ,CUSTOMER_UNIT_CHK
			,DESC_TXT1 ,AN_INV_NO ,AN_DUE_DT ,AN_CURR_CD ,CNTR_INFO
			,RT_CLSS_CD ,DOC_RECPT_NO ,RESERVE_FIELD01 ,RESERVE_FIELD02 ,RESERVE_FIELD03
			,RESERVE_FIELD04 ,RESERVE_FIELD05 ,RESERVE_FIELD06 ,RESERVE_FIELD11 ,LANE_CD
			,WH_CUT_OFF_DT ,DOC_CUT_OFF_DT ,PU_TRDP_CD ,CUT_OFF_DT ,RAIL_CUT_OFF_DT
			,ETA_FPOE_TM ,ETD_POR_TM ,SHIP_WIN_TITLE ,SHIP_WIN_DESC ,AMS_ID
			,CCN_NO ,PRE_CCN_NO ,MNF_FR_LOC ,MNF_TO_LOC ,CCN_DT
			)
		SELECT
			#intg_bl_seq#, BIZ_CLSS_CD, #bl_no# ,FRT_TERM_CD ,REP_CMDT_CD
			,REP_CMDT_NM ,#pck_ut_cd# ,#pck_qty# ,GRS_WGT_UT_CD ,#grs_wgt#
			,MEAS_UT_CD ,#meas# ,POR_CD ,POR_NM ,POL_CD
			,POL_NOD_CD ,POL_NM ,POD_CD ,POD_NOD_CD ,POD_NM
			,DEL_CD ,DEL_NM ,ISS_LOC_CD ,PAY_LOC_CD ,OBRD_DT_TM
			,FT_DT ,CURR_CD ,ETD_DT_TM ,ETA_DT_TM ,LNR_RMK
			,SHP_MOD_CD ,FM_SVC_TERM_CD ,TO_SVC_TERM_CD ,TRNK_VSL_CD ,TRNK_VOY
			,PRE_VSL_CD ,PRE_VOY ,FLT_NO ,CGO_CLZ_DT_TM ,CARGO_TP_CD ,OTR_CHG_TERM_CD
			,CHG_WGT_UT_CD ,CHG_WGT ,FNL_DEST_LOC_CD ,FNL_DEST_LOC_NM ,DECL_CRR_VAL
			,DECL_CSTMS_VAL ,AMT_INSUR_VAL ,HNDL_INFO_TXT ,ACCTG_INFO_TXT ,BKG_NO
			,PO_NO ,BKG_DT_TM ,LNR_BKG_NO ,HBL_TP_CD ,INCO_CD
			,MK_TXT ,DESC_TXT ,AIR_SEA_CLSS_CD ,ACT_WGT_UT_CD ,ACT_WGT
			,CGO_RCV_DT_TM ,CFS_LOC_CD ,CFS_NOD_CD ,DE_DUE_DT ,SR_NO
			,LNR_SKD_SEQ ,CA_STS_CD ,ORG_BL_QTY ,TTL_BL_QTY ,SAD_TXT
			,SAY_TXT ,BL_KND_CD ,BL_ISS_DT ,RMK ,#proc_usrid#
			,#proc_ofccd# ,getdate() ,#proc_usrid# ,#proc_ofccd# ,getdate()
			,DELT_FLG ,BL_STS_CD ,DEPT_CD ,BKG_SEQ ,SR_SEQ
			,HBL_SEQ ,SR_CRE_DT ,HBL_CRE_DT ,MM_TXT ,SHP_TP_CD
			,TRNK_VSL_NM ,PRE_VSL_NM ,MODI_USR_NM ,SRD_FLG ,ACT_SHP_INFO
			,NOMI_FLG ,TS1_PORT_CD ,TS1_FLT_NO ,TS2_PORT_CD ,TS2_FLT_NO
			,TS3_PORT_CD ,TS3_FLT_NO ,CFS_LOC_NM ,BL_SER_NO ,CSTS_CLR_TP
			,ISS_LOC_NM ,PAY_LOC_NM ,#ref_no# ,SUB_BL_NO ,MBL_REF_NO
			,POST_DT ,SUB_MBL_FLG ,STATE_CD ,#grs_wgt1# ,ACT_WGT1
			,#meas1#  ,SIZE_UT_CD ,AGENT_RT ,AGENT_AMT ,AGENT_CURR_CD
			,CUST_RT ,CUST_AMT ,CUST_CURR_CD ,PROFIT_SHARE ,EXPRESS_TP_CD
			,ISS_LOC_CD1 ,ISS_LOC_NM1 ,TRANS_SHIPMENT ,ITN_NO ,ONWARD_ROUT
			,CLEAN_ON_BOARD ,FRT_TERM_C_CD ,FRT_TERM_A_CD ,OBRD_DT_TM1 ,REF_OFC_CD
			,EXP_REF_NO ,OBL_TP_CD ,BROKER_RT ,RCV_WH_CD ,SC_NO
			,CNT_CD ,#grs_wgt# ,#grs_wgt1# ,#meas# ,#meas1#
			,F_ETA_DT_TM ,D_ETA_DT_TM ,AVAIL_DT_TM ,LFD_DT_TM ,GO_DT_TM
			,RCVD_DT_TM ,RLSD_DT_TM ,TE ,IT_NO ,IT_LOC
			,BOND_CARR_CD ,BOND_NO ,GOODS_AT ,GOODS_VALUE ,DOOR_LOC_CD
			,FNL_WH_CD ,ORG_BL_RCVD_FLG ,ROR_FLG ,RLSD_FLG ,RLSD_USRID
			,TE_DT_TM ,AMS_NO ,ISF_NO ,CARR_TRDP_CD1 ,CY_TRDP_CD
			,CFS_TRDP_CD ,RT_TRDP_CD ,IMP_REF_NO ,CUST_REF_NO ,AGENT_GRS_WGT
			,AGENT_GRS_WGT1 ,AGENT_CHG_WGT ,AGENT_CHG_WGT1 ,PRNR_REF_NO ,LC_NO
			,'' ,DISP_NTFY_FLG ,CHG_WGT1 ,BL_DT_TM ,WGT_DISP_CD
			,VOL_WGT ,VOL_MEAS ,SPOT_NO ,IATA_CD ,IT_CLASS
			,STO_START_DT ,FOREIGN_DEST ,WH_ARRV_DT_TM ,DOC_PKUP_ON_DT_TM ,DOC_PKUP_BY
			,CGO_RLSD_ON_DT_TM ,CGO_RLSD_TO ,MANIFEST_TO ,FIRST_PORT_CD ,LAST_PORT_CD
			,FRT_LOC_CD ,SVC_SCOPE ,ATT_MK_TXT ,ATT_DESC_TXT ,BL_GRS_WGT
			,BL_CHG_WGT ,BL_GRS_WGT1 ,BL_CHG_WGT1 ,AGENT_UNIT_CHK ,CUSTOMER_UNIT_CHK
			,DESC_TXT1 ,AN_INV_NO ,AN_DUE_DT ,AN_CURR_CD ,CNTR_INFO
			,RT_CLSS_CD ,DOC_RECPT_NO ,RESERVE_FIELD01 ,RESERVE_FIELD02 ,RESERVE_FIELD03
			,RESERVE_FIELD04 ,RESERVE_FIELD05 ,RESERVE_FIELD06 ,RESERVE_FIELD11 ,LANE_CD
			,WH_CUT_OFF_DT ,DOC_CUT_OFF_DT ,PU_TRDP_CD ,CUT_OFF_DT ,RAIL_CUT_OFF_DT
			,ETA_FPOE_TM ,ETD_POR_TM ,SHIP_WIN_TITLE ,SHIP_WIN_DESC ,AMS_ID
			,CCN_NO ,PRE_CCN_NO ,MNF_FR_LOC ,MNF_TO_LOC ,CCN_DT
			
		FROM tb_intg_bl           
		WHERE intg_bl_seq = #org_intg_bl_seq#         
    </insert> 

    <insert id="insertSplitBL_AddInfo" parameterClass="com.clt.apps.fis.see.bmd.masterbl.dto.SeeMasterCntrVO">
	    /** BlCmmSQL.xml > insertSplitBL_AddInfo **/
		INSERT INTO TB_ADD_INFO_BND (
			INTG_BL_SEQ ,BND_CLSS_CD ,CLZ_FLG ,CFM_FLG ,CXL_FLG
           ,CRNT_BL_STS_CD ,SLS_OFC_CD ,SLS_USRID ,PIC_USRID ,RGST_USRID
           ,RGST_OFC_CD ,RGST_TMS ,MODI_USRID ,MODI_OFC_CD ,MODI_TMS
           ,DELT_FLG ,SLS_USR_NM ,SLS_DEPT_CD ,JB_TMPLT_SEQ ,ITEM_NO
           ,FST_TO_CD ,FST_TO_NM ,EXP_FRT_DESC ,TS1_PORT_CD ,TS1_PORT_NM
           ,TS1_ETA_DT_TM ,TS1_ETD_DT_TM ,ISSUED_BY ,RMK_DEV ,AR_CHK
           ,AP_CHK ,DC_CHK ,HBL_SER_NO ,HBL_SER_PFX ,ACT_ETD_DT_TM
           ,ACT_ETA_DT_TM ,CTRB_OFC_CD ,CTRB_DEPT_CD ,CTRB_RATIO_YN ,CTRB_MGN
           ,STATE_CNT_CD ,CERTI_STS_CD ,CERTI_HNDL_INFO ,CFS_RMK ,CSMS_RLSE_DT
           ,PKUP_DT ,ENTR_NO ,FRT_CHK ,AN_FAX_SND_DT ,AN_EML_SND_DT
           ,DOC_FORM ,MRN_NO ,SURREND ,UCR_NO ,INTG_BKG_SEQ
           ,PORT_OPEN_DT ,VGM_CUT_OFF_DT ,SVC_LANE_NM ,FIRST_PORT_NM ,PAY_FLAG
           ,PAY_DT_TM ,HOLD_FLAG ,HOLD_DT_TM ,RELEASE_FLAG ,RELEASE_DT_TM
           ,HOLD_REASON ,VERIFY_BY ,VERIFY_FLAG ,VERIFY_DT_TM ,CFS_OTH_FEE
           ,CFS_OTH_FEE_DESC ,INTER_USE_FLAG
           ,bk_usrid, ORG_TP, ORG_CD)
		SELECT
			#intg_bl_seq# ,#bnd_clss_cd# ,CLZ_FLG ,CFM_FLG ,CXL_FLG
			,CRNT_BL_STS_CD ,SLS_OFC_CD ,SLS_USRID ,PIC_USRID ,#proc_usrid#
			,#proc_ofccd# ,getdate() ,#proc_usrid# ,#proc_ofccd# ,getdate()
           ,DELT_FLG ,SLS_USR_NM ,SLS_DEPT_CD ,JB_TMPLT_SEQ ,ITEM_NO
           ,FST_TO_CD ,FST_TO_NM ,EXP_FRT_DESC ,TS1_PORT_CD ,TS1_PORT_NM
           ,TS1_ETA_DT_TM ,TS1_ETD_DT_TM ,ISSUED_BY ,RMK_DEV ,'X'
           ,'X' ,'X' ,HBL_SER_NO ,HBL_SER_PFX ,ACT_ETD_DT_TM
           ,ACT_ETA_DT_TM ,CTRB_OFC_CD ,CTRB_DEPT_CD ,CTRB_RATIO_YN ,CTRB_MGN
           ,STATE_CNT_CD ,CERTI_STS_CD ,CERTI_HNDL_INFO ,CFS_RMK ,CSMS_RLSE_DT
           ,PKUP_DT ,ENTR_NO ,'' ,AN_FAX_SND_DT ,AN_EML_SND_DT
           ,DOC_FORM ,MRN_NO ,SURREND ,UCR_NO ,INTG_BKG_SEQ
           ,PORT_OPEN_DT ,VGM_CUT_OFF_DT ,SVC_LANE_NM ,FIRST_PORT_NM ,''
           ,'' ,'' ,'' ,'' ,''
           ,'' ,'' ,'' ,'' ,CFS_OTH_FEE
           ,CFS_OTH_FEE_DESC ,INTER_USE_FLAG
           ,bk_usrid, ORG_TP, ORG_CD
		FROM TB_ADD_INFO_BND           
		WHERE intg_bl_seq = #org_intg_bl_seq#         
    </insert> 

    <insert id="insertSplitBL_Prnr" parameterClass="com.clt.apps.fis.see.bmd.masterbl.dto.SeeMasterCntrVO">
	    /** BlCmmSQL.xml > insertSplitBL_Prnr **/
		INSERT INTO TB_BL_PRNR (
			INTG_BL_SEQ ,BL_TRDP_TP_CD ,TRDP_CD ,TRDP_NM ,TRDP_PIC
           ,TRDP_PHN ,TRDP_FAX ,TRDP_EML ,TRDP_ADDR ,RGST_USRID
           ,RGST_OFC_CD ,RGST_TMS ,MODI_USRID ,MODI_OFC_CD ,MODI_TMS
           ,DELT_FLG ,TRDP_PIC_USR_ID)
		SELECT
			#intg_bl_seq# ,BL_TRDP_TP_CD ,TRDP_CD ,TRDP_NM ,TRDP_PIC
			,TRDP_PHN ,TRDP_FAX ,TRDP_EML ,TRDP_ADDR ,#proc_usrid#
			,#proc_ofccd# ,getdate() ,#proc_usrid# ,#proc_ofccd# ,getdate()
			,DELT_FLG ,TRDP_PIC_USR_ID
		FROM TB_BL_PRNR
		WHERE intg_bl_seq = #org_intg_bl_seq#         
    </insert> 

    <update id="updateSplitBL_Cntr_List" parameterClass="HashMap">
  		/* BlCmmSQL.xml > updateSplitBL_Cntr_List */  
        UPDATE  tb_cntr_list SET
            delt_flg   = 'N',
        	intg_bl_seq = #intg_bl_seq#,
            modi_usrid = #proc_usrid#,
            modi_ofc_cd = #proc_ofccd#,
            modi_tms   = GETUTCDATE()
         WHERE 1 = 1
        <isNotEmpty property="cntr_list_seq">
		 AND  cntr_list_seq= #cntr_list_seq#
		</isNotEmpty>         
    </update>     

    <update id="updateSplitBl_PO" parameterClass="ItmLstVO">
	/* BlCmmSQL.xml > updateSplitBl_PO */ 	
        DELETE FROM  TB_SHP_CMDT
        WHERE shp_cmdt_seq = #item_shp_cmdt_seq#  
    </update> 

    <insert id="insertBlSplit_PO" parameterClass="ItmLstVO">
	    /** BlCmmSQL.xml > insertBlSplit_PO **/
		INSERT INTO TB_SHP_CMDT (
			SHP_CMDT_SEQ ,INTG_BL_SEQ ,SHP_CMDT_CD ,HS_GRP_CD ,PCK_QTY
           ,PCK_UT_CD ,WGT ,MEAS ,CNTR_LIST_SEQ ,RMK
           ,RGST_USRID ,RGST_OFC_CD ,RGST_TMS ,MODI_USRID ,MODI_OFC_CD
           ,MODI_TMS ,DELT_FLG ,SHP_CMDT_NM ,DG_CD_TP ,DG_CD ,DG_CNTC_NM
           ,CMDT_CD ,PO_CMDT_SEQ ,PO_SYS_NO ,PCK_INR_QTY ,EA_CNT
           ,TTL_QTY ,LBS_WGT ,CFT_MEAS)
		SELECT
			(SELECT MAX(SHP_CMDT_SEQ) + 1 FROM TB_SHP_CMDT), #intg_bl_seq# ,SHP_CMDT_CD ,HS_GRP_CD ,PCK_QTY
			,PCK_UT_CD ,WGT ,MEAS ,(SELECT CNTR_LIST_SEQ FROM TB_CNTR_LIST WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar) AND CNTR_NO = #sel_cntr#) ,RMK
			,#proc_usrid# ,#proc_ofccd# ,getdate() ,#proc_usrid# ,#proc_ofccd# 
			,getdate() ,DELT_FLG ,SHP_CMDT_NM ,DG_CD_TP ,DG_CD ,DG_CNTC_NM
			,CMDT_CD ,PO_CMDT_SEQ ,PO_SYS_NO ,PCK_INR_QTY ,EA_CNT
			,TTL_QTY ,LBS_WGT ,CFT_MEAS
		FROM TB_SHP_CMDT
		WHERE shp_cmdt_seq = #item_shp_cmdt_seq#
    </insert>
 
 	<update id="updateSplit_rlt" parameterClass="HashMap">
		/* BlCmmSQL.xml > updateSplit_rlt */
		UPDATE TB_INTG_BL_RLT SET
			  RLT_INTG_BL_SEQ = #intg_bl_seq#
			, MODI_USRID = #proc_usrid#
			, MODI_OFC_CD = #proc_ofccd#
			, MODI_TMS = getdate()
		WHERE 1 = 1
		AND  INTG_BL_SEQ = (
			SELECT INTG_BL_SEQ
			FROM TB_CNTR_LIST
			WHERE CNTR_NO = (SELECT CNTR_NO FROM TB_CNTR_LIST WHERE CNTR_LIST_SEQ = #cntr_list_seq#)
			AND INTG_BL_SEQ IN (
				SELECT INTG_BL_SEQ 
				FROM TB_INTG_BL_RLT
				WHERE 1 = 1
				AND RLT_INTG_BL_SEQ = (SELECT INTG_BL_SEQ FROM TB_CNTR_LIST WHERE CNTR_LIST_SEQ = #cntr_list_seq#)
				)
			)
	</update>
 
     <insert id="insertSplit_rlt" parameterClass="HashMap">
	    /** BlCmmSQL.xml > insertSplit_rlt **/
		INSERT INTO TB_INTG_BL_RLT (
			INTG_BL_SEQ ,RLT_INTG_BL_SEQ ,INTG_BL_RLT_CD ,RGST_USRID ,RGST_OFC_CD
           ,RGST_TMS ,MODI_USRID ,MODI_OFC_CD ,MODI_TMS ,DELT_FLG)
		SELECT
			#intg_bl_seq# ,RLT_INTG_BL_SEQ ,INTG_BL_RLT_CD ,#proc_usrid# ,#proc_ofccd#
			,getdate() ,#proc_usrid# ,#proc_ofccd# ,getdate() ,DELT_FLG
		FROM TB_INTG_BL_RLT
		WHERE intg_bl_seq = #org_intg_bl_seq#
    </insert>

     <insert id="insertSplitBL_Cntr_List" parameterClass="HashMap">
	    /** BlCmmSQL.xml > insertSplitBL_Cntr_List **/
		INSERT INTO TB_CNTR_LIST (
			CNTR_LIST_SEQ ,RGST_CNTR_YN ,CNTR_NO ,CNTR_TPSZ_CD ,CGO_PCK_QTY
           ,CGO_PCK_UT ,CGO_WGT ,CGO_MEAS ,VOL_MEAS ,SOC_FLG
           ,DG_GDS_FLG ,CNTR_RMK ,INTG_BL_SEQ ,SEAL_NO1 ,SEAL_NO2
           ,SEAL_NO3 ,CNTR_SPRL_TRDP_CD ,RGST_USRID ,RGST_OFC_CD ,RGST_TMS
           ,MODI_USRID ,MODI_OFC_CD ,MODI_TMS ,DELT_FLG ,CGO_WGT1
           ,CGO_MEAS1 ,PICKUP_NUMBER ,LFD ,IN_DATE ,OUT_DATE
           ,CNTR_GO_DATE ,TEMP_CD ,VENT_CD ,TEMP_VAL ,ORG_PKUP_DT
           ,FNL_DEST_ETA_DT ,APNT_DT ,DE_DT ,FREE_DET_DT ,CFS_IN_DT
           ,DEVAN_DT ,EMTY_RT_DT ,SEAL_TP1 ,SEAL_TP2 ,VGM_CGO_WGT
           ,VGM_CGO_WGT_TP ,VGM_DT ,VGM_TM ,VGM_METHOD ,VGM_CNTR_TP
           ,VGM_AM_TRDP_CD ,VGM_AM_TRDP_NM ,VGM_AM_TRDP_PIC ,VGM_SPC_TRDP_CD ,VGM_SPC_TRDP_NM
           ,VGM_SPC_TRDP_PIC ,VGM_SEQ ,CNTR_REF_NO ,TRKG_FEE_TXT)
		SELECT
			(SELECT MAX(CNTR_LIST_SEQ) + 1 FROM TB_CNTR_LIST) ,RGST_CNTR_YN ,CNTR_NO ,CNTR_TPSZ_CD ,CGO_PCK_QTY
			,CGO_PCK_UT ,CGO_WGT ,CGO_MEAS ,VOL_MEAS ,SOC_FLG
			,DG_GDS_FLG ,CNTR_RMK ,#intg_bl_seq# ,SEAL_NO1 ,SEAL_NO2
			,SEAL_NO3 ,CNTR_SPRL_TRDP_CD ,#proc_usrid# ,#proc_ofccd# ,getdate()
			,#proc_usrid# ,#proc_ofccd# ,getdate() ,DELT_FLG ,CGO_WGT1
			,CGO_MEAS1 ,PICKUP_NUMBER ,LFD ,IN_DATE ,OUT_DATE
			,CNTR_GO_DATE ,TEMP_CD ,VENT_CD ,TEMP_VAL ,ORG_PKUP_DT
			,FNL_DEST_ETA_DT ,APNT_DT ,DE_DT ,FREE_DET_DT ,CFS_IN_DT
			,DEVAN_DT ,EMTY_RT_DT ,SEAL_TP1 ,SEAL_TP2 ,VGM_CGO_WGT
			,VGM_CGO_WGT_TP ,VGM_DT ,VGM_TM ,VGM_METHOD ,VGM_CNTR_TP
			,VGM_AM_TRDP_CD ,VGM_AM_TRDP_NM ,VGM_AM_TRDP_PIC ,VGM_SPC_TRDP_CD ,VGM_SPC_TRDP_NM
			,VGM_SPC_TRDP_PIC ,VGM_SEQ ,CNTR_REF_NO ,TRKG_FEE_TXT
		FROM TB_CNTR_LIST
		WHERE cntr_list_seq = #cntr_list_seq#
    </insert>
    
    <select id="selectCntrInfoBySplit" parameterClass="HashMap" resultClass="String">
    	/* BlCmmSQL.xml > "selectCntrInfoBySplit" */
		SELECT CNTR_TPSZ_CD + ' X ' + CONVERT(VARCHAR, COUNT(*)) + ', ' FROM TB_CNTR_LIST
		WHERE INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
		GROUP BY CNTR_TPSZ_CD
		FOR XML PATH(''), ELEMENTS
	</select>

 	<update id="updateCntrInfo" parameterClass="HashMap">
		/* BlCmmSQL.xml > updateCntrInfo */
		UPDATE TB_INTG_BL SET
			  CNTR_INFO = #cntr_info#
		WHERE 1 = 1
		AND  INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
	</update>

	<!-- #2284 CLC request change the "HBL add" button logic -->
	<select id="selectMblDesc" parameterClass="HashMap" resultClass="java.util.HashMap">
		SELECT  ISNULL(DESC_TXT1, '') + ISNULL(DESC_TXT, '') AS DESC_TXT,
		        MK_TXT
		  FROM  TB_INTG_BL BL
		 WHERE  BL.INTG_BL_SEQ = (
				SELECT  RLT.RLT_INTG_BL_SEQ
				  FROM  TB_INTG_BL_RLT RLT
				 WHERE  RLT.INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
				)
	</select>

	<!-- #2107 [PATENT] HB/L의 FCL Shipmode 시 SAY 항목 표시 보완 -->
    <select id="getPartialSayTxt_HblCnt" parameterClass="HashMap" resultClass="String">
		SELECT COUNT(*) 
		FROM TB_CNTR_LIST A 
		WHERE 1 = 1 
		AND A.INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
		AND A.DELT_FLG = 'N'
		AND PRT_CGO_FLG = 'Y'
    </select>

    <select id="getPartialSayTxt_PartCntr" parameterClass="HashMap" resultClass="CntrLstVO">
		SELECT COUNT(*) as cntr_qty, b.CNTR_TPSZ_CD as cntr_tpsz_cd
		FROM TB_CNTR_LIST A 
			JOIN TB_CNTR_TPSZ B 
			ON  A.CNTR_TPSZ_CD = B.CNTR_TPSZ_CD 
			AND B.DELT_FLG = 'N'
		WHERE 1 = 1 
		AND A.INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
		AND A.DELT_FLG = 'N'
		AND PRT_CGO_FLG = 'Y'
		GROUP BY B.CNTR_TPSZ_CD
		ORDER BY B.CNTR_TPSZ_CD
    </select>

	<!-- #2106 [PATENT] B/L History 항목 추가 - Payment Term, SVC Term, Shipper, Consignee -->
    <select id="selectBfrTrdpNm" parameterClass="HashMap" resultClass="String">
		SELECT trdp_nm
		FROM tb_bl_prnr
		WHERE 1 = 1
		AND intg_bl_seq = cast(#intg_bl_seq# as varchar)
		AND bl_trdp_tp_cd = #bl_trdp_tp_cd#
		AND DELT_FLG = 'N'
    </select>

    <insert id="isnertBL_PRNR_hist" parameterClass="HashMap">
        INSERT INTO tb_intg_cng_his_aif(
             intg_cng_his_seq
			,intg_bl_seq
			,bnd_clss_cd
			,ett_nm
			,cng_attr_seq
			,bfr_cng_txt
			,aft_cng_txt
			,rgst_usrid
			,rgst_ofc_cd
			,rgst_tms
			,modi_seq
        ) select 
        	(select isnull(max(intg_cng_his_seq),0)+1 
        	   from tb_intg_cng_his_aif)
        	,#intg_bl_seq#
			,#bnd_clss_cd#
			,'TB_BL_PRNR'
			,(select max(cng_attr_seq) from tb_cng_ppt where phys_ett_nm = 'TB_BL_PRNR' and phys_attr_nm = #phys_attr_nm# and use_flg = 'Y' and delt_flg = 'N')
			,#bfrTrdpNm#
			,#trdp_nm#
			,#proc_usrid#
			,#proc_ofccd#
			,getdate()
			,(select max(isnull(modi_seq, 0)) + 1 from tb_intg_cng_his_aif where intg_bl_seq = cast(#intg_bl_seq# as varchar))
    </insert>
    
    <!-- #1543 [LBS] Container Type/Size Reefer, Ventill 항목 관리 -->
    <select id="selectContainerTPSZFlagsRSQL" parameterClass="HashMap" resultClass="String">
    /* BlCmmSQL.xm > selectContainerTPSZFlagsRSQL */
		SELECT
		(CASE WHEN SUBSTRING(ISO_CNTR_CD,3,1) = 'R' THEN 'Y' ELSE 'N' END  + '|' + VENT_FLG) AS FLAG 
		FROM
			TB_CNTR_TPSZ
		WHERE 
			1 = 1
			AND CNTR_TPSZ_CD = #cntr_tpsz_cd#
			AND RGST_OFC_CD = #rgst_ofc_cd#
    </select>
    <select id="selectTopContainerTPSZFlagsRSQL" parameterClass="HashMap" resultClass="String">
    /* BlCmmSQL.xm > selectTopContainerTPSZFlagsRSQL */
		SELECT TOP 1
		(CASE WHEN SUBSTRING(ISO_CNTR_CD,3,1) = 'R' THEN 'Y' ELSE 'N' END  + '|' + VENT_FLG) AS FLAG 
		FROM
			TB_CNTR_TPSZ
		WHERE 
			1 = 1
			AND CNTR_TPSZ_CD = #cntr_tpsz_cd#
    </select>
	<select id="selectBLPdOrd" parameterClass="HashMap" resultClass="String">
    	 SELECT  CASE WHEN COUNT(*) > 0 THEN 'Y' ELSE 'N' END AS CHKFLG
           FROM  tb_pd_ord wo
          WHERE  1=1
            <isNotEmpty property="intg_bl_seq">
			    AND  wo.INTG_BL_SEQ = cast(#intg_bl_seq# as varchar) 
			</isNotEmpty>
            <isNotEmpty property="oth_seq">
			    AND  wo.OTH_SEQ = #oth_seq# 
			</isNotEmpty>
            AND  wo.delt_flg='N'
    </select>

    <!-- CntCd을 조회함   -->
    <select id="selectPodCntCd" resultClass="HashMap" parameterClass="HashMap">
        SELECT loc.cnt_cd as cnt_cd
              ,
				(
				select top 1 
					   UDF_VAL 
				  from TB_BL_UDF
				where INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
				  and UDF_CD = 'TRI'
				) as udf_val            
          FROM tb_loc loc
         WHERE loc.loc_cd = #loc_cd#
    </select>

    <!-- 중복 체크   -->
    <select id="selectRefBlockNinv" parameterClass="HashMap" resultClass="HashMap">
    	/* BlCmmSQL.xm > selectRefBlockNinv */
		SELECT 
			bl.intg_bl_seq as intg_bl_seq
			,sum(case when ISNULL(BLCK.BL_STS_CD1, BL.BL_STS_CD) = 'HF' or isnull(fr.inv_sts_cd,'') = 'FC'     then 1 else 0 end) as cnt <!-- bl block 혹은 인보이스 생성된경우 -->
		  FROM TB_INTG_BL bl
          JOIN  tb_add_info_bnd bnd 
            ON  bl.INTG_BL_SEQ = bnd.INTG_BL_SEQ AND bnd.delt_flg = 'N'		 
		LEFT OUTER JOIN
		    (
		        SELECT
		            INTG_BL_SEQ AS INTG_BL_SEQ1,
		            BL_STS_CD AS BL_STS_CD1 
		        FROM
		            TB_INTG_BL_BLCK
		    ) BLCK          
		        ON BL.INTG_BL_SEQ = BLCK.INTG_BL_SEQ1    
		left join TB_FRT fr
		on bl.INTG_BL_SEQ = fr.INTG_BL_SEQ     
         WHERE  bl.ref_no = #f_ref_no# 
           AND  bl.delt_flg = 'N'
       <isNotNull property="f_air_sea">
           AND bl.air_sea_clss_cd = #f_air_sea#
       </isNotNull>
       <isNotNull property="f_bnd_clss_cd">
           AND bnd.bnd_clss_cd = #f_bnd_clss_cd#
       </isNotNull>
       <isNotNull property="f_biz_clss_cd">
           AND bl.biz_clss_cd = #f_biz_clss_cd#
       </isNotNull>
       
		GROUP BY BL.INTG_BL_SEQ       
    </select>

	<!-- #3410 [JTC]Ocean Export/Import 수정 사항 -->
	<select id="searchSeeSlsInfo" parameterClass="HBLInfoVO" resultClass="HBLInfoVO">
		/* bl.cmm.searchSeeSlsInfo */
		SELECT B.SLS_USRID
		     , B.SLS_OFC_CD
		  FROM TB_INTG_BL A
		  JOIN TB_ADD_INFO_BND B ON A.INTG_BL_SEQ = B.INTG_BL_SEQ
		 WHERE 1 = 1
		   AND REF_NO      = #ref_no#
		   AND BIZ_CLSS_CD = 'M'
		   AND A.DELT_FLG = 'N'
		   AND B.DELT_FLG = 'N'
		    <!-- #6570 [Binex-Mex] CAN'T GENERATE A HAWB -->
		   AND AIR_SEA_CLSS_CD = 'S'
		   <!--#6754 [GENESIS] MBL의 Filling No. 메뉴얼 입력시 중복 생성 가능 이슈 [ #6570 관련 ]-->
		   AND B.bnd_clss_cd = #bnd_clss_cd#
	</select>

	<!-- #3410 [JTC]Ocean Export/Import 수정 사항 -->
	<select id="searchAirSlsInfo" parameterClass="AirHBLInfoVO" resultClass="AirHBLInfoVO">
		/* bl.cmm.searchAirSlsInfo */
		SELECT B.SLS_USRID
		     , B.SLS_OFC_CD
		  FROM TB_INTG_BL A
		  JOIN TB_ADD_INFO_BND B ON A.INTG_BL_SEQ = B.INTG_BL_SEQ
		 WHERE 1 = 1
		   AND REF_NO      = #ref_no#
		   AND BIZ_CLSS_CD = 'M'
		   <!-- #6570 [Binex-Mex] CAN'T GENERATE A HAWB -->
		   AND A.DELT_FLG = 'N'
		   AND B.DELT_FLG = 'N'
		   AND AIR_SEA_CLSS_CD = 'A'
		   <!--#6754 [GENESIS] MBL의 Filling No. 메뉴얼 입력시 중복 생성 가능 이슈 [ #6570 관련 ]-->
		   AND B.bnd_clss_cd = #bnd_clss_cd#
	</select>
	
    <!-- #3520 Container tab Reefer check -->
    <select id="selectCntrTpCd" parameterClass="java.util.HashMap" resultClass="String">
    <!--BlCmmSQL> selectWO_LIST   -->
        SELECT ISNULL(SUBSTRING(ISO_CNTR_CD, 3,1), 'X') AS CNTR_TP 
          FROM TB_CNTR_TPSZ
         WHERE CNTR_TPSZ_CD = #f_cntr_tpsz#
    </select>

    <!-- #3677 [JAPT] House B/L 생성 시 Master B/L 의 Customer 정보를 HBL 의 Customer 정보로 sync. -->
    <select id="searchSeeBlCustomerInfo" parameterClass="HashMap" resultClass="HBLInfoVO">
        /* bl.cmm.searchSeeBlCustomerInfo */
        SELECT A.ACT_SHPR_TRDP_CD
             , A.ACT_SHPR_TRDP_NM
             , A.SHPR_TRDP_CD
             , A.SHPR_TRDP_NM
             , (SELECT LGL_ADDR FROM TB_TRDP WHERE TRDP_CD = A.SHPR_TRDP_CD) AS SHPR_TRDP_ADDR
             , A.CNEE_TRDP_CD
             , A.CNEE_TRDP_NM
             , (SELECT LGL_ADDR FROM TB_TRDP WHERE TRDP_CD = A.CNEE_TRDP_CD) AS CNEE_TRDP_ADDR
             , A.NTFY_TRDP_CD
             , A.NTFY_TRDP_NM
             , (SELECT LGL_ADDR FROM TB_TRDP WHERE TRDP_CD = A.NTFY_TRDP_CD) AS NTFY_TRDP_ADDR
          FROM (
                SELECT MAX(CASE WHEN B.BL_TRDP_TP_CD = 'S02' THEN B.TRDP_CD ELSE '' END) AS ACT_SHPR_TRDP_CD
                     , MAX(CASE WHEN B.BL_TRDP_TP_CD = 'S02' THEN B.TRDP_NM ELSE '' END) AS ACT_SHPR_TRDP_NM
                     , MAX(CASE WHEN B.BL_TRDP_TP_CD = 'S01' THEN B.TRDP_CD ELSE '' END) AS SHPR_TRDP_CD
                     , MAX(CASE WHEN B.BL_TRDP_TP_CD = 'S01' THEN B.TRDP_NM ELSE '' END) AS SHPR_TRDP_NM
                     , MAX(CASE WHEN B.BL_TRDP_TP_CD = 'C01' THEN B.TRDP_CD ELSE '' END) AS CNEE_TRDP_CD
                     , MAX(CASE WHEN B.BL_TRDP_TP_CD = 'C01' THEN B.TRDP_NM ELSE '' END) AS CNEE_TRDP_NM
                     , MAX(CASE WHEN B.BL_TRDP_TP_CD = 'N01' THEN B.TRDP_CD ELSE '' END) AS NTFY_TRDP_CD
                     , MAX(CASE WHEN B.BL_TRDP_TP_CD = 'N01' THEN B.TRDP_NM ELSE '' END) AS NTFY_TRDP_NM
                  FROM TB_INTG_BL A
                  JOIN TB_BL_PRNR B ON A.INTG_BL_SEQ = B.INTG_BL_SEQ
                 WHERE 1 = 1
                   AND REF_NO      = #f_mbl_ref_no#
                   AND BIZ_CLSS_CD = 'M'
                   AND A.DELT_FLG = 'N'
               ) A
    </select>
    
	<!--#3171 [CLT] OEH BL - Mark탭의 Carrier 정보 연계 -->
    <select id="searchMBLOfcOption" parameterClass="String" resultClass="HBLInfoVO">
        /* bl.cmm.searchMBLOfcOption */
				select VSL_SHOW_FLG , LOAD_PORT_SHOW_FLG
				from tb_ofc 
				where  ofc_cd = (
					SELECT REF_OFC_CD
					FROM TB_INTG_BL A JOIN TB_ADD_INFO_BND B ON A.INTG_BL_SEQ = B.INTG_BL_SEQ
					WHERE 1=1
					AND A.REF_NO =#M_REF_NO#
					AND A.BIZ_CLSS_CD='M'
					AND A.DELT_FLG = 'N'
					AND A.air_sea_clss_cd = 'S'
					AND B.DELT_FLG = 'N'
           			AND B.bnd_clss_cd = 'O'
				)
    </select>
    
    <!-- #4139 MBL to HBL 315 EDI -->
    <select id="searchCntrEventData" parameterClass="HashMap" resultClass="CntrLstVO">
	    /* bl.cmm.searchCntrEventData */
		SELECT
		     MTY_EQ_DT
			,GI_DT	
			,LODD_VSL_DT	
			,ATD_DT	
			,ATA_DT	
			,ARR_DT	
			,UNLD_VSL_DT	
			,CARR_RLSE_DT	
			,CSTMS_RLSD_DT	
			,FT_EXP_DT	
			,GO_DT	
			,ESTM_DE_DT	
			,FNL_DE_DT	
			,RTN_CNTR_DT
		FROM TB_CNTR_LIST
		WHERE 1=1
		AND INTG_BL_SEQ   = #rlt_intg_bl_seq#
		AND CNTR_NO = #cntr_no#
		AND DELT_FLG = 'N'
	</select>
	
    <update id="updateHblCntrEventData" parameterClass="CntrLstVO">
        /* bl.cmm.updateHblCntrEventData */
        UPDATE  TB_CNTR_LIST
        SET  	    
         MTY_EQ_DT    = #mty_eq_dt#
		,GI_DT	      = #gi_dt#
		,LODD_VSL_DT  = #lodd_vsl_dt#	
		,ATD_DT	      = #atd_dt#
		,ATA_DT	      = #ata_dt#
		,ARR_DT	      = #arr_dt#
		,UNLD_VSL_DT  = #unld_vsl_dt#	
		,CARR_RLSE_DT = #carr_rlse_dt#
		,CSTMS_RLSD_DT= #cstms_rlsd_dt#
		,FT_EXP_DT	  = #ft_exp_dt#
		,GO_DT	      = #go_dt#
		,ESTM_DE_DT	  = #estm_de_dt#
		,FNL_DE_DT	  = #fnl_de_dt#
		,RTN_CNTR_DT  = #rtn_cntr_dt#
         WHERE  INTG_BL_SEQ   = cast(#intg_bl_seq# as varchar)
           AND  CNTR_LIST_SEQ = #cntr_list_seq#
           AND  DELT_FLG = 'N'
    </update>
    
    <!-- #3583 [Great Luck, CLA] CLM trigger to enable Trade Partner Entry CLM flag -->
    <update id="updateClmFlg" parameterClass="HashMap">
    	/* bl.cmm.updateClmFlg */
	    UPDATE TB_TRDP
		SET CLM_FLG = 'Y'
		WHERE TRDP_CD = #cnee_trdp_cd#
	</update>
	
	<!-- #5413 [BINEX] IT NO. DUPLICATE VALIDATION -->
    <select id="selectItNoDuplCheck" parameterClass="HashMap" resultClass="Integer">
      SELECT COUNT(it_no)
      FROM  tb_intg_bl bl 
      JOIN  tb_add_info_bnd bnd 
      ON  bl.intg_bl_seq = bnd.intg_bl_seq AND bnd.delt_flg = 'N'
      WHERE 1 = 1 
      AND it_no like #f_it_no# 
      AND  bl.intg_bl_seq !=  #f_intg_bl_seq#
       AND bl.delt_flg = 'N'        
       <isEqual property="f_biz_clss_cd" compareValue="H">
			<isNotNull property="f_rlt_intg_bl_seq">
	           AND it_no NOT IN (SELECT it_no FROM tb_intg_bl WHERE  intg_bl_seq =  #f_rlt_intg_bl_seq# )
	       </isNotNull>
		</isEqual>
		<isEqual property="f_biz_clss_cd" compareValue="M">
			 AND bl.intg_bl_seq  NOT IN (SELECT intg_bl_seq FROM tb_intg_bl_rlt WHERE  rlt_intg_bl_seq =  #f_intg_bl_seq# AND intg_bl_rlt_cd = 'HTM')
		</isEqual>
       AND air_sea_clss_cd = #f_air_sea#
       AND bnd.bnd_clss_cd = #f_bnd_clss_cd#
     </select>
     
<!--      #6518 [Binex-LA] BKG Status not back to 'Confirmed', When BL has cancelled -->
     <update id="updateBKG_STATUS2" parameterClass="HashMap">
    	/* BlCmmSQL.xml > updateBKG_STATUS */
        UPDATE TB_BKG
		   SET BKG_STS_CD 		= 'CF'
		      ,MODI_USRID 		= #proc_usrid#
		      ,MODI_OFC_CD 		= #proc_ofccd#
		      ,MODI_TMS 		= getdate()
		 WHERE BKG_SEQ 			= (SELECT BND.INTG_BKG_SEQ 
        						   FROM TB_ADD_INFO_BND BND								  
								   WHERE BND.INTG_BL_SEQ = cast(#intg_bl_seq# as varchar) 
	  							     AND (SELECT COUNT(*)
		   						          FROM TB_ADD_INFO_BND BND2 
		  						          WHERE BND2.INTG_BKG_SEQ = BND.INTG_BKG_SEQ
		         			  	          AND BND2.DELT_FLG = 'N') = 0) 
    </update> 
    
     <!--Get EDI315 data   -->
    <select id="selectTB_EDI_315" parameterClass="HashMap" resultClass="com.clt.apps.fis.sec.bmd.linerinfo.dto.TbEdi315VO">
		/* bl.cmm.selectTB_EDI_315 */
		SELECT EDI_SEQ,CNTR_NO, EVENT_STATUS,EVENT_DATE			
		FROM TB_EDI_315 B											                       
		WHERE RGST_TMS BETWEEN GETDATE()-60 AND GETDATE()                                                    							
		AND EVENT_STATUS IN ('EE','I','AE','VD','VA','A','UV','CR','CT','FT','OA','AG','D','RD')
		AND (SELECT COUNT(*) FROM TB_CNTR_LIST A WHERE A.CNTR_NO = B.CNTR_NO AND A.DELT_FLG='N' AND A.RGST_TMS BETWEEN GETDATE()-90 AND GETDATE()) > 0 
		AND SUBSTRING(B.POD_LOC_CD, 1, 2) IN (SELECT CNT_CD FROM TB_OFC WHERE DELT_FLG = 'N' AND ISNULL(CNT_CD, '') != '' AND USE_FLG = 'Y') <!-- This logic for Import: country of POD = country of office code -->
		AND MBL_NO = #mbl_no#
		ORDER BY EDI_SEQ 
    </select>  
    
    <!--Update BL Date   -->
     <update id="updateBLDate" parameterClass="com.clt.apps.fis.sec.bmd.linerinfo.dto.TbEdi315VO">
    	/* bl.cmm.updateBLDate */
	   UPDATE tb_add_info_bnd
	   SET 
	   <isEqual property="event_status" compareValue="VD">
			act_etd_dt_tm = #event_date#
	   </isEqual>
	   <isEqual property="event_status" compareValue="VA">
			act_eta_dt_tm = #event_date#
	   </isEqual>  
	   WHERE INTG_BL_SEQ IN (SELECT INTG_BL_SEQ FROM TB_CNTR_LIST WHERE CNTR_NO = #cntr_no# AND DELT_FLG='N' AND RGST_TMS BETWEEN GETDATE()-90 AND GETDATE())          
	</update>
	
	<!--Update BL EXTN_MSG Date   -->
     <update id="updateBLExtnMsgDate" parameterClass="com.clt.apps.fis.sec.bmd.linerinfo.dto.TbEdi315VO">
    	/* bl.cmm.updateBLExtnMsgDate */
		UPDATE TB_BL_EXTN_MSG
		SET
			ACT_ETA_FDEST_TM = #event_date#
		WHERE INTG_BL_SEQ IN (SELECT INTG_BL_SEQ FROM TB_CNTR_LIST WHERE CNTR_NO = #cntr_no# AND DELT_FLG='N' AND RGST_TMS BETWEEN GETDATE()-90 AND GETDATE())
	</update>
	
	<!--Update BL Container status   -->
     <update id="updateBLCntrStatus" parameterClass="com.clt.apps.fis.sec.bmd.linerinfo.dto.TbEdi315VO">
    	/* bl.cmm.updateBLCntrStatus */
		UPDATE TB_CNTR_LIST
		SET
			<isEqual property="event_status" compareValue="EE">
				MTY_EQ_DT = #event_date#
			</isEqual>
			<isEqual property="event_status" compareValue="I">
				GI_DT = #event_date#
			</isEqual>
			<isEqual property="event_status" compareValue="AE">
				LODD_VSL_DT = #event_date#
			</isEqual>
			<isEqual property="event_status" compareValue="VD">
				ATD_DT = #event_date#
			</isEqual>
			<isEqual property="event_status" compareValue="VA">
				ATA_DT = #event_date#
			</isEqual>
			<isEqual property="event_status" compareValue="A">
				ARR_DT = #event_date#
			</isEqual>
			<isEqual property="event_status" compareValue="UV">
				UNLD_VSL_DT = #event_date#
			</isEqual>
			<isEqual property="event_status" compareValue="CR">
				CARR_RLSE_DT = #event_date#
			</isEqual>
			<isEqual property="event_status" compareValue="CT">
				CSTMS_RLSD_DT = #event_date#
			</isEqual>
			<isEqual property="event_status" compareValue="FT">
				FT_EXP_DT = #event_date#
			</isEqual>
			<isEqual property="event_status" compareValue="OA">
				GO_DT = #event_date#
			</isEqual>
			<isEqual property="event_status" compareValue="AG">
				ESTM_DE_DT = #event_date#
			</isEqual>
			<isEqual property="event_status" compareValue="D">
				FNL_DE_DT = #event_date#
			</isEqual>
			<isEqual property="event_status" compareValue="RD">
				RTN_CNTR_DT = #event_date#
			</isEqual>
		WHERE 	DELT_FLG='N'  
				AND RGST_TMS BETWEEN GETDATE()-90 AND GETDATE()
				AND CNTR_NO=#cntr_no#				
	</update>
	

<!--[OFVFOUR-7877] [KING FREIGHT NYC] ADD CNTR # IN SUBJECT LINE WHEN SENDING D/O
	Modified by Thinh Nguyen   -->
	<select id="selectMAX_CNTR_NO" parameterClass="HashMap" resultClass="String">
		SELECT
			MAX(CNTR_NO)
		FROM
			TB_CNTR_LIST
		WHERE
			INTG_BL_SEQ = #intg_bl_seq#
			AND DELT_FLG = 'N'
    </select>
    <!-- OFVFOUR-7857: [SENKO USA] Container Summary on Pickup & Delivery Order form -->
    <update id="updateCntrInfoWO" parameterClass="HashMap">
		/* BlCmmSQL.xml > updateCntrInfoWO */
		UPDATE tb_pd_ord SET
			  CNTR_INFO = #cntr_info#
		WHERE 1 = 1
		AND  INTG_BL_SEQ = cast(#intg_bl_seq# as varchar)
		AND  (SELECT ISNULL(max([CNTR_NO]),'') FROM TB_WO_CNTR_LIST WHERE INTG_BL_SEQ = #intg_bl_seq#) = ''
	</update>
	
	<!-- OFVFOUR-7956: [BINEX] API DEVELOPMENT IN V4 -->
	<insert id="insertPOEvent" parameterClass="HashMap">
		/* BlCmmSQL.xml > insertPOEvent */
        INSERT INTO
			        TB_PO_MODI_EVENT
			        (
			                event_no   ,
			                intg_bl_seq,
			                sts        ,
			                tp         ,
			                rgst_tms
			        )
			SELECT
			        dbo.FC_GET_PO_EVENT_SEQ(0),
			        #intg_bl_seq#             ,
			        #sts#                     ,
			        #tp#                      ,
			        GETUTCDATE()
			
			UNION ALL
			
			SELECT
			        dbo.FC_GET_PO_EVENT_SEQ(ROW_NUMBER() OVER (ORDER BY RLT.RGST_TMS DESC)),
			        RLT.INTG_BL_SEQ           ,
			        #sts#                     ,
			        #tp#                      ,
			        GETUTCDATE()
			FROM
			        TB_INTG_BL_RLT RLT WITH(NOLOCK)
			WHERE
			        RLT.RLT_INTG_BL_SEQ = #intg_bl_seq#
    </insert>
   
    <insert id="insertPOEventOth" parameterClass="HashMap">
    	/* BlCmmSQL.xml > insertPOEventOth */
    	INSERT INTO TB_PO_MODI_EVENT (EVENT_NO, INTG_BL_SEQ, STS, TP, RGST_TMS)
     	SELECT dbo.FC_GET_PO_EVENT_SEQ(ROW_NUMBER() OVER (ORDER BY BL.INTG_BL_SEQ DESC)) AS PO_SND_HIS_SEQ, BL.INTG_BL_SEQ, 'N' AS STS, 'M' AS TP, GETUTCDATE() AS RGST_TMS
		FROM TB_INTG_BL BL
		WHERE EXISTS (SELECT 1 FROM FN_SPLIT(REPLACE(REPLACE(BL.PO_NO,CHAR(13),''),CHAR(10),','),',') WHERE VALUE LIKE #cust_po_no#)
		AND MODI_TMS BETWEEN GETUTCDATE()-90 AND GETUTCDATE()
		AND BL.DELT_FLG = 'N'
    </insert>
</sqlMap>